
stm32_electronic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800d058  0800d058  0001d058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d72c  0800d72c  00021098  2**0
                  CONTENTS
  4 .ARM          00000008  0800d72c  0800d72c  0001d72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d734  0800d734  00021098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d734  0800d734  0001d734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d73c  0800d73c  0001d73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001098  20000000  0800d740  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20001098  0800e7d8  00021098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015ec  0800e7d8  000215ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00021098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba22  00000000  00000000  000210c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004051  00000000  00000000  0003cae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00040b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  000421a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bac0  00000000  00000000  00043688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195f8  00000000  00000000  0005f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000921a5  00000000  00000000  00078740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a8e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007170  00000000  00000000  0010a938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20001098 	.word	0x20001098
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d040 	.word	0x0800d040

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000109c 	.word	0x2000109c
 800014c:	0800d040 	.word	0x0800d040

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96e 	b.w	8000d90 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	468e      	mov	lr, r1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f040 8083 	bne.w	8000be4 <__udivmoddi4+0x118>
 8000ade:	428a      	cmp	r2, r1
 8000ae0:	4617      	mov	r7, r2
 8000ae2:	d947      	bls.n	8000b74 <__udivmoddi4+0xa8>
 8000ae4:	fab2 f382 	clz	r3, r2
 8000ae8:	b14b      	cbz	r3, 8000afe <__udivmoddi4+0x32>
 8000aea:	f1c3 0120 	rsb	r1, r3, #32
 8000aee:	fa05 fe03 	lsl.w	lr, r5, r3
 8000af2:	fa20 f101 	lsr.w	r1, r0, r1
 8000af6:	409f      	lsls	r7, r3
 8000af8:	ea41 0e0e 	orr.w	lr, r1, lr
 8000afc:	409c      	lsls	r4, r3
 8000afe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b02:	fbbe fcf8 	udiv	ip, lr, r8
 8000b06:	fa1f f987 	uxth.w	r9, r7
 8000b0a:	fb08 e21c 	mls	r2, r8, ip, lr
 8000b0e:	fb0c f009 	mul.w	r0, ip, r9
 8000b12:	0c21      	lsrs	r1, r4, #16
 8000b14:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000b18:	4290      	cmp	r0, r2
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x66>
 8000b1c:	18ba      	adds	r2, r7, r2
 8000b1e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000b22:	f080 8118 	bcs.w	8000d56 <__udivmoddi4+0x28a>
 8000b26:	4290      	cmp	r0, r2
 8000b28:	f240 8115 	bls.w	8000d56 <__udivmoddi4+0x28a>
 8000b2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b30:	443a      	add	r2, r7
 8000b32:	1a12      	subs	r2, r2, r0
 8000b34:	fbb2 f0f8 	udiv	r0, r2, r8
 8000b38:	fb08 2210 	mls	r2, r8, r0, r2
 8000b3c:	fb00 f109 	mul.w	r1, r0, r9
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b46:	42a1      	cmp	r1, r4
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b4a:	193c      	adds	r4, r7, r4
 8000b4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b50:	f080 8103 	bcs.w	8000d5a <__udivmoddi4+0x28e>
 8000b54:	42a1      	cmp	r1, r4
 8000b56:	f240 8100 	bls.w	8000d5a <__udivmoddi4+0x28e>
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	1a64      	subs	r4, r4, r1
 8000b60:	2100      	movs	r1, #0
 8000b62:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b66:	b11e      	cbz	r6, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	2200      	movs	r2, #0
 8000b6a:	40dc      	lsrs	r4, r3
 8000b6c:	e9c6 4200 	strd	r4, r2, [r6]
 8000b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xac>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f382 	clz	r3, r2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14f      	bne.n	8000c20 <__udivmoddi4+0x154>
 8000b80:	1a8d      	subs	r5, r1, r2
 8000b82:	2101      	movs	r1, #1
 8000b84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000b88:	fa1f f882 	uxth.w	r8, r2
 8000b8c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000b90:	fb0e 551c 	mls	r5, lr, ip, r5
 8000b94:	fb08 f00c 	mul.w	r0, r8, ip
 8000b98:	0c22      	lsrs	r2, r4, #16
 8000b9a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000b9e:	42a8      	cmp	r0, r5
 8000ba0:	d907      	bls.n	8000bb2 <__udivmoddi4+0xe6>
 8000ba2:	197d      	adds	r5, r7, r5
 8000ba4:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000ba8:	d202      	bcs.n	8000bb0 <__udivmoddi4+0xe4>
 8000baa:	42a8      	cmp	r0, r5
 8000bac:	f200 80e9 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	1a2d      	subs	r5, r5, r0
 8000bb4:	fbb5 f0fe 	udiv	r0, r5, lr
 8000bb8:	fb0e 5510 	mls	r5, lr, r0, r5
 8000bbc:	fb08 f800 	mul.w	r8, r8, r0
 8000bc0:	b2a4      	uxth	r4, r4
 8000bc2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc6:	45a0      	cmp	r8, r4
 8000bc8:	d907      	bls.n	8000bda <__udivmoddi4+0x10e>
 8000bca:	193c      	adds	r4, r7, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x10c>
 8000bd2:	45a0      	cmp	r8, r4
 8000bd4:	f200 80d9 	bhi.w	8000d8a <__udivmoddi4+0x2be>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 0408 	sub.w	r4, r4, r8
 8000bde:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be2:	e7c0      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x12e>
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	f000 80b1 	beq.w	8000d50 <__udivmoddi4+0x284>
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f183 	clz	r1, r3
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d14b      	bne.n	8000c9a <__udivmoddi4+0x1ce>
 8000c02:	42ab      	cmp	r3, r5
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0x140>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80b9 	bhi.w	8000d7e <__udivmoddi4+0x2b2>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	469e      	mov	lr, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0aa      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000c1a:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c1e:	e7a7      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000c20:	409f      	lsls	r7, r3
 8000c22:	f1c3 0220 	rsb	r2, r3, #32
 8000c26:	40d1      	lsrs	r1, r2
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c30:	fa1f f887 	uxth.w	r8, r7
 8000c34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c38:	fa24 f202 	lsr.w	r2, r4, r2
 8000c3c:	409d      	lsls	r5, r3
 8000c3e:	fb00 fc08 	mul.w	ip, r0, r8
 8000c42:	432a      	orrs	r2, r5
 8000c44:	0c15      	lsrs	r5, r2, #16
 8000c46:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000c4a:	45ac      	cmp	ip, r5
 8000c4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x19a>
 8000c52:	197d      	adds	r5, r7, r5
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c58:	f080 808f 	bcs.w	8000d7a <__udivmoddi4+0x2ae>
 8000c5c:	45ac      	cmp	ip, r5
 8000c5e:	f240 808c 	bls.w	8000d7a <__udivmoddi4+0x2ae>
 8000c62:	3802      	subs	r0, #2
 8000c64:	443d      	add	r5, r7
 8000c66:	eba5 050c 	sub.w	r5, r5, ip
 8000c6a:	fbb5 f1fe 	udiv	r1, r5, lr
 8000c6e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000c72:	fb01 f908 	mul.w	r9, r1, r8
 8000c76:	b295      	uxth	r5, r2
 8000c78:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c7c:	45a9      	cmp	r9, r5
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x1c4>
 8000c80:	197d      	adds	r5, r7, r5
 8000c82:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c86:	d274      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000c88:	45a9      	cmp	r9, r5
 8000c8a:	d972      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000c8c:	3902      	subs	r1, #2
 8000c8e:	443d      	add	r5, r7
 8000c90:	eba5 0509 	sub.w	r5, r5, r9
 8000c94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c98:	e778      	b.n	8000b8c <__udivmoddi4+0xc0>
 8000c9a:	f1c1 0720 	rsb	r7, r1, #32
 8000c9e:	408b      	lsls	r3, r1
 8000ca0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca8:	fa25 f407 	lsr.w	r4, r5, r7
 8000cac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cb0:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb4:	fa1f f88c 	uxth.w	r8, ip
 8000cb8:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cbc:	fa20 f307 	lsr.w	r3, r0, r7
 8000cc0:	fb09 fa08 	mul.w	sl, r9, r8
 8000cc4:	408d      	lsls	r5, r1
 8000cc6:	431d      	orrs	r5, r3
 8000cc8:	0c2b      	lsrs	r3, r5, #16
 8000cca:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cce:	45a2      	cmp	sl, r4
 8000cd0:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd4:	fa00 f301 	lsl.w	r3, r0, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x222>
 8000cda:	eb1c 0404 	adds.w	r4, ip, r4
 8000cde:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce2:	d248      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000ce4:	45a2      	cmp	sl, r4
 8000ce6:	d946      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ce8:	f1a9 0902 	sub.w	r9, r9, #2
 8000cec:	4464      	add	r4, ip
 8000cee:	eba4 040a 	sub.w	r4, r4, sl
 8000cf2:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cf6:	fb0e 4410 	mls	r4, lr, r0, r4
 8000cfa:	fb00 fa08 	mul.w	sl, r0, r8
 8000cfe:	b2ad      	uxth	r5, r5
 8000d00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x24e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d10:	d22d      	bcs.n	8000d6e <__udivmoddi4+0x2a2>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d92b      	bls.n	8000d6e <__udivmoddi4+0x2a2>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4464      	add	r4, ip
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c6      	mov	lr, r8
 8000d2a:	464d      	mov	r5, r9
 8000d2c:	d319      	bcc.n	8000d62 <__udivmoddi4+0x296>
 8000d2e:	d016      	beq.n	8000d5e <__udivmoddi4+0x292>
 8000d30:	b15e      	cbz	r6, 8000d4a <__udivmoddi4+0x27e>
 8000d32:	ebb3 020e 	subs.w	r2, r3, lr
 8000d36:	eb64 0405 	sbc.w	r4, r4, r5
 8000d3a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d42:	431f      	orrs	r7, r3
 8000d44:	40cc      	lsrs	r4, r1
 8000d46:	e9c6 7400 	strd	r7, r4, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d50:	4631      	mov	r1, r6
 8000d52:	4630      	mov	r0, r6
 8000d54:	e70c      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d56:	468c      	mov	ip, r1
 8000d58:	e6eb      	b.n	8000b32 <__udivmoddi4+0x66>
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	e6ff      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d5e:	4543      	cmp	r3, r8
 8000d60:	d2e6      	bcs.n	8000d30 <__udivmoddi4+0x264>
 8000d62:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d66:	eb69 050c 	sbc.w	r5, r9, ip
 8000d6a:	3801      	subs	r0, #1
 8000d6c:	e7e0      	b.n	8000d30 <__udivmoddi4+0x264>
 8000d6e:	4628      	mov	r0, r5
 8000d70:	e7d3      	b.n	8000d1a <__udivmoddi4+0x24e>
 8000d72:	4611      	mov	r1, r2
 8000d74:	e78c      	b.n	8000c90 <__udivmoddi4+0x1c4>
 8000d76:	4681      	mov	r9, r0
 8000d78:	e7b9      	b.n	8000cee <__udivmoddi4+0x222>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e773      	b.n	8000c66 <__udivmoddi4+0x19a>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e749      	b.n	8000c16 <__udivmoddi4+0x14a>
 8000d82:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d86:	443d      	add	r5, r7
 8000d88:	e713      	b.n	8000bb2 <__udivmoddi4+0xe6>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	e724      	b.n	8000bda <__udivmoddi4+0x10e>

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f000 fcb0 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f820 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 f992 	bl	80010c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000da4:	f000 f85c 	bl	8000e60 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000da8:	f000 f888 	bl	8000ebc <MX_SPI1_Init>
  MX_TIM3_Init();
 8000dac:	f000 f8bc 	bl	8000f28 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000db0:	f000 f92e 	bl	8001010 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000db4:	f000 f956 	bl	8001064 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Start\n\r");
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <main+0x44>)
 8000dba:	f007 fafb 	bl	80083b4 <printf>
  setvbuf(stdin,NULL,_IONBF,0);
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <main+0x48>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6858      	ldr	r0, [r3, #4]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f007 fb5b 	bl	8008484 <setvbuf>
  ILI9341_LCD_input_data_init();
 8000dce:	f004 fe93 	bl	8005af8 <ILI9341_LCD_input_data_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ILI9341_LCD_input_data_update();
 8000dd2:	f005 ffd9 	bl	8006d88 <ILI9341_LCD_input_data_update>
 8000dd6:	e7fc      	b.n	8000dd2 <main+0x3e>
 8000dd8:	0800d058 	.word	0x0800d058
 8000ddc:	200006ec 	.word	0x200006ec

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b090      	sub	sp, #64	; 0x40
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0318 	add.w	r3, r7, #24
 8000dea:	2228      	movs	r2, #40	; 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f007 fad8 	bl	80083a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000e16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 ffd3 	bl	8002dcc <HAL_RCC_OscConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e2c:	f000 f9ae 	bl	800118c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	230f      	movs	r3, #15
 8000e32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e34:	2302      	movs	r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 fa3f 	bl	80032cc <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e54:	f000 f99a 	bl	800118c <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3740      	adds	r7, #64	; 0x40
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <MX_I2C1_Init+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x58>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_I2C1_Init+0x50>)
 8000e9e:	f000 ffc7 	bl	8001e30 <HAL_I2C_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea8:	f000 f970 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20001158 	.word	0x20001158
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	000186a0 	.word	0x000186a0

08000ebc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000ec2:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000f08:	220a      	movs	r2, #10
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_SPI1_Init+0x64>)
 8000f0e:	f002 fb77 	bl	8003600 <HAL_SPI_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f18:	f000 f938 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200011f4 	.word	0x200011f4
 8000f24:	40013000 	.word	0x40013000

08000f28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000f5a:	4a2c      	ldr	r2, [pc, #176]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000f6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000f80:	f002 fdb2 	bl	8003ae8 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f8a:	f000 f8ff 	bl	800118c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000f9c:	f002 ffac 	bl	8003ef8 <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fa6:	f000 f8f1 	bl	800118c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000fac:	f002 fdeb 	bl	8003b86 <HAL_TIM_OC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fb6:	f000 f8e9 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000fba:	2310      	movs	r3, #16
 8000fbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000fca:	f003 fafd 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fd4:	f000 f8da 	bl	800118c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_TIM3_Init+0xe0>)
 8000ff0:	f002 ff2a 	bl	8003e48 <HAL_TIM_OC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ffa:	f000 f8c7 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	; 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200011ac 	.word	0x200011ac
 800100c:	40000400 	.word	0x40000400

08001010 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_USART2_UART_Init+0x50>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART2_UART_Init+0x4c>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART2_UART_Init+0x4c>)
 8001048:	f003 fb2e 	bl	80046a8 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001052:	f000 f89b 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000124c 	.word	0x2000124c
 8001060:	40004400 	.word	0x40004400

08001064 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MX_USART3_UART_Init+0x60>)
 800106c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109a:	4809      	ldr	r0, [pc, #36]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 800109c:	f003 fb04 	bl	80046a8 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010a6:	f000 f871 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <MX_USART3_UART_Init+0x5c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 0220 	orr.w	r2, r2, #32
 80010b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20001118 	.word	0x20001118
 80010c4:	40004800 	.word	0x40004800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <MX_GPIO_Init+0xb4>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <MX_GPIO_Init+0xb4>)
 80010e2:	f043 0310 	orr.w	r3, r3, #16
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <MX_GPIO_Init+0xb4>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_GPIO_Init+0xb4>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <MX_GPIO_Init+0xb4>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_GPIO_Init+0xb4>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_GPIO_Init+0xb4>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a1a      	ldr	r2, [pc, #104]	; (800117c <MX_GPIO_Init+0xb4>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_GPIO_Init+0xb4>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7140 	mov.w	r1, #768	; 0x300
 800112a:	4815      	ldr	r0, [pc, #84]	; (8001180 <MX_GPIO_Init+0xb8>)
 800112c:	f000 fe50 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Change_display_Pin receive_time_again_Pin */
  GPIO_InitStruct.Pin = Change_display_Pin|receive_time_again_Pin;
 8001130:	2303      	movs	r3, #3
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_GPIO_Init+0xbc>)
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <MX_GPIO_Init+0xc0>)
 8001144:	f000 fcc0 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin SPI_DC_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SPI_DC_Pin;
 8001148:	f44f 7340 	mov.w	r3, #768	; 0x300
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <MX_GPIO_Init+0xb8>)
 8001162:	f000 fcb1 	bl	8001ac8 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001166:	2006      	movs	r0, #6
 8001168:	f000 fc1d 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800116c:	2007      	movs	r0, #7
 800116e:	f000 fc1a 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800
 8001184:	10210000 	.word	0x10210000
 8001188:	40011000 	.word	0x40011000

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x8>
	...

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_MspInit+0x5c>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_MspInit+0x5c>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_MspInit+0x5c>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_MspInit+0x5c>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_MspInit+0x5c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_MspInit+0x5c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_MspInit+0x60>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_MspInit+0x60>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000

080011fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_I2C_MspInit+0x70>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d123      	bne.n	8001264 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_I2C_MspInit+0x74>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_I2C_MspInit+0x74>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_I2C_MspInit+0x74>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001234:	23c0      	movs	r3, #192	; 0xc0
 8001236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001238:	2312      	movs	r3, #18
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <HAL_I2C_MspInit+0x78>)
 8001248:	f000 fc3e 	bl	8001ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_I2C_MspInit+0x74>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_I2C_MspInit+0x74>)
 8001252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001256:	61d3      	str	r3, [r2, #28]
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_I2C_MspInit+0x74>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40005400 	.word	0x40005400
 8001270:	40021000 	.word	0x40021000
 8001274:	40010c00 	.word	0x40010c00

08001278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_SPI_MspInit+0x88>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d12f      	bne.n	80012f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_SPI_MspInit+0x8c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_SPI_MspInit+0x8c>)
 800129e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_SPI_MspInit+0x8c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_SPI_MspInit+0x8c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_SPI_MspInit+0x8c>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_SPI_MspInit+0x8c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012c8:	23a0      	movs	r3, #160	; 0xa0
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <HAL_SPI_MspInit+0x90>)
 80012dc:	f000 fbf4 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e0:	2340      	movs	r3, #64	; 0x40
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_SPI_MspInit+0x90>)
 80012f4:	f000 fbe8 	bl	8001ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40013000 	.word	0x40013000
 8001304:	40021000 	.word	0x40021000
 8001308:	40010800 	.word	0x40010800

0800130c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_TIM_Base_MspInit+0x44>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d113      	bne.n	8001346 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_TIM_Base_MspInit+0x48>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_TIM_Base_MspInit+0x48>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_TIM_Base_MspInit+0x48>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	201d      	movs	r0, #29
 800133c:	f000 fb17 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001340:	201d      	movs	r0, #29
 8001342:	f000 fb30 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40000400 	.word	0x40000400
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a3b      	ldr	r2, [pc, #236]	; (8001460 <HAL_UART_MspInit+0x108>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d130      	bne.n	80013da <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <HAL_UART_MspInit+0x10c>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	4a39      	ldr	r2, [pc, #228]	; (8001464 <HAL_UART_MspInit+0x10c>)
 800137e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001382:	61d3      	str	r3, [r2, #28]
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <HAL_UART_MspInit+0x10c>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_UART_MspInit+0x10c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <HAL_UART_MspInit+0x10c>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_UART_MspInit+0x10c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a8:	2304      	movs	r3, #4
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4619      	mov	r1, r3
 80013ba:	482b      	ldr	r0, [pc, #172]	; (8001468 <HAL_UART_MspInit+0x110>)
 80013bc:	f000 fb84 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c0:	2308      	movs	r3, #8
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4825      	ldr	r0, [pc, #148]	; (8001468 <HAL_UART_MspInit+0x110>)
 80013d4:	f000 fb78 	bl	8001ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013d8:	e03e      	b.n	8001458 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_UART_MspInit+0x114>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d139      	bne.n	8001458 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_UART_MspInit+0x10c>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <HAL_UART_MspInit+0x10c>)
 80013ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ee:	61d3      	str	r3, [r2, #28]
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_UART_MspInit+0x10c>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_UART_MspInit+0x10c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_UART_MspInit+0x10c>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_UART_MspInit+0x10c>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4619      	mov	r1, r3
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <HAL_UART_MspInit+0x118>)
 800142a:	f000 fb4d 	bl	8001ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800142e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	4619      	mov	r1, r3
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <HAL_UART_MspInit+0x118>)
 8001444:	f000 fb40 	bl	8001ac8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2027      	movs	r0, #39	; 0x27
 800144e:	f000 fa8e 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001452:	2027      	movs	r0, #39	; 0x27
 8001454:	f000 faa7 	bl	80019a6 <HAL_NVIC_EnableIRQ>
}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40004400 	.word	0x40004400
 8001464:	40021000 	.word	0x40021000
 8001468:	40010800 	.word	0x40010800
 800146c:	40004800 	.word	0x40004800
 8001470:	40010c00 	.word	0x40010c00

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ba:	f000 f965 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_TIM_PeriodElapsedCallback(&htim3);
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <TIM3_IRQHandler+0x14>)
 80014ca:	f004 fa0d 	bl	80058e8 <HAL_TIM_PeriodElapsedCallback>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014ce:	4802      	ldr	r0, [pc, #8]	; (80014d8 <TIM3_IRQHandler+0x14>)
 80014d0:	f002 fbb1 	bl	8003c36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200011ac 	.word	0x200011ac

080014dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	HAL_UART_RxCpltCallback(&huart3);
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <USART3_IRQHandler+0x14>)
 80014e2:	f004 f967 	bl	80057b4 <HAL_UART_RxCpltCallback>

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014e6:	4802      	ldr	r0, [pc, #8]	; (80014f0 <USART3_IRQHandler+0x14>)
 80014e8:	f003 fa5c 	bl	80049a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20001118 	.word	0x20001118

080014f4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	printf("EXTI0 from it.c\n\r");
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <EXTI0_IRQHandler+0x14>)
 80014fa:	f006 ff5b 	bl	80083b4 <printf>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014fe:	2001      	movs	r0, #1
 8001500:	f000 fc7e 	bl	8001e00 <HAL_GPIO_EXTI_IRQHandler>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800d060 	.word	0x0800d060

0800150c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	printf("EXTI1 from it.c\n\r");
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <EXTI1_IRQHandler+0x14>)
 8001512:	f006 ff4f 	bl	80083b4 <printf>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001516:	2002      	movs	r0, #2
 8001518:	f000 fc72 	bl	8001e00 <HAL_GPIO_EXTI_IRQHandler>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	0800d074 	.word	0x0800d074

08001524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <_kill>:

int _kill(int pid, int sig)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800153c:	f006 ff08 	bl	8008350 <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	2216      	movs	r2, #22
 8001544:	601a      	str	r2, [r3, #0]
	return -1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_exit>:

void _exit (int status)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800155a:	f04f 31ff 	mov.w	r1, #4294967295
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffe7 	bl	8001532 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001564:	e7fe      	b.n	8001564 <_exit+0x12>

08001566 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e00a      	b.n	800158e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001578:	f006 fede 	bl	8008338 <__io_getchar>
 800157c:	4601      	mov	r1, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	b2ca      	uxtb	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3301      	adds	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	429a      	cmp	r2, r3
 8001594:	dbf0      	blt.n	8001578 <_read+0x12>
	}

	return len;
 8001596:	687b      	ldr	r3, [r7, #4]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e009      	b.n	80015c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	60ba      	str	r2, [r7, #8]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f006 feae 	bl	800831c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf1      	blt.n	80015b2 <_write+0x12>
	}
	return len;
 80015ce:	687b      	ldr	r3, [r7, #4]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_close>:

int _close(int file)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	return -1;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <_isatty>:

int _isatty(int file)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f006 fe72 	bl	8008350 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20005000 	.word	0x20005000
 8001698:	00000400 	.word	0x00000400
 800169c:	200010b4 	.word	0x200010b4
 80016a0:	200015f0 	.word	0x200015f0

080016a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016b2:	e003      	b.n	80016bc <LoopCopyDataInit>

080016b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016ba:	3104      	adds	r1, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016bc:	480a      	ldr	r0, [pc, #40]	; (80016e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016c4:	d3f6      	bcc.n	80016b4 <CopyDataInit>
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016c8:	e002      	b.n	80016d0 <LoopFillZerobss>

080016ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016cc:	f842 3b04 	str.w	r3, [r2], #4

080016d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016d4:	d3f9      	bcc.n	80016ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016d6:	f7ff ffe5 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016da:	f006 fe3f 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016de:	f7ff fb59 	bl	8000d94 <main>
  bx lr
 80016e2:	4770      	bx	lr
  ldr r3, =_sidata
 80016e4:	0800d740 	.word	0x0800d740
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016ec:	20001098 	.word	0x20001098
  ldr r2, =_sbss
 80016f0:	20001098 	.word	0x20001098
  ldr r3, = _ebss
 80016f4:	200015ec 	.word	0x200015ec

080016f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC1_2_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x28>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x28>)
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f923 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fd3e 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f93b 	bl	80019c2 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f903 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x1c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_IncTick+0x20>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <HAL_IncTick+0x20>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000008 	.word	0x20000008
 80017a8:	2000128c 	.word	0x2000128c

080017ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_GetTick+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	2000128c 	.word	0x2000128c

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4906      	ldr	r1, [pc, #24]	; (8001858 <__NVIC_EnableIRQ+0x34>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff90 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff2d 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff42 	bl	8001808 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff90 	bl	80018b0 <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5f 	bl	800185c <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff35 	bl	8001824 <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d005      	beq.n	80019fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2204      	movs	r2, #4
 80019f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e051      	b.n	8001aa2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 020e 	bic.w	r2, r2, #14
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a22      	ldr	r2, [pc, #136]	; (8001aac <HAL_DMA_Abort_IT+0xd0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d029      	beq.n	8001a7c <HAL_DMA_Abort_IT+0xa0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_DMA_Abort_IT+0xd4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d022      	beq.n	8001a78 <HAL_DMA_Abort_IT+0x9c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_DMA_Abort_IT+0xd8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d01a      	beq.n	8001a72 <HAL_DMA_Abort_IT+0x96>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_DMA_Abort_IT+0xdc>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d012      	beq.n	8001a6c <HAL_DMA_Abort_IT+0x90>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_DMA_Abort_IT+0xe0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00a      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x8a>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_DMA_Abort_IT+0xe4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d102      	bne.n	8001a60 <HAL_DMA_Abort_IT+0x84>
 8001a5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a5e:	e00e      	b.n	8001a7e <HAL_DMA_Abort_IT+0xa2>
 8001a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a64:	e00b      	b.n	8001a7e <HAL_DMA_Abort_IT+0xa2>
 8001a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6a:	e008      	b.n	8001a7e <HAL_DMA_Abort_IT+0xa2>
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	e005      	b.n	8001a7e <HAL_DMA_Abort_IT+0xa2>
 8001a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a76:	e002      	b.n	8001a7e <HAL_DMA_Abort_IT+0xa2>
 8001a78:	2310      	movs	r3, #16
 8001a7a:	e000      	b.n	8001a7e <HAL_DMA_Abort_IT+0xa2>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <HAL_DMA_Abort_IT+0xe8>)
 8001a80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
    } 
  }
  return status;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40020008 	.word	0x40020008
 8001ab0:	4002001c 	.word	0x4002001c
 8001ab4:	40020030 	.word	0x40020030
 8001ab8:	40020044 	.word	0x40020044
 8001abc:	40020058 	.word	0x40020058
 8001ac0:	4002006c 	.word	0x4002006c
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b08b      	sub	sp, #44	; 0x2c
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	e169      	b.n	8001db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001adc:	2201      	movs	r2, #1
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 8158 	bne.w	8001daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a9a      	ldr	r2, [pc, #616]	; (8001d68 <HAL_GPIO_Init+0x2a0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d05e      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b04:	4a98      	ldr	r2, [pc, #608]	; (8001d68 <HAL_GPIO_Init+0x2a0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d875      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b0a:	4a98      	ldr	r2, [pc, #608]	; (8001d6c <HAL_GPIO_Init+0x2a4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d058      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b10:	4a96      	ldr	r2, [pc, #600]	; (8001d6c <HAL_GPIO_Init+0x2a4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d86f      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b16:	4a96      	ldr	r2, [pc, #600]	; (8001d70 <HAL_GPIO_Init+0x2a8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d052      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b1c:	4a94      	ldr	r2, [pc, #592]	; (8001d70 <HAL_GPIO_Init+0x2a8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d869      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b22:	4a94      	ldr	r2, [pc, #592]	; (8001d74 <HAL_GPIO_Init+0x2ac>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d04c      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b28:	4a92      	ldr	r2, [pc, #584]	; (8001d74 <HAL_GPIO_Init+0x2ac>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d863      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b2e:	4a92      	ldr	r2, [pc, #584]	; (8001d78 <HAL_GPIO_Init+0x2b0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d046      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b34:	4a90      	ldr	r2, [pc, #576]	; (8001d78 <HAL_GPIO_Init+0x2b0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d85d      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	d82a      	bhi.n	8001b94 <HAL_GPIO_Init+0xcc>
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d859      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b42:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <HAL_GPIO_Init+0x80>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001bc3 	.word	0x08001bc3
 8001b4c:	08001b9d 	.word	0x08001b9d
 8001b50:	08001baf 	.word	0x08001baf
 8001b54:	08001bf1 	.word	0x08001bf1
 8001b58:	08001bf7 	.word	0x08001bf7
 8001b5c:	08001bf7 	.word	0x08001bf7
 8001b60:	08001bf7 	.word	0x08001bf7
 8001b64:	08001bf7 	.word	0x08001bf7
 8001b68:	08001bf7 	.word	0x08001bf7
 8001b6c:	08001bf7 	.word	0x08001bf7
 8001b70:	08001bf7 	.word	0x08001bf7
 8001b74:	08001bf7 	.word	0x08001bf7
 8001b78:	08001bf7 	.word	0x08001bf7
 8001b7c:	08001bf7 	.word	0x08001bf7
 8001b80:	08001bf7 	.word	0x08001bf7
 8001b84:	08001bf7 	.word	0x08001bf7
 8001b88:	08001bf7 	.word	0x08001bf7
 8001b8c:	08001ba5 	.word	0x08001ba5
 8001b90:	08001bb9 	.word	0x08001bb9
 8001b94:	4a79      	ldr	r2, [pc, #484]	; (8001d7c <HAL_GPIO_Init+0x2b4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9a:	e02c      	b.n	8001bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e029      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e024      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e01f      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	330c      	adds	r3, #12
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e01a      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	623b      	str	r3, [r7, #32]
          break;
 8001bce:	e013      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	611a      	str	r2, [r3, #16]
          break;
 8001be2:	e009      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2308      	movs	r3, #8
 8001be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	615a      	str	r2, [r3, #20]
          break;
 8001bee:	e003      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          break;
 8001bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2bff      	cmp	r3, #255	; 0xff
 8001bfc:	d801      	bhi.n	8001c02 <HAL_GPIO_Init+0x13a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	e001      	b.n	8001c06 <HAL_GPIO_Init+0x13e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3304      	adds	r3, #4
 8001c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2bff      	cmp	r3, #255	; 0xff
 8001c0c:	d802      	bhi.n	8001c14 <HAL_GPIO_Init+0x14c>
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	e002      	b.n	8001c1a <HAL_GPIO_Init+0x152>
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3b08      	subs	r3, #8
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	210f      	movs	r1, #15
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	6a39      	ldr	r1, [r7, #32]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80b1 	beq.w	8001daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c48:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <HAL_GPIO_Init+0x2b8>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a4c      	ldr	r2, [pc, #304]	; (8001d80 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_GPIO_Init+0x2b8>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c60:	4a48      	ldr	r2, [pc, #288]	; (8001d84 <HAL_GPIO_Init+0x2bc>)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a40      	ldr	r2, [pc, #256]	; (8001d88 <HAL_GPIO_Init+0x2c0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_GPIO_Init+0x1ec>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3f      	ldr	r2, [pc, #252]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1e8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3e      	ldr	r2, [pc, #248]	; (8001d90 <HAL_GPIO_Init+0x2c8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1e4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a3d      	ldr	r2, [pc, #244]	; (8001d94 <HAL_GPIO_Init+0x2cc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1e0>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e006      	b.n	8001cb6 <HAL_GPIO_Init+0x1ee>
 8001ca8:	2304      	movs	r3, #4
 8001caa:	e004      	b.n	8001cb6 <HAL_GPIO_Init+0x1ee>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_GPIO_Init+0x1ee>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_GPIO_Init+0x1ee>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cc6:	492f      	ldr	r1, [pc, #188]	; (8001d84 <HAL_GPIO_Init+0x2bc>)
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	492c      	ldr	r1, [pc, #176]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4928      	ldr	r1, [pc, #160]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4922      	ldr	r1, [pc, #136]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	491e      	ldr	r1, [pc, #120]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4918      	ldr	r1, [pc, #96]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4914      	ldr	r1, [pc, #80]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d021      	beq.n	8001d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
 8001d64:	e021      	b.n	8001daa <HAL_GPIO_Init+0x2e2>
 8001d66:	bf00      	nop
 8001d68:	10320000 	.word	0x10320000
 8001d6c:	10310000 	.word	0x10310000
 8001d70:	10220000 	.word	0x10220000
 8001d74:	10210000 	.word	0x10210000
 8001d78:	10120000 	.word	0x10120000
 8001d7c:	10110000 	.word	0x10110000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010000 	.word	0x40010000
 8001d88:	40010800 	.word	0x40010800
 8001d8c:	40010c00 	.word	0x40010c00
 8001d90:	40011000 	.word	0x40011000
 8001d94:	40011400 	.word	0x40011400
 8001d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_GPIO_Init+0x304>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	4909      	ldr	r1, [pc, #36]	; (8001dcc <HAL_GPIO_Init+0x304>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	3301      	adds	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f47f ae8e 	bne.w	8001adc <HAL_GPIO_Init+0x14>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	372c      	adds	r7, #44	; 0x2c
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	40010400 	.word	0x40010400

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fdfa 	bl	8005a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40010400 	.word	0x40010400

08001e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e12b      	b.n	800209a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff f9d0 	bl	80011fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	; 0x24
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e94:	f001 fb6e 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8001e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a81      	ldr	r2, [pc, #516]	; (80020a4 <HAL_I2C_Init+0x274>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d807      	bhi.n	8001eb4 <HAL_I2C_Init+0x84>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a80      	ldr	r2, [pc, #512]	; (80020a8 <HAL_I2C_Init+0x278>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	bf94      	ite	ls
 8001eac:	2301      	movls	r3, #1
 8001eae:	2300      	movhi	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e006      	b.n	8001ec2 <HAL_I2C_Init+0x92>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a7d      	ldr	r2, [pc, #500]	; (80020ac <HAL_I2C_Init+0x27c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0e7      	b.n	800209a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a78      	ldr	r2, [pc, #480]	; (80020b0 <HAL_I2C_Init+0x280>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0c9b      	lsrs	r3, r3, #18
 8001ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	; (80020a4 <HAL_I2C_Init+0x274>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d802      	bhi.n	8001f04 <HAL_I2C_Init+0xd4>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3301      	adds	r3, #1
 8001f02:	e009      	b.n	8001f18 <HAL_I2C_Init+0xe8>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <HAL_I2C_Init+0x284>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	3301      	adds	r3, #1
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	495c      	ldr	r1, [pc, #368]	; (80020a4 <HAL_I2C_Init+0x274>)
 8001f34:	428b      	cmp	r3, r1
 8001f36:	d819      	bhi.n	8001f6c <HAL_I2C_Init+0x13c>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e59      	subs	r1, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f46:	1c59      	adds	r1, r3, #1
 8001f48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_I2C_Init+0x138>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e59      	subs	r1, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f66:	e051      	b.n	800200c <HAL_I2C_Init+0x1dc>
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e04f      	b.n	800200c <HAL_I2C_Init+0x1dc>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d111      	bne.n	8001f98 <HAL_I2C_Init+0x168>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e012      	b.n	8001fbe <HAL_I2C_Init+0x18e>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e58      	subs	r0, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	0099      	lsls	r1, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_Init+0x196>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e022      	b.n	800200c <HAL_I2C_Init+0x1dc>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10e      	bne.n	8001fec <HAL_I2C_Init+0x1bc>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1e58      	subs	r0, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	440b      	add	r3, r1
 8001fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fea:	e00f      	b.n	800200c <HAL_I2C_Init+0x1dc>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e58      	subs	r0, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	0099      	lsls	r1, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002002:	3301      	adds	r3, #1
 8002004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	6809      	ldr	r1, [r1, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800203a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6911      	ldr	r1, [r2, #16]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68d2      	ldr	r2, [r2, #12]
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	430b      	orrs	r3, r1
 800204e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	000186a0 	.word	0x000186a0
 80020a8:	001e847f 	.word	0x001e847f
 80020ac:	003d08ff 	.word	0x003d08ff
 80020b0:	431bde83 	.word	0x431bde83
 80020b4:	10624dd3 	.word	0x10624dd3

080020b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	461a      	mov	r2, r3
 80020c4:	460b      	mov	r3, r1
 80020c6:	817b      	strh	r3, [r7, #10]
 80020c8:	4613      	mov	r3, r2
 80020ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff fb6e 	bl	80017ac <HAL_GetTick>
 80020d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	f040 80e0 	bne.w	80022a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2319      	movs	r3, #25
 80020e6:	2201      	movs	r2, #1
 80020e8:	4970      	ldr	r1, [pc, #448]	; (80022ac <HAL_I2C_Master_Transmit+0x1f4>)
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fc92 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020f6:	2302      	movs	r3, #2
 80020f8:	e0d3      	b.n	80022a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_I2C_Master_Transmit+0x50>
 8002104:	2302      	movs	r3, #2
 8002106:	e0cc      	b.n	80022a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d007      	beq.n	800212e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2221      	movs	r2, #33	; 0x21
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2210      	movs	r2, #16
 800214a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	893a      	ldrh	r2, [r7, #8]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a50      	ldr	r2, [pc, #320]	; (80022b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002170:	8979      	ldrh	r1, [r7, #10]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	6a3a      	ldr	r2, [r7, #32]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fafc 	bl	8002774 <I2C_MasterRequestWrite>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e08d      	b.n	80022a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800219c:	e066      	b.n	800226c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	6a39      	ldr	r1, [r7, #32]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fd0c 	bl	8002bc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d107      	bne.n	80021c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b04      	cmp	r3, #4
 8002206:	d11b      	bne.n	8002240 <HAL_I2C_Master_Transmit+0x188>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	2b00      	cmp	r3, #0
 800220e:	d017      	beq.n	8002240 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	6a39      	ldr	r1, [r7, #32]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fcfc 	bl	8002c42 <I2C_WaitOnBTFFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	2b04      	cmp	r3, #4
 8002256:	d107      	bne.n	8002268 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002266:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e01a      	b.n	80022a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d194      	bne.n	800219e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	e000      	b.n	80022a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022a0:	2302      	movs	r3, #2
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	00100002 	.word	0x00100002
 80022b0:	ffff0000 	.word	0xffff0000

080022b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	; 0x30
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	460b      	mov	r3, r1
 80022c2:	817b      	strh	r3, [r7, #10]
 80022c4:	4613      	mov	r3, r2
 80022c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff fa6e 	bl	80017ac <HAL_GetTick>
 80022d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f040 823f 	bne.w	800275e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2319      	movs	r3, #25
 80022e6:	2201      	movs	r2, #1
 80022e8:	497f      	ldr	r1, [pc, #508]	; (80024e8 <HAL_I2C_Master_Receive+0x234>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fb92 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
 80022f8:	e232      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_I2C_Master_Receive+0x54>
 8002304:	2302      	movs	r3, #2
 8002306:	e22b      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d007      	beq.n	800232e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2222      	movs	r2, #34	; 0x22
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2210      	movs	r2, #16
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	893a      	ldrh	r2, [r7, #8]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4a5f      	ldr	r2, [pc, #380]	; (80024ec <HAL_I2C_Master_Receive+0x238>)
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002370:	8979      	ldrh	r1, [r7, #10]
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa7e 	bl	8002878 <I2C_MasterRequestRead>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1ec      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	2b00      	cmp	r3, #0
 800238c:	d113      	bne.n	80023b6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e1c0      	b.n	8002738 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d11e      	bne.n	80023fc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023ce:	b672      	cpsid	i
}
 80023d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023f8:	b662      	cpsie	i
}
 80023fa:	e035      	b.n	8002468 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b02      	cmp	r3, #2
 8002402:	d11e      	bne.n	8002442 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002412:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002414:	b672      	cpsid	i
}
 8002416:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800243e:	b662      	cpsie	i
}
 8002440:	e012      	b.n	8002468 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002450:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002468:	e166      	b.n	8002738 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	2b03      	cmp	r3, #3
 8002470:	f200 811f 	bhi.w	80026b2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b01      	cmp	r3, #1
 800247a:	d123      	bne.n	80024c4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fc1f 	bl	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e167      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024c2:	e139      	b.n	8002738 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d152      	bne.n	8002572 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	2200      	movs	r2, #0
 80024d4:	4906      	ldr	r1, [pc, #24]	; (80024f0 <HAL_I2C_Master_Receive+0x23c>)
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fa9c 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e13c      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
 80024e6:	bf00      	nop
 80024e8:	00100002 	.word	0x00100002
 80024ec:	ffff0000 	.word	0xffff0000
 80024f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800253a:	b662      	cpsie	i
}
 800253c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002570:	e0e2      	b.n	8002738 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	2200      	movs	r2, #0
 800257a:	497b      	ldr	r1, [pc, #492]	; (8002768 <HAL_I2C_Master_Receive+0x4b4>)
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fa49 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0e9      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80025d2:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_I2C_Master_Receive+0x4b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	4a65      	ldr	r2, [pc, #404]	; (8002770 <HAL_I2C_Master_Receive+0x4bc>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0a1a      	lsrs	r2, r3, #8
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00da      	lsls	r2, r3, #3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d118      	bne.n	800262a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0220 	orr.w	r2, r3, #32
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800261a:	b662      	cpsie	i
}
 800261c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e09a      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b04      	cmp	r3, #4
 8002636:	d1d9      	bne.n	80025ec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800267a:	b662      	cpsie	i
}
 800267c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026b0:	e042      	b.n	8002738 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fb04 	bl	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e04c      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d118      	bne.n	8002738 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	f47f ae94 	bne.w	800246a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	00010004 	.word	0x00010004
 800276c:	20000000 	.word	0x20000000
 8002770:	14f8b589 	.word	0x14f8b589

08002774 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d006      	beq.n	800279e <I2C_MasterRequestWrite+0x2a>
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d003      	beq.n	800279e <I2C_MasterRequestWrite+0x2a>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800279c:	d108      	bne.n	80027b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e00b      	b.n	80027c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	2b12      	cmp	r3, #18
 80027b6:	d107      	bne.n	80027c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f91d 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ee:	d103      	bne.n	80027f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e035      	b.n	8002868 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002804:	d108      	bne.n	8002818 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002806:	897b      	ldrh	r3, [r7, #10]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	e01b      	b.n	8002850 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002818:	897b      	ldrh	r3, [r7, #10]
 800281a:	11db      	asrs	r3, r3, #7
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 0306 	and.w	r3, r3, #6
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f063 030f 	orn	r3, r3, #15
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	490e      	ldr	r1, [pc, #56]	; (8002870 <I2C_MasterRequestWrite+0xfc>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f943 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e010      	b.n	8002868 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4907      	ldr	r1, [pc, #28]	; (8002874 <I2C_MasterRequestWrite+0x100>)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f933 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	00010008 	.word	0x00010008
 8002874:	00010002 	.word	0x00010002

08002878 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	460b      	mov	r3, r1
 8002886:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800289c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d006      	beq.n	80028b2 <I2C_MasterRequestRead+0x3a>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d003      	beq.n	80028b2 <I2C_MasterRequestRead+0x3a>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b0:	d108      	bne.n	80028c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e00b      	b.n	80028dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	2b11      	cmp	r3, #17
 80028ca:	d107      	bne.n	80028dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f893 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00d      	beq.n	8002910 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002902:	d103      	bne.n	800290c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e079      	b.n	8002a04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002918:	d108      	bne.n	800292c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800291a:	897b      	ldrh	r3, [r7, #10]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	611a      	str	r2, [r3, #16]
 800292a:	e05f      	b.n	80029ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800292c:	897b      	ldrh	r3, [r7, #10]
 800292e:	11db      	asrs	r3, r3, #7
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0306 	and.w	r3, r3, #6
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f063 030f 	orn	r3, r3, #15
 800293c:	b2da      	uxtb	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4930      	ldr	r1, [pc, #192]	; (8002a0c <I2C_MasterRequestRead+0x194>)
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f8b9 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e054      	b.n	8002a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4929      	ldr	r1, [pc, #164]	; (8002a10 <I2C_MasterRequestRead+0x198>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f8a9 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e044      	b.n	8002a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f831 	bl	8002a14 <I2C_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	d103      	bne.n	80029d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e017      	b.n	8002a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029d4:	897b      	ldrh	r3, [r7, #10]
 80029d6:	11db      	asrs	r3, r3, #7
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 0306 	and.w	r3, r3, #6
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f063 030e 	orn	r3, r3, #14
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4907      	ldr	r1, [pc, #28]	; (8002a10 <I2C_MasterRequestRead+0x198>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f865 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	00010008 	.word	0x00010008
 8002a10:	00010002 	.word	0x00010002

08002a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a24:	e025      	b.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d021      	beq.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7fe febd 	bl	80017ac <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d116      	bne.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e023      	b.n	8002aba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10d      	bne.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	e00c      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d0b6      	beq.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad0:	e051      	b.n	8002b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae0:	d123      	bne.n	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002afa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0204 	orr.w	r2, r3, #4
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e046      	b.n	8002bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d021      	beq.n	8002b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7fe fe3b 	bl	80017ac <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d116      	bne.n	8002b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f043 0220 	orr.w	r2, r3, #32
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e020      	b.n	8002bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10c      	bne.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e00b      	b.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d18d      	bne.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bcc:	e02d      	b.n	8002c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f8ce 	bl	8002d70 <I2C_IsAcknowledgeFailed>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e02d      	b.n	8002c3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d021      	beq.n	8002c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7fe fde1 	bl	80017ac <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d116      	bne.n	8002c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e007      	b.n	8002c3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d1ca      	bne.n	8002bce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c4e:	e02d      	b.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f88d 	bl	8002d70 <I2C_IsAcknowledgeFailed>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e02d      	b.n	8002cbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d021      	beq.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7fe fda0 	bl	80017ac <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d302      	bcc.n	8002c7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d1ca      	bne.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cd0:	e042      	b.n	8002d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d119      	bne.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0210 	mvn.w	r2, #16
 8002ce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e029      	b.n	8002d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d14:	f7fe fd4a 	bl	80017ac <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d116      	bne.n	8002d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e007      	b.n	8002d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d1b5      	bne.n	8002cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d11b      	bne.n	8002dc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0204 	orr.w	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e26c      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8087 	beq.w	8002efa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dec:	4b92      	ldr	r3, [pc, #584]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d00c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df8:	4b8f      	ldr	r3, [pc, #572]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d112      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5e>
 8002e04:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d10b      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d06c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d168      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e246      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x76>
 8002e34:	4b80      	ldr	r3, [pc, #512]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a7f      	ldr	r2, [pc, #508]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	e02e      	b.n	8002ea0 <HAL_RCC_OscConfig+0xd4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x98>
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7a      	ldr	r2, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b78      	ldr	r3, [pc, #480]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a77      	ldr	r2, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e01d      	b.n	8002ea0 <HAL_RCC_OscConfig+0xd4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0xbc>
 8002e6e:	4b72      	ldr	r3, [pc, #456]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a71      	ldr	r2, [pc, #452]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a6e      	ldr	r2, [pc, #440]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0xd4>
 8002e88:	4b6b      	ldr	r3, [pc, #428]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6a      	ldr	r2, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a67      	ldr	r2, [pc, #412]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fc80 	bl	80017ac <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fc7c 	bl	80017ac <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1fa      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xe4>
 8002ece:	e014      	b.n	8002efa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fc6c 	bl	80017ac <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe fc68 	bl	80017ac <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1e6      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	4b53      	ldr	r3, [pc, #332]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x10c>
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d063      	beq.n	8002fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f06:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f12:	4b49      	ldr	r3, [pc, #292]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d11c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x18c>
 8002f1e:	4b46      	ldr	r3, [pc, #280]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d116      	bne.n	8002f58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2a:	4b43      	ldr	r3, [pc, #268]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_RCC_OscConfig+0x176>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e1ba      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4939      	ldr	r1, [pc, #228]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	e03a      	b.n	8002fce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe fc21 	bl	80017ac <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6e:	f7fe fc1d 	bl	80017ac <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e19b      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4927      	ldr	r1, [pc, #156]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
 8002fa0:	e015      	b.n	8002fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fc00 	bl	80017ac <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fbfc 	bl	80017ac <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e17a      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03a      	beq.n	8003050 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d019      	beq.n	8003016 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fbe0 	bl	80017ac <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7fe fbdc 	bl	80017ac <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e15a      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCC_OscConfig+0x26c>)
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800300e:	2001      	movs	r0, #1
 8003010:	f000 fad8 	bl	80035c4 <RCC_Delay>
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_OscConfig+0x274>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fbc6 	bl	80017ac <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003022:	e00f      	b.n	8003044 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7fe fbc2 	bl	80017ac <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d908      	bls.n	8003044 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e140      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	42420000 	.word	0x42420000
 8003040:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b9e      	ldr	r3, [pc, #632]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e9      	bne.n	8003024 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a6 	beq.w	80031aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4b97      	ldr	r3, [pc, #604]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	4b94      	ldr	r3, [pc, #592]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4a93      	ldr	r2, [pc, #588]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	61d3      	str	r3, [r2, #28]
 800307a:	4b91      	ldr	r3, [pc, #580]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b8e      	ldr	r3, [pc, #568]	; (80032c4 <HAL_RCC_OscConfig+0x4f8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x4f8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a8a      	ldr	r2, [pc, #552]	; (80032c4 <HAL_RCC_OscConfig+0x4f8>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7fe fb83 	bl	80017ac <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe fb7f 	bl	80017ac <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b64      	cmp	r3, #100	; 0x64
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0fd      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_OscConfig+0x4f8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x312>
 80030d0:	4b7b      	ldr	r3, [pc, #492]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a7a      	ldr	r2, [pc, #488]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6213      	str	r3, [r2, #32]
 80030dc:	e02d      	b.n	800313a <HAL_RCC_OscConfig+0x36e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x334>
 80030e6:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a75      	ldr	r2, [pc, #468]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6213      	str	r3, [r2, #32]
 80030f2:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4a72      	ldr	r2, [pc, #456]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	6213      	str	r3, [r2, #32]
 80030fe:	e01c      	b.n	800313a <HAL_RCC_OscConfig+0x36e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b05      	cmp	r3, #5
 8003106:	d10c      	bne.n	8003122 <HAL_RCC_OscConfig+0x356>
 8003108:	4b6d      	ldr	r3, [pc, #436]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4a6c      	ldr	r2, [pc, #432]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	6213      	str	r3, [r2, #32]
 8003114:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4a69      	ldr	r2, [pc, #420]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6213      	str	r3, [r2, #32]
 8003120:	e00b      	b.n	800313a <HAL_RCC_OscConfig+0x36e>
 8003122:	4b67      	ldr	r3, [pc, #412]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a66      	ldr	r2, [pc, #408]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6213      	str	r3, [r2, #32]
 800312e:	4b64      	ldr	r3, [pc, #400]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4a63      	ldr	r2, [pc, #396]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d015      	beq.n	800316e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7fe fb33 	bl	80017ac <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fe fb2f 	bl	80017ac <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	; 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0ab      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ee      	beq.n	800314a <HAL_RCC_OscConfig+0x37e>
 800316c:	e014      	b.n	8003198 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fe fb1d 	bl	80017ac <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe fb19 	bl	80017ac <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e095      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ee      	bne.n	8003176 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a47      	ldr	r2, [pc, #284]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8081 	beq.w	80032b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d061      	beq.n	8003284 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d146      	bne.n	8003256 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_RCC_OscConfig+0x4fc>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe faed 	bl	80017ac <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d6:	f7fe fae9 	bl	80017ac <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e067      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e8:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d108      	bne.n	8003210 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	492d      	ldr	r1, [pc, #180]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a19      	ldr	r1, [r3, #32]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	430b      	orrs	r3, r1
 8003222:	4927      	ldr	r1, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_RCC_OscConfig+0x4fc>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fe fabd 	bl	80017ac <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7fe fab9 	bl	80017ac <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e037      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x46a>
 8003254:	e02f      	b.n	80032b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <HAL_RCC_OscConfig+0x4fc>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe faa6 	bl	80017ac <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe faa2 	bl	80017ac <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e020      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x498>
 8003282:	e018      	b.n	80032b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e013      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_OscConfig+0x4f4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42420060 	.word	0x42420060

080032cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0d0      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d910      	bls.n	8003310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b67      	ldr	r3, [pc, #412]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 0207 	bic.w	r2, r3, #7
 80032f6:	4965      	ldr	r1, [pc, #404]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0b8      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003328:	4b59      	ldr	r3, [pc, #356]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a52      	ldr	r2, [pc, #328]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800334a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	494d      	ldr	r1, [pc, #308]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d040      	beq.n	80033ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d115      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338a:	4b41      	ldr	r3, [pc, #260]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e073      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06b      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033aa:	4b39      	ldr	r3, [pc, #228]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f023 0203 	bic.w	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4936      	ldr	r1, [pc, #216]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033bc:	f7fe f9f6 	bl	80017ac <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	e00a      	b.n	80033da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7fe f9f2 	bl	80017ac <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e053      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 020c 	and.w	r2, r3, #12
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1eb      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d210      	bcs.n	800341c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4922      	ldr	r1, [pc, #136]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e032      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4916      	ldr	r1, [pc, #88]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	490e      	ldr	r1, [pc, #56]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800345a:	f000 f821 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	490a      	ldr	r1, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1cc>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe f954 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40022000 	.word	0x40022000
 8003490:	40021000 	.word	0x40021000
 8003494:	0800d370 	.word	0x0800d370
 8003498:	20000000 	.word	0x20000000
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	b490      	push	{r4, r7}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034a8:	1d3c      	adds	r4, r7, #4
 80034aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034b0:	f240 2301 	movw	r3, #513	; 0x201
 80034b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d002      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x40>
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x46>
 80034de:	e02d      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e2:	623b      	str	r3, [r7, #32]
      break;
 80034e4:	e02d      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	0c9b      	lsrs	r3, r3, #18
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034f2:	4413      	add	r3, r2
 80034f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003504:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0c5b      	lsrs	r3, r3, #17
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003512:	4413      	add	r3, r2
 8003514:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003518:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800351e:	fb02 f203 	mul.w	r2, r2, r3
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	e004      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	623b      	str	r3, [r7, #32]
      break;
 800353a:	e002      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353e:	623b      	str	r3, [r7, #32]
      break;
 8003540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003542:	6a3b      	ldr	r3, [r7, #32]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3728      	adds	r7, #40	; 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc90      	pop	{r4, r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	0800d088 	.word	0x0800d088
 8003554:	40021000 	.word	0x40021000
 8003558:	007a1200 	.word	0x007a1200
 800355c:	003d0900 	.word	0x003d0900

08003560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b02      	ldr	r3, [pc, #8]	; (8003570 <HAL_RCC_GetHCLKFreq+0x10>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	20000000 	.word	0x20000000

08003574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003578:	f7ff fff2 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4903      	ldr	r1, [pc, #12]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40021000 	.word	0x40021000
 8003598:	0800d380 	.word	0x0800d380

0800359c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a0:	f7ff ffde 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0adb      	lsrs	r3, r3, #11
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	; (80035c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	0800d380 	.word	0x0800d380

080035c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <RCC_Delay+0x34>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <RCC_Delay+0x38>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	0a5b      	lsrs	r3, r3, #9
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035e0:	bf00      	nop
  }
  while (Delay --);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1e5a      	subs	r2, r3, #1
 80035e6:	60fa      	str	r2, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f9      	bne.n	80035e0 <RCC_Delay+0x1c>
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	20000000 	.word	0x20000000
 80035fc:	10624dd3 	.word	0x10624dd3

08003600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e076      	b.n	8003700 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d108      	bne.n	800362c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003622:	d009      	beq.n	8003638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
 800362a:	e005      	b.n	8003638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fe10 	bl	8001278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	ea42 0103 	orr.w	r1, r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	0c1a      	lsrs	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f002 0204 	and.w	r2, r2, #4
 80036de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_SPI_Transmit+0x22>
 8003726:	2302      	movs	r3, #2
 8003728:	e126      	b.n	8003978 <HAL_SPI_Transmit+0x270>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003732:	f7fe f83b 	bl	80017ac <HAL_GetTick>
 8003736:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d002      	beq.n	800374e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003748:	2302      	movs	r3, #2
 800374a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800374c:	e10b      	b.n	8003966 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_SPI_Transmit+0x52>
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800375e:	e102      	b.n	8003966 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2203      	movs	r2, #3
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a6:	d10f      	bne.n	80037c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d007      	beq.n	80037e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ee:	d14b      	bne.n	8003888 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_SPI_Transmit+0xf6>
 80037f8:	8afb      	ldrh	r3, [r7, #22]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d13e      	bne.n	800387c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	881a      	ldrh	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	1c9a      	adds	r2, r3, #2
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003822:	e02b      	b.n	800387c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d112      	bne.n	8003858 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	881a      	ldrh	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	86da      	strh	r2, [r3, #54]	; 0x36
 8003856:	e011      	b.n	800387c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003858:	f7fd ffa8 	bl	80017ac <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d803      	bhi.n	8003870 <HAL_SPI_Transmit+0x168>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d102      	bne.n	8003876 <HAL_SPI_Transmit+0x16e>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	77fb      	strb	r3, [r7, #31]
          goto error;
 800387a:	e074      	b.n	8003966 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ce      	bne.n	8003824 <HAL_SPI_Transmit+0x11c>
 8003886:	e04c      	b.n	8003922 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_Transmit+0x18e>
 8003890:	8afb      	ldrh	r3, [r7, #22]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d140      	bne.n	8003918 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038bc:	e02c      	b.n	8003918 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d113      	bne.n	80038f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	7812      	ldrb	r2, [r2, #0]
 80038d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80038f2:	e011      	b.n	8003918 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f4:	f7fd ff5a 	bl	80017ac <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d803      	bhi.n	800390c <HAL_SPI_Transmit+0x204>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d102      	bne.n	8003912 <HAL_SPI_Transmit+0x20a>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003916:	e026      	b.n	8003966 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1cd      	bne.n	80038be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f8c0 	bl	8003aac <SPI_EndRxTxTransaction>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e000      	b.n	8003966 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003964:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003976:	7ffb      	ldrb	r3, [r7, #31]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800398e:	b2db      	uxtb	r3, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
	...

0800399c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039ac:	f7fd fefe 	bl	80017ac <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	4413      	add	r3, r2
 80039ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039bc:	f7fd fef6 	bl	80017ac <HAL_GetTick>
 80039c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	015b      	lsls	r3, r3, #5
 80039c8:	0d1b      	lsrs	r3, r3, #20
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d2:	e054      	b.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d050      	beq.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039dc:	f7fd fee6 	bl	80017ac <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d902      	bls.n	80039f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d13d      	bne.n	8003a6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a0a:	d111      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a14:	d004      	beq.n	8003a20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d107      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d10f      	bne.n	8003a5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e017      	b.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d19b      	bne.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000000 	.word	0x20000000

08003aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff ff6a 	bl	800399c <SPI_WaitFlagStateUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e000      	b.n	8003ae0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e041      	b.n	8003b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd fbfc 	bl	800130c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f000 face 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e041      	b.n	8003c1c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f839 	bl	8003c24 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f000 fa7f 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d122      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d11b      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f06f 0202 	mvn.w	r2, #2
 8003c62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fa0a 	bl	8004092 <HAL_TIM_IC_CaptureCallback>
 8003c7e:	e005      	b.n	8003c8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f9fd 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa0c 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d122      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d11b      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f06f 0204 	mvn.w	r2, #4
 8003cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f9e0 	bl	8004092 <HAL_TIM_IC_CaptureCallback>
 8003cd2:	e005      	b.n	8003ce0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f9d3 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9e2 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d122      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d11b      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f06f 0208 	mvn.w	r2, #8
 8003d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f9b6 	bl	8004092 <HAL_TIM_IC_CaptureCallback>
 8003d26:	e005      	b.n	8003d34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f9a9 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f9b8 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d122      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d11b      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0210 	mvn.w	r2, #16
 8003d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2208      	movs	r2, #8
 8003d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f98c 	bl	8004092 <HAL_TIM_IC_CaptureCallback>
 8003d7a:	e005      	b.n	8003d88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f97f 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f98e 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10e      	bne.n	8003dba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d107      	bne.n	8003dba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f06f 0201 	mvn.w	r2, #1
 8003db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 fd97 	bl	80058e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d10e      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d107      	bne.n	8003de6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fc58 	bl	8004696 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d10e      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	d107      	bne.n	8003e12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f952 	bl	80040b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d10e      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d107      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f06f 0220 	mvn.w	r2, #32
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fc23 	bl	8004684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e046      	b.n	8003ef0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	d839      	bhi.n	8003ee4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003ead 	.word	0x08003ead
 8003e7c:	08003ee5 	.word	0x08003ee5
 8003e80:	08003ee5 	.word	0x08003ee5
 8003e84:	08003ee5 	.word	0x08003ee5
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ee5 	.word	0x08003ee5
 8003e90:	08003ee5 	.word	0x08003ee5
 8003e94:	08003ee5 	.word	0x08003ee5
 8003e98:	08003ec9 	.word	0x08003ec9
 8003e9c:	08003ee5 	.word	0x08003ee5
 8003ea0:	08003ee5 	.word	0x08003ee5
 8003ea4:	08003ee5 	.word	0x08003ee5
 8003ea8:	08003ed7 	.word	0x08003ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f96a 	bl	800418c <TIM_OC1_SetConfig>
      break;
 8003eb8:	e015      	b.n	8003ee6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f9c9 	bl	8004258 <TIM_OC2_SetConfig>
      break;
 8003ec6:	e00e      	b.n	8003ee6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fa2c 	bl	800432c <TIM_OC3_SetConfig>
      break;
 8003ed4:	e007      	b.n	8003ee6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fa8f 	bl	8004400 <TIM_OC4_SetConfig>
      break;
 8003ee2:	e000      	b.n	8003ee6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIM_ConfigClockSource+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0b3      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x180>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f48:	d03e      	beq.n	8003fc8 <HAL_TIM_ConfigClockSource+0xd0>
 8003f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4e:	f200 8087 	bhi.w	8004060 <HAL_TIM_ConfigClockSource+0x168>
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f56:	f000 8085 	beq.w	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5e:	d87f      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x168>
 8003f60:	2b70      	cmp	r3, #112	; 0x70
 8003f62:	d01a      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0xa2>
 8003f64:	2b70      	cmp	r3, #112	; 0x70
 8003f66:	d87b      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x168>
 8003f68:	2b60      	cmp	r3, #96	; 0x60
 8003f6a:	d050      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x116>
 8003f6c:	2b60      	cmp	r3, #96	; 0x60
 8003f6e:	d877      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x168>
 8003f70:	2b50      	cmp	r3, #80	; 0x50
 8003f72:	d03c      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0xf6>
 8003f74:	2b50      	cmp	r3, #80	; 0x50
 8003f76:	d873      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x168>
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d058      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x136>
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d86f      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x168>
 8003f80:	2b30      	cmp	r3, #48	; 0x30
 8003f82:	d064      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x156>
 8003f84:	2b30      	cmp	r3, #48	; 0x30
 8003f86:	d86b      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x168>
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d060      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x156>
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d867      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x168>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d05c      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x156>
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d05a      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f98:	e062      	b.n	8004060 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6899      	ldr	r1, [r3, #8]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f000 faee 	bl	800458a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	609a      	str	r2, [r3, #8]
      break;
 8003fc6:	e04e      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6899      	ldr	r1, [r3, #8]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f000 fad7 	bl	800458a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fea:	609a      	str	r2, [r3, #8]
      break;
 8003fec:	e03b      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fa4e 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2150      	movs	r1, #80	; 0x50
 8004006:	4618      	mov	r0, r3
 8004008:	f000 faa5 	bl	8004556 <TIM_ITRx_SetConfig>
      break;
 800400c:	e02b      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	461a      	mov	r2, r3
 800401c:	f000 fa6c 	bl	80044f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2160      	movs	r1, #96	; 0x60
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fa95 	bl	8004556 <TIM_ITRx_SetConfig>
      break;
 800402c:	e01b      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	461a      	mov	r2, r3
 800403c:	f000 fa2e 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2140      	movs	r1, #64	; 0x40
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fa85 	bl	8004556 <TIM_ITRx_SetConfig>
      break;
 800404c:	e00b      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f000 fa7c 	bl	8004556 <TIM_ITRx_SetConfig>
        break;
 800405e:	e002      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004060:	bf00      	nop
 8004062:	e000      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004064:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a29      	ldr	r2, [pc, #164]	; (8004180 <TIM_Base_SetConfig+0xb8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_Base_SetConfig+0x30>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e6:	d007      	beq.n	80040f8 <TIM_Base_SetConfig+0x30>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a26      	ldr	r2, [pc, #152]	; (8004184 <TIM_Base_SetConfig+0xbc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0x30>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a25      	ldr	r2, [pc, #148]	; (8004188 <TIM_Base_SetConfig+0xc0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d108      	bne.n	800410a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <TIM_Base_SetConfig+0xb8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_Base_SetConfig+0x62>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d007      	beq.n	800412a <TIM_Base_SetConfig+0x62>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <TIM_Base_SetConfig+0xbc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_Base_SetConfig+0x62>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <TIM_Base_SetConfig+0xc0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a07      	ldr	r2, [pc, #28]	; (8004180 <TIM_Base_SetConfig+0xb8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d103      	bne.n	8004170 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800

0800418c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0302 	bic.w	r3, r3, #2
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <TIM_OC1_SetConfig+0xc8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10c      	bne.n	8004202 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 0308 	bic.w	r3, r3, #8
 80041ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <TIM_OC1_SetConfig+0xc8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d111      	bne.n	800422e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	621a      	str	r2, [r3, #32]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40012c00 	.word	0x40012c00

08004258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0320 	bic.w	r3, r3, #32
 80042a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <TIM_OC2_SetConfig+0xd0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10d      	bne.n	80042d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <TIM_OC2_SetConfig+0xd0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d113      	bne.n	8004304 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	40012c00 	.word	0x40012c00

0800432c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <TIM_OC3_SetConfig+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10d      	bne.n	80043a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a14      	ldr	r2, [pc, #80]	; (80043fc <TIM_OC3_SetConfig+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d113      	bne.n	80043d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00

08004400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800444a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <TIM_OC4_SetConfig+0x98>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d109      	bne.n	8004474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	40012c00 	.word	0x40012c00

0800449c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 030a 	bic.w	r3, r3, #10
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f023 0210 	bic.w	r2, r3, #16
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	031b      	lsls	r3, r3, #12
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	f043 0307 	orr.w	r3, r3, #7
 8004578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	021a      	lsls	r2, r3, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	609a      	str	r2, [r3, #8]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045dc:	2302      	movs	r3, #2
 80045de:	e046      	b.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d009      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a12      	ldr	r2, [pc, #72]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a10      	ldr	r2, [pc, #64]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800

08004684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr

08004696 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e03f      	b.n	800473a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc fe42 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fbeb 	bl	8004ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08a      	sub	sp, #40	; 0x28
 8004746:	af02      	add	r7, sp, #8
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b20      	cmp	r3, #32
 8004760:	d17c      	bne.n	800485c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_UART_Transmit+0x2c>
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e075      	b.n	800485e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_UART_Transmit+0x3e>
 800477c:	2302      	movs	r3, #2
 800477e:	e06e      	b.n	800485e <HAL_UART_Transmit+0x11c>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2221      	movs	r2, #33	; 0x21
 8004792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004796:	f7fd f809 	bl	80017ac <HAL_GetTick>
 800479a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d108      	bne.n	80047c4 <HAL_UART_Transmit+0x82>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e003      	b.n	80047cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80047d4:	e02a      	b.n	800482c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fa0e 	bl	8004c02 <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e036      	b.n	800485e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004804:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3302      	adds	r3, #2
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e007      	b.n	800481e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	781a      	ldrb	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	3301      	adds	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1cf      	bne.n	80047d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2200      	movs	r2, #0
 800483e:	2140      	movs	r1, #64	; 0x40
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f9de 	bl	8004c02 <UART_WaitOnFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e006      	b.n	800485e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e000      	b.n	800485e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b08a      	sub	sp, #40	; 0x28
 800486a:	af02      	add	r7, sp, #8
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b20      	cmp	r3, #32
 8004884:	f040 8089 	bne.w	800499a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Receive+0x2e>
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e081      	b.n	800499c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Receive+0x40>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e07a      	b.n	800499c <HAL_UART_Receive+0x136>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2222      	movs	r2, #34	; 0x22
 80048b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80048bc:	f7fc ff76 	bl	80017ac <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	88fa      	ldrh	r2, [r7, #6]
 80048cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	d108      	bne.n	80048ea <HAL_UART_Receive+0x84>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e003      	b.n	80048f2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80048fa:	e043      	b.n	8004984 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2200      	movs	r2, #0
 8004904:	2120      	movs	r1, #32
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f97b 	bl	8004c02 <UART_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e042      	b.n	800499c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10c      	bne.n	8004936 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004928:	b29a      	uxth	r2, r3
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	3302      	adds	r3, #2
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	e01f      	b.n	8004976 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493e:	d007      	beq.n	8004950 <HAL_UART_Receive+0xea>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <HAL_UART_Receive+0xf8>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e008      	b.n	8004970 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496a:	b2da      	uxtb	r2, r3
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1b6      	bne.n	80048fc <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10d      	bne.n	80049f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_UART_IRQHandler+0x52>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9e9 	bl	8004dc6 <UART_Receive_IT>
      return;
 80049f4:	e0d0      	b.n	8004b98 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80b0 	beq.w	8004b5e <HAL_UART_IRQHandler+0x1ba>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <HAL_UART_IRQHandler+0x70>
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 80a5 	beq.w	8004b5e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_UART_IRQHandler+0x90>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_UART_IRQHandler+0xb0>
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	f043 0202 	orr.w	r2, r3, #2
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_UART_IRQHandler+0xd0>
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	f043 0204 	orr.w	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00f      	beq.n	8004a9e <HAL_UART_IRQHandler+0xfa>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_UART_IRQHandler+0xee>
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	f043 0208 	orr.w	r2, r3, #8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d077      	beq.n	8004b96 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x11c>
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f983 	bl	8004dc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <HAL_UART_IRQHandler+0x144>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d031      	beq.n	8004b4c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8d4 	bl	8004c96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d023      	beq.n	8004b44 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d013      	beq.n	8004b3c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	4a21      	ldr	r2, [pc, #132]	; (8004ba0 <HAL_UART_IRQHandler+0x1fc>)
 8004b1a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fc ff5b 	bl	80019dc <HAL_DMA_Abort_IT>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d016      	beq.n	8004b5a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b36:	4610      	mov	r0, r2
 8004b38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3a:	e00e      	b.n	8004b5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f83a 	bl	8004bb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b42:	e00a      	b.n	8004b5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f836 	bl	8004bb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4a:	e006      	b.n	8004b5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f832 	bl	8004bb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b58:	e01d      	b.n	8004b96 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5a:	bf00      	nop
    return;
 8004b5c:	e01b      	b.n	8004b96 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_UART_IRQHandler+0x1d6>
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8c0 	bl	8004cf8 <UART_Transmit_IT>
    return;
 8004b78:	e00e      	b.n	8004b98 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_UART_IRQHandler+0x1f4>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f901 	bl	8004d96 <UART_EndTransmit_IT>
    return;
 8004b94:	e000      	b.n	8004b98 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004b96:	bf00      	nop
  }
}
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	08004cd1 	.word	0x08004cd1

08004ba4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	b2db      	uxtb	r3, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	603b      	str	r3, [r7, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c12:	e02c      	b.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d028      	beq.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c22:	f7fc fdc3 	bl	80017ac <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d21d      	bcs.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c40:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e00f      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4013      	ands	r3, r2
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d0c3      	beq.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff ff63 	bl	8004bb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b21      	cmp	r3, #33	; 0x21
 8004d0a:	d13e      	bne.n	8004d8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d14:	d114      	bne.n	8004d40 <UART_Transmit_IT+0x48>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d110      	bne.n	8004d40 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]
 8004d3e:	e008      	b.n	8004d52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	1c59      	adds	r1, r3, #1
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6211      	str	r1, [r2, #32]
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e000      	b.n	8004d8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
  }
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff fef4 	bl	8004ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b22      	cmp	r3, #34	; 0x22
 8004dd8:	d170      	bne.n	8004ebc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d117      	bne.n	8004e14 <UART_Receive_IT+0x4e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d113      	bne.n	8004e14 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28
 8004e12:	e026      	b.n	8004e62 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d007      	beq.n	8004e38 <UART_Receive_IT+0x72>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <UART_Receive_IT+0x80>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	e008      	b.n	8004e58 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d120      	bne.n	8004eb8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0220 	bic.w	r2, r2, #32
 8004e84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fc80 	bl	80057b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e002      	b.n	8004ebe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f02:	f023 030c 	bic.w	r3, r3, #12
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2c      	ldr	r2, [pc, #176]	; (8004fdc <UART_SetConfig+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d103      	bne.n	8004f38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f30:	f7fe fb34 	bl	800359c <HAL_RCC_GetPCLK2Freq>
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	e002      	b.n	8004f3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f38:	f7fe fb1c 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8004f3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009a      	lsls	r2, r3, #2
 8004f48:	441a      	add	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <UART_SetConfig+0x118>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	0119      	lsls	r1, r3, #4
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009a      	lsls	r2, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f74:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <UART_SetConfig+0x118>)
 8004f76:	fba3 0302 	umull	r0, r3, r3, r2
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2064      	movs	r0, #100	; 0x64
 8004f7e:	fb00 f303 	mul.w	r3, r0, r3
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	3332      	adds	r3, #50	; 0x32
 8004f88:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <UART_SetConfig+0x118>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f94:	4419      	add	r1, r3
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009a      	lsls	r2, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <UART_SetConfig+0x118>)
 8004fae:	fba3 0302 	umull	r0, r3, r3, r2
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2064      	movs	r0, #100	; 0x64
 8004fb6:	fb00 f303 	mul.w	r3, r0, r3
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	; 0x32
 8004fc0:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <UART_SetConfig+0x118>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 020f 	and.w	r2, r3, #15
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40013800 	.word	0x40013800
 8004fe0:	51eb851f 	.word	0x51eb851f

08004fe4 <CCS811_init>:

volatile uint32_t CO2 = 0;
volatile uint32_t TVOC = 0;

void CCS811_init()
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
	_delay_ms(20);
 8004fe8:	2014      	movs	r0, #20
 8004fea:	f003 f8c7 	bl	800817c <_delay_ms>
	CCS811_soft_reset();
 8004fee:	f000 f8b1 	bl	8005154 <CCS811_soft_reset>
	_delay_ms(100);
 8004ff2:	2064      	movs	r0, #100	; 0x64
 8004ff4:	f003 f8c2 	bl	800817c <_delay_ms>
	if(CCS811_read_hardware_ID() == 0x81)
 8004ff8:	f000 f8d1 	bl	800519e <CCS811_read_hardware_ID>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b81      	cmp	r3, #129	; 0x81
 8005000:	d124      	bne.n	800504c <CCS811_init+0x68>
	{
		_delay_ms(50);
 8005002:	2032      	movs	r0, #50	; 0x32
 8005004:	f003 f8ba 	bl	800817c <_delay_ms>
		printf("HW ID OK\n\r");
 8005008:	4813      	ldr	r0, [pc, #76]	; (8005058 <CCS811_init+0x74>)
 800500a:	f003 f9d3 	bl	80083b4 <printf>
		if((CCS811_read_Status() & 0x10) == 0x10)
 800500e:	f000 f87f 	bl	8005110 <CCS811_read_Status>
 8005012:	4603      	mov	r3, r0
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b10      	cmp	r3, #16
 800501a:	d11a      	bne.n	8005052 <CCS811_init+0x6e>
		{
			printf("APP vaild OK\n\r");
 800501c:	480f      	ldr	r0, [pc, #60]	; (800505c <CCS811_init+0x78>)
 800501e:	f003 f9c9 	bl	80083b4 <printf>
			CCS811_bootloader_start();
 8005022:	f000 f8ad 	bl	8005180 <CCS811_bootloader_start>
			_delay_ms(50);
 8005026:	2032      	movs	r0, #50	; 0x32
 8005028:	f003 f8a8 	bl	800817c <_delay_ms>
			if((CCS811_read_Status() & 0x80) == 0x80)
 800502c:	f000 f870 	bl	8005110 <CCS811_read_Status>
 8005030:	4603      	mov	r3, r0
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d10b      	bne.n	8005052 <CCS811_init+0x6e>
			{
				printf("FW OK\n\r");
 800503a:	4809      	ldr	r0, [pc, #36]	; (8005060 <CCS811_init+0x7c>)
 800503c:	f003 f9ba 	bl	80083b4 <printf>
				CCS811_set_Measure_mode();
 8005040:	f000 f812 	bl	8005068 <CCS811_set_Measure_mode>
				_delay_ms(50);
 8005044:	2032      	movs	r0, #50	; 0x32
 8005046:	f003 f899 	bl	800817c <_delay_ms>
	}
	else
	{
		printf("Fail ID\r\n");
	}
}
 800504a:	e002      	b.n	8005052 <CCS811_init+0x6e>
		printf("Fail ID\r\n");
 800504c:	4805      	ldr	r0, [pc, #20]	; (8005064 <CCS811_init+0x80>)
 800504e:	f003 fa11 	bl	8008474 <puts>
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	0800d098 	.word	0x0800d098
 800505c:	0800d0a4 	.word	0x0800d0a4
 8005060:	0800d0b4 	.word	0x0800d0b4
 8005064:	0800d0bc 	.word	0x0800d0bc

08005068 <CCS811_set_Measure_mode>:
	*data_bytes = i2c_1_receive_NACK();
	i2c_1_stop();
}*/

void CCS811_set_Measure_mode()
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	volatile uint8_t data_bytes[2] = {Measure_mode,0x10};
 800506e:	f241 0301 	movw	r3, #4097	; 0x1001
 8005072:	80bb      	strh	r3, [r7, #4]
	i2c_1_start_send_addr_send_data_stop(CCS811_address,data_bytes,2);
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	2202      	movs	r2, #2
 8005078:	4619      	mov	r1, r3
 800507a:	205a      	movs	r0, #90	; 0x5a
 800507c:	f003 f810 	bl	80080a0 <i2c_1_start_send_addr_send_data_stop>
	/*CCS811_start_address_write(CCS811_address);
	CCS811_send_command_and_data(Measure_mode,data_bytes,1);*/
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <CCS811_read_CO2_TVOC>:
	printf("\n\r\n\r measure mode : 0x%X \n\r\n\r", cur_measure_mode[0]);
	return cur_measure_mode[0];
}

void CCS811_read_CO2_TVOC()
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
	volatile uint8_t CO2_data_bytes[2];
	volatile uint8_t TVOC_data_bytes[2];
	volatile uint8_t data_bytes_[1] = {Alg_result_data};
 800508e:	2302      	movs	r3, #2
 8005090:	713b      	strb	r3, [r7, #4]
	volatile uint8_t data_bytes[4] = {0};
 8005092:	2300      	movs	r3, #0
 8005094:	603b      	str	r3, [r7, #0]
	/*CCS811_start_address_write(CCS811_address);
	CCS811_send_command_and_data(Alg_result_data,NULL,0);
	CCS811_start_address_read(CCS811_address);*/
	i2c_1_start_send_addr_send_data_stop(CCS811_address,data_bytes_,1);
 8005096:	1d3b      	adds	r3, r7, #4
 8005098:	2201      	movs	r2, #1
 800509a:	4619      	mov	r1, r3
 800509c:	205a      	movs	r0, #90	; 0x5a
 800509e:	f002 ffff 	bl	80080a0 <i2c_1_start_send_addr_send_data_stop>
	i2c_1_start_receive_addr_receive_data_stop(CCS811_address,data_bytes,4);
 80050a2:	463b      	mov	r3, r7
 80050a4:	2204      	movs	r2, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	205a      	movs	r0, #90	; 0x5a
 80050aa:	f003 f817 	bl	80080dc <i2c_1_start_receive_addr_receive_data_stop>
	CO2_data_bytes[0] = data_bytes[0];
 80050ae:	783b      	ldrb	r3, [r7, #0]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	733b      	strb	r3, [r7, #12]
	CO2_data_bytes[1] = data_bytes[1];
 80050b4:	787b      	ldrb	r3, [r7, #1]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	737b      	strb	r3, [r7, #13]
	TVOC_data_bytes[0] = data_bytes[2];
 80050ba:	78bb      	ldrb	r3, [r7, #2]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	723b      	strb	r3, [r7, #8]
	TVOC_data_bytes[1] = data_bytes[3];
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	727b      	strb	r3, [r7, #9]
	CO2 = (((uint16_t)CO2_data_bytes[0] << 8) | (uint16_t)CO2_data_bytes[1]);
 80050c6:	7b3b      	ldrb	r3, [r7, #12]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	7b7a      	ldrb	r2, [r7, #13]
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	4313      	orrs	r3, r2
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <CCS811_read_CO2_TVOC+0x7c>)
 80050d6:	601a      	str	r2, [r3, #0]
	TVOC = (((uint16_t)TVOC_data_bytes[0] << 8) | (uint16_t)TVOC_data_bytes[1]);
 80050d8:	7a3b      	ldrb	r3, [r7, #8]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	7a7a      	ldrb	r2, [r7, #9]
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	4313      	orrs	r3, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <CCS811_read_CO2_TVOC+0x80>)
 80050e8:	601a      	str	r2, [r3, #0]
	printf("CO2 : %ld, TVOC : %ld\n\r", CO2, TVOC);
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <CCS811_read_CO2_TVOC+0x7c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a06      	ldr	r2, [pc, #24]	; (8005108 <CCS811_read_CO2_TVOC+0x80>)
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	4619      	mov	r1, r3
 80050f4:	4805      	ldr	r0, [pc, #20]	; (800510c <CCS811_read_CO2_TVOC+0x84>)
 80050f6:	f003 f95d 	bl	80083b4 <printf>
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200010b8 	.word	0x200010b8
 8005108:	200010bc 	.word	0x200010bc
 800510c:	0800d0e8 	.word	0x0800d0e8

08005110 <CCS811_read_Status>:

uint8_t CCS811_read_Status()
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
	volatile uint8_t status_data[1] = {0};
 8005116:	2300      	movs	r3, #0
 8005118:	713b      	strb	r3, [r7, #4]
	volatile uint8_t data_bytes[1] = {CCS811_Status};
 800511a:	2300      	movs	r3, #0
 800511c:	703b      	strb	r3, [r7, #0]
	i2c_1_start_send_addr_send_data_stop(CCS811_address,data_bytes,1);
 800511e:	463b      	mov	r3, r7
 8005120:	2201      	movs	r2, #1
 8005122:	4619      	mov	r1, r3
 8005124:	205a      	movs	r0, #90	; 0x5a
 8005126:	f002 ffbb 	bl	80080a0 <i2c_1_start_send_addr_send_data_stop>
	i2c_1_start_receive_addr_receive_data_stop(CCS811_address,status_data,1);
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	2201      	movs	r2, #1
 800512e:	4619      	mov	r1, r3
 8005130:	205a      	movs	r0, #90	; 0x5a
 8005132:	f002 ffd3 	bl	80080dc <i2c_1_start_receive_addr_receive_data_stop>
	/*CCS811_start_address_write(CCS811_address);
	CCS811_send_command_and_data(CCS811_Status,NULL,0);
	CCS811_start_address_read(CCS811_address);
	CCS811_receive_1bytes_data(&status_data);*/
	printf("status : 0x%X\n\r", status_data[0]);
 8005136:	793b      	ldrb	r3, [r7, #4]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	4619      	mov	r1, r3
 800513c:	4804      	ldr	r0, [pc, #16]	; (8005150 <CCS811_read_Status+0x40>)
 800513e:	f003 f939 	bl	80083b4 <printf>
	return status_data[0];
 8005142:	793b      	ldrb	r3, [r7, #4]
 8005144:	b2db      	uxtb	r3, r3
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	0800d100 	.word	0x0800d100

08005154 <CCS811_soft_reset>:
	CCS811_receive_2bytes_data(baseline_bytes);*/
	CCS811_write_baseline(baseline_bytes);
}

void CCS811_soft_reset()
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
	volatile uint8_t soft_reg[5] = {CCS811_SW_reset,0x11,0xE5,0x72,0x8A};
 800515a:	4a08      	ldr	r2, [pc, #32]	; (800517c <CCS811_soft_reset+0x28>)
 800515c:	463b      	mov	r3, r7
 800515e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005162:	6018      	str	r0, [r3, #0]
 8005164:	3304      	adds	r3, #4
 8005166:	7019      	strb	r1, [r3, #0]
	i2c_1_start_send_addr_send_data_stop(CCS811_address,soft_reg,5);
 8005168:	463b      	mov	r3, r7
 800516a:	2205      	movs	r2, #5
 800516c:	4619      	mov	r1, r3
 800516e:	205a      	movs	r0, #90	; 0x5a
 8005170:	f002 ff96 	bl	80080a0 <i2c_1_start_send_addr_send_data_stop>
	/*CCS811_start_address_write(CCS811_address);
	CCS811_send_command_and_data(CCS811_SW_reset,soft_reg,4);*/
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	0800d124 	.word	0x0800d124

08005180 <CCS811_bootloader_start>:

void CCS811_bootloader_start()
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
	volatile uint8_t data_bytes[1] = {CCS811_app_start};
 8005186:	23f4      	movs	r3, #244	; 0xf4
 8005188:	713b      	strb	r3, [r7, #4]
	i2c_1_start_send_addr_send_data_stop(CCS811_address,data_bytes,1);
 800518a:	1d3b      	adds	r3, r7, #4
 800518c:	2201      	movs	r2, #1
 800518e:	4619      	mov	r1, r3
 8005190:	205a      	movs	r0, #90	; 0x5a
 8005192:	f002 ff85 	bl	80080a0 <i2c_1_start_send_addr_send_data_stop>
	/*CCS811_start_address_write(CCS811_address);
	CCS811_send_command_and_data(CCS811_app_start,NULL,0);*/
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <CCS811_read_hardware_ID>:
	/*CCS811_start_address_write(CCS811_address);
	CCS811_send_command_and_data(CCS811_app_verify,verify_data,1);*/
}

uint8_t CCS811_read_hardware_ID()
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
	volatile uint8_t _Hardware_id[1] = {0};
 80051a4:	2300      	movs	r3, #0
 80051a6:	713b      	strb	r3, [r7, #4]
	volatile uint8_t data_bytes[1] = {HW_ID};
 80051a8:	2320      	movs	r3, #32
 80051aa:	703b      	strb	r3, [r7, #0]
	i2c_1_start_send_addr_send_data_stop(CCS811_address,data_bytes,1);
 80051ac:	463b      	mov	r3, r7
 80051ae:	2201      	movs	r2, #1
 80051b0:	4619      	mov	r1, r3
 80051b2:	205a      	movs	r0, #90	; 0x5a
 80051b4:	f002 ff74 	bl	80080a0 <i2c_1_start_send_addr_send_data_stop>
	i2c_1_start_receive_addr_receive_data_stop(CCS811_address,_Hardware_id,1);
 80051b8:	1d3b      	adds	r3, r7, #4
 80051ba:	2201      	movs	r2, #1
 80051bc:	4619      	mov	r1, r3
 80051be:	205a      	movs	r0, #90	; 0x5a
 80051c0:	f002 ff8c 	bl	80080dc <i2c_1_start_receive_addr_receive_data_stop>
	/*CCS811_start_address_write(CCS811_address);
	CCS811_send_command_and_data(HW_ID,NULL,0);
	CCS811_start_address_read(CCS811_address);
	CCS811_receive_1bytes_data(&_Hardware_id);*/
	return _Hardware_id[0];
 80051c4:	793b      	ldrb	r3, [r7, #4]
 80051c6:	b2db      	uxtb	r3, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <ESP8266_init>:

extern volatile uint16_t mili_sec;
extern volatile uint8_t seconds;

uint8_t ESP8266_init()
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
	uint32_t get_timeout = 0xFFFFF*2;
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <ESP8266_init+0x88>)
 80051d8:	607b      	str	r3, [r7, #4]
	command_transmit_index = 0;
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <ESP8266_init+0x8c>)
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
	command_receive_index = 0;
 80051e0:	4b1f      	ldr	r3, [pc, #124]	; (8005260 <ESP8266_init+0x90>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
	if(ESP8266_get_time_init() == Success)
 80051e6:	f000 f9b5 	bl	8005554 <ESP8266_get_time_init>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d116      	bne.n	800521e <ESP8266_init+0x4e>
	{
		esp8266_user_status = Ready_to_receive_time_data;
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <ESP8266_init+0x94>)
 80051f2:	220f      	movs	r2, #15
 80051f4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 80051f6:	2300      	movs	r3, #0
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	e00c      	b.n	8005216 <ESP8266_init+0x46>
		{
			printf("%s",result_receive_string[i]);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2265      	movs	r2, #101	; 0x65
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	4a18      	ldr	r2, [pc, #96]	; (8005268 <ESP8266_init+0x98>)
 8005206:	4413      	add	r3, r2
 8005208:	4619      	mov	r1, r3
 800520a:	4818      	ldr	r0, [pc, #96]	; (800526c <ESP8266_init+0x9c>)
 800520c:	f003 f8d2 	bl	80083b4 <printf>
		for(int i = 0; i < 7; i++)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b06      	cmp	r3, #6
 800521a:	ddef      	ble.n	80051fc <ESP8266_init+0x2c>
 800521c:	e001      	b.n	8005222 <ESP8266_init+0x52>
		}
	}
	else
	{
		return Fail;
 800521e:	2300      	movs	r3, #0
 8005220:	e016      	b.n	8005250 <ESP8266_init+0x80>
	}
	while(get_timeout--);
 8005222:	bf00      	nop
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	1e5a      	subs	r2, r3, #1
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1fa      	bne.n	8005224 <ESP8266_init+0x54>
	if(ESP8266_receive_time() == Success)
 800522e:	f000 f845 	bl	80052bc <ESP8266_receive_time>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d107      	bne.n	8005248 <ESP8266_init+0x78>
	{
		printf("%s", received_time_string[0]);
 8005238:	490d      	ldr	r1, [pc, #52]	; (8005270 <ESP8266_init+0xa0>)
 800523a:	480c      	ldr	r0, [pc, #48]	; (800526c <ESP8266_init+0x9c>)
 800523c:	f003 f8ba 	bl	80083b4 <printf>
	else
	{
		printf("Fail to receive time\n\r");
		return Fail;
	}
	ESP8266_enter_modem_sleep_mode();
 8005240:	f000 f9ee 	bl	8005620 <ESP8266_enter_modem_sleep_mode>
	return Success;
 8005244:	2301      	movs	r3, #1
 8005246:	e003      	b.n	8005250 <ESP8266_init+0x80>
		printf("Fail to receive time\n\r");
 8005248:	480a      	ldr	r0, [pc, #40]	; (8005274 <ESP8266_init+0xa4>)
 800524a:	f003 f8b3 	bl	80083b4 <printf>
		return Fail;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	001ffffe 	.word	0x001ffffe
 800525c:	200010c0 	.word	0x200010c0
 8005260:	200010c1 	.word	0x200010c1
 8005264:	200015bd 	.word	0x200015bd
 8005268:	20001290 	.word	0x20001290
 800526c:	0800d12c 	.word	0x0800d12c
 8005270:	2000148c 	.word	0x2000148c
 8005274:	0800d130 	.word	0x0800d130

08005278 <ESP8266_send_AT_command>:

void ESP8266_send_AT_command(char* command)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; command[i]; i++)
 8005280:	2300      	movs	r3, #0
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e009      	b.n	800529a <ESP8266_send_AT_command+0x22>
  {
    uart_3_transmit(command[i]);
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f003 f80a 	bl	80082a8 <uart_3_transmit>
  for(uint8_t i = 0; command[i]; i++)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	3301      	adds	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4413      	add	r3, r2
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1ef      	bne.n	8005286 <ESP8266_send_AT_command+0xe>
  }
  uart_3_transmit(0x0D);
 80052a6:	200d      	movs	r0, #13
 80052a8:	f002 fffe 	bl	80082a8 <uart_3_transmit>
  uart_3_transmit(0x0A);
 80052ac:	200a      	movs	r0, #10
 80052ae:	f002 fffb 	bl	80082a8 <uart_3_transmit>
  //printf("transmit : %s\n\r", command);
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <ESP8266_receive_time>:

uint8_t ESP8266_receive_time()
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	71fb      	strb	r3, [r7, #7]
	uint32_t get_timeout = 0xFFFFF*3;
 80052c6:	4b87      	ldr	r3, [pc, #540]	; (80054e4 <ESP8266_receive_time+0x228>)
 80052c8:	603b      	str	r3, [r7, #0]
	esp8266_user_status = Ready_to_receive_time_data;
 80052ca:	4b87      	ldr	r3, [pc, #540]	; (80054e8 <ESP8266_receive_time+0x22c>)
 80052cc:	220f      	movs	r2, #15
 80052ce:	701a      	strb	r2, [r3, #0]
	memset(received_time_string[0],0,100);
 80052d0:	2264      	movs	r2, #100	; 0x64
 80052d2:	2100      	movs	r1, #0
 80052d4:	4885      	ldr	r0, [pc, #532]	; (80054ec <ESP8266_receive_time+0x230>)
 80052d6:	f003 f865 	bl	80083a4 <memset>
	receive_time_first_index = 0;
 80052da:	4b85      	ldr	r3, [pc, #532]	; (80054f0 <ESP8266_receive_time+0x234>)
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
	seconds = 0;
 80052e0:	4b84      	ldr	r3, [pc, #528]	; (80054f4 <ESP8266_receive_time+0x238>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
	mili_sec = 0;
 80052e6:	4b84      	ldr	r3, [pc, #528]	; (80054f8 <ESP8266_receive_time+0x23c>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	801a      	strh	r2, [r3, #0]
	while(count != 10)
 80052ec:	e03b      	b.n	8005366 <ESP8266_receive_time+0xaa>
	{
		get_timeout = 0xFFFFF*3;
 80052ee:	4b7d      	ldr	r3, [pc, #500]	; (80054e4 <ESP8266_receive_time+0x228>)
 80052f0:	603b      	str	r3, [r7, #0]
		receive_time_index = 0;
 80052f2:	4b82      	ldr	r3, [pc, #520]	; (80054fc <ESP8266_receive_time+0x240>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
		ESP8266_send_AT_command(send_string[4].str);
 80052f8:	4881      	ldr	r0, [pc, #516]	; (8005500 <ESP8266_receive_time+0x244>)
 80052fa:	f7ff ffbd 	bl	8005278 <ESP8266_send_AT_command>
		while(strstr((const char*)received_time_string[0],"OK") == NULL || strstr((const char*)received_time_string[0],"1970") || strlen((const char*)received_time_string[0]) != 60)
 80052fe:	e005      	b.n	800530c <ESP8266_receive_time+0x50>
		{
			get_timeout--;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	3b01      	subs	r3, #1
 8005304:	603b      	str	r3, [r7, #0]
			if(get_timeout == 0)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d014      	beq.n	8005336 <ESP8266_receive_time+0x7a>
		while(strstr((const char*)received_time_string[0],"OK") == NULL || strstr((const char*)received_time_string[0],"1970") || strlen((const char*)received_time_string[0]) != 60)
 800530c:	497d      	ldr	r1, [pc, #500]	; (8005504 <ESP8266_receive_time+0x248>)
 800530e:	4877      	ldr	r0, [pc, #476]	; (80054ec <ESP8266_receive_time+0x230>)
 8005310:	f003 f970 	bl	80085f4 <strstr>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f2      	beq.n	8005300 <ESP8266_receive_time+0x44>
 800531a:	497b      	ldr	r1, [pc, #492]	; (8005508 <ESP8266_receive_time+0x24c>)
 800531c:	4873      	ldr	r0, [pc, #460]	; (80054ec <ESP8266_receive_time+0x230>)
 800531e:	f003 f969 	bl	80085f4 <strstr>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1eb      	bne.n	8005300 <ESP8266_receive_time+0x44>
 8005328:	4870      	ldr	r0, [pc, #448]	; (80054ec <ESP8266_receive_time+0x230>)
 800532a:	f7fa ff1b 	bl	8000164 <strlen>
 800532e:	4603      	mov	r3, r0
 8005330:	2b3c      	cmp	r3, #60	; 0x3c
 8005332:	d1e5      	bne.n	8005300 <ESP8266_receive_time+0x44>
 8005334:	e000      	b.n	8005338 <ESP8266_receive_time+0x7c>
			{
				break;
 8005336:	bf00      	nop
			}
		}
		if(strstr((const char*)received_time_string[0],"OK") != NULL && strstr((const char*)received_time_string[0],"1970") == NULL && strlen((const char*)received_time_string[0]) == 60)
 8005338:	4972      	ldr	r1, [pc, #456]	; (8005504 <ESP8266_receive_time+0x248>)
 800533a:	486c      	ldr	r0, [pc, #432]	; (80054ec <ESP8266_receive_time+0x230>)
 800533c:	f003 f95a 	bl	80085f4 <strstr>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <ESP8266_receive_time+0xa4>
 8005346:	4970      	ldr	r1, [pc, #448]	; (8005508 <ESP8266_receive_time+0x24c>)
 8005348:	4868      	ldr	r0, [pc, #416]	; (80054ec <ESP8266_receive_time+0x230>)
 800534a:	f003 f953 	bl	80085f4 <strstr>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d105      	bne.n	8005360 <ESP8266_receive_time+0xa4>
 8005354:	4865      	ldr	r0, [pc, #404]	; (80054ec <ESP8266_receive_time+0x230>)
 8005356:	f7fa ff05 	bl	8000164 <strlen>
 800535a:	4603      	mov	r3, r0
 800535c:	2b3c      	cmp	r3, #60	; 0x3c
 800535e:	d005      	beq.n	800536c <ESP8266_receive_time+0xb0>
		{
			break;
		}
		else
		{
			count++;
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	3301      	adds	r3, #1
 8005364:	71fb      	strb	r3, [r7, #7]
	while(count != 10)
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	2b0a      	cmp	r3, #10
 800536a:	d1c0      	bne.n	80052ee <ESP8266_receive_time+0x32>
		}
	}
	first_receive_time_sec = seconds;
 800536c:	4b61      	ldr	r3, [pc, #388]	; (80054f4 <ESP8266_receive_time+0x238>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2da      	uxtb	r2, r3
 8005372:	4b66      	ldr	r3, [pc, #408]	; (800550c <ESP8266_receive_time+0x250>)
 8005374:	701a      	strb	r2, [r3, #0]
	first_receive_time_mili_sec = mili_sec;
 8005376:	4b60      	ldr	r3, [pc, #384]	; (80054f8 <ESP8266_receive_time+0x23c>)
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29a      	uxth	r2, r3
 800537c:	4b64      	ldr	r3, [pc, #400]	; (8005510 <ESP8266_receive_time+0x254>)
 800537e:	801a      	strh	r2, [r3, #0]
	receive_time_first_index++;
 8005380:	4b5b      	ldr	r3, [pc, #364]	; (80054f0 <ESP8266_receive_time+0x234>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	3301      	adds	r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <ESP8266_receive_time+0x234>)
 800538c:	701a      	strb	r2, [r3, #0]
	count = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	71fb      	strb	r3, [r7, #7]
	while(count != 10)
 8005392:	e048      	b.n	8005426 <ESP8266_receive_time+0x16a>
	{
		get_timeout = 0xFFFFF*3;
 8005394:	4b53      	ldr	r3, [pc, #332]	; (80054e4 <ESP8266_receive_time+0x228>)
 8005396:	603b      	str	r3, [r7, #0]
		memset(received_time_string[1],0,100);
 8005398:	2264      	movs	r2, #100	; 0x64
 800539a:	2100      	movs	r1, #0
 800539c:	485d      	ldr	r0, [pc, #372]	; (8005514 <ESP8266_receive_time+0x258>)
 800539e:	f003 f801 	bl	80083a4 <memset>
		receive_time_index = 0;
 80053a2:	4b56      	ldr	r3, [pc, #344]	; (80054fc <ESP8266_receive_time+0x240>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
		ESP8266_send_AT_command(send_string[4].str);
 80053a8:	4855      	ldr	r0, [pc, #340]	; (8005500 <ESP8266_receive_time+0x244>)
 80053aa:	f7ff ff65 	bl	8005278 <ESP8266_send_AT_command>
		while(strstr((const char*)received_time_string[1],"OK") == NULL || strstr((const char*)received_time_string[1],"1970") || strlen((const char*)received_time_string[1]) != 60)
 80053ae:	e005      	b.n	80053bc <ESP8266_receive_time+0x100>
		{
			get_timeout--;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	603b      	str	r3, [r7, #0]
			if(get_timeout == 0)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d014      	beq.n	80053e6 <ESP8266_receive_time+0x12a>
		while(strstr((const char*)received_time_string[1],"OK") == NULL || strstr((const char*)received_time_string[1],"1970") || strlen((const char*)received_time_string[1]) != 60)
 80053bc:	4951      	ldr	r1, [pc, #324]	; (8005504 <ESP8266_receive_time+0x248>)
 80053be:	4855      	ldr	r0, [pc, #340]	; (8005514 <ESP8266_receive_time+0x258>)
 80053c0:	f003 f918 	bl	80085f4 <strstr>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f2      	beq.n	80053b0 <ESP8266_receive_time+0xf4>
 80053ca:	494f      	ldr	r1, [pc, #316]	; (8005508 <ESP8266_receive_time+0x24c>)
 80053cc:	4851      	ldr	r0, [pc, #324]	; (8005514 <ESP8266_receive_time+0x258>)
 80053ce:	f003 f911 	bl	80085f4 <strstr>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1eb      	bne.n	80053b0 <ESP8266_receive_time+0xf4>
 80053d8:	484e      	ldr	r0, [pc, #312]	; (8005514 <ESP8266_receive_time+0x258>)
 80053da:	f7fa fec3 	bl	8000164 <strlen>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b3c      	cmp	r3, #60	; 0x3c
 80053e2:	d1e5      	bne.n	80053b0 <ESP8266_receive_time+0xf4>
 80053e4:	e000      	b.n	80053e8 <ESP8266_receive_time+0x12c>
			{
				break;
 80053e6:	bf00      	nop
			}
		}
		if(strstr((const char*)received_time_string[1],"OK") != NULL && strstr((const char*)received_time_string[1],"1970") == NULL && strlen((const char*)received_time_string[1]) == 60)
 80053e8:	4946      	ldr	r1, [pc, #280]	; (8005504 <ESP8266_receive_time+0x248>)
 80053ea:	484a      	ldr	r0, [pc, #296]	; (8005514 <ESP8266_receive_time+0x258>)
 80053ec:	f003 f902 	bl	80085f4 <strstr>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d014      	beq.n	8005420 <ESP8266_receive_time+0x164>
 80053f6:	4944      	ldr	r1, [pc, #272]	; (8005508 <ESP8266_receive_time+0x24c>)
 80053f8:	4846      	ldr	r0, [pc, #280]	; (8005514 <ESP8266_receive_time+0x258>)
 80053fa:	f003 f8fb 	bl	80085f4 <strstr>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <ESP8266_receive_time+0x164>
 8005404:	4843      	ldr	r0, [pc, #268]	; (8005514 <ESP8266_receive_time+0x258>)
 8005406:	f7fa fead 	bl	8000164 <strlen>
 800540a:	4603      	mov	r3, r0
 800540c:	2b3c      	cmp	r3, #60	; 0x3c
 800540e:	d107      	bne.n	8005420 <ESP8266_receive_time+0x164>
		{
			if(strcmp((const char*)received_time_string[0],(const char*)received_time_string[1]) == 0)
 8005410:	4940      	ldr	r1, [pc, #256]	; (8005514 <ESP8266_receive_time+0x258>)
 8005412:	4836      	ldr	r0, [pc, #216]	; (80054ec <ESP8266_receive_time+0x230>)
 8005414:	f7fa fe9c 	bl	8000150 <strcmp>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d107      	bne.n	800542e <ESP8266_receive_time+0x172>
			{
				continue;
 800541e:	e002      	b.n	8005426 <ESP8266_receive_time+0x16a>
				break;
			}
		}
		else
		{
			count++;
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	3301      	adds	r3, #1
 8005424:	71fb      	strb	r3, [r7, #7]
	while(count != 10)
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	2b0a      	cmp	r3, #10
 800542a:	d1b3      	bne.n	8005394 <ESP8266_receive_time+0xd8>
 800542c:	e000      	b.n	8005430 <ESP8266_receive_time+0x174>
				break;
 800542e:	bf00      	nop
		}
	}
	second_receive_time_sec = seconds;
 8005430:	4b30      	ldr	r3, [pc, #192]	; (80054f4 <ESP8266_receive_time+0x238>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	4b38      	ldr	r3, [pc, #224]	; (8005518 <ESP8266_receive_time+0x25c>)
 8005438:	701a      	strb	r2, [r3, #0]
	second_receive_time_mili_sec = mili_sec;
 800543a:	4b2f      	ldr	r3, [pc, #188]	; (80054f8 <ESP8266_receive_time+0x23c>)
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29a      	uxth	r2, r3
 8005440:	4b36      	ldr	r3, [pc, #216]	; (800551c <ESP8266_receive_time+0x260>)
 8005442:	801a      	strh	r2, [r3, #0]
	if(count == 10)
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	2b0a      	cmp	r3, #10
 8005448:	d102      	bne.n	8005450 <ESP8266_receive_time+0x194>
	{
		esp8266_user_status = Fail;
 800544a:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <ESP8266_receive_time+0x22c>)
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
	}
	if(esp8266_user_status != Fail)
 8005450:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <ESP8266_receive_time+0x22c>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02e      	beq.n	80054b8 <ESP8266_receive_time+0x1fc>
	{
		receive_time_diff = (((uint16_t)second_receive_time_sec * 1000) + second_receive_time_mili_sec) - (((uint16_t)first_receive_time_sec * 1000) + first_receive_time_mili_sec);
 800545a:	4b2f      	ldr	r3, [pc, #188]	; (8005518 <ESP8266_receive_time+0x25c>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	b29b      	uxth	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	0152      	lsls	r2, r2, #5
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	0092      	lsls	r2, r2, #2
 800546a:	4413      	add	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	b29a      	uxth	r2, r3
 8005470:	4b2a      	ldr	r3, [pc, #168]	; (800551c <ESP8266_receive_time+0x260>)
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	4413      	add	r3, r2
 8005478:	b29a      	uxth	r2, r3
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <ESP8266_receive_time+0x250>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	b29b      	uxth	r3, r3
 8005482:	4619      	mov	r1, r3
 8005484:	0149      	lsls	r1, r1, #5
 8005486:	1ac9      	subs	r1, r1, r3
 8005488:	0089      	lsls	r1, r1, #2
 800548a:	440b      	add	r3, r1
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	b299      	uxth	r1, r3
 8005490:	4b1f      	ldr	r3, [pc, #124]	; (8005510 <ESP8266_receive_time+0x254>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	440b      	add	r3, r1
 8005498:	b29b      	uxth	r3, r3
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	b29a      	uxth	r2, r3
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <ESP8266_receive_time+0x264>)
 80054a0:	801a      	strh	r2, [r3, #0]
		mili_sec = receive_time_diff;
 80054a2:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <ESP8266_receive_time+0x264>)
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <ESP8266_receive_time+0x23c>)
 80054aa:	801a      	strh	r2, [r3, #0]
		seconds = 0;
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <ESP8266_receive_time+0x238>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
		esp8266_user_status = Success;
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <ESP8266_receive_time+0x22c>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
	}
	printf("%s", received_time_string[0]);
 80054b8:	490c      	ldr	r1, [pc, #48]	; (80054ec <ESP8266_receive_time+0x230>)
 80054ba:	481a      	ldr	r0, [pc, #104]	; (8005524 <ESP8266_receive_time+0x268>)
 80054bc:	f002 ff7a 	bl	80083b4 <printf>
	printf("%s", received_time_string[1]);
 80054c0:	4914      	ldr	r1, [pc, #80]	; (8005514 <ESP8266_receive_time+0x258>)
 80054c2:	4818      	ldr	r0, [pc, #96]	; (8005524 <ESP8266_receive_time+0x268>)
 80054c4:	f002 ff76 	bl	80083b4 <printf>
	printf("difftime : %ld\n\r", receive_time_diff);
 80054c8:	4b15      	ldr	r3, [pc, #84]	; (8005520 <ESP8266_receive_time+0x264>)
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	4619      	mov	r1, r3
 80054d0:	4815      	ldr	r0, [pc, #84]	; (8005528 <ESP8266_receive_time+0x26c>)
 80054d2:	f002 ff6f 	bl	80083b4 <printf>
	return esp8266_user_status;
 80054d6:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <ESP8266_receive_time+0x22c>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	b2db      	uxtb	r3, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	002ffffd 	.word	0x002ffffd
 80054e8:	200015bd 	.word	0x200015bd
 80054ec:	2000148c 	.word	0x2000148c
 80054f0:	200010c2 	.word	0x200010c2
 80054f4:	200010d2 	.word	0x200010d2
 80054f8:	200010d4 	.word	0x200010d4
 80054fc:	200010c3 	.word	0x200010c3
 8005500:	200000d4 	.word	0x200000d4
 8005504:	0800d148 	.word	0x0800d148
 8005508:	0800d14c 	.word	0x0800d14c
 800550c:	200010c8 	.word	0x200010c8
 8005510:	200010c6 	.word	0x200010c6
 8005514:	200014f1 	.word	0x200014f1
 8005518:	200010cc 	.word	0x200010cc
 800551c:	200010ca 	.word	0x200010ca
 8005520:	200010ce 	.word	0x200010ce
 8005524:	0800d12c 	.word	0x0800d12c
 8005528:	0800d154 	.word	0x0800d154

0800552c <ESP8266_check_receive_data>:

uint8_t ESP8266_check_receive_data(volatile char* data)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	if(strstr((const char*)data,"OK"))
 8005534:	4906      	ldr	r1, [pc, #24]	; (8005550 <ESP8266_check_receive_data+0x24>)
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f003 f85c 	bl	80085f4 <strstr>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <ESP8266_check_receive_data+0x1a>
	{
		return Success;
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <ESP8266_check_receive_data+0x1c>
	}
	else
	{
		return Fail;
 8005546:	2300      	movs	r3, #0
	}
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	0800d148 	.word	0x0800d148

08005554 <ESP8266_get_time_init>:

uint8_t ESP8266_get_time_init()
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
	uint32_t get_timeout;
	uint8_t count = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	70fb      	strb	r3, [r7, #3]
	while(command_transmit_index < 5)
 800555e:	e048      	b.n	80055f2 <ESP8266_get_time_init+0x9e>
	{
		get_timeout = 0xFFFFF*3;
 8005560:	4b29      	ldr	r3, [pc, #164]	; (8005608 <ESP8266_get_time_init+0xb4>)
 8005562:	607b      	str	r3, [r7, #4]
		command_receive_index = 0;
 8005564:	4b29      	ldr	r3, [pc, #164]	; (800560c <ESP8266_get_time_init+0xb8>)
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
		ESP8266_send_AT_command(send_string[command_transmit_index].str);
 800556a:	4b29      	ldr	r3, [pc, #164]	; (8005610 <ESP8266_get_time_init+0xbc>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	2332      	movs	r3, #50	; 0x32
 8005574:	fb03 f302 	mul.w	r3, r3, r2
 8005578:	4a26      	ldr	r2, [pc, #152]	; (8005614 <ESP8266_get_time_init+0xc0>)
 800557a:	4413      	add	r3, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fe7b 	bl	8005278 <ESP8266_send_AT_command>
		while(ESP8266_check_receive_data(result_receive_string[command_transmit_index]) == Fail)
 8005582:	e009      	b.n	8005598 <ESP8266_get_time_init+0x44>
		{
			get_timeout--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3b01      	subs	r3, #1
 8005588:	607b      	str	r3, [r7, #4]
			if(get_timeout == 0)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <ESP8266_get_time_init+0x44>
			{
				count++;
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	3301      	adds	r3, #1
 8005594:	70fb      	strb	r3, [r7, #3]
				break;
 8005596:	e00e      	b.n	80055b6 <ESP8266_get_time_init+0x62>
		while(ESP8266_check_receive_data(result_receive_string[command_transmit_index]) == Fail)
 8005598:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <ESP8266_get_time_init+0xbc>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	2365      	movs	r3, #101	; 0x65
 80055a2:	fb03 f302 	mul.w	r3, r3, r2
 80055a6:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <ESP8266_get_time_init+0xc4>)
 80055a8:	4413      	add	r3, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ffbe 	bl	800552c <ESP8266_check_receive_data>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0e6      	beq.n	8005584 <ESP8266_get_time_init+0x30>
			}
		}
		if(ESP8266_check_receive_data(result_receive_string[command_transmit_index]) == Success)
 80055b6:	4b16      	ldr	r3, [pc, #88]	; (8005610 <ESP8266_get_time_init+0xbc>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	2365      	movs	r3, #101	; 0x65
 80055c0:	fb03 f302 	mul.w	r3, r3, r2
 80055c4:	4a14      	ldr	r2, [pc, #80]	; (8005618 <ESP8266_get_time_init+0xc4>)
 80055c6:	4413      	add	r3, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff ffaf 	bl	800552c <ESP8266_check_receive_data>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d106      	bne.n	80055e2 <ESP8266_get_time_init+0x8e>
		{
			command_transmit_index++;
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <ESP8266_get_time_init+0xbc>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	3301      	adds	r3, #1
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <ESP8266_get_time_init+0xbc>)
 80055e0:	701a      	strb	r2, [r3, #0]
		}
		if(count == 20)
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	2b14      	cmp	r3, #20
 80055e6:	d104      	bne.n	80055f2 <ESP8266_get_time_init+0x9e>
		{
			printf("ESP8266 init Fail\n\r");
 80055e8:	480c      	ldr	r0, [pc, #48]	; (800561c <ESP8266_get_time_init+0xc8>)
 80055ea:	f002 fee3 	bl	80083b4 <printf>
			return Fail;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e005      	b.n	80055fe <ESP8266_get_time_init+0xaa>
	while(command_transmit_index < 5)
 80055f2:	4b07      	ldr	r3, [pc, #28]	; (8005610 <ESP8266_get_time_init+0xbc>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d9b1      	bls.n	8005560 <ESP8266_get_time_init+0xc>
		}
	}
	return Success;
 80055fc:	2301      	movs	r3, #1
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	002ffffd 	.word	0x002ffffd
 800560c:	200010c1 	.word	0x200010c1
 8005610:	200010c0 	.word	0x200010c0
 8005614:	2000000c 	.word	0x2000000c
 8005618:	20001290 	.word	0x20001290
 800561c:	0800d168 	.word	0x0800d168

08005620 <ESP8266_enter_modem_sleep_mode>:

uint8_t ESP8266_enter_modem_sleep_mode()
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
	uint32_t get_timeout;
	uint8_t count = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	70fb      	strb	r3, [r7, #3]
	esp8266_user_status = Change_sleep_mode;
 800562a:	4b29      	ldr	r3, [pc, #164]	; (80056d0 <ESP8266_enter_modem_sleep_mode+0xb0>)
 800562c:	220e      	movs	r2, #14
 800562e:	701a      	strb	r2, [r3, #0]
	memset(receive_sleep_mode_string[0],0,100);
 8005630:	2264      	movs	r2, #100	; 0x64
 8005632:	2100      	movs	r1, #0
 8005634:	4827      	ldr	r0, [pc, #156]	; (80056d4 <ESP8266_enter_modem_sleep_mode+0xb4>)
 8005636:	f002 feb5 	bl	80083a4 <memset>
	while(count != 10)
 800563a:	e037      	b.n	80056ac <ESP8266_enter_modem_sleep_mode+0x8c>
	{
		get_timeout = 0xFFFFF*2;
 800563c:	4b26      	ldr	r3, [pc, #152]	; (80056d8 <ESP8266_enter_modem_sleep_mode+0xb8>)
 800563e:	607b      	str	r3, [r7, #4]
		sleep_mode_index = 0;
 8005640:	4b26      	ldr	r3, [pc, #152]	; (80056dc <ESP8266_enter_modem_sleep_mode+0xbc>)
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
		ESP8266_send_AT_command("AT+SLEEP=2");
 8005646:	4826      	ldr	r0, [pc, #152]	; (80056e0 <ESP8266_enter_modem_sleep_mode+0xc0>)
 8005648:	f7ff fe16 	bl	8005278 <ESP8266_send_AT_command>
		while(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Fail || strstr(receive_sleep_mode_string[0],"AT+SLEEP=2") == NULL)
 800564c:	e009      	b.n	8005662 <ESP8266_enter_modem_sleep_mode+0x42>
		{
			get_timeout--;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3b01      	subs	r3, #1
 8005652:	607b      	str	r3, [r7, #4]
			if(get_timeout == 0)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <ESP8266_enter_modem_sleep_mode+0x42>
			{
				count++;
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	3301      	adds	r3, #1
 800565e:	70fb      	strb	r3, [r7, #3]
				break;
 8005660:	e00c      	b.n	800567c <ESP8266_enter_modem_sleep_mode+0x5c>
		while(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Fail || strstr(receive_sleep_mode_string[0],"AT+SLEEP=2") == NULL)
 8005662:	481c      	ldr	r0, [pc, #112]	; (80056d4 <ESP8266_enter_modem_sleep_mode+0xb4>)
 8005664:	f7ff ff62 	bl	800552c <ESP8266_check_receive_data>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0ef      	beq.n	800564e <ESP8266_enter_modem_sleep_mode+0x2e>
 800566e:	491c      	ldr	r1, [pc, #112]	; (80056e0 <ESP8266_enter_modem_sleep_mode+0xc0>)
 8005670:	4818      	ldr	r0, [pc, #96]	; (80056d4 <ESP8266_enter_modem_sleep_mode+0xb4>)
 8005672:	f002 ffbf 	bl	80085f4 <strstr>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0e8      	beq.n	800564e <ESP8266_enter_modem_sleep_mode+0x2e>
			}
		}
		if(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Success && strstr(receive_sleep_mode_string[0],"AT+SLEEP=2"))
 800567c:	4815      	ldr	r0, [pc, #84]	; (80056d4 <ESP8266_enter_modem_sleep_mode+0xb4>)
 800567e:	f7ff ff55 	bl	800552c <ESP8266_check_receive_data>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d10a      	bne.n	800569e <ESP8266_enter_modem_sleep_mode+0x7e>
 8005688:	4915      	ldr	r1, [pc, #84]	; (80056e0 <ESP8266_enter_modem_sleep_mode+0xc0>)
 800568a:	4812      	ldr	r0, [pc, #72]	; (80056d4 <ESP8266_enter_modem_sleep_mode+0xb4>)
 800568c:	f002 ffb2 	bl	80085f4 <strstr>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <ESP8266_enter_modem_sleep_mode+0x7e>
		{
			esp8266_user_status = Success;
 8005696:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <ESP8266_enter_modem_sleep_mode+0xb0>)
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
			break;
 800569c:	e009      	b.n	80056b2 <ESP8266_enter_modem_sleep_mode+0x92>
		}
		if(count == 10)
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	2b0a      	cmp	r3, #10
 80056a2:	d103      	bne.n	80056ac <ESP8266_enter_modem_sleep_mode+0x8c>
		{
			esp8266_user_status = Fail;
 80056a4:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <ESP8266_enter_modem_sleep_mode+0xb0>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
			break;
 80056aa:	e002      	b.n	80056b2 <ESP8266_enter_modem_sleep_mode+0x92>
	while(count != 10)
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	2b0a      	cmp	r3, #10
 80056b0:	d1c4      	bne.n	800563c <ESP8266_enter_modem_sleep_mode+0x1c>
		}
	}
	printf("sleep mode status : ");
 80056b2:	480c      	ldr	r0, [pc, #48]	; (80056e4 <ESP8266_enter_modem_sleep_mode+0xc4>)
 80056b4:	f002 fe7e 	bl	80083b4 <printf>
	printf("%s", receive_sleep_mode_string[0]);
 80056b8:	4906      	ldr	r1, [pc, #24]	; (80056d4 <ESP8266_enter_modem_sleep_mode+0xb4>)
 80056ba:	480b      	ldr	r0, [pc, #44]	; (80056e8 <ESP8266_enter_modem_sleep_mode+0xc8>)
 80056bc:	f002 fe7a 	bl	80083b4 <printf>
	return esp8266_user_status;
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <ESP8266_enter_modem_sleep_mode+0xb0>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	b2db      	uxtb	r3, r3
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200015bd 	.word	0x200015bd
 80056d4:	20001558 	.word	0x20001558
 80056d8:	001ffffe 	.word	0x001ffffe
 80056dc:	200010c4 	.word	0x200010c4
 80056e0:	0800d17c 	.word	0x0800d17c
 80056e4:	0800d188 	.word	0x0800d188
 80056e8:	0800d12c 	.word	0x0800d12c

080056ec <ESP8266_leave_modem_sleep_mode>:
uint8_t ESP8266_leave_modem_sleep_mode()
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
  uint32_t get_timeout;
  uint8_t count = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	70fb      	strb	r3, [r7, #3]
  esp8266_user_status = Change_sleep_mode;
 80056f6:	4b28      	ldr	r3, [pc, #160]	; (8005798 <ESP8266_leave_modem_sleep_mode+0xac>)
 80056f8:	220e      	movs	r2, #14
 80056fa:	701a      	strb	r2, [r3, #0]
  memset(receive_sleep_mode_string[0],0,100);
 80056fc:	2264      	movs	r2, #100	; 0x64
 80056fe:	2100      	movs	r1, #0
 8005700:	4826      	ldr	r0, [pc, #152]	; (800579c <ESP8266_leave_modem_sleep_mode+0xb0>)
 8005702:	f002 fe4f 	bl	80083a4 <memset>
  while(count != 10)
 8005706:	e035      	b.n	8005774 <ESP8266_leave_modem_sleep_mode+0x88>
  {
    get_timeout = 0xFFFFF*2;
 8005708:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <ESP8266_leave_modem_sleep_mode+0xb4>)
 800570a:	607b      	str	r3, [r7, #4]
    sleep_mode_index = 0;
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <ESP8266_leave_modem_sleep_mode+0xb8>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
    ESP8266_send_AT_command("AT+SLEEP=0");
 8005712:	4825      	ldr	r0, [pc, #148]	; (80057a8 <ESP8266_leave_modem_sleep_mode+0xbc>)
 8005714:	f7ff fdb0 	bl	8005278 <ESP8266_send_AT_command>
    while(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Fail || strstr(receive_sleep_mode_string[0],"AT+SLEEP=0") == NULL)
 8005718:	e005      	b.n	8005726 <ESP8266_leave_modem_sleep_mode+0x3a>
    {
		get_timeout--;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3b01      	subs	r3, #1
 800571e:	607b      	str	r3, [r7, #4]
		if(get_timeout == 0)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <ESP8266_leave_modem_sleep_mode+0x56>
    while(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Fail || strstr(receive_sleep_mode_string[0],"AT+SLEEP=0") == NULL)
 8005726:	481d      	ldr	r0, [pc, #116]	; (800579c <ESP8266_leave_modem_sleep_mode+0xb0>)
 8005728:	f7ff ff00 	bl	800552c <ESP8266_check_receive_data>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f3      	beq.n	800571a <ESP8266_leave_modem_sleep_mode+0x2e>
 8005732:	491d      	ldr	r1, [pc, #116]	; (80057a8 <ESP8266_leave_modem_sleep_mode+0xbc>)
 8005734:	4819      	ldr	r0, [pc, #100]	; (800579c <ESP8266_leave_modem_sleep_mode+0xb0>)
 8005736:	f002 ff5d 	bl	80085f4 <strstr>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0ec      	beq.n	800571a <ESP8266_leave_modem_sleep_mode+0x2e>
 8005740:	e000      	b.n	8005744 <ESP8266_leave_modem_sleep_mode+0x58>
		{
			   break;
 8005742:	bf00      	nop
		}
    }
    if(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Success && strstr(receive_sleep_mode_string[0],"AT+SLEEP=0"))
 8005744:	4815      	ldr	r0, [pc, #84]	; (800579c <ESP8266_leave_modem_sleep_mode+0xb0>)
 8005746:	f7ff fef1 	bl	800552c <ESP8266_check_receive_data>
 800574a:	4603      	mov	r3, r0
 800574c:	2b01      	cmp	r3, #1
 800574e:	d10a      	bne.n	8005766 <ESP8266_leave_modem_sleep_mode+0x7a>
 8005750:	4915      	ldr	r1, [pc, #84]	; (80057a8 <ESP8266_leave_modem_sleep_mode+0xbc>)
 8005752:	4812      	ldr	r0, [pc, #72]	; (800579c <ESP8266_leave_modem_sleep_mode+0xb0>)
 8005754:	f002 ff4e 	bl	80085f4 <strstr>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <ESP8266_leave_modem_sleep_mode+0x7a>
    {
		esp8266_user_status = Success;
 800575e:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <ESP8266_leave_modem_sleep_mode+0xac>)
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
		break;
 8005764:	e009      	b.n	800577a <ESP8266_leave_modem_sleep_mode+0x8e>
	}
    if(count == 10)
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	2b0a      	cmp	r3, #10
 800576a:	d103      	bne.n	8005774 <ESP8266_leave_modem_sleep_mode+0x88>
    {
      esp8266_user_status = Fail;
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <ESP8266_leave_modem_sleep_mode+0xac>)
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]
      break;
 8005772:	e002      	b.n	800577a <ESP8266_leave_modem_sleep_mode+0x8e>
  while(count != 10)
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	2b0a      	cmp	r3, #10
 8005778:	d1c6      	bne.n	8005708 <ESP8266_leave_modem_sleep_mode+0x1c>
    }
  }
  printf("sleep mode status : ");
 800577a:	480c      	ldr	r0, [pc, #48]	; (80057ac <ESP8266_leave_modem_sleep_mode+0xc0>)
 800577c:	f002 fe1a 	bl	80083b4 <printf>
  printf("%s", receive_sleep_mode_string[0]);
 8005780:	4906      	ldr	r1, [pc, #24]	; (800579c <ESP8266_leave_modem_sleep_mode+0xb0>)
 8005782:	480b      	ldr	r0, [pc, #44]	; (80057b0 <ESP8266_leave_modem_sleep_mode+0xc4>)
 8005784:	f002 fe16 	bl	80083b4 <printf>
  return esp8266_user_status;
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <ESP8266_leave_modem_sleep_mode+0xac>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	b2db      	uxtb	r3, r3
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	200015bd 	.word	0x200015bd
 800579c:	20001558 	.word	0x20001558
 80057a0:	001ffffe 	.word	0x001ffffe
 80057a4:	200010c4 	.word	0x200010c4
 80057a8:	0800d1a0 	.word	0x0800d1a0
 80057ac:	0800d188 	.word	0x0800d188
 80057b0:	0800d12c 	.word	0x0800d12c

080057b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b4:	b5b0      	push	{r4, r5, r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  if(command_transmit_index >= 0 && command_transmit_index < 5)
 80057bc:	4b41      	ldr	r3, [pc, #260]	; (80058c4 <HAL_UART_RxCpltCallback+0x110>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	4b40      	ldr	r3, [pc, #256]	; (80058c4 <HAL_UART_RxCpltCallback+0x110>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d828      	bhi.n	800581c <HAL_UART_RxCpltCallback+0x68>
  {
    result_receive_string[command_transmit_index][command_receive_index++] = uart_3_receive();
 80057ca:	4b3e      	ldr	r3, [pc, #248]	; (80058c4 <HAL_UART_RxCpltCallback+0x110>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461d      	mov	r5, r3
 80057d2:	4b3d      	ldr	r3, [pc, #244]	; (80058c8 <HAL_UART_RxCpltCallback+0x114>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	b2d1      	uxtb	r1, r2
 80057dc:	4a3a      	ldr	r2, [pc, #232]	; (80058c8 <HAL_UART_RxCpltCallback+0x114>)
 80057de:	7011      	strb	r1, [r2, #0]
 80057e0:	461c      	mov	r4, r3
 80057e2:	f002 fd7f 	bl	80082e4 <uart_3_receive>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4619      	mov	r1, r3
 80057ea:	4a38      	ldr	r2, [pc, #224]	; (80058cc <HAL_UART_RxCpltCallback+0x118>)
 80057ec:	2365      	movs	r3, #101	; 0x65
 80057ee:	fb03 f305 	mul.w	r3, r3, r5
 80057f2:	4413      	add	r3, r2
 80057f4:	4423      	add	r3, r4
 80057f6:	460a      	mov	r2, r1
 80057f8:	701a      	strb	r2, [r3, #0]
    result_receive_string[command_transmit_index][command_receive_index] = '\0';
 80057fa:	4b32      	ldr	r3, [pc, #200]	; (80058c4 <HAL_UART_RxCpltCallback+0x110>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	4618      	mov	r0, r3
 8005802:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <HAL_UART_RxCpltCallback+0x114>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	4a30      	ldr	r2, [pc, #192]	; (80058cc <HAL_UART_RxCpltCallback+0x118>)
 800580c:	2365      	movs	r3, #101	; 0x65
 800580e:	fb03 f300 	mul.w	r3, r3, r0
 8005812:	4413      	add	r3, r2
 8005814:	440b      	add	r3, r1
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    printf("%c",uart_3_receive());
  }
}
 800581a:	e04e      	b.n	80058ba <HAL_UART_RxCpltCallback+0x106>
  else if(esp8266_user_status == Ready_to_receive_time_data)
 800581c:	4b2c      	ldr	r3, [pc, #176]	; (80058d0 <HAL_UART_RxCpltCallback+0x11c>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d128      	bne.n	8005878 <HAL_UART_RxCpltCallback+0xc4>
    received_time_string[receive_time_first_index][receive_time_index++] = uart_3_receive();
 8005826:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <HAL_UART_RxCpltCallback+0x120>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461d      	mov	r5, r3
 800582e:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <HAL_UART_RxCpltCallback+0x124>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	b2d1      	uxtb	r1, r2
 8005838:	4a27      	ldr	r2, [pc, #156]	; (80058d8 <HAL_UART_RxCpltCallback+0x124>)
 800583a:	7011      	strb	r1, [r2, #0]
 800583c:	461c      	mov	r4, r3
 800583e:	f002 fd51 	bl	80082e4 <uart_3_receive>
 8005842:	4603      	mov	r3, r0
 8005844:	4619      	mov	r1, r3
 8005846:	4a25      	ldr	r2, [pc, #148]	; (80058dc <HAL_UART_RxCpltCallback+0x128>)
 8005848:	2365      	movs	r3, #101	; 0x65
 800584a:	fb03 f305 	mul.w	r3, r3, r5
 800584e:	4413      	add	r3, r2
 8005850:	4423      	add	r3, r4
 8005852:	460a      	mov	r2, r1
 8005854:	701a      	strb	r2, [r3, #0]
    received_time_string[receive_time_first_index][receive_time_index] = '\0';
 8005856:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <HAL_UART_RxCpltCallback+0x120>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	4618      	mov	r0, r3
 800585e:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <HAL_UART_RxCpltCallback+0x124>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	4619      	mov	r1, r3
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_UART_RxCpltCallback+0x128>)
 8005868:	2365      	movs	r3, #101	; 0x65
 800586a:	fb03 f300 	mul.w	r3, r3, r0
 800586e:	4413      	add	r3, r2
 8005870:	440b      	add	r3, r1
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
}
 8005876:	e020      	b.n	80058ba <HAL_UART_RxCpltCallback+0x106>
  else if(esp8266_user_status == Change_sleep_mode)
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_UART_RxCpltCallback+0x11c>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b0e      	cmp	r3, #14
 8005880:	d115      	bne.n	80058ae <HAL_UART_RxCpltCallback+0xfa>
    receive_sleep_mode_string[0][sleep_mode_index++] = uart_3_receive();
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <HAL_UART_RxCpltCallback+0x12c>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	b2d1      	uxtb	r1, r2
 800588c:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <HAL_UART_RxCpltCallback+0x12c>)
 800588e:	7011      	strb	r1, [r2, #0]
 8005890:	461c      	mov	r4, r3
 8005892:	f002 fd27 	bl	80082e4 <uart_3_receive>
 8005896:	4603      	mov	r3, r0
 8005898:	461a      	mov	r2, r3
 800589a:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <HAL_UART_RxCpltCallback+0x130>)
 800589c:	551a      	strb	r2, [r3, r4]
    receive_sleep_mode_string[0][sleep_mode_index] = '\0';
 800589e:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <HAL_UART_RxCpltCallback+0x12c>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <HAL_UART_RxCpltCallback+0x130>)
 80058a8:	2100      	movs	r1, #0
 80058aa:	5499      	strb	r1, [r3, r2]
}
 80058ac:	e005      	b.n	80058ba <HAL_UART_RxCpltCallback+0x106>
    printf("%c",uart_3_receive());
 80058ae:	f002 fd19 	bl	80082e4 <uart_3_receive>
 80058b2:	4603      	mov	r3, r0
 80058b4:	4618      	mov	r0, r3
 80058b6:	f002 fd8f 	bl	80083d8 <putchar>
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bdb0      	pop	{r4, r5, r7, pc}
 80058c2:	bf00      	nop
 80058c4:	200010c0 	.word	0x200010c0
 80058c8:	200010c1 	.word	0x200010c1
 80058cc:	20001290 	.word	0x20001290
 80058d0:	200015bd 	.word	0x200015bd
 80058d4:	200010c2 	.word	0x200010c2
 80058d8:	200010c3 	.word	0x200010c3
 80058dc:	2000148c 	.word	0x2000148c
 80058e0:	200010c4 	.word	0x200010c4
 80058e4:	20001558 	.word	0x20001558

080058e8 <HAL_TIM_PeriodElapsedCallback>:

extern volatile uint32_t temperature;
extern volatile uint32_t humidity;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	mili_sec++;
 80058f0:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3301      	adds	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	4b3f      	ldr	r3, [pc, #252]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80058fc:	801a      	strh	r2, [r3, #0]
	if(mili_sec >= 1000)
 80058fe:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005908:	d315      	bcc.n	8005936 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		seconds++;
 800590a:	4b3c      	ldr	r3, [pc, #240]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	3301      	adds	r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b39      	ldr	r3, [pc, #228]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005916:	701a      	strb	r2, [r3, #0]
		mili_sec %= 1000;
 8005918:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	4a38      	ldr	r2, [pc, #224]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005920:	fba2 1203 	umull	r1, r2, r2, r3
 8005924:	0992      	lsrs	r2, r2, #6
 8005926:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800592a:	fb01 f202 	mul.w	r2, r1, r2
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	b29a      	uxth	r2, r3
 8005932:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8005934:	801a      	strh	r2, [r3, #0]
	}
	if(seconds == 60)
 8005936:	4b31      	ldr	r3, [pc, #196]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b3c      	cmp	r3, #60	; 0x3c
 800593e:	d155      	bne.n	80059ec <HAL_TIM_PeriodElapsedCallback+0x104>
	{
		minute++;
 8005940:	4b30      	ldr	r3, [pc, #192]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	3301      	adds	r3, #1
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b2e      	ldr	r3, [pc, #184]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800594c:	701a      	strb	r2, [r3, #0]
		seconds = 0;
 800594e:	4b2b      	ldr	r3, [pc, #172]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
		if(minute == 60)
 8005954:	4b2b      	ldr	r3, [pc, #172]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b3c      	cmp	r3, #60	; 0x3c
 800595c:	d111      	bne.n	8005982 <HAL_TIM_PeriodElapsedCallback+0x9a>
		{
			hour++;
 800595e:	4b2a      	ldr	r3, [pc, #168]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	3301      	adds	r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800596a:	701a      	strb	r2, [r3, #0]
			minute = 0;
 800596c:	4b25      	ldr	r3, [pc, #148]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
			if(hour == 24)
 8005972:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b18      	cmp	r3, #24
 800597a:	d102      	bne.n	8005982 <HAL_TIM_PeriodElapsedCallback+0x9a>
			{
				hour = 0;
 800597c:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
			}
		}
		current_time.minute_index[0] = minute / 10;
 8005982:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	b2da      	uxtb	r2, r3
 8005992:	4b1f      	ldr	r3, [pc, #124]	; (8005a10 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005994:	709a      	strb	r2, [r3, #2]
		current_time.minute_index[1] = minute % 10;
 8005996:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b2da      	uxtb	r2, r3
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800599e:	fba3 1302 	umull	r1, r3, r3, r2
 80059a2:	08d9      	lsrs	r1, r3, #3
 80059a4:	460b      	mov	r3, r1
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	4b17      	ldr	r3, [pc, #92]	; (8005a10 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80059b2:	70da      	strb	r2, [r3, #3]
		current_time.hour_index[0] = hour / 10;
 80059b4:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	4a14      	ldr	r2, [pc, #80]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80059c6:	711a      	strb	r2, [r3, #4]
		current_time.hour_index[1] = hour % 10;
 80059c8:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80059d0:	fba3 1302 	umull	r1, r3, r3, r2
 80059d4:	08d9      	lsrs	r1, r3, #3
 80059d6:	460b      	mov	r3, r1
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80059e4:	715a      	strb	r2, [r3, #5]
		is_time_update = need_Update;
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
	}
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	200010d4 	.word	0x200010d4
 80059fc:	200010d2 	.word	0x200010d2
 8005a00:	10624dd3 	.word	0x10624dd3
 8005a04:	200010d1 	.word	0x200010d1
 8005a08:	200010d0 	.word	0x200010d0
 8005a0c:	cccccccd 	.word	0xcccccccd
 8005a10:	200015c0 	.word	0x200015c0
 8005a14:	20000684 	.word	0x20000684

08005a18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	80fb      	strh	r3, [r7, #6]
	_delay_ms(100);
 8005a22:	2064      	movs	r0, #100	; 0x64
 8005a24:	f002 fbaa 	bl	800817c <_delay_ms>
	mili_sec += 100;
 8005a28:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3364      	adds	r3, #100	; 0x64
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8005a34:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == Change_display_Pin)
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d128      	bne.n	8005a8e <HAL_GPIO_EXTI_Callback+0x76>
	{
		Display_mode_count++;
 8005a3c:	4b23      	ldr	r3, [pc, #140]	; (8005acc <HAL_GPIO_EXTI_Callback+0xb4>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	3301      	adds	r3, #1
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_GPIO_EXTI_Callback+0xb4>)
 8005a48:	701a      	strb	r2, [r3, #0]
		Display_mode_count %= 3;
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <HAL_GPIO_EXTI_Callback+0xb4>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8005a52:	fba3 1302 	umull	r1, r3, r3, r2
 8005a56:	0859      	lsrs	r1, r3, #1
 8005a58:	460b      	mov	r3, r1
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	440b      	add	r3, r1
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <HAL_GPIO_EXTI_Callback+0xb4>)
 8005a64:	701a      	strb	r2, [r3, #0]
		Display_mode = Display_mode_count;
 8005a66:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_GPIO_EXTI_Callback+0xb4>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005a6e:	701a      	strb	r2, [r3, #0]
		isdisplay_changed = display_true;
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
		if(Display_mode == Time_display_mode)
 8005a76:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <HAL_GPIO_EXTI_Callback+0x6e>
		{
			is_time_update = need_Update;
 8005a80:	4b16      	ldr	r3, [pc, #88]	; (8005adc <HAL_GPIO_EXTI_Callback+0xc4>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
		}
		printf("EXTI0 interrupt\n\r");
 8005a86:	4816      	ldr	r0, [pc, #88]	; (8005ae0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8005a88:	f002 fc94 	bl	80083b4 <printf>
		mili_sec = 0;
		esp8266_user_status = Ready_to_receive_time_data;
		is_time_update = need_Update;
		printf("EXTI1 interrupt\n\r");
	}
}
 8005a8c:	e017      	b.n	8005abe <HAL_GPIO_EXTI_Callback+0xa6>
	else if(GPIO_Pin == receive_time_again_Pin)
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d114      	bne.n	8005abe <HAL_GPIO_EXTI_Callback+0xa6>
		hour = 0;
 8005a94:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
		minute = 0;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
		seconds = 0;
 8005aa0:	4b12      	ldr	r3, [pc, #72]	; (8005aec <HAL_GPIO_EXTI_Callback+0xd4>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
		mili_sec = 0;
 8005aa6:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	801a      	strh	r2, [r3, #0]
		esp8266_user_status = Ready_to_receive_time_data;
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8005aae:	220f      	movs	r2, #15
 8005ab0:	701a      	strb	r2, [r3, #0]
		is_time_update = need_Update;
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <HAL_GPIO_EXTI_Callback+0xc4>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	701a      	strb	r2, [r3, #0]
		printf("EXTI1 interrupt\n\r");
 8005ab8:	480e      	ldr	r0, [pc, #56]	; (8005af4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8005aba:	f002 fc7b 	bl	80083b4 <printf>
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200010d4 	.word	0x200010d4
 8005acc:	200010d7 	.word	0x200010d7
 8005ad0:	aaaaaaab 	.word	0xaaaaaaab
 8005ad4:	200010d6 	.word	0x200010d6
 8005ad8:	200010d8 	.word	0x200010d8
 8005adc:	20000684 	.word	0x20000684
 8005ae0:	0800d1ac 	.word	0x0800d1ac
 8005ae4:	200010d0 	.word	0x200010d0
 8005ae8:	200010d1 	.word	0x200010d1
 8005aec:	200010d2 	.word	0x200010d2
 8005af0:	200015bd 	.word	0x200015bd
 8005af4:	0800d1c0 	.word	0x0800d1c0

08005af8 <ILI9341_LCD_input_data_init>:

void ILI9341_LCD_input_data_init()
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	SHT31_init();
 8005afc:	f002 f9d5 	bl	8007eaa <SHT31_init>
	CCS811_init();
 8005b00:	f7ff fa70 	bl	8004fe4 <CCS811_init>
	ILI9341_current_time_data_init(&current_time);
 8005b04:	481a      	ldr	r0, [pc, #104]	; (8005b70 <ILI9341_LCD_input_data_init+0x78>)
 8005b06:	f000 f841 	bl	8005b8c <ILI9341_current_time_data_init>
	ILI9341_init();
 8005b0a:	f001 f9bb 	bl	8006e84 <ILI9341_init>
	timer_3_init();
 8005b0e:	f002 fb75 	bl	80081fc <timer_3_init>
	printf("\n\r%d, %d\n\r", seconds, mili_sec);
 8005b12:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <ILI9341_LCD_input_data_init+0x7c>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <ILI9341_LCD_input_data_init+0x80>)
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	4816      	ldr	r0, [pc, #88]	; (8005b7c <ILI9341_LCD_input_data_init+0x84>)
 8005b24:	f002 fc46 	bl	80083b4 <printf>
	ESP8266_init();
 8005b28:	f7ff fb52 	bl	80051d0 <ESP8266_init>
	printf("\n\r%d, %d\n\r", seconds, mili_sec);
 8005b2c:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <ILI9341_LCD_input_data_init+0x7c>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	4619      	mov	r1, r3
 8005b34:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <ILI9341_LCD_input_data_init+0x80>)
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	480f      	ldr	r0, [pc, #60]	; (8005b7c <ILI9341_LCD_input_data_init+0x84>)
 8005b3e:	f002 fc39 	bl	80083b4 <printf>
	if(esp8266_user_status == Success)
 8005b42:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <ILI9341_LCD_input_data_init+0x88>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d102      	bne.n	8005b52 <ILI9341_LCD_input_data_init+0x5a>
	{
		ILI9341_convert_received_time_string(received_time_string[1]);
 8005b4c:	480d      	ldr	r0, [pc, #52]	; (8005b84 <ILI9341_LCD_input_data_init+0x8c>)
 8005b4e:	f000 f851 	bl	8005bf4 <ILI9341_convert_received_time_string>
	}
	Display_mode = Time_display_mode;
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <ILI9341_LCD_input_data_init+0x90>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
	ILI9341_fill_screen(BLACK);
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f001 fafe 	bl	800715a <ILI9341_fill_screen>
	SHT31_read_period();
 8005b5e:	f002 fa03 	bl	8007f68 <SHT31_read_period>
	CCS811_read_CO2_TVOC();
 8005b62:	f7ff fa91 	bl	8005088 <CCS811_read_CO2_TVOC>
	ILI9341_LCD_input_data_update();
 8005b66:	f001 f90f 	bl	8006d88 <ILI9341_LCD_input_data_update>
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200015c0 	.word	0x200015c0
 8005b74:	200010d2 	.word	0x200010d2
 8005b78:	200010d4 	.word	0x200010d4
 8005b7c:	0800d1d4 	.word	0x0800d1d4
 8005b80:	200015bd 	.word	0x200015bd
 8005b84:	200014f1 	.word	0x200014f1
 8005b88:	200010d6 	.word	0x200010d6

08005b8c <ILI9341_current_time_data_init>:

void ILI9341_current_time_data_init(volatile struct current_time_data* user_define)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	user_define->seconds_index[0] = 0;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
	user_define->seconds_index[1] = 0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	705a      	strb	r2, [r3, #1]
	user_define->minute_index[0] = 0;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	709a      	strb	r2, [r3, #2]
	user_define->minute_index[1] = 0;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	70da      	strb	r2, [r3, #3]
	user_define->hour_index[0] = 0;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	711a      	strb	r2, [r3, #4]
	user_define->hour_index[1] = 0;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	715a      	strb	r2, [r3, #5]
	user_define->day_index = 0;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	719a      	strb	r2, [r3, #6]
	user_define->day_index_num[0] = 0;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	71da      	strb	r2, [r3, #7]
	user_define->day_index_num[1] = 0;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	721a      	strb	r2, [r3, #8]
	user_define->month_index = 0;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	725a      	strb	r2, [r3, #9]
	user_define->year_index[0] = 0;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	729a      	strb	r2, [r3, #10]
	user_define->year_index[1] = 0;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	72da      	strb	r2, [r3, #11]
	user_define->year_index[2] = 0;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	731a      	strb	r2, [r3, #12]
	user_define->year_index[3] = 0;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	735a      	strb	r2, [r3, #13]
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr
	...

08005bf4 <ILI9341_convert_received_time_string>:

void ILI9341_convert_received_time_string(volatile char* str)
{
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 12; i++)
 8005c00:	2300      	movs	r3, #0
 8005c02:	73bb      	strb	r3, [r7, #14]
 8005c04:	e011      	b.n	8005c2a <ILI9341_convert_received_time_string+0x36>
	{
		if(strstr((const char*)str,month_string[i]))
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4a82      	ldr	r2, [pc, #520]	; (8005e14 <ILI9341_convert_received_time_string+0x220>)
 8005c0c:	4413      	add	r3, r2
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f002 fcef 	bl	80085f4 <strstr>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <ILI9341_convert_received_time_string+0x30>
		{
			current_time.month_index = i;
 8005c1c:	4a7e      	ldr	r2, [pc, #504]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	7253      	strb	r3, [r2, #9]
			break;
 8005c22:	e005      	b.n	8005c30 <ILI9341_convert_received_time_string+0x3c>
	for(uint8_t i = 0; i < 12; i++)
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	3301      	adds	r3, #1
 8005c28:	73bb      	strb	r3, [r7, #14]
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	2b0b      	cmp	r3, #11
 8005c2e:	d9ea      	bls.n	8005c06 <ILI9341_convert_received_time_string+0x12>
		}
	}
	for(uint8_t i = 0; i < 7; i++)
 8005c30:	2300      	movs	r3, #0
 8005c32:	737b      	strb	r3, [r7, #13]
 8005c34:	e011      	b.n	8005c5a <ILI9341_convert_received_time_string+0x66>
	{
		if(strstr((const char*)str,day_string[i]))
 8005c36:	7b7b      	ldrb	r3, [r7, #13]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a78      	ldr	r2, [pc, #480]	; (8005e1c <ILI9341_convert_received_time_string+0x228>)
 8005c3c:	4413      	add	r3, r2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f002 fcd7 	bl	80085f4 <strstr>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <ILI9341_convert_received_time_string+0x60>
		{
			current_time.day_index = i;
 8005c4c:	4a72      	ldr	r2, [pc, #456]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005c4e:	7b7b      	ldrb	r3, [r7, #13]
 8005c50:	7193      	strb	r3, [r2, #6]
			break;
 8005c52:	e005      	b.n	8005c60 <ILI9341_convert_received_time_string+0x6c>
	for(uint8_t i = 0; i < 7; i++)
 8005c54:	7b7b      	ldrb	r3, [r7, #13]
 8005c56:	3301      	adds	r3, #1
 8005c58:	737b      	strb	r3, [r7, #13]
 8005c5a:	7b7b      	ldrb	r3, [r7, #13]
 8005c5c:	2b06      	cmp	r3, #6
 8005c5e:	d9ea      	bls.n	8005c36 <ILI9341_convert_received_time_string+0x42>
		}
	}
	for(uint8_t i = 0; i < strlen((const char*)str); i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	733b      	strb	r3, [r7, #12]
 8005c64:	e020      	b.n	8005ca8 <ILI9341_convert_received_time_string+0xb4>
	{
		if(isdigit(str[i]))
 8005c66:	7b3b      	ldrb	r3, [r7, #12]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	3301      	adds	r3, #1
 8005c72:	4a6b      	ldr	r2, [pc, #428]	; (8005e20 <ILI9341_convert_received_time_string+0x22c>)
 8005c74:	4413      	add	r3, r2
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <ILI9341_convert_received_time_string+0xa8>
		{
			time_index[index++] = (str[i] - '0');
 8005c80:	7b3b      	ldrb	r3, [r7, #12]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	1c59      	adds	r1, r3, #1
 8005c8e:	73f9      	strb	r1, [r7, #15]
 8005c90:	4619      	mov	r1, r3
 8005c92:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	4b62      	ldr	r3, [pc, #392]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005c9a:	545a      	strb	r2, [r3, r1]
		}
		if(index == 12)
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	d00a      	beq.n	8005cb8 <ILI9341_convert_received_time_string+0xc4>
	for(uint8_t i = 0; i < strlen((const char*)str); i++)
 8005ca2:	7b3b      	ldrb	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	733b      	strb	r3, [r7, #12]
 8005ca8:	7b3c      	ldrb	r4, [r7, #12]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fa fa5a 	bl	8000164 <strlen>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	429c      	cmp	r4, r3
 8005cb4:	d3d7      	bcc.n	8005c66 <ILI9341_convert_received_time_string+0x72>
 8005cb6:	e000      	b.n	8005cba <ILI9341_convert_received_time_string+0xc6>
		{
			break;
 8005cb8:	bf00      	nop
		}
	}
	seconds += (time_index[6] * 10) + time_index[7];
 8005cba:	4b5a      	ldr	r3, [pc, #360]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005cbc:	799b      	ldrb	r3, [r3, #6]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b55      	ldr	r3, [pc, #340]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005cce:	79db      	ldrb	r3, [r3, #7]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b54      	ldr	r3, [pc, #336]	; (8005e28 <ILI9341_convert_received_time_string+0x234>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	4b51      	ldr	r3, [pc, #324]	; (8005e28 <ILI9341_convert_received_time_string+0x234>)
 8005ce2:	701a      	strb	r2, [r3, #0]
	minute += (time_index[4] * 10) + time_index[5];
 8005ce4:	4b4f      	ldr	r3, [pc, #316]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005ce6:	791b      	ldrb	r3, [r3, #4]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4b4b      	ldr	r3, [pc, #300]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005cf8:	795b      	ldrb	r3, [r3, #5]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	4b4a      	ldr	r3, [pc, #296]	; (8005e2c <ILI9341_convert_received_time_string+0x238>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	4b48      	ldr	r3, [pc, #288]	; (8005e2c <ILI9341_convert_received_time_string+0x238>)
 8005d0c:	701a      	strb	r2, [r3, #0]
	hour += (time_index[2] * 10) + time_index[3];
 8005d0e:	4b45      	ldr	r3, [pc, #276]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005d10:	789b      	ldrb	r3, [r3, #2]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	461a      	mov	r2, r3
 8005d20:	4b40      	ldr	r3, [pc, #256]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	4b41      	ldr	r3, [pc, #260]	; (8005e30 <ILI9341_convert_received_time_string+0x23c>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	4b3e      	ldr	r3, [pc, #248]	; (8005e30 <ILI9341_convert_received_time_string+0x23c>)
 8005d36:	701a      	strb	r2, [r3, #0]
	current_time.day_index_num[0] = time_index[0];
 8005d38:	4b3a      	ldr	r3, [pc, #232]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	4b36      	ldr	r3, [pc, #216]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005d40:	71da      	strb	r2, [r3, #7]
	current_time.day_index_num[1] = time_index[1];
 8005d42:	4b38      	ldr	r3, [pc, #224]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b33      	ldr	r3, [pc, #204]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005d4a:	721a      	strb	r2, [r3, #8]
	current_time.hour_index[0] = hour / 10;
 8005d4c:	4b38      	ldr	r3, [pc, #224]	; (8005e30 <ILI9341_convert_received_time_string+0x23c>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4a38      	ldr	r2, [pc, #224]	; (8005e34 <ILI9341_convert_received_time_string+0x240>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	08db      	lsrs	r3, r3, #3
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005d5e:	711a      	strb	r2, [r3, #4]
	current_time.hour_index[1] = hour % 10;
 8005d60:	4b33      	ldr	r3, [pc, #204]	; (8005e30 <ILI9341_convert_received_time_string+0x23c>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	4b33      	ldr	r3, [pc, #204]	; (8005e34 <ILI9341_convert_received_time_string+0x240>)
 8005d68:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6c:	08d9      	lsrs	r1, r3, #3
 8005d6e:	460b      	mov	r3, r1
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005d7c:	715a      	strb	r2, [r3, #5]
	current_time.minute_index[0] = minute / 10;
 8005d7e:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <ILI9341_convert_received_time_string+0x238>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	4a2b      	ldr	r2, [pc, #172]	; (8005e34 <ILI9341_convert_received_time_string+0x240>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	08db      	lsrs	r3, r3, #3
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4b22      	ldr	r3, [pc, #136]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005d90:	709a      	strb	r2, [r3, #2]
	current_time.minute_index[1] = minute % 10;
 8005d92:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <ILI9341_convert_received_time_string+0x238>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <ILI9341_convert_received_time_string+0x240>)
 8005d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9e:	08d9      	lsrs	r1, r3, #3
 8005da0:	460b      	mov	r3, r1
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005dae:	70da      	strb	r2, [r3, #3]
	current_time.seconds_index[0] = seconds / 10;
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <ILI9341_convert_received_time_string+0x234>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	4a1f      	ldr	r2, [pc, #124]	; (8005e34 <ILI9341_convert_received_time_string+0x240>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	08db      	lsrs	r3, r3, #3
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005dc2:	701a      	strb	r2, [r3, #0]
	current_time.seconds_index[1] = seconds % 10;
 8005dc4:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <ILI9341_convert_received_time_string+0x234>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <ILI9341_convert_received_time_string+0x240>)
 8005dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd0:	08d9      	lsrs	r1, r3, #3
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005de0:	705a      	strb	r2, [r3, #1]
	current_time.year_index[0] = time_index[8];
 8005de2:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005de4:	7a1b      	ldrb	r3, [r3, #8]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005dea:	729a      	strb	r2, [r3, #10]
	current_time.year_index[1] = time_index[9];
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005dee:	7a5b      	ldrb	r3, [r3, #9]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005df4:	72da      	strb	r2, [r3, #11]
	current_time.year_index[2] = time_index[10];
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005df8:	7a9b      	ldrb	r3, [r3, #10]
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005dfe:	731a      	strb	r2, [r3, #12]
	current_time.year_index[3] = time_index[11];
 8005e00:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <ILI9341_convert_received_time_string+0x230>)
 8005e02:	7adb      	ldrb	r3, [r3, #11]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <ILI9341_convert_received_time_string+0x224>)
 8005e08:	735a      	strb	r2, [r3, #13]
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd90      	pop	{r4, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000638 	.word	0x20000638
 8005e18:	200015c0 	.word	0x200015c0
 8005e1c:	20000668 	.word	0x20000668
 8005e20:	0800d388 	.word	0x0800d388
 8005e24:	200015d0 	.word	0x200015d0
 8005e28:	200010d2 	.word	0x200010d2
 8005e2c:	200010d1 	.word	0x200010d1
 8005e30:	200010d0 	.word	0x200010d0
 8005e34:	cccccccd 	.word	0xcccccccd

08005e38 <ILI9341_check_0h_11h_or_12h_23h>:

void ILI9341_check_0h_11h_or_12h_23h(uint16_t col, uint16_t row, uint16_t width)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	4603      	mov	r3, r0
 8005e40:	80fb      	strh	r3, [r7, #6]
 8005e42:	460b      	mov	r3, r1
 8005e44:	80bb      	strh	r3, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	807b      	strh	r3, [r7, #2]
	if(hour >= 12)
 8005e4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <ILI9341_check_0h_11h_or_12h_23h+0x8c>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b0b      	cmp	r3, #11
 8005e52:	d917      	bls.n	8005e84 <ILI9341_check_0h_11h_or_12h_23h+0x4c>
	{
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_12h_23h_1_mv,col,row);
 8005e54:	88bb      	ldrh	r3, [r7, #4]
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <ILI9341_check_0h_11h_or_12h_23h+0x90>)
 8005e5e:	2202      	movs	r2, #2
 8005e60:	491a      	ldr	r1, [pc, #104]	; (8005ecc <ILI9341_check_0h_11h_or_12h_23h+0x94>)
 8005e62:	2000      	movs	r0, #0
 8005e64:	f001 fa4e 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_12h_23h_2_mv,col+width,row);
 8005e68:	88fa      	ldrh	r2, [r7, #6]
 8005e6a:	887b      	ldrh	r3, [r7, #2]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	88ba      	ldrh	r2, [r7, #4]
 8005e72:	9201      	str	r2, [sp, #4]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <ILI9341_check_0h_11h_or_12h_23h+0x98>)
 8005e78:	2202      	movs	r2, #2
 8005e7a:	4914      	ldr	r1, [pc, #80]	; (8005ecc <ILI9341_check_0h_11h_or_12h_23h+0x94>)
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	f001 fa41 	bl	8007304 <ILI9341_write_char_15x15>
	else if(hour <= 11)
	{
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_0h_11h_1_mv,col,row);
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_0h_11h_2_mv,col+width,row);
	}
}
 8005e82:	e01b      	b.n	8005ebc <ILI9341_check_0h_11h_or_12h_23h+0x84>
	else if(hour <= 11)
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <ILI9341_check_0h_11h_or_12h_23h+0x8c>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b0b      	cmp	r3, #11
 8005e8c:	d816      	bhi.n	8005ebc <ILI9341_check_0h_11h_or_12h_23h+0x84>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_0h_11h_1_mv,col,row);
 8005e8e:	88bb      	ldrh	r3, [r7, #4]
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <ILI9341_check_0h_11h_or_12h_23h+0x9c>)
 8005e98:	2202      	movs	r2, #2
 8005e9a:	490c      	ldr	r1, [pc, #48]	; (8005ecc <ILI9341_check_0h_11h_or_12h_23h+0x94>)
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f001 fa31 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_0h_11h_2_mv,col+width,row);
 8005ea2:	88fa      	ldrh	r2, [r7, #6]
 8005ea4:	887b      	ldrh	r3, [r7, #2]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	88ba      	ldrh	r2, [r7, #4]
 8005eac:	9201      	str	r2, [sp, #4]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <ILI9341_check_0h_11h_or_12h_23h+0xa0>)
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	4905      	ldr	r1, [pc, #20]	; (8005ecc <ILI9341_check_0h_11h_or_12h_23h+0x94>)
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f001 fa24 	bl	8007304 <ILI9341_write_char_15x15>
}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	200010d0 	.word	0x200010d0
 8005ec8:	200001e4 	.word	0x200001e4
 8005ecc:	0003ffff 	.word	0x0003ffff
 8005ed0:	20000208 	.word	0x20000208
 8005ed4:	2000019c 	.word	0x2000019c
 8005ed8:	200001c0 	.word	0x200001c0

08005edc <ILI9341_check_hour>:
void ILI9341_check_hour(uint16_t col, uint16_t row, uint16_t width)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	80fb      	strh	r3, [r7, #6]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	80bb      	strh	r3, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	807b      	strh	r3, [r7, #2]
	if(hour < 10)
 8005eee:	4b6d      	ldr	r3, [pc, #436]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b09      	cmp	r3, #9
 8005ef6:	d81e      	bhi.n	8005f36 <ILI9341_check_hour+0x5a>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,10,0x00,col,row);
 8005ef8:	88bb      	ldrh	r3, [r7, #4]
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	2300      	movs	r3, #0
 8005f02:	220a      	movs	r2, #10
 8005f04:	4968      	ldr	r1, [pc, #416]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 8005f06:	2000      	movs	r0, #0
 8005f08:	f001 f956 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1]],col+width,row);
 8005f0c:	4b67      	ldr	r3, [pc, #412]	; (80060ac <ILI9341_check_hour+0x1d0>)
 8005f0e:	795b      	ldrb	r3, [r3, #5]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b66      	ldr	r3, [pc, #408]	; (80060b0 <ILI9341_check_hour+0x1d4>)
 8005f16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	887b      	ldrh	r3, [r7, #2]
 8005f1e:	4413      	add	r3, r2
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	88ba      	ldrh	r2, [r7, #4]
 8005f24:	9201      	str	r2, [sp, #4]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	220a      	movs	r2, #10
 8005f2c:	495e      	ldr	r1, [pc, #376]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f001 f942 	bl	80071b8 <ILI9341_write_char_5x5>
	else if(hour > 21 && hour < 24)
	{
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[0] - 1],col,row);
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1] - 2],col+width,row);
	}
}
 8005f34:	e0b1      	b.n	800609a <ILI9341_check_hour+0x1be>
	else if(hour > 9 && hour < 13)
 8005f36:	4b5b      	ldr	r3, [pc, #364]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b09      	cmp	r3, #9
 8005f3e:	d92a      	bls.n	8005f96 <ILI9341_check_hour+0xba>
 8005f40:	4b58      	ldr	r3, [pc, #352]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d825      	bhi.n	8005f96 <ILI9341_check_hour+0xba>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[0]],col,row);
 8005f4a:	4b58      	ldr	r3, [pc, #352]	; (80060ac <ILI9341_check_hour+0x1d0>)
 8005f4c:	791b      	ldrb	r3, [r3, #4]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	4b57      	ldr	r3, [pc, #348]	; (80060b0 <ILI9341_check_hour+0x1d4>)
 8005f54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f58:	88bb      	ldrh	r3, [r7, #4]
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	220a      	movs	r2, #10
 8005f64:	4950      	ldr	r1, [pc, #320]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 8005f66:	2000      	movs	r0, #0
 8005f68:	f001 f926 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1]],col+width,row);
 8005f6c:	4b4f      	ldr	r3, [pc, #316]	; (80060ac <ILI9341_check_hour+0x1d0>)
 8005f6e:	795b      	ldrb	r3, [r3, #5]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	4b4e      	ldr	r3, [pc, #312]	; (80060b0 <ILI9341_check_hour+0x1d4>)
 8005f76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	887b      	ldrh	r3, [r7, #2]
 8005f7e:	4413      	add	r3, r2
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	88ba      	ldrh	r2, [r7, #4]
 8005f84:	9201      	str	r2, [sp, #4]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	220a      	movs	r2, #10
 8005f8c:	4946      	ldr	r1, [pc, #280]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f001 f912 	bl	80071b8 <ILI9341_write_char_5x5>
 8005f94:	e081      	b.n	800609a <ILI9341_check_hour+0x1be>
	else if(hour > 12 && hour < 20) 
 8005f96:	4b43      	ldr	r3, [pc, #268]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b0c      	cmp	r3, #12
 8005f9e:	d923      	bls.n	8005fe8 <ILI9341_check_hour+0x10c>
 8005fa0:	4b40      	ldr	r3, [pc, #256]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b13      	cmp	r3, #19
 8005fa8:	d81e      	bhi.n	8005fe8 <ILI9341_check_hour+0x10c>
		ILI9341_write_char_5x5(BLACK,WHITE,10,0x00,col,row);
 8005faa:	88bb      	ldrh	r3, [r7, #4]
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	220a      	movs	r2, #10
 8005fb6:	493c      	ldr	r1, [pc, #240]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f001 f8fd 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1] - 2],col+width,row);
 8005fbe:	4b3b      	ldr	r3, [pc, #236]	; (80060ac <ILI9341_check_hour+0x1d0>)
 8005fc0:	795b      	ldrb	r3, [r3, #5]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	3b02      	subs	r3, #2
 8005fc6:	4a3a      	ldr	r2, [pc, #232]	; (80060b0 <ILI9341_check_hour+0x1d4>)
 8005fc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fcc:	88fa      	ldrh	r2, [r7, #6]
 8005fce:	887b      	ldrh	r3, [r7, #2]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	88ba      	ldrh	r2, [r7, #4]
 8005fd6:	9201      	str	r2, [sp, #4]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	220a      	movs	r2, #10
 8005fde:	4932      	ldr	r1, [pc, #200]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f001 f8e9 	bl	80071b8 <ILI9341_write_char_5x5>
 8005fe6:	e058      	b.n	800609a <ILI9341_check_hour+0x1be>
	else if(hour > 19 && hour < 22) 
 8005fe8:	4b2e      	ldr	r3, [pc, #184]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b13      	cmp	r3, #19
 8005ff0:	d923      	bls.n	800603a <ILI9341_check_hour+0x15e>
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b15      	cmp	r3, #21
 8005ffa:	d81e      	bhi.n	800603a <ILI9341_check_hour+0x15e>
		ILI9341_write_char_5x5(BLACK,WHITE,10,0x00,col,row);
 8005ffc:	88bb      	ldrh	r3, [r7, #4]
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	2300      	movs	r3, #0
 8006006:	220a      	movs	r2, #10
 8006008:	4927      	ldr	r1, [pc, #156]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 800600a:	2000      	movs	r0, #0
 800600c:	f001 f8d4 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1] + 8],col+width,row);
 8006010:	4b26      	ldr	r3, [pc, #152]	; (80060ac <ILI9341_check_hour+0x1d0>)
 8006012:	795b      	ldrb	r3, [r3, #5]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	3308      	adds	r3, #8
 8006018:	4a25      	ldr	r2, [pc, #148]	; (80060b0 <ILI9341_check_hour+0x1d4>)
 800601a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	887b      	ldrh	r3, [r7, #2]
 8006022:	4413      	add	r3, r2
 8006024:	b29b      	uxth	r3, r3
 8006026:	88ba      	ldrh	r2, [r7, #4]
 8006028:	9201      	str	r2, [sp, #4]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	460b      	mov	r3, r1
 800602e:	220a      	movs	r2, #10
 8006030:	491d      	ldr	r1, [pc, #116]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 8006032:	2000      	movs	r0, #0
 8006034:	f001 f8c0 	bl	80071b8 <ILI9341_write_char_5x5>
 8006038:	e02f      	b.n	800609a <ILI9341_check_hour+0x1be>
	else if(hour > 21 && hour < 24)
 800603a:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b15      	cmp	r3, #21
 8006042:	d92a      	bls.n	800609a <ILI9341_check_hour+0x1be>
 8006044:	4b17      	ldr	r3, [pc, #92]	; (80060a4 <ILI9341_check_hour+0x1c8>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b17      	cmp	r3, #23
 800604c:	d825      	bhi.n	800609a <ILI9341_check_hour+0x1be>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[0] - 1],col,row);
 800604e:	4b17      	ldr	r3, [pc, #92]	; (80060ac <ILI9341_check_hour+0x1d0>)
 8006050:	791b      	ldrb	r3, [r3, #4]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	4a16      	ldr	r2, [pc, #88]	; (80060b0 <ILI9341_check_hour+0x1d4>)
 8006058:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800605c:	88bb      	ldrh	r3, [r7, #4]
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	220a      	movs	r2, #10
 8006068:	490f      	ldr	r1, [pc, #60]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 800606a:	2000      	movs	r0, #0
 800606c:	f001 f8a4 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1] - 2],col+width,row);
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <ILI9341_check_hour+0x1d0>)
 8006072:	795b      	ldrb	r3, [r3, #5]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	3b02      	subs	r3, #2
 8006078:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <ILI9341_check_hour+0x1d4>)
 800607a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800607e:	88fa      	ldrh	r2, [r7, #6]
 8006080:	887b      	ldrh	r3, [r7, #2]
 8006082:	4413      	add	r3, r2
 8006084:	b29b      	uxth	r3, r3
 8006086:	88ba      	ldrh	r2, [r7, #4]
 8006088:	9201      	str	r2, [sp, #4]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	460b      	mov	r3, r1
 800608e:	220a      	movs	r2, #10
 8006090:	4905      	ldr	r1, [pc, #20]	; (80060a8 <ILI9341_check_hour+0x1cc>)
 8006092:	2000      	movs	r0, #0
 8006094:	f001 f890 	bl	80071b8 <ILI9341_write_char_5x5>
}
 8006098:	e7ff      	b.n	800609a <ILI9341_check_hour+0x1be>
 800609a:	bf00      	nop
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200010d0 	.word	0x200010d0
 80060a8:	0003ffff 	.word	0x0003ffff
 80060ac:	200015c0 	.word	0x200015c0
 80060b0:	2000010c 	.word	0x2000010c

080060b4 <ILI9341_check_minutes>:
void ILI9341_check_minutes(uint16_t col, uint16_t row, uint16_t width)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	4603      	mov	r3, r0
 80060bc:	80fb      	strh	r3, [r7, #6]
 80060be:	460b      	mov	r3, r1
 80060c0:	80bb      	strh	r3, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	807b      	strh	r3, [r7, #2]
	ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.minute_index[0]],col,row);
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <ILI9341_check_minutes+0x64>)
 80060c8:	789b      	ldrb	r3, [r3, #2]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <ILI9341_check_minutes+0x68>)
 80060d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060d4:	88bb      	ldrh	r3, [r7, #4]
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	220a      	movs	r2, #10
 80060e0:	490f      	ldr	r1, [pc, #60]	; (8006120 <ILI9341_check_minutes+0x6c>)
 80060e2:	2000      	movs	r0, #0
 80060e4:	f001 f868 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.minute_index[1]],col+width,row);
 80060e8:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <ILI9341_check_minutes+0x64>)
 80060ea:	78db      	ldrb	r3, [r3, #3]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <ILI9341_check_minutes+0x68>)
 80060f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	887b      	ldrh	r3, [r7, #2]
 80060fa:	4413      	add	r3, r2
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	88ba      	ldrh	r2, [r7, #4]
 8006100:	9201      	str	r2, [sp, #4]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	460b      	mov	r3, r1
 8006106:	220a      	movs	r2, #10
 8006108:	4905      	ldr	r1, [pc, #20]	; (8006120 <ILI9341_check_minutes+0x6c>)
 800610a:	2000      	movs	r0, #0
 800610c:	f001 f854 	bl	80071b8 <ILI9341_write_char_5x5>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	200015c0 	.word	0x200015c0
 800611c:	2000010c 	.word	0x2000010c
 8006120:	0003ffff 	.word	0x0003ffff

08006124 <ILI9341_check_day_num>:

void ILI9341_check_day_num(uint16_t col, uint16_t row, uint16_t width)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af02      	add	r7, sp, #8
 800612a:	4603      	mov	r3, r0
 800612c:	80fb      	strh	r3, [r7, #6]
 800612e:	460b      	mov	r3, r1
 8006130:	80bb      	strh	r3, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	807b      	strh	r3, [r7, #2]
	if(current_time.day_index_num[0] > 0)
 8006136:	4b39      	ldr	r3, [pc, #228]	; (800621c <ILI9341_check_day_num+0xf8>)
 8006138:	79db      	ldrb	r3, [r3, #7]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d035      	beq.n	80061ac <ILI9341_check_day_num+0x88>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.day_index_num[0]],col,row);
 8006140:	4b36      	ldr	r3, [pc, #216]	; (800621c <ILI9341_check_day_num+0xf8>)
 8006142:	79db      	ldrb	r3, [r3, #7]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	4b35      	ldr	r3, [pc, #212]	; (8006220 <ILI9341_check_day_num+0xfc>)
 800614a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800614e:	88bb      	ldrh	r3, [r7, #4]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	4613      	mov	r3, r2
 8006158:	2205      	movs	r2, #5
 800615a:	4932      	ldr	r1, [pc, #200]	; (8006224 <ILI9341_check_day_num+0x100>)
 800615c:	2000      	movs	r0, #0
 800615e:	f001 f82b 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.day_index_num[1]],col+width,row);
 8006162:	4b2e      	ldr	r3, [pc, #184]	; (800621c <ILI9341_check_day_num+0xf8>)
 8006164:	7a1b      	ldrb	r3, [r3, #8]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	4b2d      	ldr	r3, [pc, #180]	; (8006220 <ILI9341_check_day_num+0xfc>)
 800616c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006170:	88fa      	ldrh	r2, [r7, #6]
 8006172:	887b      	ldrh	r3, [r7, #2]
 8006174:	4413      	add	r3, r2
 8006176:	b29b      	uxth	r3, r3
 8006178:	88ba      	ldrh	r2, [r7, #4]
 800617a:	9201      	str	r2, [sp, #4]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	460b      	mov	r3, r1
 8006180:	2205      	movs	r2, #5
 8006182:	4928      	ldr	r1, [pc, #160]	; (8006224 <ILI9341_check_day_num+0x100>)
 8006184:	2000      	movs	r0, #0
 8006186:	f001 f817 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_mv,col+width+width,row);
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	887b      	ldrh	r3, [r7, #2]
 800618e:	4413      	add	r3, r2
 8006190:	b29a      	uxth	r2, r3
 8006192:	887b      	ldrh	r3, [r7, #2]
 8006194:	4413      	add	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	88ba      	ldrh	r2, [r7, #4]
 800619a:	9201      	str	r2, [sp, #4]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	4b22      	ldr	r3, [pc, #136]	; (8006228 <ILI9341_check_day_num+0x104>)
 80061a0:	2202      	movs	r2, #2
 80061a2:	4920      	ldr	r1, [pc, #128]	; (8006224 <ILI9341_check_day_num+0x100>)
 80061a4:	2000      	movs	r0, #0
 80061a6:	f001 f8ad 	bl	8007304 <ILI9341_write_char_15x15>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,5,0x00,col,row);
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.day_index_num[1]],col+width,row);
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_mv,col+width+width,row);
	}
}
 80061aa:	e032      	b.n	8006212 <ILI9341_check_day_num+0xee>
	else if(current_time.day_index_num[0] == 0)
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <ILI9341_check_day_num+0xf8>)
 80061ae:	79db      	ldrb	r3, [r3, #7]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d12d      	bne.n	8006212 <ILI9341_check_day_num+0xee>
		ILI9341_write_char_5x5(BLACK,WHITE,5,0x00,col,row);
 80061b6:	88bb      	ldrh	r3, [r7, #4]
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	2300      	movs	r3, #0
 80061c0:	2205      	movs	r2, #5
 80061c2:	4918      	ldr	r1, [pc, #96]	; (8006224 <ILI9341_check_day_num+0x100>)
 80061c4:	2000      	movs	r0, #0
 80061c6:	f000 fff7 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.day_index_num[1]],col+width,row);
 80061ca:	4b14      	ldr	r3, [pc, #80]	; (800621c <ILI9341_check_day_num+0xf8>)
 80061cc:	7a1b      	ldrb	r3, [r3, #8]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b13      	ldr	r3, [pc, #76]	; (8006220 <ILI9341_check_day_num+0xfc>)
 80061d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061d8:	88fa      	ldrh	r2, [r7, #6]
 80061da:	887b      	ldrh	r3, [r7, #2]
 80061dc:	4413      	add	r3, r2
 80061de:	b29b      	uxth	r3, r3
 80061e0:	88ba      	ldrh	r2, [r7, #4]
 80061e2:	9201      	str	r2, [sp, #4]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	460b      	mov	r3, r1
 80061e8:	2205      	movs	r2, #5
 80061ea:	490e      	ldr	r1, [pc, #56]	; (8006224 <ILI9341_check_day_num+0x100>)
 80061ec:	2000      	movs	r0, #0
 80061ee:	f000 ffe3 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_mv,col+width+width,row);
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	887b      	ldrh	r3, [r7, #2]
 80061f6:	4413      	add	r3, r2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	887b      	ldrh	r3, [r7, #2]
 80061fc:	4413      	add	r3, r2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	88ba      	ldrh	r2, [r7, #4]
 8006202:	9201      	str	r2, [sp, #4]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <ILI9341_check_day_num+0x104>)
 8006208:	2202      	movs	r2, #2
 800620a:	4906      	ldr	r1, [pc, #24]	; (8006224 <ILI9341_check_day_num+0x100>)
 800620c:	2000      	movs	r0, #0
 800620e:	f001 f879 	bl	8007304 <ILI9341_write_char_15x15>
}
 8006212:	bf00      	nop
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200015c0 	.word	0x200015c0
 8006220:	2000010c 	.word	0x2000010c
 8006224:	0003ffff 	.word	0x0003ffff
 8006228:	20000370 	.word	0x20000370

0800622c <ILI9341_check_date>:
void ILI9341_check_date(uint16_t col, uint16_t row, uint16_t width)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af02      	add	r7, sp, #8
 8006232:	4603      	mov	r3, r0
 8006234:	80fb      	strh	r3, [r7, #6]
 8006236:	460b      	mov	r3, r1
 8006238:	80bb      	strh	r3, [r7, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	807b      	strh	r3, [r7, #2]
	if(current_time.day_index == 5)
 800623e:	4b50      	ldr	r3, [pc, #320]	; (8006380 <ILI9341_check_date+0x154>)
 8006240:	799b      	ldrb	r3, [r3, #6]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b05      	cmp	r3, #5
 8006246:	d12e      	bne.n	80062a6 <ILI9341_check_date+0x7a>
	{
		ILI9341_write_char_15x15(BLACK,BLUE,2,kor_date_mv[current_time.day_index],col,row);
 8006248:	4b4d      	ldr	r3, [pc, #308]	; (8006380 <ILI9341_check_date+0x154>)
 800624a:	799b      	ldrb	r3, [r3, #6]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	4b4c      	ldr	r3, [pc, #304]	; (8006384 <ILI9341_check_date+0x158>)
 8006252:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006256:	88bb      	ldrh	r3, [r7, #4]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	4613      	mov	r3, r2
 8006260:	2202      	movs	r2, #2
 8006262:	213f      	movs	r1, #63	; 0x3f
 8006264:	2000      	movs	r0, #0
 8006266:	f001 f84d 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,BLUE,2,kor_date_1_mv,col+width,row);
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	887b      	ldrh	r3, [r7, #2]
 800626e:	4413      	add	r3, r2
 8006270:	b29b      	uxth	r3, r3
 8006272:	88ba      	ldrh	r2, [r7, #4]
 8006274:	9201      	str	r2, [sp, #4]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	4b43      	ldr	r3, [pc, #268]	; (8006388 <ILI9341_check_date+0x15c>)
 800627a:	2202      	movs	r2, #2
 800627c:	213f      	movs	r1, #63	; 0x3f
 800627e:	2000      	movs	r0, #0
 8006280:	f001 f840 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,BLUE,2,kor_date_2_mv,col+width+width,row);
 8006284:	88fa      	ldrh	r2, [r7, #6]
 8006286:	887b      	ldrh	r3, [r7, #2]
 8006288:	4413      	add	r3, r2
 800628a:	b29a      	uxth	r2, r3
 800628c:	887b      	ldrh	r3, [r7, #2]
 800628e:	4413      	add	r3, r2
 8006290:	b29b      	uxth	r3, r3
 8006292:	88ba      	ldrh	r2, [r7, #4]
 8006294:	9201      	str	r2, [sp, #4]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	4b3c      	ldr	r3, [pc, #240]	; (800638c <ILI9341_check_date+0x160>)
 800629a:	2202      	movs	r2, #2
 800629c:	213f      	movs	r1, #63	; 0x3f
 800629e:	2000      	movs	r0, #0
 80062a0:	f001 f830 	bl	8007304 <ILI9341_write_char_15x15>
	{
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_mv[current_time.day_index],col,row);
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_1_mv,col+width,row);
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_2_mv,col+width+width,row);
	}	
}
 80062a4:	e067      	b.n	8006376 <ILI9341_check_date+0x14a>
	else if(current_time.day_index == 6)
 80062a6:	4b36      	ldr	r3, [pc, #216]	; (8006380 <ILI9341_check_date+0x154>)
 80062a8:	799b      	ldrb	r3, [r3, #6]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	d131      	bne.n	8006314 <ILI9341_check_date+0xe8>
		ILI9341_write_char_15x15(BLACK,RED,2,kor_date_mv[current_time.day_index],col,row);
 80062b0:	4b33      	ldr	r3, [pc, #204]	; (8006380 <ILI9341_check_date+0x154>)
 80062b2:	799b      	ldrb	r3, [r3, #6]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	4b32      	ldr	r3, [pc, #200]	; (8006384 <ILI9341_check_date+0x158>)
 80062ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062be:	88bb      	ldrh	r3, [r7, #4]
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	2202      	movs	r2, #2
 80062ca:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 80062ce:	2000      	movs	r0, #0
 80062d0:	f001 f818 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,RED,2,kor_date_1_mv,col+width,row);
 80062d4:	88fa      	ldrh	r2, [r7, #6]
 80062d6:	887b      	ldrh	r3, [r7, #2]
 80062d8:	4413      	add	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	88ba      	ldrh	r2, [r7, #4]
 80062de:	9201      	str	r2, [sp, #4]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	4b29      	ldr	r3, [pc, #164]	; (8006388 <ILI9341_check_date+0x15c>)
 80062e4:	2202      	movs	r2, #2
 80062e6:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 80062ea:	2000      	movs	r0, #0
 80062ec:	f001 f80a 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,RED,2,kor_date_2_mv,col+width+width,row);
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	887b      	ldrh	r3, [r7, #2]
 80062f4:	4413      	add	r3, r2
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	4413      	add	r3, r2
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	88ba      	ldrh	r2, [r7, #4]
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4b21      	ldr	r3, [pc, #132]	; (800638c <ILI9341_check_date+0x160>)
 8006306:	2202      	movs	r2, #2
 8006308:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 800630c:	2000      	movs	r0, #0
 800630e:	f000 fff9 	bl	8007304 <ILI9341_write_char_15x15>
}
 8006312:	e030      	b.n	8006376 <ILI9341_check_date+0x14a>
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_mv[current_time.day_index],col,row);
 8006314:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <ILI9341_check_date+0x154>)
 8006316:	799b      	ldrb	r3, [r3, #6]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	4b19      	ldr	r3, [pc, #100]	; (8006384 <ILI9341_check_date+0x158>)
 800631e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006322:	88bb      	ldrh	r3, [r7, #4]
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4613      	mov	r3, r2
 800632c:	2202      	movs	r2, #2
 800632e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8006332:	2000      	movs	r0, #0
 8006334:	f000 ffe6 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_1_mv,col+width,row);
 8006338:	88fa      	ldrh	r2, [r7, #6]
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	4413      	add	r3, r2
 800633e:	b29b      	uxth	r3, r3
 8006340:	88ba      	ldrh	r2, [r7, #4]
 8006342:	9201      	str	r2, [sp, #4]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <ILI9341_check_date+0x15c>)
 8006348:	2202      	movs	r2, #2
 800634a:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800634e:	2000      	movs	r0, #0
 8006350:	f000 ffd8 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_2_mv,col+width+width,row);
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	887b      	ldrh	r3, [r7, #2]
 8006358:	4413      	add	r3, r2
 800635a:	b29a      	uxth	r2, r3
 800635c:	887b      	ldrh	r3, [r7, #2]
 800635e:	4413      	add	r3, r2
 8006360:	b29b      	uxth	r3, r3
 8006362:	88ba      	ldrh	r2, [r7, #4]
 8006364:	9201      	str	r2, [sp, #4]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4b08      	ldr	r3, [pc, #32]	; (800638c <ILI9341_check_date+0x160>)
 800636a:	2202      	movs	r2, #2
 800636c:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8006370:	2000      	movs	r0, #0
 8006372:	f000 ffc7 	bl	8007304 <ILI9341_write_char_15x15>
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	200015c0 	.word	0x200015c0
 8006384:	200003dc 	.word	0x200003dc
 8006388:	20000394 	.word	0x20000394
 800638c:	200003b8 	.word	0x200003b8

08006390 <ILI9341_check_month>:

void ILI9341_check_month(uint16_t col, uint16_t row, uint16_t width)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af02      	add	r7, sp, #8
 8006396:	4603      	mov	r3, r0
 8006398:	80fb      	strh	r3, [r7, #6]
 800639a:	460b      	mov	r3, r1
 800639c:	80bb      	strh	r3, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	807b      	strh	r3, [r7, #2]
	if(current_time.month_index < 10)
 80063a2:	4b40      	ldr	r3, [pc, #256]	; (80064a4 <ILI9341_check_month+0x114>)
 80063a4:	7a5b      	ldrb	r3, [r3, #9]
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b09      	cmp	r3, #9
 80063aa:	d82e      	bhi.n	800640a <ILI9341_check_month+0x7a>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,5,0x00,col,row);
 80063ac:	88bb      	ldrh	r3, [r7, #4]
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	88fb      	ldrh	r3, [r7, #6]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2300      	movs	r3, #0
 80063b6:	2205      	movs	r2, #5
 80063b8:	493b      	ldr	r1, [pc, #236]	; (80064a8 <ILI9341_check_month+0x118>)
 80063ba:	2000      	movs	r0, #0
 80063bc:	f000 fefc 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.month_index + 1],col+width,row);
 80063c0:	4b38      	ldr	r3, [pc, #224]	; (80064a4 <ILI9341_check_month+0x114>)
 80063c2:	7a5b      	ldrb	r3, [r3, #9]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	3301      	adds	r3, #1
 80063c8:	4a38      	ldr	r2, [pc, #224]	; (80064ac <ILI9341_check_month+0x11c>)
 80063ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	887b      	ldrh	r3, [r7, #2]
 80063d2:	4413      	add	r3, r2
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	88ba      	ldrh	r2, [r7, #4]
 80063d8:	9201      	str	r2, [sp, #4]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	460b      	mov	r3, r1
 80063de:	2205      	movs	r2, #5
 80063e0:	4931      	ldr	r1, [pc, #196]	; (80064a8 <ILI9341_check_month+0x118>)
 80063e2:	2000      	movs	r0, #0
 80063e4:	f000 fee8 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_month_mv,col+width+width,row);
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	887b      	ldrh	r3, [r7, #2]
 80063ec:	4413      	add	r3, r2
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	887b      	ldrh	r3, [r7, #2]
 80063f2:	4413      	add	r3, r2
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	88ba      	ldrh	r2, [r7, #4]
 80063f8:	9201      	str	r2, [sp, #4]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <ILI9341_check_month+0x120>)
 80063fe:	2202      	movs	r2, #2
 8006400:	4929      	ldr	r1, [pc, #164]	; (80064a8 <ILI9341_check_month+0x118>)
 8006402:	2000      	movs	r0, #0
 8006404:	f000 ff7e 	bl	8007304 <ILI9341_write_char_15x15>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[(current_time.month_index / 10) + 1],col,row);
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[(current_time.month_index % 10) + 1],col+width,row);
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_month_mv,col+width+width,row);
	}
}
 8006408:	e048      	b.n	800649c <ILI9341_check_month+0x10c>
	else if(current_time.month_index >= 10)
 800640a:	4b26      	ldr	r3, [pc, #152]	; (80064a4 <ILI9341_check_month+0x114>)
 800640c:	7a5b      	ldrb	r3, [r3, #9]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b09      	cmp	r3, #9
 8006412:	d943      	bls.n	800649c <ILI9341_check_month+0x10c>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[(current_time.month_index / 10) + 1],col,row);
 8006414:	4b23      	ldr	r3, [pc, #140]	; (80064a4 <ILI9341_check_month+0x114>)
 8006416:	7a5b      	ldrb	r3, [r3, #9]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	4a26      	ldr	r2, [pc, #152]	; (80064b4 <ILI9341_check_month+0x124>)
 800641c:	fba2 2303 	umull	r2, r3, r2, r3
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	3301      	adds	r3, #1
 8006426:	4a21      	ldr	r2, [pc, #132]	; (80064ac <ILI9341_check_month+0x11c>)
 8006428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800642c:	88bb      	ldrh	r3, [r7, #4]
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	2205      	movs	r2, #5
 8006438:	491b      	ldr	r1, [pc, #108]	; (80064a8 <ILI9341_check_month+0x118>)
 800643a:	2000      	movs	r0, #0
 800643c:	f000 febc 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[(current_time.month_index % 10) + 1],col+width,row);
 8006440:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <ILI9341_check_month+0x114>)
 8006442:	7a5b      	ldrb	r3, [r3, #9]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <ILI9341_check_month+0x124>)
 8006448:	fba3 1302 	umull	r1, r3, r3, r2
 800644c:	08d9      	lsrs	r1, r3, #3
 800644e:	460b      	mov	r3, r1
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	b2db      	uxtb	r3, r3
 800645a:	3301      	adds	r3, #1
 800645c:	4a13      	ldr	r2, [pc, #76]	; (80064ac <ILI9341_check_month+0x11c>)
 800645e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	887b      	ldrh	r3, [r7, #2]
 8006466:	4413      	add	r3, r2
 8006468:	b29b      	uxth	r3, r3
 800646a:	88ba      	ldrh	r2, [r7, #4]
 800646c:	9201      	str	r2, [sp, #4]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	460b      	mov	r3, r1
 8006472:	2205      	movs	r2, #5
 8006474:	490c      	ldr	r1, [pc, #48]	; (80064a8 <ILI9341_check_month+0x118>)
 8006476:	2000      	movs	r0, #0
 8006478:	f000 fe9e 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_month_mv,col+width+width,row);
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	887b      	ldrh	r3, [r7, #2]
 8006480:	4413      	add	r3, r2
 8006482:	b29a      	uxth	r2, r3
 8006484:	887b      	ldrh	r3, [r7, #2]
 8006486:	4413      	add	r3, r2
 8006488:	b29b      	uxth	r3, r3
 800648a:	88ba      	ldrh	r2, [r7, #4]
 800648c:	9201      	str	r2, [sp, #4]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <ILI9341_check_month+0x120>)
 8006492:	2202      	movs	r2, #2
 8006494:	4904      	ldr	r1, [pc, #16]	; (80064a8 <ILI9341_check_month+0x118>)
 8006496:	2000      	movs	r0, #0
 8006498:	f000 ff34 	bl	8007304 <ILI9341_write_char_15x15>
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	200015c0 	.word	0x200015c0
 80064a8:	0003ffff 	.word	0x0003ffff
 80064ac:	2000010c 	.word	0x2000010c
 80064b0:	2000034c 	.word	0x2000034c
 80064b4:	cccccccd 	.word	0xcccccccd

080064b8 <ILI9341_check_year>:
void ILI9341_check_year(uint16_t col, uint16_t row, uint16_t width)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af02      	add	r7, sp, #8
 80064be:	4603      	mov	r3, r0
 80064c0:	80fb      	strh	r3, [r7, #6]
 80064c2:	460b      	mov	r3, r1
 80064c4:	80bb      	strh	r3, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	807b      	strh	r3, [r7, #2]
	ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.year_index[0]],col,row);
 80064ca:	4b38      	ldr	r3, [pc, #224]	; (80065ac <ILI9341_check_year+0xf4>)
 80064cc:	7a9b      	ldrb	r3, [r3, #10]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <ILI9341_check_year+0xf8>)
 80064d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064d8:	88bb      	ldrh	r3, [r7, #4]
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	2205      	movs	r2, #5
 80064e4:	4933      	ldr	r1, [pc, #204]	; (80065b4 <ILI9341_check_year+0xfc>)
 80064e6:	2000      	movs	r0, #0
 80064e8:	f000 fe66 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.year_index[1]],col+width,row);
 80064ec:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <ILI9341_check_year+0xf4>)
 80064ee:	7adb      	ldrb	r3, [r3, #11]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	4b2e      	ldr	r3, [pc, #184]	; (80065b0 <ILI9341_check_year+0xf8>)
 80064f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	887b      	ldrh	r3, [r7, #2]
 80064fe:	4413      	add	r3, r2
 8006500:	b29b      	uxth	r3, r3
 8006502:	88ba      	ldrh	r2, [r7, #4]
 8006504:	9201      	str	r2, [sp, #4]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	460b      	mov	r3, r1
 800650a:	2205      	movs	r2, #5
 800650c:	4929      	ldr	r1, [pc, #164]	; (80065b4 <ILI9341_check_year+0xfc>)
 800650e:	2000      	movs	r0, #0
 8006510:	f000 fe52 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.year_index[2]],col+width+width,row);
 8006514:	4b25      	ldr	r3, [pc, #148]	; (80065ac <ILI9341_check_year+0xf4>)
 8006516:	7b1b      	ldrb	r3, [r3, #12]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <ILI9341_check_year+0xf8>)
 800651e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	887b      	ldrh	r3, [r7, #2]
 8006526:	4413      	add	r3, r2
 8006528:	b29a      	uxth	r2, r3
 800652a:	887b      	ldrh	r3, [r7, #2]
 800652c:	4413      	add	r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	88ba      	ldrh	r2, [r7, #4]
 8006532:	9201      	str	r2, [sp, #4]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	460b      	mov	r3, r1
 8006538:	2205      	movs	r2, #5
 800653a:	491e      	ldr	r1, [pc, #120]	; (80065b4 <ILI9341_check_year+0xfc>)
 800653c:	2000      	movs	r0, #0
 800653e:	f000 fe3b 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.year_index[3]],col+width+width+width,row);
 8006542:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <ILI9341_check_year+0xf4>)
 8006544:	7b5b      	ldrb	r3, [r3, #13]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <ILI9341_check_year+0xf8>)
 800654c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	887b      	ldrh	r3, [r7, #2]
 8006554:	4413      	add	r3, r2
 8006556:	b29a      	uxth	r2, r3
 8006558:	887b      	ldrh	r3, [r7, #2]
 800655a:	4413      	add	r3, r2
 800655c:	b29a      	uxth	r2, r3
 800655e:	887b      	ldrh	r3, [r7, #2]
 8006560:	4413      	add	r3, r2
 8006562:	b29b      	uxth	r3, r3
 8006564:	88ba      	ldrh	r2, [r7, #4]
 8006566:	9201      	str	r2, [sp, #4]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	460b      	mov	r3, r1
 800656c:	2205      	movs	r2, #5
 800656e:	4911      	ldr	r1, [pc, #68]	; (80065b4 <ILI9341_check_year+0xfc>)
 8006570:	2000      	movs	r0, #0
 8006572:	f000 fe21 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_15x15(BLACK,WHITE,2,kor_year_mv,col+width+width+width+width,row);
 8006576:	88fa      	ldrh	r2, [r7, #6]
 8006578:	887b      	ldrh	r3, [r7, #2]
 800657a:	4413      	add	r3, r2
 800657c:	b29a      	uxth	r2, r3
 800657e:	887b      	ldrh	r3, [r7, #2]
 8006580:	4413      	add	r3, r2
 8006582:	b29a      	uxth	r2, r3
 8006584:	887b      	ldrh	r3, [r7, #2]
 8006586:	4413      	add	r3, r2
 8006588:	b29a      	uxth	r2, r3
 800658a:	887b      	ldrh	r3, [r7, #2]
 800658c:	4413      	add	r3, r2
 800658e:	b29b      	uxth	r3, r3
 8006590:	88ba      	ldrh	r2, [r7, #4]
 8006592:	9201      	str	r2, [sp, #4]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <ILI9341_check_year+0x100>)
 8006598:	2202      	movs	r2, #2
 800659a:	4906      	ldr	r1, [pc, #24]	; (80065b4 <ILI9341_check_year+0xfc>)
 800659c:	2000      	movs	r0, #0
 800659e:	f000 feb1 	bl	8007304 <ILI9341_write_char_15x15>
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200015c0 	.word	0x200015c0
 80065b0:	2000010c 	.word	0x2000010c
 80065b4:	0003ffff 	.word	0x0003ffff
 80065b8:	20000328 	.word	0x20000328

080065bc <ILI9341_LCD_input_data_time>:

void ILI9341_LCD_input_data_time()
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af02      	add	r7, sp, #8
	ILI9341_check_0h_11h_or_12h_23h(250,15,30);
 80065c2:	221e      	movs	r2, #30
 80065c4:	210f      	movs	r1, #15
 80065c6:	20fa      	movs	r0, #250	; 0xfa
 80065c8:	f7ff fc36 	bl	8005e38 <ILI9341_check_0h_11h_or_12h_23h>
	ILI9341_check_hour(30,60,60);
 80065cc:	223c      	movs	r2, #60	; 0x3c
 80065ce:	213c      	movs	r1, #60	; 0x3c
 80065d0:	201e      	movs	r0, #30
 80065d2:	f7ff fc83 	bl	8005edc <ILI9341_check_hour>
	ILI9341_write_char_5x5(BLACK,WHITE,10,colon_mv,140,60);
 80065d6:	4b13      	ldr	r3, [pc, #76]	; (8006624 <ILI9341_LCD_input_data_time+0x68>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	223c      	movs	r2, #60	; 0x3c
 80065dc:	9201      	str	r2, [sp, #4]
 80065de:	228c      	movs	r2, #140	; 0x8c
 80065e0:	9200      	str	r2, [sp, #0]
 80065e2:	220a      	movs	r2, #10
 80065e4:	4910      	ldr	r1, [pc, #64]	; (8006628 <ILI9341_LCD_input_data_time+0x6c>)
 80065e6:	2000      	movs	r0, #0
 80065e8:	f000 fde6 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_check_minutes(190,60,60);
 80065ec:	223c      	movs	r2, #60	; 0x3c
 80065ee:	213c      	movs	r1, #60	; 0x3c
 80065f0:	20be      	movs	r0, #190	; 0xbe
 80065f2:	f7ff fd5f 	bl	80060b4 <ILI9341_check_minutes>
	ILI9341_check_year(160,150,30);
 80065f6:	221e      	movs	r2, #30
 80065f8:	2196      	movs	r1, #150	; 0x96
 80065fa:	20a0      	movs	r0, #160	; 0xa0
 80065fc:	f7ff ff5c 	bl	80064b8 <ILI9341_check_year>
	ILI9341_check_month(20,200,30);
 8006600:	221e      	movs	r2, #30
 8006602:	21c8      	movs	r1, #200	; 0xc8
 8006604:	2014      	movs	r0, #20
 8006606:	f7ff fec3 	bl	8006390 <ILI9341_check_month>
	ILI9341_check_day_num(120,200,30);
 800660a:	221e      	movs	r2, #30
 800660c:	21c8      	movs	r1, #200	; 0xc8
 800660e:	2078      	movs	r0, #120	; 0x78
 8006610:	f7ff fd88 	bl	8006124 <ILI9341_check_day_num>
	ILI9341_check_date(220,200,30);
 8006614:	221e      	movs	r2, #30
 8006616:	21c8      	movs	r1, #200	; 0xc8
 8006618:	20dc      	movs	r0, #220	; 0xdc
 800661a:	f7ff fe07 	bl	800622c <ILI9341_check_date>
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000108 	.word	0x20000108
 8006628:	0003ffff 	.word	0x0003ffff

0800662c <ILI9341_LCD_input_data_temperature_humidity>:



void ILI9341_LCD_input_data_temperature_humidity()
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af02      	add	r7, sp, #8
	if(temperature < 100 && humidity < 100)
 8006632:	4b62      	ldr	r3, [pc, #392]	; (80067bc <ILI9341_LCD_input_data_temperature_humidity+0x190>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b63      	cmp	r3, #99	; 0x63
 8006638:	f200 80bb 	bhi.w	80067b2 <ILI9341_LCD_input_data_temperature_humidity+0x186>
 800663c:	4b60      	ldr	r3, [pc, #384]	; (80067c0 <ILI9341_LCD_input_data_temperature_humidity+0x194>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b63      	cmp	r3, #99	; 0x63
 8006642:	f200 80b6 	bhi.w	80067b2 <ILI9341_LCD_input_data_temperature_humidity+0x186>
	{
		uint8_t temp_index[2];
		temp_index[0] = temperature / 10;
 8006646:	4b5d      	ldr	r3, [pc, #372]	; (80067bc <ILI9341_LCD_input_data_temperature_humidity+0x190>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a5e      	ldr	r2, [pc, #376]	; (80067c4 <ILI9341_LCD_input_data_temperature_humidity+0x198>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	b2db      	uxtb	r3, r3
 8006654:	713b      	strb	r3, [r7, #4]
		temp_index[1] = temperature % 10;
 8006656:	4b59      	ldr	r3, [pc, #356]	; (80067bc <ILI9341_LCD_input_data_temperature_humidity+0x190>)
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	4b5a      	ldr	r3, [pc, #360]	; (80067c4 <ILI9341_LCD_input_data_temperature_humidity+0x198>)
 800665c:	fba3 2301 	umull	r2, r3, r3, r1
 8006660:	08da      	lsrs	r2, r3, #3
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	1aca      	subs	r2, r1, r3
 800666c:	b2d3      	uxtb	r3, r2
 800666e:	717b      	strb	r3, [r7, #5]
		uint8_t humi_index[2];
		humi_index[0] = humidity / 10;
 8006670:	4b53      	ldr	r3, [pc, #332]	; (80067c0 <ILI9341_LCD_input_data_temperature_humidity+0x194>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a53      	ldr	r2, [pc, #332]	; (80067c4 <ILI9341_LCD_input_data_temperature_humidity+0x198>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	08db      	lsrs	r3, r3, #3
 800667c:	b2db      	uxtb	r3, r3
 800667e:	703b      	strb	r3, [r7, #0]
		humi_index[1] = humidity % 10;
 8006680:	4b4f      	ldr	r3, [pc, #316]	; (80067c0 <ILI9341_LCD_input_data_temperature_humidity+0x194>)
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	4b4f      	ldr	r3, [pc, #316]	; (80067c4 <ILI9341_LCD_input_data_temperature_humidity+0x198>)
 8006686:	fba3 2301 	umull	r2, r3, r3, r1
 800668a:	08da      	lsrs	r2, r3, #3
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	1aca      	subs	r2, r1, r3
 8006696:	b2d3      	uxtb	r3, r2
 8006698:	707b      	strb	r3, [r7, #1]
		ILI9341_write_char_15x15(BLACK,WHITE,3,kor_temperature_1_mv,20,50);
 800669a:	2332      	movs	r3, #50	; 0x32
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	2314      	movs	r3, #20
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <ILI9341_LCD_input_data_temperature_humidity+0x19c>)
 80066a4:	2203      	movs	r2, #3
 80066a6:	4949      	ldr	r1, [pc, #292]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 80066a8:	2000      	movs	r0, #0
 80066aa:	f000 fe2b 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,WHITE,3,kor_temperature_2_mv,60,50);
 80066ae:	2332      	movs	r3, #50	; 0x32
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	233c      	movs	r3, #60	; 0x3c
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4b46      	ldr	r3, [pc, #280]	; (80067d0 <ILI9341_LCD_input_data_temperature_humidity+0x1a4>)
 80066b8:	2203      	movs	r2, #3
 80066ba:	4944      	ldr	r1, [pc, #272]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 80066bc:	2000      	movs	r0, #0
 80066be:	f000 fe21 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_5x5(BLACK,WHITE,9,colon_mv,110,50);
 80066c2:	4b44      	ldr	r3, [pc, #272]	; (80067d4 <ILI9341_LCD_input_data_temperature_humidity+0x1a8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2232      	movs	r2, #50	; 0x32
 80066c8:	9201      	str	r2, [sp, #4]
 80066ca:	226e      	movs	r2, #110	; 0x6e
 80066cc:	9200      	str	r2, [sp, #0]
 80066ce:	2209      	movs	r2, #9
 80066d0:	493e      	ldr	r1, [pc, #248]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 80066d2:	2000      	movs	r0, #0
 80066d4:	f000 fd70 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,9,numbers_mv[temp_index[0]],160,50);
 80066d8:	793b      	ldrb	r3, [r7, #4]
 80066da:	461a      	mov	r2, r3
 80066dc:	4b3e      	ldr	r3, [pc, #248]	; (80067d8 <ILI9341_LCD_input_data_temperature_humidity+0x1ac>)
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	2232      	movs	r2, #50	; 0x32
 80066e4:	9201      	str	r2, [sp, #4]
 80066e6:	22a0      	movs	r2, #160	; 0xa0
 80066e8:	9200      	str	r2, [sp, #0]
 80066ea:	2209      	movs	r2, #9
 80066ec:	4937      	ldr	r1, [pc, #220]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 80066ee:	2000      	movs	r0, #0
 80066f0:	f000 fd62 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,9,numbers_mv[temp_index[1]],210,50);
 80066f4:	797b      	ldrb	r3, [r7, #5]
 80066f6:	461a      	mov	r2, r3
 80066f8:	4b37      	ldr	r3, [pc, #220]	; (80067d8 <ILI9341_LCD_input_data_temperature_humidity+0x1ac>)
 80066fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fe:	2232      	movs	r2, #50	; 0x32
 8006700:	9201      	str	r2, [sp, #4]
 8006702:	22d2      	movs	r2, #210	; 0xd2
 8006704:	9200      	str	r2, [sp, #0]
 8006706:	2209      	movs	r2, #9
 8006708:	4930      	ldr	r1, [pc, #192]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 800670a:	2000      	movs	r0, #0
 800670c:	f000 fd54 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,3,celsius_symbol_mv,260,50);
 8006710:	2332      	movs	r3, #50	; 0x32
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	4b30      	ldr	r3, [pc, #192]	; (80067dc <ILI9341_LCD_input_data_temperature_humidity+0x1b0>)
 800671c:	2203      	movs	r2, #3
 800671e:	492b      	ldr	r1, [pc, #172]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 8006720:	2000      	movs	r0, #0
 8006722:	f000 fdef 	bl	8007304 <ILI9341_write_char_15x15>
	
		ILI9341_write_char_15x15(BLACK,WHITE,3,kor_humidity_1_mv,20,150);
 8006726:	2396      	movs	r3, #150	; 0x96
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	2314      	movs	r3, #20
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	4b2c      	ldr	r3, [pc, #176]	; (80067e0 <ILI9341_LCD_input_data_temperature_humidity+0x1b4>)
 8006730:	2203      	movs	r2, #3
 8006732:	4926      	ldr	r1, [pc, #152]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 8006734:	2000      	movs	r0, #0
 8006736:	f000 fde5 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,WHITE,3,kor_humidity_2_mv,60,150);
 800673a:	2396      	movs	r3, #150	; 0x96
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	233c      	movs	r3, #60	; 0x3c
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	4b28      	ldr	r3, [pc, #160]	; (80067e4 <ILI9341_LCD_input_data_temperature_humidity+0x1b8>)
 8006744:	2203      	movs	r2, #3
 8006746:	4921      	ldr	r1, [pc, #132]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 8006748:	2000      	movs	r0, #0
 800674a:	f000 fddb 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_5x5(BLACK,WHITE,9,colon_mv,110,150);
 800674e:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <ILI9341_LCD_input_data_temperature_humidity+0x1a8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2296      	movs	r2, #150	; 0x96
 8006754:	9201      	str	r2, [sp, #4]
 8006756:	226e      	movs	r2, #110	; 0x6e
 8006758:	9200      	str	r2, [sp, #0]
 800675a:	2209      	movs	r2, #9
 800675c:	491b      	ldr	r1, [pc, #108]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 800675e:	2000      	movs	r0, #0
 8006760:	f000 fd2a 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,9,numbers_mv[humi_index[0]],160,150);
 8006764:	783b      	ldrb	r3, [r7, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <ILI9341_LCD_input_data_temperature_humidity+0x1ac>)
 800676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676e:	2296      	movs	r2, #150	; 0x96
 8006770:	9201      	str	r2, [sp, #4]
 8006772:	22a0      	movs	r2, #160	; 0xa0
 8006774:	9200      	str	r2, [sp, #0]
 8006776:	2209      	movs	r2, #9
 8006778:	4914      	ldr	r1, [pc, #80]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 800677a:	2000      	movs	r0, #0
 800677c:	f000 fd1c 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,9,numbers_mv[humi_index[1]],210,150);
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	461a      	mov	r2, r3
 8006784:	4b14      	ldr	r3, [pc, #80]	; (80067d8 <ILI9341_LCD_input_data_temperature_humidity+0x1ac>)
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	2296      	movs	r2, #150	; 0x96
 800678c:	9201      	str	r2, [sp, #4]
 800678e:	22d2      	movs	r2, #210	; 0xd2
 8006790:	9200      	str	r2, [sp, #0]
 8006792:	2209      	movs	r2, #9
 8006794:	490d      	ldr	r1, [pc, #52]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 8006796:	2000      	movs	r0, #0
 8006798:	f000 fd0e 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,3,percent_symbol_mv,260,150);
 800679c:	2396      	movs	r3, #150	; 0x96
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <ILI9341_LCD_input_data_temperature_humidity+0x1bc>)
 80067a8:	2203      	movs	r2, #3
 80067aa:	4908      	ldr	r1, [pc, #32]	; (80067cc <ILI9341_LCD_input_data_temperature_humidity+0x1a0>)
 80067ac:	2000      	movs	r0, #0
 80067ae:	f000 fda9 	bl	8007304 <ILI9341_write_char_15x15>
	}
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	200010dc 	.word	0x200010dc
 80067c0:	200010e0 	.word	0x200010e0
 80067c4:	cccccccd 	.word	0xcccccccd
 80067c8:	20000518 	.word	0x20000518
 80067cc:	0003ffff 	.word	0x0003ffff
 80067d0:	2000053c 	.word	0x2000053c
 80067d4:	20000108 	.word	0x20000108
 80067d8:	2000010c 	.word	0x2000010c
 80067dc:	200005a8 	.word	0x200005a8
 80067e0:	20000560 	.word	0x20000560
 80067e4:	20000584 	.word	0x20000584
 80067e8:	20000614 	.word	0x20000614

080067ec <ILI9341_LCD_input_data_air_quality>:

void ILI9341_LCD_input_data_air_quality()
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af02      	add	r7, sp, #8
	uint8_t CO2_index[4];
	uint8_t TVOC_index[4];
	
	uint32_t CO2_temp = CO2;
 80067f2:	4b8e      	ldr	r3, [pc, #568]	; (8006a2c <ILI9341_LCD_input_data_air_quality+0x240>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
	uint32_t TVOC_temp = TVOC;
 80067f8:	4b8d      	ldr	r3, [pc, #564]	; (8006a30 <ILI9341_LCD_input_data_air_quality+0x244>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60bb      	str	r3, [r7, #8]
	
	CO2_index[0] = CO2_temp / 1000;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4a8c      	ldr	r2, [pc, #560]	; (8006a34 <ILI9341_LCD_input_data_air_quality+0x248>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	b2db      	uxtb	r3, r3
 800680a:	713b      	strb	r3, [r7, #4]
	CO2_temp %= 1000;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a89      	ldr	r2, [pc, #548]	; (8006a34 <ILI9341_LCD_input_data_air_quality+0x248>)
 8006810:	fba2 1203 	umull	r1, r2, r2, r3
 8006814:	0992      	lsrs	r2, r2, #6
 8006816:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800681a:	fb01 f202 	mul.w	r2, r1, r2
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
	CO2_index[1] = CO2_temp / 100;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a84      	ldr	r2, [pc, #528]	; (8006a38 <ILI9341_LCD_input_data_air_quality+0x24c>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	b2db      	uxtb	r3, r3
 800682e:	717b      	strb	r3, [r7, #5]
	CO2_temp %= 100;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a81      	ldr	r2, [pc, #516]	; (8006a38 <ILI9341_LCD_input_data_air_quality+0x24c>)
 8006834:	fba2 1203 	umull	r1, r2, r2, r3
 8006838:	0952      	lsrs	r2, r2, #5
 800683a:	2164      	movs	r1, #100	; 0x64
 800683c:	fb01 f202 	mul.w	r2, r1, r2
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
	CO2_index[2] = CO2_temp / 10;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a7d      	ldr	r2, [pc, #500]	; (8006a3c <ILI9341_LCD_input_data_air_quality+0x250>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	08db      	lsrs	r3, r3, #3
 800684e:	b2db      	uxtb	r3, r3
 8006850:	71bb      	strb	r3, [r7, #6]
	CO2_temp %= 10;
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4b79      	ldr	r3, [pc, #484]	; (8006a3c <ILI9341_LCD_input_data_air_quality+0x250>)
 8006856:	fba3 1302 	umull	r1, r3, r3, r2
 800685a:	08d9      	lsrs	r1, r3, #3
 800685c:	460b      	mov	r3, r1
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	60fb      	str	r3, [r7, #12]
	CO2_index[3] = CO2_temp;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	71fb      	strb	r3, [r7, #7]
	
	TVOC_index[0] = TVOC_temp / 1000;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4a70      	ldr	r2, [pc, #448]	; (8006a34 <ILI9341_LCD_input_data_air_quality+0x248>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	099b      	lsrs	r3, r3, #6
 8006878:	b2db      	uxtb	r3, r3
 800687a:	703b      	strb	r3, [r7, #0]
	TVOC_temp %= 1000;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4a6d      	ldr	r2, [pc, #436]	; (8006a34 <ILI9341_LCD_input_data_air_quality+0x248>)
 8006880:	fba2 1203 	umull	r1, r2, r2, r3
 8006884:	0992      	lsrs	r2, r2, #6
 8006886:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800688a:	fb01 f202 	mul.w	r2, r1, r2
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	60bb      	str	r3, [r7, #8]
	TVOC_index[1] = TVOC_temp / 100;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4a68      	ldr	r2, [pc, #416]	; (8006a38 <ILI9341_LCD_input_data_air_quality+0x24c>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	b2db      	uxtb	r3, r3
 800689e:	707b      	strb	r3, [r7, #1]
	TVOC_temp %= 100;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4a65      	ldr	r2, [pc, #404]	; (8006a38 <ILI9341_LCD_input_data_air_quality+0x24c>)
 80068a4:	fba2 1203 	umull	r1, r2, r2, r3
 80068a8:	0952      	lsrs	r2, r2, #5
 80068aa:	2164      	movs	r1, #100	; 0x64
 80068ac:	fb01 f202 	mul.w	r2, r1, r2
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
	TVOC_index[2] = TVOC_temp / 10;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a61      	ldr	r2, [pc, #388]	; (8006a3c <ILI9341_LCD_input_data_air_quality+0x250>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	08db      	lsrs	r3, r3, #3
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	70bb      	strb	r3, [r7, #2]
	TVOC_temp %= 10;
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	4b5d      	ldr	r3, [pc, #372]	; (8006a3c <ILI9341_LCD_input_data_air_quality+0x250>)
 80068c6:	fba3 1302 	umull	r1, r3, r3, r2
 80068ca:	08d9      	lsrs	r1, r3, #3
 80068cc:	460b      	mov	r3, r1
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	60bb      	str	r3, [r7, #8]
	TVOC_index[3] = TVOC_temp;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	70fb      	strb	r3, [r7, #3]
	ILI9341_write_char_15x15(BLACK,WHITE,4,kor_air_1_mv,10,40);
 80068de:	2328      	movs	r3, #40	; 0x28
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	230a      	movs	r3, #10
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	4b56      	ldr	r3, [pc, #344]	; (8006a40 <ILI9341_LCD_input_data_air_quality+0x254>)
 80068e8:	2204      	movs	r2, #4
 80068ea:	4956      	ldr	r1, [pc, #344]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 80068ec:	2000      	movs	r0, #0
 80068ee:	f000 fd09 	bl	8007304 <ILI9341_write_char_15x15>
	ILI9341_write_char_15x15(BLACK,WHITE,4,kor_air_2_mv,75,40);
 80068f2:	2328      	movs	r3, #40	; 0x28
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	234b      	movs	r3, #75	; 0x4b
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	4b53      	ldr	r3, [pc, #332]	; (8006a48 <ILI9341_LCD_input_data_air_quality+0x25c>)
 80068fc:	2204      	movs	r2, #4
 80068fe:	4951      	ldr	r1, [pc, #324]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 8006900:	2000      	movs	r0, #0
 8006902:	f000 fcff 	bl	8007304 <ILI9341_write_char_15x15>
	ILI9341_write_char_5x5(BLACK,WHITE,9,colon_mv,140,45);
 8006906:	4b51      	ldr	r3, [pc, #324]	; (8006a4c <ILI9341_LCD_input_data_air_quality+0x260>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	222d      	movs	r2, #45	; 0x2d
 800690c:	9201      	str	r2, [sp, #4]
 800690e:	228c      	movs	r2, #140	; 0x8c
 8006910:	9200      	str	r2, [sp, #0]
 8006912:	2209      	movs	r2, #9
 8006914:	494b      	ldr	r1, [pc, #300]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 8006916:	2000      	movs	r0, #0
 8006918:	f000 fc4e 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,6,upper_alphabet_mv[2],20,150);
 800691c:	4b4c      	ldr	r3, [pc, #304]	; (8006a50 <ILI9341_LCD_input_data_air_quality+0x264>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2296      	movs	r2, #150	; 0x96
 8006922:	9201      	str	r2, [sp, #4]
 8006924:	2214      	movs	r2, #20
 8006926:	9200      	str	r2, [sp, #0]
 8006928:	2206      	movs	r2, #6
 800692a:	4946      	ldr	r1, [pc, #280]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 800692c:	2000      	movs	r0, #0
 800692e:	f000 fc43 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,6,upper_alphabet_mv['O'-'A'],60,150);
 8006932:	4b47      	ldr	r3, [pc, #284]	; (8006a50 <ILI9341_LCD_input_data_air_quality+0x264>)
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	2296      	movs	r2, #150	; 0x96
 8006938:	9201      	str	r2, [sp, #4]
 800693a:	223c      	movs	r2, #60	; 0x3c
 800693c:	9200      	str	r2, [sp, #0]
 800693e:	2206      	movs	r2, #6
 8006940:	4940      	ldr	r1, [pc, #256]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 8006942:	2000      	movs	r0, #0
 8006944:	f000 fc38 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,3,numbers_mv[2],100,170);
 8006948:	4b42      	ldr	r3, [pc, #264]	; (8006a54 <ILI9341_LCD_input_data_air_quality+0x268>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	22aa      	movs	r2, #170	; 0xaa
 800694e:	9201      	str	r2, [sp, #4]
 8006950:	2264      	movs	r2, #100	; 0x64
 8006952:	9200      	str	r2, [sp, #0]
 8006954:	2203      	movs	r2, #3
 8006956:	493b      	ldr	r1, [pc, #236]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 8006958:	2000      	movs	r0, #0
 800695a:	f000 fc2d 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,upper_alphabet_mv['t'-'a'],0,200);
 800695e:	4b3c      	ldr	r3, [pc, #240]	; (8006a50 <ILI9341_LCD_input_data_air_quality+0x264>)
 8006960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006962:	22c8      	movs	r2, #200	; 0xc8
 8006964:	9201      	str	r2, [sp, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	9200      	str	r2, [sp, #0]
 800696a:	2205      	movs	r2, #5
 800696c:	4935      	ldr	r1, [pc, #212]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 800696e:	2000      	movs	r0, #0
 8006970:	f000 fc22 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,upper_alphabet_mv['v'-'a'],30,200);
 8006974:	4b36      	ldr	r3, [pc, #216]	; (8006a50 <ILI9341_LCD_input_data_air_quality+0x264>)
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	22c8      	movs	r2, #200	; 0xc8
 800697a:	9201      	str	r2, [sp, #4]
 800697c:	221e      	movs	r2, #30
 800697e:	9200      	str	r2, [sp, #0]
 8006980:	2205      	movs	r2, #5
 8006982:	4930      	ldr	r1, [pc, #192]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 8006984:	2000      	movs	r0, #0
 8006986:	f000 fc17 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,upper_alphabet_mv['o'-'a'],60,200);
 800698a:	4b31      	ldr	r3, [pc, #196]	; (8006a50 <ILI9341_LCD_input_data_air_quality+0x264>)
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	22c8      	movs	r2, #200	; 0xc8
 8006990:	9201      	str	r2, [sp, #4]
 8006992:	223c      	movs	r2, #60	; 0x3c
 8006994:	9200      	str	r2, [sp, #0]
 8006996:	2205      	movs	r2, #5
 8006998:	492a      	ldr	r1, [pc, #168]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 800699a:	2000      	movs	r0, #0
 800699c:	f000 fc0c 	bl	80071b8 <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,upper_alphabet_mv['c'-'a'],90,200);
 80069a0:	4b2b      	ldr	r3, [pc, #172]	; (8006a50 <ILI9341_LCD_input_data_air_quality+0x264>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	22c8      	movs	r2, #200	; 0xc8
 80069a6:	9201      	str	r2, [sp, #4]
 80069a8:	225a      	movs	r2, #90	; 0x5a
 80069aa:	9200      	str	r2, [sp, #0]
 80069ac:	2205      	movs	r2, #5
 80069ae:	4925      	ldr	r1, [pc, #148]	; (8006a44 <ILI9341_LCD_input_data_air_quality+0x258>)
 80069b0:	2000      	movs	r0, #0
 80069b2:	f000 fc01 	bl	80071b8 <ILI9341_write_char_5x5>
	if(CO2 >= 2000 || TVOC >= 500)
 80069b6:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <ILI9341_LCD_input_data_air_quality+0x240>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80069be:	d204      	bcs.n	80069ca <ILI9341_LCD_input_data_air_quality+0x1de>
 80069c0:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <ILI9341_LCD_input_data_air_quality+0x244>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80069c8:	d316      	bcc.n	80069f8 <ILI9341_LCD_input_data_air_quality+0x20c>
	{
		ILI9341_write_char_15x15(BLACK,RED,4,kor_bad_1_mv,190,40);
 80069ca:	2328      	movs	r3, #40	; 0x28
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	23be      	movs	r3, #190	; 0xbe
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <ILI9341_LCD_input_data_air_quality+0x26c>)
 80069d4:	2204      	movs	r2, #4
 80069d6:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 80069da:	2000      	movs	r0, #0
 80069dc:	f000 fc92 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,RED,4,kor_bad_2_mv,255,40);
 80069e0:	2328      	movs	r3, #40	; 0x28
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	23ff      	movs	r3, #255	; 0xff
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	4b1c      	ldr	r3, [pc, #112]	; (8006a5c <ILI9341_LCD_input_data_air_quality+0x270>)
 80069ea:	2204      	movs	r2, #4
 80069ec:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 80069f0:	2000      	movs	r0, #0
 80069f2:	f000 fc87 	bl	8007304 <ILI9341_write_char_15x15>
 80069f6:	e054      	b.n	8006aa2 <ILI9341_LCD_input_data_air_quality+0x2b6>
	}
	else if(CO2 >= 1000)
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <ILI9341_LCD_input_data_air_quality+0x240>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a00:	d334      	bcc.n	8006a6c <ILI9341_LCD_input_data_air_quality+0x280>
	{
		ILI9341_write_char_15x15(BLACK,SKYBLUE,4,kor_normal_1_mv,190,40);
 8006a02:	2328      	movs	r3, #40	; 0x28
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	23be      	movs	r3, #190	; 0xbe
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <ILI9341_LCD_input_data_air_quality+0x274>)
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	4915      	ldr	r1, [pc, #84]	; (8006a64 <ILI9341_LCD_input_data_air_quality+0x278>)
 8006a10:	2000      	movs	r0, #0
 8006a12:	f000 fc77 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,SKYBLUE,4,kor_normal_2_mv,255,40);
 8006a16:	2328      	movs	r3, #40	; 0x28
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	23ff      	movs	r3, #255	; 0xff
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <ILI9341_LCD_input_data_air_quality+0x27c>)
 8006a20:	2204      	movs	r2, #4
 8006a22:	4910      	ldr	r1, [pc, #64]	; (8006a64 <ILI9341_LCD_input_data_air_quality+0x278>)
 8006a24:	2000      	movs	r0, #0
 8006a26:	f000 fc6d 	bl	8007304 <ILI9341_write_char_15x15>
 8006a2a:	e03a      	b.n	8006aa2 <ILI9341_LCD_input_data_air_quality+0x2b6>
 8006a2c:	200010b8 	.word	0x200010b8
 8006a30:	200010bc 	.word	0x200010bc
 8006a34:	10624dd3 	.word	0x10624dd3
 8006a38:	51eb851f 	.word	0x51eb851f
 8006a3c:	cccccccd 	.word	0xcccccccd
 8006a40:	200003f8 	.word	0x200003f8
 8006a44:	0003ffff 	.word	0x0003ffff
 8006a48:	2000041c 	.word	0x2000041c
 8006a4c:	20000108 	.word	0x20000108
 8006a50:	20000134 	.word	0x20000134
 8006a54:	2000010c 	.word	0x2000010c
 8006a58:	20000440 	.word	0x20000440
 8006a5c:	20000464 	.word	0x20000464
 8006a60:	20000488 	.word	0x20000488
 8006a64:	00020fff 	.word	0x00020fff
 8006a68:	200004ac 	.word	0x200004ac
	}
	else if(CO2 < 1000)
 8006a6c:	4bab      	ldr	r3, [pc, #684]	; (8006d1c <ILI9341_LCD_input_data_air_quality+0x530>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a74:	d215      	bcs.n	8006aa2 <ILI9341_LCD_input_data_air_quality+0x2b6>
	{
		ILI9341_write_char_15x15(BLACK,GREEN,4,kor_good_1_mv,190,40);
 8006a76:	2328      	movs	r3, #40	; 0x28
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	23be      	movs	r3, #190	; 0xbe
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4ba8      	ldr	r3, [pc, #672]	; (8006d20 <ILI9341_LCD_input_data_air_quality+0x534>)
 8006a80:	2204      	movs	r2, #4
 8006a82:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8006a86:	2000      	movs	r0, #0
 8006a88:	f000 fc3c 	bl	8007304 <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,GREEN,4,kor_good_2_mv,255,40);
 8006a8c:	2328      	movs	r3, #40	; 0x28
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	23ff      	movs	r3, #255	; 0xff
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4ba3      	ldr	r3, [pc, #652]	; (8006d24 <ILI9341_LCD_input_data_air_quality+0x538>)
 8006a96:	2204      	movs	r2, #4
 8006a98:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f000 fc31 	bl	8007304 <ILI9341_write_char_15x15>
	}
	if(CO2 >= 1000)
 8006aa2:	4b9e      	ldr	r3, [pc, #632]	; (8006d1c <ILI9341_LCD_input_data_air_quality+0x530>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aaa:	d338      	bcc.n	8006b1e <ILI9341_LCD_input_data_air_quality+0x332>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[0]],120,150);
 8006aac:	793b      	ldrb	r3, [r7, #4]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4b9d      	ldr	r3, [pc, #628]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab6:	2296      	movs	r2, #150	; 0x96
 8006ab8:	9201      	str	r2, [sp, #4]
 8006aba:	2278      	movs	r2, #120	; 0x78
 8006abc:	9200      	str	r2, [sp, #0]
 8006abe:	2206      	movs	r2, #6
 8006ac0:	499a      	ldr	r1, [pc, #616]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f000 fb78 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[1]],160,150);
 8006ac8:	797b      	ldrb	r3, [r7, #5]
 8006aca:	461a      	mov	r2, r3
 8006acc:	4b96      	ldr	r3, [pc, #600]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	2296      	movs	r2, #150	; 0x96
 8006ad4:	9201      	str	r2, [sp, #4]
 8006ad6:	22a0      	movs	r2, #160	; 0xa0
 8006ad8:	9200      	str	r2, [sp, #0]
 8006ada:	2206      	movs	r2, #6
 8006adc:	4993      	ldr	r1, [pc, #588]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f000 fb6a 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[2]],200,150);
 8006ae4:	79bb      	ldrb	r3, [r7, #6]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4b8f      	ldr	r3, [pc, #572]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aee:	2296      	movs	r2, #150	; 0x96
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	22c8      	movs	r2, #200	; 0xc8
 8006af4:	9200      	str	r2, [sp, #0]
 8006af6:	2206      	movs	r2, #6
 8006af8:	498c      	ldr	r1, [pc, #560]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006afa:	2000      	movs	r0, #0
 8006afc:	f000 fb5c 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[3]],240,150);
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	461a      	mov	r2, r3
 8006b04:	4b88      	ldr	r3, [pc, #544]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0a:	2296      	movs	r2, #150	; 0x96
 8006b0c:	9201      	str	r2, [sp, #4]
 8006b0e:	22f0      	movs	r2, #240	; 0xf0
 8006b10:	9200      	str	r2, [sp, #0]
 8006b12:	2206      	movs	r2, #6
 8006b14:	4985      	ldr	r1, [pc, #532]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006b16:	2000      	movs	r0, #0
 8006b18:	f000 fb4e 	bl	80071b8 <ILI9341_write_char_5x5>
 8006b1c:	e02e      	b.n	8006b7c <ILI9341_LCD_input_data_air_quality+0x390>
	}
	else if(CO2 < 1000)
 8006b1e:	4b7f      	ldr	r3, [pc, #508]	; (8006d1c <ILI9341_LCD_input_data_air_quality+0x530>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b26:	d229      	bcs.n	8006b7c <ILI9341_LCD_input_data_air_quality+0x390>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[1]],160,150);
 8006b28:	797b      	ldrb	r3, [r7, #5]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4b7e      	ldr	r3, [pc, #504]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b32:	2296      	movs	r2, #150	; 0x96
 8006b34:	9201      	str	r2, [sp, #4]
 8006b36:	22a0      	movs	r2, #160	; 0xa0
 8006b38:	9200      	str	r2, [sp, #0]
 8006b3a:	2206      	movs	r2, #6
 8006b3c:	497b      	ldr	r1, [pc, #492]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006b3e:	2000      	movs	r0, #0
 8006b40:	f000 fb3a 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[2]],200,150);
 8006b44:	79bb      	ldrb	r3, [r7, #6]
 8006b46:	461a      	mov	r2, r3
 8006b48:	4b77      	ldr	r3, [pc, #476]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4e:	2296      	movs	r2, #150	; 0x96
 8006b50:	9201      	str	r2, [sp, #4]
 8006b52:	22c8      	movs	r2, #200	; 0xc8
 8006b54:	9200      	str	r2, [sp, #0]
 8006b56:	2206      	movs	r2, #6
 8006b58:	4974      	ldr	r1, [pc, #464]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	f000 fb2c 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[3]],240,150);
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	461a      	mov	r2, r3
 8006b64:	4b70      	ldr	r3, [pc, #448]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	2296      	movs	r2, #150	; 0x96
 8006b6c:	9201      	str	r2, [sp, #4]
 8006b6e:	22f0      	movs	r2, #240	; 0xf0
 8006b70:	9200      	str	r2, [sp, #0]
 8006b72:	2206      	movs	r2, #6
 8006b74:	496d      	ldr	r1, [pc, #436]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006b76:	2000      	movs	r0, #0
 8006b78:	f000 fb1e 	bl	80071b8 <ILI9341_write_char_5x5>
	}
	ILI9341_write_char_15x15(BLACK,WHITE,2,parts_per_million_symbol_mv,280,150);
 8006b7c:	2396      	movs	r3, #150	; 0x96
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	f44f 738c 	mov.w	r3, #280	; 0x118
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	4b6a      	ldr	r3, [pc, #424]	; (8006d30 <ILI9341_LCD_input_data_air_quality+0x544>)
 8006b88:	2202      	movs	r2, #2
 8006b8a:	4968      	ldr	r1, [pc, #416]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f000 fbb9 	bl	8007304 <ILI9341_write_char_15x15>
	if(TVOC >= 1000)
 8006b92:	4b68      	ldr	r3, [pc, #416]	; (8006d34 <ILI9341_LCD_input_data_air_quality+0x548>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b9a:	d33c      	bcc.n	8006c16 <ILI9341_LCD_input_data_air_quality+0x42a>
	{
		ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[0]],120,200);
 8006b9c:	783b      	ldrb	r3, [r7, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4b61      	ldr	r3, [pc, #388]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba6:	22c8      	movs	r2, #200	; 0xc8
 8006ba8:	9201      	str	r2, [sp, #4]
 8006baa:	2278      	movs	r2, #120	; 0x78
 8006bac:	9200      	str	r2, [sp, #0]
 8006bae:	2206      	movs	r2, #6
 8006bb0:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	f000 faff 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[1]],160,200);
 8006bba:	787b      	ldrb	r3, [r7, #1]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4b5a      	ldr	r3, [pc, #360]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	22c8      	movs	r2, #200	; 0xc8
 8006bc6:	9201      	str	r2, [sp, #4]
 8006bc8:	22a0      	movs	r2, #160	; 0xa0
 8006bca:	9200      	str	r2, [sp, #0]
 8006bcc:	2206      	movs	r2, #6
 8006bce:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	f000 faf0 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[2]],200,200);
 8006bd8:	78bb      	ldrb	r3, [r7, #2]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4b52      	ldr	r3, [pc, #328]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be2:	22c8      	movs	r2, #200	; 0xc8
 8006be4:	9201      	str	r2, [sp, #4]
 8006be6:	22c8      	movs	r2, #200	; 0xc8
 8006be8:	9200      	str	r2, [sp, #0]
 8006bea:	2206      	movs	r2, #6
 8006bec:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f000 fae1 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[3]],240,200);
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4b4b      	ldr	r3, [pc, #300]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	22c8      	movs	r2, #200	; 0xc8
 8006c02:	9201      	str	r2, [sp, #4]
 8006c04:	22f0      	movs	r2, #240	; 0xf0
 8006c06:	9200      	str	r2, [sp, #0]
 8006c08:	2206      	movs	r2, #6
 8006c0a:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 8006c0e:	2000      	movs	r0, #0
 8006c10:	f000 fad2 	bl	80071b8 <ILI9341_write_char_5x5>
 8006c14:	e0a0      	b.n	8006d58 <ILI9341_LCD_input_data_air_quality+0x56c>
	}
	else if(TVOC >= 100)
 8006c16:	4b47      	ldr	r3, [pc, #284]	; (8006d34 <ILI9341_LCD_input_data_air_quality+0x548>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b63      	cmp	r3, #99	; 0x63
 8006c1c:	d95d      	bls.n	8006cda <ILI9341_LCD_input_data_air_quality+0x4ee>
	{
		if(TVOC >= 500)
 8006c1e:	4b45      	ldr	r3, [pc, #276]	; (8006d34 <ILI9341_LCD_input_data_air_quality+0x548>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006c26:	d32d      	bcc.n	8006c84 <ILI9341_LCD_input_data_air_quality+0x498>
		{
			ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[1]],160,200);
 8006c28:	787b      	ldrb	r3, [r7, #1]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	22c8      	movs	r2, #200	; 0xc8
 8006c34:	9201      	str	r2, [sp, #4]
 8006c36:	22a0      	movs	r2, #160	; 0xa0
 8006c38:	9200      	str	r2, [sp, #0]
 8006c3a:	2206      	movs	r2, #6
 8006c3c:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 8006c40:	2000      	movs	r0, #0
 8006c42:	f000 fab9 	bl	80071b8 <ILI9341_write_char_5x5>
			ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[2]],200,200);
 8006c46:	78bb      	ldrb	r3, [r7, #2]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c50:	22c8      	movs	r2, #200	; 0xc8
 8006c52:	9201      	str	r2, [sp, #4]
 8006c54:	22c8      	movs	r2, #200	; 0xc8
 8006c56:	9200      	str	r2, [sp, #0]
 8006c58:	2206      	movs	r2, #6
 8006c5a:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f000 faaa 	bl	80071b8 <ILI9341_write_char_5x5>
			ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[3]],240,200);
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	461a      	mov	r2, r3
 8006c68:	4b2f      	ldr	r3, [pc, #188]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	22c8      	movs	r2, #200	; 0xc8
 8006c70:	9201      	str	r2, [sp, #4]
 8006c72:	22f0      	movs	r2, #240	; 0xf0
 8006c74:	9200      	str	r2, [sp, #0]
 8006c76:	2206      	movs	r2, #6
 8006c78:	f44f 317c 	mov.w	r1, #258048	; 0x3f000
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f000 fa9b 	bl	80071b8 <ILI9341_write_char_5x5>
 8006c82:	e069      	b.n	8006d58 <ILI9341_LCD_input_data_air_quality+0x56c>
		}
		else
		{
			ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[1]],160,200);
 8006c84:	787b      	ldrb	r3, [r7, #1]
 8006c86:	461a      	mov	r2, r3
 8006c88:	4b27      	ldr	r3, [pc, #156]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8e:	22c8      	movs	r2, #200	; 0xc8
 8006c90:	9201      	str	r2, [sp, #4]
 8006c92:	22a0      	movs	r2, #160	; 0xa0
 8006c94:	9200      	str	r2, [sp, #0]
 8006c96:	2206      	movs	r2, #6
 8006c98:	4924      	ldr	r1, [pc, #144]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f000 fa8c 	bl	80071b8 <ILI9341_write_char_5x5>
			ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[2]],200,200);
 8006ca0:	78bb      	ldrb	r3, [r7, #2]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006caa:	22c8      	movs	r2, #200	; 0xc8
 8006cac:	9201      	str	r2, [sp, #4]
 8006cae:	22c8      	movs	r2, #200	; 0xc8
 8006cb0:	9200      	str	r2, [sp, #0]
 8006cb2:	2206      	movs	r2, #6
 8006cb4:	491d      	ldr	r1, [pc, #116]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f000 fa7e 	bl	80071b8 <ILI9341_write_char_5x5>
			ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[3]],240,200);
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc6:	22c8      	movs	r2, #200	; 0xc8
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	22f0      	movs	r2, #240	; 0xf0
 8006ccc:	9200      	str	r2, [sp, #0]
 8006cce:	2206      	movs	r2, #6
 8006cd0:	4916      	ldr	r1, [pc, #88]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	f000 fa70 	bl	80071b8 <ILI9341_write_char_5x5>
 8006cd8:	e03e      	b.n	8006d58 <ILI9341_LCD_input_data_air_quality+0x56c>
		}
	}
	else if(TVOC >= 10)
 8006cda:	4b16      	ldr	r3, [pc, #88]	; (8006d34 <ILI9341_LCD_input_data_air_quality+0x548>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b09      	cmp	r3, #9
 8006ce0:	d92a      	bls.n	8006d38 <ILI9341_LCD_input_data_air_quality+0x54c>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[2]],200,200);
 8006ce2:	78bb      	ldrb	r3, [r7, #2]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	22c8      	movs	r2, #200	; 0xc8
 8006cee:	9201      	str	r2, [sp, #4]
 8006cf0:	22c8      	movs	r2, #200	; 0xc8
 8006cf2:	9200      	str	r2, [sp, #0]
 8006cf4:	2206      	movs	r2, #6
 8006cf6:	490d      	ldr	r1, [pc, #52]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f000 fa5d 	bl	80071b8 <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[3]],240,200);
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	461a      	mov	r2, r3
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <ILI9341_LCD_input_data_air_quality+0x53c>)
 8006d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d08:	22c8      	movs	r2, #200	; 0xc8
 8006d0a:	9201      	str	r2, [sp, #4]
 8006d0c:	22f0      	movs	r2, #240	; 0xf0
 8006d0e:	9200      	str	r2, [sp, #0]
 8006d10:	2206      	movs	r2, #6
 8006d12:	4906      	ldr	r1, [pc, #24]	; (8006d2c <ILI9341_LCD_input_data_air_quality+0x540>)
 8006d14:	2000      	movs	r0, #0
 8006d16:	f000 fa4f 	bl	80071b8 <ILI9341_write_char_5x5>
 8006d1a:	e01d      	b.n	8006d58 <ILI9341_LCD_input_data_air_quality+0x56c>
 8006d1c:	200010b8 	.word	0x200010b8
 8006d20:	200004d0 	.word	0x200004d0
 8006d24:	200004f4 	.word	0x200004f4
 8006d28:	2000010c 	.word	0x2000010c
 8006d2c:	0003ffff 	.word	0x0003ffff
 8006d30:	200005cc 	.word	0x200005cc
 8006d34:	200010bc 	.word	0x200010bc
	}
	else if(TVOC >= 0)
 8006d38:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <ILI9341_LCD_input_data_air_quality+0x58c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
	{
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[3]],240,200);
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <ILI9341_LCD_input_data_air_quality+0x590>)
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	22c8      	movs	r2, #200	; 0xc8
 8006d48:	9201      	str	r2, [sp, #4]
 8006d4a:	22f0      	movs	r2, #240	; 0xf0
 8006d4c:	9200      	str	r2, [sp, #0]
 8006d4e:	2206      	movs	r2, #6
 8006d50:	490b      	ldr	r1, [pc, #44]	; (8006d80 <ILI9341_LCD_input_data_air_quality+0x594>)
 8006d52:	2000      	movs	r0, #0
 8006d54:	f000 fa30 	bl	80071b8 <ILI9341_write_char_5x5>
	}
	ILI9341_write_char_15x15(BLACK,WHITE,2,parts_per_billion_symbol_mv,280,200);
 8006d58:	23c8      	movs	r3, #200	; 0xc8
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4b08      	ldr	r3, [pc, #32]	; (8006d84 <ILI9341_LCD_input_data_air_quality+0x598>)
 8006d64:	2202      	movs	r2, #2
 8006d66:	4906      	ldr	r1, [pc, #24]	; (8006d80 <ILI9341_LCD_input_data_air_quality+0x594>)
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f000 facb 	bl	8007304 <ILI9341_write_char_15x15>
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	200010bc 	.word	0x200010bc
 8006d7c:	2000010c 	.word	0x2000010c
 8006d80:	0003ffff 	.word	0x0003ffff
 8006d84:	200005f0 	.word	0x200005f0

08006d88 <ILI9341_LCD_input_data_update>:

void ILI9341_LCD_input_data_update()
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	uint32_t timewait = 0xFFFFF*2;
 8006d8e:	4b35      	ldr	r3, [pc, #212]	; (8006e64 <ILI9341_LCD_input_data_update+0xdc>)
 8006d90:	607b      	str	r3, [r7, #4]
	if(isdisplay_changed == display_true)
 8006d92:	4b35      	ldr	r3, [pc, #212]	; (8006e68 <ILI9341_LCD_input_data_update+0xe0>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d105      	bne.n	8006da8 <ILI9341_LCD_input_data_update+0x20>
	{
		ILI9341_fill_screen(BLACK);
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f000 f9dc 	bl	800715a <ILI9341_fill_screen>
		isdisplay_changed = display_false;
 8006da2:	4b31      	ldr	r3, [pc, #196]	; (8006e68 <ILI9341_LCD_input_data_update+0xe0>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
	}
	if(esp8266_user_status == Ready_to_receive_time_data)
 8006da8:	4b30      	ldr	r3, [pc, #192]	; (8006e6c <ILI9341_LCD_input_data_update+0xe4>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b0f      	cmp	r3, #15
 8006db0:	d10d      	bne.n	8006dce <ILI9341_LCD_input_data_update+0x46>
	{
		ESP8266_leave_modem_sleep_mode();
 8006db2:	f7fe fc9b 	bl	80056ec <ESP8266_leave_modem_sleep_mode>
		ESP8266_receive_time();
 8006db6:	f7fe fa81 	bl	80052bc <ESP8266_receive_time>
		if(esp8266_user_status == Success)
 8006dba:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <ILI9341_LCD_input_data_update+0xe4>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d102      	bne.n	8006dca <ILI9341_LCD_input_data_update+0x42>
		{
			ILI9341_convert_received_time_string(received_time_string[1]);
 8006dc4:	482a      	ldr	r0, [pc, #168]	; (8006e70 <ILI9341_LCD_input_data_update+0xe8>)
 8006dc6:	f7fe ff15 	bl	8005bf4 <ILI9341_convert_received_time_string>
		}
		ESP8266_enter_modem_sleep_mode();
 8006dca:	f7fe fc29 	bl	8005620 <ESP8266_enter_modem_sleep_mode>
	}
	if(Display_mode == Time_display_mode)
 8006dce:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <ILI9341_LCD_input_data_update+0xec>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <ILI9341_LCD_input_data_update+0x66>
	{
		if(is_time_update == need_Update)
 8006dd8:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <ILI9341_LCD_input_data_update+0xf0>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d134      	bne.n	8006e4c <ILI9341_LCD_input_data_update+0xc4>
		{
			ILI9341_LCD_input_data_time();
 8006de2:	f7ff fbeb 	bl	80065bc <ILI9341_LCD_input_data_time>
			is_time_update = Updated;
 8006de6:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <ILI9341_LCD_input_data_update+0xf0>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	e02e      	b.n	8006e4c <ILI9341_LCD_input_data_update+0xc4>
		}
	}
	else if(Display_mode == Temp_Humi_display_mode)
 8006dee:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <ILI9341_LCD_input_data_update+0xec>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d112      	bne.n	8006e1e <ILI9341_LCD_input_data_update+0x96>
	{
		SHT31_read_period();
 8006df8:	f001 f8b6 	bl	8007f68 <SHT31_read_period>
		while(timewait--);
 8006dfc:	bf00      	nop
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	1e5a      	subs	r2, r3, #1
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1fa      	bne.n	8006dfe <ILI9341_LCD_input_data_update+0x76>
		timewait = 0xFFFFF*2;
 8006e08:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <ILI9341_LCD_input_data_update+0xdc>)
 8006e0a:	607b      	str	r3, [r7, #4]
		ILI9341_LCD_input_data_temperature_humidity();
 8006e0c:	f7ff fc0e 	bl	800662c <ILI9341_LCD_input_data_temperature_humidity>
		while(timewait--);
 8006e10:	bf00      	nop
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1fa      	bne.n	8006e12 <ILI9341_LCD_input_data_update+0x8a>
 8006e1c:	e016      	b.n	8006e4c <ILI9341_LCD_input_data_update+0xc4>
	}
	else if(Display_mode == Air_quality_display_mode)
 8006e1e:	4b15      	ldr	r3, [pc, #84]	; (8006e74 <ILI9341_LCD_input_data_update+0xec>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d111      	bne.n	8006e4c <ILI9341_LCD_input_data_update+0xc4>
	{
		CCS811_read_CO2_TVOC();
 8006e28:	f7fe f92e 	bl	8005088 <CCS811_read_CO2_TVOC>
		while(timewait--);
 8006e2c:	bf00      	nop
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	1e5a      	subs	r2, r3, #1
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1fa      	bne.n	8006e2e <ILI9341_LCD_input_data_update+0xa6>
		timewait = 0xFFFFF*2;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <ILI9341_LCD_input_data_update+0xdc>)
 8006e3a:	607b      	str	r3, [r7, #4]
		ILI9341_LCD_input_data_air_quality();
 8006e3c:	f7ff fcd6 	bl	80067ec <ILI9341_LCD_input_data_air_quality>
		while(timewait--);
 8006e40:	bf00      	nop
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	1e5a      	subs	r2, r3, #1
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1fa      	bne.n	8006e42 <ILI9341_LCD_input_data_update+0xba>
	}
	printf("min : %d\n\r", minute);
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <ILI9341_LCD_input_data_update+0xf4>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	480a      	ldr	r0, [pc, #40]	; (8006e80 <ILI9341_LCD_input_data_update+0xf8>)
 8006e56:	f001 faad 	bl	80083b4 <printf>
}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	001ffffe 	.word	0x001ffffe
 8006e68:	200010d8 	.word	0x200010d8
 8006e6c:	200015bd 	.word	0x200015bd
 8006e70:	200014f1 	.word	0x200014f1
 8006e74:	200010d6 	.word	0x200010d6
 8006e78:	20000684 	.word	0x20000684
 8006e7c:	200010d1 	.word	0x200010d1
 8006e80:	0800d1e0 	.word	0x0800d1e0

08006e84 <ILI9341_init>:
extern uint32_t dot_mv;
extern uint32_t colon_mv;
extern volatile uint8_t Display_mode;

void ILI9341_init()
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
	//spi_1_init();
	spi_1_chip_deselect();
 8006e88:	f001 f954 	bl	8008134 <spi_1_chip_deselect>
	_delay_ms(120);
 8006e8c:	2078      	movs	r0, #120	; 0x78
 8006e8e:	f001 f975 	bl	800817c <_delay_ms>
	ILI9341_software_reset();
 8006e92:	f000 f882 	bl	8006f9a <ILI9341_software_reset>
	ILI9341_after_reset_init();
 8006e96:	f000 f88c 	bl	8006fb2 <ILI9341_after_reset_init>
	ILI9341_sleep_out();
 8006e9a:	f000 f952 	bl	8007142 <ILI9341_sleep_out>
	ILI9341_display_on();
 8006e9e:	f000 f88e 	bl	8006fbe <ILI9341_display_on>
	ILI9341_display_init();
 8006ea2:	f000 f898 	bl	8006fd6 <ILI9341_display_init>
   /* ILI9341_read_display_power_mode();
    ILI9341_read_display_MADCTL();
    ILI9341_read_display_pixel_format();
    ILI9341_read_dispaly_self_diagnostic_result();*/
}
 8006ea6:	bf00      	nop
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <ILI9341_chip_select>:
void ILI9341_chip_select()
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	af00      	add	r7, sp, #0
  spi_1_chip_select();
 8006eae:	f001 f935 	bl	800811c <spi_1_chip_select>
  _delay_us(1);
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f001 f983 	bl	80081be <_delay_us>
}
 8006eb8:	bf00      	nop
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <ILI9341_chip_deselect>:
void ILI9341_chip_deselect()
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  spi_1_chip_deselect();
 8006ec0:	f001 f938 	bl	8008134 <spi_1_chip_deselect>
  _delay_us(1);
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	f001 f97a 	bl	80081be <_delay_us>
}
 8006eca:	bf00      	nop
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <ILI9341_select_send_command>:

void ILI9341_select_send_command()
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, SPI_DC_Pin, GPIO_PIN_RESET);
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eda:	4802      	ldr	r0, [pc, #8]	; (8006ee4 <ILI9341_select_send_command+0x14>)
 8006edc:	f7fa ff78 	bl	8001dd0 <HAL_GPIO_WritePin>
}
 8006ee0:	bf00      	nop
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40010800 	.word	0x40010800

08006ee8 <ILI9341_select_send_data>:
void ILI9341_select_send_data()
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, SPI_DC_Pin, GPIO_PIN_SET);
 8006eec:	2201      	movs	r2, #1
 8006eee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ef2:	4802      	ldr	r0, [pc, #8]	; (8006efc <ILI9341_select_send_data+0x14>)
 8006ef4:	f7fa ff6c 	bl	8001dd0 <HAL_GPIO_WritePin>
}
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40010800 	.word	0x40010800

08006f00 <ILI9341_write_data>:

void ILI9341_write_data(uint8_t command, const uint8_t nums, uint8_t* data_bytes)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	603a      	str	r2, [r7, #0]
 8006f0a:	71fb      	strb	r3, [r7, #7]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	71bb      	strb	r3, [r7, #6]
	ILI9341_chip_select();
 8006f10:	f7ff ffcb 	bl	8006eaa <ILI9341_chip_select>
	ILI9341_select_send_command();
 8006f14:	f7ff ffdc 	bl	8006ed0 <ILI9341_select_send_command>
	spi_1_write_data(command);
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 f916 	bl	800814c <spi_1_write_data>
	ILI9341_select_send_data();
 8006f20:	f7ff ffe2 	bl	8006ee8 <ILI9341_select_send_data>
	for(int i = 0; i < nums; i++)
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	e009      	b.n	8006f3e <ILI9341_write_data+0x3e>
	{
		spi_1_write_data(data_bytes[i]);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	4413      	add	r3, r2
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 f90a 	bl	800814c <spi_1_write_data>
	for(int i = 0; i < nums; i++)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	79bb      	ldrb	r3, [r7, #6]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	dbf1      	blt.n	8006f2a <ILI9341_write_data+0x2a>
	}
	ILI9341_chip_deselect();
 8006f46:	f7ff ffb9 	bl	8006ebc <ILI9341_chip_deselect>
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <ILI9341_write_pixel>:

void ILI9341_write_pixel(uint32_t color)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
	uint8_t red_value = (uint8_t)((color & 0x3F000) >> 10);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	0a9b      	lsrs	r3, r3, #10
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f023 0303 	bic.w	r3, r3, #3
 8006f64:	73fb      	strb	r3, [r7, #15]
	uint8_t green_value = (uint8_t)((color & 0x00FC0) >> 4);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	091b      	lsrs	r3, r3, #4
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f023 0303 	bic.w	r3, r3, #3
 8006f70:	73bb      	strb	r3, [r7, #14]
	uint8_t blue_value = (uint8_t)((color & 0x0003F) << 2);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	737b      	strb	r3, [r7, #13]
	
	spi_1_write_data(red_value);
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f001 f8e5 	bl	800814c <spi_1_write_data>
	spi_1_write_data(green_value);
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 f8e1 	bl	800814c <spi_1_write_data>
	spi_1_write_data(blue_value);
 8006f8a:	7b7b      	ldrb	r3, [r7, #13]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 f8dd 	bl	800814c <spi_1_write_data>
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <ILI9341_software_reset>:
	}
	ILI9341_chip_deselect();
}

void ILI9341_software_reset()
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	af00      	add	r7, sp, #0
	ILI9341_write_data(Software_reset,0,NULL);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	f7ff ffac 	bl	8006f00 <ILI9341_write_data>
	_delay_ms(120);
 8006fa8:	2078      	movs	r0, #120	; 0x78
 8006faa:	f001 f8e7 	bl	800817c <_delay_ms>
}
 8006fae:	bf00      	nop
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <ILI9341_after_reset_init>:

void ILI9341_after_reset_init()
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	af00      	add	r7, sp, #0
	setting_all();
 8006fb6:	f000 ff16 	bl	8007de6 <setting_all>
}
 8006fba:	bf00      	nop
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <ILI9341_display_on>:
	ILI9341_read_data(Read_dispaly_self_diagnostic_result, 1, data_bytes);
	printf("RDDSDR : 0x%X\n\r", (data_bytes[0] & 0xC0));
}

void ILI9341_display_on()
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	af00      	add	r7, sp, #0
	ILI9341_write_data(Display_ON, 0, NULL);
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	2029      	movs	r0, #41	; 0x29
 8006fc8:	f7ff ff9a 	bl	8006f00 <ILI9341_write_data>
	_delay_ms(150);
 8006fcc:	2096      	movs	r0, #150	; 0x96
 8006fce:	f001 f8d5 	bl	800817c <_delay_ms>
}
 8006fd2:	bf00      	nop
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <ILI9341_display_init>:
	ILI9341_write_data(Dispaly_off, 0, NULL);
	_delay_ms(150);
}

void ILI9341_display_init()
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	af00      	add	r7, sp, #0
	ILI9341_enter_scroll_mode();
 8006fda:	f000 f895 	bl	8007108 <ILI9341_enter_scroll_mode>
}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <ILI9341_normal_display_mode_on>:
{
	
}

void ILI9341_normal_display_mode_on()
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	af00      	add	r7, sp, #0
	ILI9341_write_data(Normal_display_mode_on, 0, NULL);
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2100      	movs	r1, #0
 8006fea:	2013      	movs	r0, #19
 8006fec:	f7ff ff88 	bl	8006f00 <ILI9341_write_data>
}
 8006ff0:	bf00      	nop
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <ILI9341_set_column_address>:
	data_bytes[3] = er & 0xFF;
	ILI9341_write_data(Partial_area,4,data_bytes);
}

void ILI9341_set_column_address(uint16_t sc, uint16_t ec)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	460a      	mov	r2, r1
 8006ffe:	80fb      	strh	r3, [r7, #6]
 8007000:	4613      	mov	r3, r2
 8007002:	80bb      	strh	r3, [r7, #4]
	uint8_t data_bytes[4];
	data_bytes[0] = sc >> 8;
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	b29b      	uxth	r3, r3
 800700a:	b2db      	uxtb	r3, r3
 800700c:	733b      	strb	r3, [r7, #12]
	data_bytes[1] = sc & 0xff;
 800700e:	88fb      	ldrh	r3, [r7, #6]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	737b      	strb	r3, [r7, #13]
	data_bytes[2] = ec >> 8;
 8007014:	88bb      	ldrh	r3, [r7, #4]
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	b29b      	uxth	r3, r3
 800701a:	b2db      	uxtb	r3, r3
 800701c:	73bb      	strb	r3, [r7, #14]
	data_bytes[3] = ec & 0xff;
 800701e:	88bb      	ldrh	r3, [r7, #4]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	73fb      	strb	r3, [r7, #15]
	ILI9341_write_data(Column_address_set,4,data_bytes);
 8007024:	f107 030c 	add.w	r3, r7, #12
 8007028:	461a      	mov	r2, r3
 800702a:	2104      	movs	r1, #4
 800702c:	202a      	movs	r0, #42	; 0x2a
 800702e:	f7ff ff67 	bl	8006f00 <ILI9341_write_data>
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <ILI9341_set_page_address>:

void ILI9341_set_page_address(uint16_t sp, uint16_t ep)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	4603      	mov	r3, r0
 8007042:	460a      	mov	r2, r1
 8007044:	80fb      	strh	r3, [r7, #6]
 8007046:	4613      	mov	r3, r2
 8007048:	80bb      	strh	r3, [r7, #4]
	uint8_t data_bytes[4];
	data_bytes[0] = sp >> 8;
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	0a1b      	lsrs	r3, r3, #8
 800704e:	b29b      	uxth	r3, r3
 8007050:	b2db      	uxtb	r3, r3
 8007052:	733b      	strb	r3, [r7, #12]
	data_bytes[1] = sp & 0xff;
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	737b      	strb	r3, [r7, #13]
	data_bytes[2] = ep >> 8;
 800705a:	88bb      	ldrh	r3, [r7, #4]
 800705c:	0a1b      	lsrs	r3, r3, #8
 800705e:	b29b      	uxth	r3, r3
 8007060:	b2db      	uxtb	r3, r3
 8007062:	73bb      	strb	r3, [r7, #14]
	data_bytes[3] = ep & 0xff;
 8007064:	88bb      	ldrh	r3, [r7, #4]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	73fb      	strb	r3, [r7, #15]
	ILI9341_write_data(Page_address_set,4,data_bytes);
 800706a:	f107 030c 	add.w	r3, r7, #12
 800706e:	461a      	mov	r2, r3
 8007070:	2104      	movs	r1, #4
 8007072:	202b      	movs	r0, #43	; 0x2b
 8007074:	f7ff ff44 	bl	8006f00 <ILI9341_write_data>
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <ILI9341_vertical_scrolling_definition>:

void ILI9341_vertical_scrolling_definition(uint16_t TFA, uint16_t VSA, uint16_t BFA)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	80fb      	strh	r3, [r7, #6]
 800708a:	460b      	mov	r3, r1
 800708c:	80bb      	strh	r3, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	807b      	strh	r3, [r7, #2]
	uint8_t data_bytes[6];
	data_bytes[0] = TFA >> 8;
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	0a1b      	lsrs	r3, r3, #8
 8007096:	b29b      	uxth	r3, r3
 8007098:	b2db      	uxtb	r3, r3
 800709a:	723b      	strb	r3, [r7, #8]
	data_bytes[1] = TFA & 0xFF;
 800709c:	88fb      	ldrh	r3, [r7, #6]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	727b      	strb	r3, [r7, #9]
	data_bytes[2] = VSA >> 8;
 80070a2:	88bb      	ldrh	r3, [r7, #4]
 80070a4:	0a1b      	lsrs	r3, r3, #8
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	72bb      	strb	r3, [r7, #10]
	data_bytes[3] = VSA & 0xFF;
 80070ac:	88bb      	ldrh	r3, [r7, #4]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	72fb      	strb	r3, [r7, #11]
	data_bytes[4] = BFA >> 8;
 80070b2:	887b      	ldrh	r3, [r7, #2]
 80070b4:	0a1b      	lsrs	r3, r3, #8
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	733b      	strb	r3, [r7, #12]
	data_bytes[5] = BFA & 0xFF;
 80070bc:	887b      	ldrh	r3, [r7, #2]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	737b      	strb	r3, [r7, #13]
	ILI9341_write_data(Vertical_scrolling_def,6,data_bytes);
 80070c2:	f107 0308 	add.w	r3, r7, #8
 80070c6:	461a      	mov	r2, r3
 80070c8:	2106      	movs	r1, #6
 80070ca:	2033      	movs	r0, #51	; 0x33
 80070cc:	f7ff ff18 	bl	8006f00 <ILI9341_write_data>
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <ILI9341_vertical_scrolling_start_address>:

void ILI9341_vertical_scrolling_start_address(uint16_t VSP)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	80fb      	strh	r3, [r7, #6]
	uint8_t data_bytes[2];
	data_bytes[0] = VSP >> 8;
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	733b      	strb	r3, [r7, #12]
	data_bytes[1] = VSP & 0xFF;
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	737b      	strb	r3, [r7, #13]
	ILI9341_write_data(Vertical_scrolling_start_address,2,data_bytes);
 80070f2:	f107 030c 	add.w	r3, r7, #12
 80070f6:	461a      	mov	r2, r3
 80070f8:	2102      	movs	r1, #2
 80070fa:	2037      	movs	r0, #55	; 0x37
 80070fc:	f7ff ff00 	bl	8006f00 <ILI9341_write_data>
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <ILI9341_enter_scroll_mode>:

void ILI9341_enter_scroll_mode()
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
	ILI9341_normal_display_mode_on();
 800710c:	f7ff ff69 	bl	8006fe2 <ILI9341_normal_display_mode_on>
	ILI9341_vertical_scrolling_definition(0x0000, 320, 0x0000);
 8007110:	2200      	movs	r2, #0
 8007112:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007116:	2000      	movs	r0, #0
 8007118:	f7ff ffb2 	bl	8007080 <ILI9341_vertical_scrolling_definition>
	ILI9341_set_column_address(0x0000, 0x013F);
 800711c:	f240 113f 	movw	r1, #319	; 0x13f
 8007120:	2000      	movs	r0, #0
 8007122:	f7ff ff67 	bl	8006ff4 <ILI9341_set_column_address>
	ILI9341_set_page_address(0x0000, 0x00EF);
 8007126:	21ef      	movs	r1, #239	; 0xef
 8007128:	2000      	movs	r0, #0
 800712a:	f7ff ff86 	bl	800703a <ILI9341_set_page_address>
	//optional setting MADCTL
	//ILI9341_set_memory_data_access_control(uint8_t isDefault);
	ILI9341_write_data(Memory_write,0,NULL);
 800712e:	2200      	movs	r2, #0
 8007130:	2100      	movs	r1, #0
 8007132:	202c      	movs	r0, #44	; 0x2c
 8007134:	f7ff fee4 	bl	8006f00 <ILI9341_write_data>
	ILI9341_vertical_scrolling_start_address(0x0000);
 8007138:	2000      	movs	r0, #0
 800713a:	f7ff ffcd 	bl	80070d8 <ILI9341_vertical_scrolling_start_address>
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}

08007142 <ILI9341_sleep_out>:
}



void ILI9341_sleep_out()
{
 8007142:	b580      	push	{r7, lr}
 8007144:	af00      	add	r7, sp, #0
	ILI9341_write_data(Sleep_out, 0, NULL);
 8007146:	2200      	movs	r2, #0
 8007148:	2100      	movs	r1, #0
 800714a:	2011      	movs	r0, #17
 800714c:	f7ff fed8 	bl	8006f00 <ILI9341_write_data>
	_delay_ms(150);
 8007150:	2096      	movs	r0, #150	; 0x96
 8007152:	f001 f813 	bl	800817c <_delay_ms>
}
 8007156:	bf00      	nop
 8007158:	bd80      	pop	{r7, pc}

0800715a <ILI9341_fill_screen>:
	converted_color |= color_convert_8_to_6(blue);
	return converted_color;
}

void ILI9341_fill_screen(uint32_t color)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
	//ILI9341_display_off();
	ILI9341_set_column_address(0x0000,0x013F);
 8007162:	f240 113f 	movw	r1, #319	; 0x13f
 8007166:	2000      	movs	r0, #0
 8007168:	f7ff ff44 	bl	8006ff4 <ILI9341_set_column_address>
	ILI9341_set_page_address(0x0000,0x00EF);
 800716c:	21ef      	movs	r1, #239	; 0xef
 800716e:	2000      	movs	r0, #0
 8007170:	f7ff ff63 	bl	800703a <ILI9341_set_page_address>
	ILI9341_chip_select();
 8007174:	f7ff fe99 	bl	8006eaa <ILI9341_chip_select>
	ILI9341_select_send_command();
 8007178:	f7ff feaa 	bl	8006ed0 <ILI9341_select_send_command>
	spi_1_write_data(Memory_write);
 800717c:	202c      	movs	r0, #44	; 0x2c
 800717e:	f000 ffe5 	bl	800814c <spi_1_write_data>
	ILI9341_select_send_data();
 8007182:	f7ff feb1 	bl	8006ee8 <ILI9341_select_send_data>
	for(uint32_t i = 0; i < 76800; i++)
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	e005      	b.n	8007198 <ILI9341_fill_screen+0x3e>
	{
		ILI9341_write_pixel(color);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fee0 	bl	8006f52 <ILI9341_write_pixel>
	for(uint32_t i = 0; i < 76800; i++)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800719e:	d3f5      	bcc.n	800718c <ILI9341_fill_screen+0x32>
	}
	ILI9341_chip_deselect();
 80071a0:	f7ff fe8c 	bl	8006ebc <ILI9341_chip_deselect>
	ILI9341_write_data(NOP,0,NULL);
 80071a4:	2200      	movs	r2, #0
 80071a6:	2100      	movs	r1, #0
 80071a8:	2000      	movs	r0, #0
 80071aa:	f7ff fea9 	bl	8006f00 <ILI9341_write_data>
	//ILI9341_display_on();
}
 80071ae:	bf00      	nop
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <ILI9341_write_char_5x5>:

void ILI9341_write_char_5x5(uint32_t bg_color,uint32_t font_color,uint8_t font_size, uint32_t char_buffer, uint16_t sx, uint16_t sy)
{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b08d      	sub	sp, #52	; 0x34
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	4613      	mov	r3, r2
 80071c6:	71fb      	strb	r3, [r7, #7]
	uint8_t init_addr[15] = {0,4,9,14,19,24,29,34,39,44,49,54,59,64,69};
 80071c8:	4b4c      	ldr	r3, [pc, #304]	; (80072fc <ILI9341_write_char_5x5+0x144>)
 80071ca:	f107 0410 	add.w	r4, r7, #16
 80071ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071d0:	c407      	stmia	r4!, {r0, r1, r2}
 80071d2:	8023      	strh	r3, [r4, #0]
 80071d4:	3402      	adds	r4, #2
 80071d6:	0c1b      	lsrs	r3, r3, #16
 80071d8:	7023      	strb	r3, [r4, #0]
	uint8_t size = font_size;
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint16_t start_x = sx, end_x = sx + init_addr[font_size];
 80071e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071e4:	853b      	strh	r3, [r7, #40]	; 0x28
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80071ec:	4413      	add	r3, r2
 80071ee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071f8:	4413      	add	r3, r2
 80071fa:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t start_y = sy, end_y = sy + init_addr[font_size];
 80071fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007200:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007208:	4413      	add	r3, r2
 800720a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800720e:	b29a      	uxth	r2, r3
 8007210:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007214:	4413      	add	r3, r2
 8007216:	847b      	strh	r3, [r7, #34]	; 0x22
	ILI9341_set_column_address(start_x,end_x);
 8007218:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800721a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fee8 	bl	8006ff4 <ILI9341_set_column_address>
	ILI9341_set_page_address(start_y,end_y);
 8007224:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007228:	4611      	mov	r1, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff ff05 	bl	800703a <ILI9341_set_page_address>
	ILI9341_chip_select();
 8007230:	f7ff fe3b 	bl	8006eaa <ILI9341_chip_select>
	ILI9341_select_send_command();
 8007234:	f7ff fe4c 	bl	8006ed0 <ILI9341_select_send_command>
	spi_1_write_data(Memory_write);
 8007238:	202c      	movs	r0, #44	; 0x2c
 800723a:	f000 ff87 	bl	800814c <spi_1_write_data>
	ILI9341_select_send_data();
 800723e:	f7ff fe53 	bl	8006ee8 <ILI9341_select_send_data>
	for(uint8_t check_nums = 0; check_nums < 5; check_nums++)
 8007242:	2300      	movs	r3, #0
 8007244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007248:	e049      	b.n	80072de <ILI9341_write_char_5x5+0x126>
	{
		for(uint8_t font_width = 0; font_width < size; font_width++)
 800724a:	2300      	movs	r3, #0
 800724c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007250:	e03a      	b.n	80072c8 <ILI9341_write_char_5x5+0x110>
		{
			for(uint8_t check_bits = (check_nums * 5); check_bits < (5 * check_nums) + 5; check_bits++)
 8007252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007256:	461a      	mov	r2, r3
 8007258:	0092      	lsls	r2, r2, #2
 800725a:	4413      	add	r3, r2
 800725c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007260:	e023      	b.n	80072aa <ILI9341_write_char_5x5+0xf2>
			{
				for(uint8_t font_height = 0; font_height < size; font_height++)
 8007262:	2300      	movs	r3, #0
 8007264:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8007268:	e014      	b.n	8007294 <ILI9341_write_char_5x5+0xdc>
				{
					if(char_buffer & check_char[check_bits])
 800726a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800726e:	4a24      	ldr	r2, [pc, #144]	; (8007300 <ILI9341_write_char_5x5+0x148>)
 8007270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <ILI9341_write_char_5x5+0xcc>
					{
						ILI9341_write_pixel(font_color);
 800727c:	68b8      	ldr	r0, [r7, #8]
 800727e:	f7ff fe68 	bl	8006f52 <ILI9341_write_pixel>
 8007282:	e002      	b.n	800728a <ILI9341_write_char_5x5+0xd2>
					}
					else
					{
						ILI9341_write_pixel(bg_color);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff fe64 	bl	8006f52 <ILI9341_write_pixel>
				for(uint8_t font_height = 0; font_height < size; font_height++)
 800728a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800728e:	3301      	adds	r3, #1
 8007290:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8007294:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800729c:	429a      	cmp	r2, r3
 800729e:	d3e4      	bcc.n	800726a <ILI9341_write_char_5x5+0xb2>
			for(uint8_t check_bits = (check_nums * 5); check_bits < (5 * check_nums) + 5; check_bits++)
 80072a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072a4:	3301      	adds	r3, #1
 80072a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80072aa:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80072ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	4299      	cmp	r1, r3
 80072bc:	dbd1      	blt.n	8007262 <ILI9341_write_char_5x5+0xaa>
		for(uint8_t font_width = 0; font_width < size; font_width++)
 80072be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80072c2:	3301      	adds	r3, #1
 80072c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80072c8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80072cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d3be      	bcc.n	8007252 <ILI9341_write_char_5x5+0x9a>
	for(uint8_t check_nums = 0; check_nums < 5; check_nums++)
 80072d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072d8:	3301      	adds	r3, #1
 80072da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80072de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d9b1      	bls.n	800724a <ILI9341_write_char_5x5+0x92>
					}
				}
			}
		}
	}
	ILI9341_chip_deselect();
 80072e6:	f7ff fde9 	bl	8006ebc <ILI9341_chip_deselect>
	ILI9341_write_data(NOP,0,NULL);
 80072ea:	2200      	movs	r2, #0
 80072ec:	2100      	movs	r1, #0
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7ff fe06 	bl	8006f00 <ILI9341_write_data>
}
 80072f4:	bf00      	nop
 80072f6:	3734      	adds	r7, #52	; 0x34
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd90      	pop	{r4, r7, pc}
 80072fc:	0800d2a8 	.word	0x0800d2a8
 8007300:	20000688 	.word	0x20000688

08007304 <ILI9341_write_char_15x15>:
		start_x = start_x + (init_addr[font_size] + 2);
	}
}

void ILI9341_write_char_15x15(uint32_t bg_color,uint32_t font_color,uint8_t font_size, uint32_t* char_buffer, uint16_t sx, uint16_t sy)
{
 8007304:	b590      	push	{r4, r7, lr}
 8007306:	b0a3      	sub	sp, #140	; 0x8c
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	4613      	mov	r3, r2
 8007312:	71fb      	strb	r3, [r7, #7]
	uint8_t init_addr[15] = {0,4,9,14,19,24,29,34,39,44,49,54,59,64,69};
 8007314:	4bd9      	ldr	r3, [pc, #868]	; (800767c <ILI9341_write_char_15x15+0x378>)
 8007316:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800731a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800731c:	c407      	stmia	r4!, {r0, r1, r2}
 800731e:	8023      	strh	r3, [r4, #0]
 8007320:	3402      	adds	r4, #2
 8007322:	0c1b      	lsrs	r3, r3, #16
 8007324:	7023      	strb	r3, [r4, #0]
	uint8_t size = font_size;
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	uint16_t start_left_x = sx;
 800732c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007330:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint16_t start_middle_x = start_left_x + init_addr[font_size] + 1;
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800733a:	4413      	add	r3, r2
 800733c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007346:	4413      	add	r3, r2
 8007348:	b29b      	uxth	r3, r3
 800734a:	3301      	adds	r3, #1
 800734c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	uint16_t start_right_x = start_middle_x + init_addr[font_size] + 1 ;
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007356:	4413      	add	r3, r2
 8007358:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800735c:	b29a      	uxth	r2, r3
 800735e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8007362:	4413      	add	r3, r2
 8007364:	b29b      	uxth	r3, r3
 8007366:	3301      	adds	r3, #1
 8007368:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	
	uint16_t start_left_y = sy;
 800736c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007370:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint16_t start_middle_y = start_left_y + init_addr[font_size] + 1;
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800737a:	4413      	add	r3, r2
 800737c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007380:	b29a      	uxth	r2, r3
 8007382:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007386:	4413      	add	r3, r2
 8007388:	b29b      	uxth	r3, r3
 800738a:	3301      	adds	r3, #1
 800738c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	uint16_t start_right_y = start_middle_y + init_addr[font_size] + 1;
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007396:	4413      	add	r3, r2
 8007398:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80073a2:	4413      	add	r3, r2
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3301      	adds	r3, #1
 80073a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	
	uint16_t end_left_x = start_left_x + init_addr[font_size];
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80073b2:	4413      	add	r3, r2
 80073b4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80073be:	4413      	add	r3, r2
 80073c0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	uint16_t end_middle_x = start_middle_x + init_addr[font_size];
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80073ca:	4413      	add	r3, r2
 80073cc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80073d6:	4413      	add	r3, r2
 80073d8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	uint16_t end_right_x = start_right_x + init_addr[font_size];
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80073e2:	4413      	add	r3, r2
 80073e4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80073ee:	4413      	add	r3, r2
 80073f0:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	
	uint16_t end_left_y = start_left_y + init_addr[font_size];
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80073fa:	4413      	add	r3, r2
 80073fc:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007400:	b29a      	uxth	r2, r3
 8007402:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007406:	4413      	add	r3, r2
 8007408:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t end_middle_y = start_middle_y + init_addr[font_size];
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007412:	4413      	add	r3, r2
 8007414:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007418:	b29a      	uxth	r2, r3
 800741a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800741e:	4413      	add	r3, r2
 8007420:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint16_t end_right_y = start_right_y + init_addr[font_size];
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800742a:	4413      	add	r3, r2
 800742c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007430:	b29a      	uxth	r2, r3
 8007432:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007436:	4413      	add	r3, r2
 8007438:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	
	uint16_t kor_start_addr[18] = {start_left_x,start_left_y,start_middle_x,start_left_y,start_right_x,start_left_y,
 800743c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007440:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007442:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007446:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007448:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800744c:	873b      	strh	r3, [r7, #56]	; 0x38
 800744e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007452:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007454:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8007458:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800745a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800745e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007460:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007464:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007468:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800746c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007470:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8007474:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007478:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800747c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007480:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8007484:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007488:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800748c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007490:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007494:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007498:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800749c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074a0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80074a4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80074a8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80074ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80074b0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80074b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80074b8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80074bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		start_left_x,start_middle_y,start_middle_x,start_middle_y,start_right_x,start_middle_y,
		start_left_x,start_right_y,start_middle_x,start_right_y,start_right_x,start_right_y};
		
	uint16_t kor_end_addr[18] = {end_left_x,end_left_y,end_middle_x,end_left_y,end_right_x,end_left_y,
 80074c0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80074c4:	823b      	strh	r3, [r7, #16]
 80074c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80074ca:	827b      	strh	r3, [r7, #18]
 80074cc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80074d0:	82bb      	strh	r3, [r7, #20]
 80074d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80074d6:	82fb      	strh	r3, [r7, #22]
 80074d8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80074dc:	833b      	strh	r3, [r7, #24]
 80074de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80074e2:	837b      	strh	r3, [r7, #26]
 80074e4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80074e8:	83bb      	strh	r3, [r7, #28]
 80074ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80074ee:	83fb      	strh	r3, [r7, #30]
 80074f0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80074f4:	843b      	strh	r3, [r7, #32]
 80074f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80074fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80074fc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8007500:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007502:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007506:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007508:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800750c:	853b      	strh	r3, [r7, #40]	; 0x28
 800750e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007512:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007514:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8007518:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800751a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800751e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007520:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8007524:	863b      	strh	r3, [r7, #48]	; 0x30
 8007526:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800752a:	867b      	strh	r3, [r7, #50]	; 0x32
		end_left_x,end_middle_y,end_middle_x,end_middle_y,end_right_x,end_middle_y,
		end_left_x,end_right_y,end_middle_x,end_right_y,end_right_x,end_right_y};
		
	for(uint8_t kor_addr_index = 0; kor_addr_index < 9; kor_addr_index++)
 800752c:	2300      	movs	r3, #0
 800752e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8007532:	e099      	b.n	8007668 <ILI9341_write_char_15x15+0x364>
	{
		ILI9341_set_column_address(kor_start_addr[kor_addr_index*2],kor_end_addr[kor_addr_index*2]);
 8007534:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007540:	4413      	add	r3, r2
 8007542:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8007546:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8007552:	440b      	add	r3, r1
 8007554:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8007558:	4619      	mov	r1, r3
 800755a:	4610      	mov	r0, r2
 800755c:	f7ff fd4a 	bl	8006ff4 <ILI9341_set_column_address>
		ILI9341_set_page_address(kor_start_addr[kor_addr_index*2+1],kor_end_addr[kor_addr_index*2+1]);
 8007560:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	3301      	adds	r3, #1
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800756e:	4413      	add	r3, r2
 8007570:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8007574:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	3301      	adds	r3, #1
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8007582:	440b      	add	r3, r1
 8007584:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8007588:	4619      	mov	r1, r3
 800758a:	4610      	mov	r0, r2
 800758c:	f7ff fd55 	bl	800703a <ILI9341_set_page_address>
		ILI9341_chip_select();
 8007590:	f7ff fc8b 	bl	8006eaa <ILI9341_chip_select>
		ILI9341_select_send_command();
 8007594:	f7ff fc9c 	bl	8006ed0 <ILI9341_select_send_command>
		spi_1_write_data(Memory_write);
 8007598:	202c      	movs	r0, #44	; 0x2c
 800759a:	f000 fdd7 	bl	800814c <spi_1_write_data>
		ILI9341_select_send_data();
 800759e:	f7ff fca3 	bl	8006ee8 <ILI9341_select_send_data>
		for(uint8_t check_nums = 0; check_nums < 5; check_nums++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80075a8:	e04e      	b.n	8007648 <ILI9341_write_char_15x15+0x344>
		{
			for(uint8_t font_width = 0; font_width < size; font_width++)
 80075aa:	2300      	movs	r3, #0
 80075ac:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80075b0:	e03f      	b.n	8007632 <ILI9341_write_char_15x15+0x32e>
			{
				for(uint8_t check_bits = (check_nums * 5); check_bits < (5 * check_nums) + 5; check_bits++)
 80075b2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80075b6:	461a      	mov	r2, r3
 80075b8:	0092      	lsls	r2, r2, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 80075c0:	e028      	b.n	8007614 <ILI9341_write_char_15x15+0x310>
				{
					for(uint8_t font_height = 0; font_height < size; font_height++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80075c8:	e019      	b.n	80075fe <ILI9341_write_char_15x15+0x2fa>
					{
						if(char_buffer[kor_addr_index] & check_char[check_bits])
 80075ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	4413      	add	r3, r2
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80075da:	4929      	ldr	r1, [pc, #164]	; (8007680 <ILI9341_write_char_15x15+0x37c>)
 80075dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <ILI9341_write_char_15x15+0x2ea>
						{
							ILI9341_write_pixel(font_color);
 80075e6:	68b8      	ldr	r0, [r7, #8]
 80075e8:	f7ff fcb3 	bl	8006f52 <ILI9341_write_pixel>
 80075ec:	e002      	b.n	80075f4 <ILI9341_write_char_15x15+0x2f0>
						}
						else
						{
							ILI9341_write_pixel(bg_color);
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff fcaf 	bl	8006f52 <ILI9341_write_pixel>
					for(uint8_t font_height = 0; font_height < size; font_height++)
 80075f4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80075f8:	3301      	adds	r3, #1
 80075fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80075fe:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8007602:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007606:	429a      	cmp	r2, r3
 8007608:	d3df      	bcc.n	80075ca <ILI9341_write_char_15x15+0x2c6>
				for(uint8_t check_bits = (check_nums * 5); check_bits < (5 * check_nums) + 5; check_bits++)
 800760a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800760e:	3301      	adds	r3, #1
 8007610:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8007614:	f897 1084 	ldrb.w	r1, [r7, #132]	; 0x84
 8007618:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	4299      	cmp	r1, r3
 8007626:	dbcc      	blt.n	80075c2 <ILI9341_write_char_15x15+0x2be>
			for(uint8_t font_width = 0; font_width < size; font_width++)
 8007628:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800762c:	3301      	adds	r3, #1
 800762e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8007632:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8007636:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800763a:	429a      	cmp	r2, r3
 800763c:	d3b9      	bcc.n	80075b2 <ILI9341_write_char_15x15+0x2ae>
		for(uint8_t check_nums = 0; check_nums < 5; check_nums++)
 800763e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8007642:	3301      	adds	r3, #1
 8007644:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8007648:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800764c:	2b04      	cmp	r3, #4
 800764e:	d9ac      	bls.n	80075aa <ILI9341_write_char_15x15+0x2a6>
						}
					}
				}
			}
		}
		ILI9341_chip_deselect();
 8007650:	f7ff fc34 	bl	8006ebc <ILI9341_chip_deselect>
		ILI9341_write_data(NOP,0,NULL);
 8007654:	2200      	movs	r2, #0
 8007656:	2100      	movs	r1, #0
 8007658:	2000      	movs	r0, #0
 800765a:	f7ff fc51 	bl	8006f00 <ILI9341_write_data>
	for(uint8_t kor_addr_index = 0; kor_addr_index < 9; kor_addr_index++)
 800765e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007662:	3301      	adds	r3, #1
 8007664:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8007668:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800766c:	2b08      	cmp	r3, #8
 800766e:	f67f af61 	bls.w	8007534 <ILI9341_write_char_15x15+0x230>
	}
}
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	378c      	adds	r7, #140	; 0x8c
 8007678:	46bd      	mov	sp, r7
 800767a:	bd90      	pop	{r4, r7, pc}
 800767c:	0800d2a8 	.word	0x0800d2a8
 8007680:	20000688 	.word	0x20000688

08007684 <ILI9341_gamma_set>:
 *  Author: khs94
 */ 
#include "ILI9341_TFT_LCD.h"

void ILI9341_gamma_set(uint8_t isDefault)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x01};
 800768e:	2301      	movs	r3, #1
 8007690:	733b      	strb	r3, [r7, #12]
	uint8_t User_bytes[1] = {0x01};
 8007692:	2301      	movs	r3, #1
 8007694:	723b      	strb	r3, [r7, #8]
	if(isDefault == Default)
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d107      	bne.n	80076ac <ILI9341_gamma_set+0x28>
	{
		ILI9341_write_data(Gamma_set,1,Default_bytes);
 800769c:	f107 030c 	add.w	r3, r7, #12
 80076a0:	461a      	mov	r2, r3
 80076a2:	2101      	movs	r1, #1
 80076a4:	2026      	movs	r0, #38	; 0x26
 80076a6:	f7ff fc2b 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Gamma_set,1,User_bytes);
	}
}
 80076aa:	e006      	b.n	80076ba <ILI9341_gamma_set+0x36>
		ILI9341_write_data(Gamma_set,1,User_bytes);
 80076ac:	f107 0308 	add.w	r3, r7, #8
 80076b0:	461a      	mov	r2, r3
 80076b2:	2101      	movs	r1, #1
 80076b4:	2026      	movs	r0, #38	; 0x26
 80076b6:	f7ff fc23 	bl	8006f00 <ILI9341_write_data>
}
 80076ba:	bf00      	nop
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <ILI9341_pixel_format_set>:
void ILI9341_color_set()
{
	
}
void ILI9341_pixel_format_set(uint8_t isDefault)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	4603      	mov	r3, r0
 80076ca:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x66};
 80076cc:	2366      	movs	r3, #102	; 0x66
 80076ce:	733b      	strb	r3, [r7, #12]
	uint8_t User_bytes[1] = {0x55};
 80076d0:	2355      	movs	r3, #85	; 0x55
 80076d2:	723b      	strb	r3, [r7, #8]
	if(isDefault == Default)
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d107      	bne.n	80076ea <ILI9341_pixel_format_set+0x28>
	{
		ILI9341_write_data(Pixel_format_set,1,Default_bytes);
 80076da:	f107 030c 	add.w	r3, r7, #12
 80076de:	461a      	mov	r2, r3
 80076e0:	2101      	movs	r1, #1
 80076e2:	203a      	movs	r0, #58	; 0x3a
 80076e4:	f7ff fc0c 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Pixel_format_set,1,User_bytes);
	}
}
 80076e8:	e006      	b.n	80076f8 <ILI9341_pixel_format_set+0x36>
		ILI9341_write_data(Pixel_format_set,1,User_bytes);
 80076ea:	f107 0308 	add.w	r3, r7, #8
 80076ee:	461a      	mov	r2, r3
 80076f0:	2101      	movs	r1, #1
 80076f2:	203a      	movs	r0, #58	; 0x3a
 80076f4:	f7ff fc04 	bl	8006f00 <ILI9341_write_data>
}
 80076f8:	bf00      	nop
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <ILI9341_set_memory_data_access_control>:

void ILI9341_set_memory_data_access_control(uint8_t isDefault)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x00};
 800770a:	2300      	movs	r3, #0
 800770c:	733b      	strb	r3, [r7, #12]
	//uint8_t adafruit_bytes[1] = {0x48};
	uint8_t User_bytes[1] = {0x28};
 800770e:	2328      	movs	r3, #40	; 0x28
 8007710:	723b      	strb	r3, [r7, #8]
	if(isDefault == Default)
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d107      	bne.n	8007728 <ILI9341_set_memory_data_access_control+0x28>
	{
		ILI9341_write_data(Memory_access_control,1,Default_bytes);
 8007718:	f107 030c 	add.w	r3, r7, #12
 800771c:	461a      	mov	r2, r3
 800771e:	2101      	movs	r1, #1
 8007720:	2036      	movs	r0, #54	; 0x36
 8007722:	f7ff fbed 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Memory_access_control,1,User_bytes);
	}
}
 8007726:	e006      	b.n	8007736 <ILI9341_set_memory_data_access_control+0x36>
		ILI9341_write_data(Memory_access_control,1,User_bytes);
 8007728:	f107 0308 	add.w	r3, r7, #8
 800772c:	461a      	mov	r2, r3
 800772e:	2101      	movs	r1, #1
 8007730:	2036      	movs	r0, #54	; 0x36
 8007732:	f7ff fbe5 	bl	8006f00 <ILI9341_write_data>
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <ILI9341_RGB_interface_signal_control>:

void ILI9341_RGB_interface_signal_control(uint8_t isDefault)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	4603      	mov	r3, r0
 8007746:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x40};
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d106      	bne.n	8007760 <ILI9341_RGB_interface_signal_control+0x22>
	{
		ILI9341_write_data(RGB_interface_signal_control,1,Default_bytes);
 8007752:	f107 030c 	add.w	r3, r7, #12
 8007756:	461a      	mov	r2, r3
 8007758:	2101      	movs	r1, #1
 800775a:	20b0      	movs	r0, #176	; 0xb0
 800775c:	f7ff fbd0 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <ILI9341_Frame_control_in_Normal_mode>:
void ILI9341_Frame_control_in_Normal_mode(uint8_t isDefault)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[2] = {0x00,0x1B};
 8007772:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8007776:	81bb      	strh	r3, [r7, #12]
	uint8_t User_bytes[2] = {0x00, 0x18};
 8007778:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800777c:	813b      	strh	r3, [r7, #8]
	if(isDefault == Default)
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d107      	bne.n	8007794 <ILI9341_Frame_control_in_Normal_mode+0x2c>
	{
		ILI9341_write_data(Frame_control_in_Normal_mode,2,Default_bytes);
 8007784:	f107 030c 	add.w	r3, r7, #12
 8007788:	461a      	mov	r2, r3
 800778a:	2102      	movs	r1, #2
 800778c:	20b1      	movs	r0, #177	; 0xb1
 800778e:	f7ff fbb7 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Frame_control_in_Normal_mode,2,User_bytes);
	}
}
 8007792:	e006      	b.n	80077a2 <ILI9341_Frame_control_in_Normal_mode+0x3a>
		ILI9341_write_data(Frame_control_in_Normal_mode,2,User_bytes);
 8007794:	f107 0308 	add.w	r3, r7, #8
 8007798:	461a      	mov	r2, r3
 800779a:	2102      	movs	r1, #2
 800779c:	20b1      	movs	r0, #177	; 0xb1
 800779e:	f7ff fbaf 	bl	8006f00 <ILI9341_write_data>
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <ILI9341_Frame_control_in_Idle_mode>:
void ILI9341_Frame_control_in_Idle_mode(uint8_t isDefault)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	4603      	mov	r3, r0
 80077b2:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[2] = {0x00,0x1B};
 80077b4:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80077b8:	81bb      	strh	r3, [r7, #12]
	if(isDefault == Default)
 80077ba:	79fb      	ldrb	r3, [r7, #7]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d106      	bne.n	80077ce <ILI9341_Frame_control_in_Idle_mode+0x24>
	{
		ILI9341_write_data(Frame_control_in_Idle_mode,2,Default_bytes);
 80077c0:	f107 030c 	add.w	r3, r7, #12
 80077c4:	461a      	mov	r2, r3
 80077c6:	2102      	movs	r1, #2
 80077c8:	20b2      	movs	r0, #178	; 0xb2
 80077ca:	f7ff fb99 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <ILI9341_Frame_control_in_Partial_mode>:
void ILI9341_Frame_control_in_Partial_mode(uint8_t isDefault)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	4603      	mov	r3, r0
 80077de:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[2] = {0x00,0x1B};
 80077e0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80077e4:	81bb      	strh	r3, [r7, #12]
	if(isDefault == Default)
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d106      	bne.n	80077fa <ILI9341_Frame_control_in_Partial_mode+0x24>
	{
		ILI9341_write_data(Frame_control_in_Partial_mode,2,Default_bytes);
 80077ec:	f107 030c 	add.w	r3, r7, #12
 80077f0:	461a      	mov	r2, r3
 80077f2:	2102      	movs	r1, #2
 80077f4:	20b3      	movs	r0, #179	; 0xb3
 80077f6:	f7ff fb83 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 80077fa:	bf00      	nop
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <ILI9341_blanking_porch_control>:
// HSYNC, DOTCLK
void ILI9341_blanking_porch_control(uint8_t isDefault)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[4] = {0x02,0x02,0x0A,0x14};
 800780e:	4b08      	ldr	r3, [pc, #32]	; (8007830 <ILI9341_blanking_porch_control+0x2c>)
 8007810:	60fb      	str	r3, [r7, #12]
	if(isDefault == Default)
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d106      	bne.n	8007826 <ILI9341_blanking_porch_control+0x22>
	{
		ILI9341_write_data(Blanking_porch_control,4,Default_bytes);
 8007818:	f107 030c 	add.w	r3, r7, #12
 800781c:	461a      	mov	r2, r3
 800781e:	2104      	movs	r1, #4
 8007820:	20b5      	movs	r0, #181	; 0xb5
 8007822:	f7ff fb6d 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	140a0202 	.word	0x140a0202

08007834 <ILI9341_display_function_control>:

void ILI9341_display_function_control(uint8_t isDefault)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[3] = {0x0A,0x82,0x27};
 800783e:	4a14      	ldr	r2, [pc, #80]	; (8007890 <ILI9341_display_function_control+0x5c>)
 8007840:	f107 030c 	add.w	r3, r7, #12
 8007844:	6812      	ldr	r2, [r2, #0]
 8007846:	4611      	mov	r1, r2
 8007848:	8019      	strh	r1, [r3, #0]
 800784a:	3302      	adds	r3, #2
 800784c:	0c12      	lsrs	r2, r2, #16
 800784e:	701a      	strb	r2, [r3, #0]
	uint8_t User_bytes[3] = {0x08, 0x82, 0x27};
 8007850:	4a10      	ldr	r2, [pc, #64]	; (8007894 <ILI9341_display_function_control+0x60>)
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	4611      	mov	r1, r2
 800785a:	8019      	strh	r1, [r3, #0]
 800785c:	3302      	adds	r3, #2
 800785e:	0c12      	lsrs	r2, r2, #16
 8007860:	701a      	strb	r2, [r3, #0]
	if(isDefault == Default)
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d107      	bne.n	8007878 <ILI9341_display_function_control+0x44>
	{
		ILI9341_write_data(Display_function_control,3,Default_bytes);
 8007868:	f107 030c 	add.w	r3, r7, #12
 800786c:	461a      	mov	r2, r3
 800786e:	2103      	movs	r1, #3
 8007870:	20b6      	movs	r0, #182	; 0xb6
 8007872:	f7ff fb45 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Display_function_control,3,User_bytes);
	}
}
 8007876:	e006      	b.n	8007886 <ILI9341_display_function_control+0x52>
		ILI9341_write_data(Display_function_control,3,User_bytes);
 8007878:	f107 0308 	add.w	r3, r7, #8
 800787c:	461a      	mov	r2, r3
 800787e:	2103      	movs	r1, #3
 8007880:	20b6      	movs	r0, #182	; 0xb6
 8007882:	f7ff fb3d 	bl	8006f00 <ILI9341_write_data>
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	0800d2b8 	.word	0x0800d2b8
 8007894:	0800d2bc 	.word	0x0800d2bc

08007898 <ILI9341_Enable_3G>:

void ILI9341_Enable_3G(uint8_t isDefault)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x02};
 80078a2:	2302      	movs	r3, #2
 80078a4:	733b      	strb	r3, [r7, #12]
	uint8_t User_bytes[1] = {0x00};
 80078a6:	2300      	movs	r3, #0
 80078a8:	723b      	strb	r3, [r7, #8]
	if(isDefault == Default)
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d107      	bne.n	80078c0 <ILI9341_Enable_3G+0x28>
	{
		ILI9341_write_data(Enable_3G,1,Default_bytes);
 80078b0:	f107 030c 	add.w	r3, r7, #12
 80078b4:	461a      	mov	r2, r3
 80078b6:	2101      	movs	r1, #1
 80078b8:	20f2      	movs	r0, #242	; 0xf2
 80078ba:	f7ff fb21 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Enable_3G,1,User_bytes);
	}
}
 80078be:	e006      	b.n	80078ce <ILI9341_Enable_3G+0x36>
		ILI9341_write_data(Enable_3G,1,User_bytes);
 80078c0:	f107 0308 	add.w	r3, r7, #8
 80078c4:	461a      	mov	r2, r3
 80078c6:	2101      	movs	r1, #1
 80078c8:	20f2      	movs	r0, #242	; 0xf2
 80078ca:	f7ff fb19 	bl	8006f00 <ILI9341_write_data>
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <ILI9341_positive_Gamma_correction>:

void ILI9341_positive_Gamma_correction()
{
 80078d8:	b590      	push	{r4, r7, lr}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
	uint8_t User_bytes[15] = {0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08,
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <ILI9341_positive_Gamma_correction+0x2c>)
 80078e0:	463c      	mov	r4, r7
 80078e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078e4:	c407      	stmia	r4!, {r0, r1, r2}
 80078e6:	8023      	strh	r3, [r4, #0]
 80078e8:	3402      	adds	r4, #2
 80078ea:	0c1b      	lsrs	r3, r3, #16
 80078ec:	7023      	strb	r3, [r4, #0]
		0x4E, 0xF1, 0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00};
	ILI9341_write_data(Positive_Gamma_correction,15,User_bytes);
 80078ee:	463b      	mov	r3, r7
 80078f0:	461a      	mov	r2, r3
 80078f2:	210f      	movs	r1, #15
 80078f4:	20e0      	movs	r0, #224	; 0xe0
 80078f6:	f7ff fb03 	bl	8006f00 <ILI9341_write_data>
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd90      	pop	{r4, r7, pc}
 8007902:	bf00      	nop
 8007904:	0800d2c0 	.word	0x0800d2c0

08007908 <ILI9341_negative_Gamma_correction>:
void ILI9341_negative_Gamma_correction()
{
 8007908:	b590      	push	{r4, r7, lr}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
	uint8_t User_bytes[15] = {0x00, 0x0E, 0x14, 0x03, 0x11, 0x07,
 800790e:	4b09      	ldr	r3, [pc, #36]	; (8007934 <ILI9341_negative_Gamma_correction+0x2c>)
 8007910:	463c      	mov	r4, r7
 8007912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007914:	c407      	stmia	r4!, {r0, r1, r2}
 8007916:	8023      	strh	r3, [r4, #0]
 8007918:	3402      	adds	r4, #2
 800791a:	0c1b      	lsrs	r3, r3, #16
 800791c:	7023      	strb	r3, [r4, #0]
		0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F};
	ILI9341_write_data(Negative_Gamma_correction,15,User_bytes);
 800791e:	463b      	mov	r3, r7
 8007920:	461a      	mov	r2, r3
 8007922:	210f      	movs	r1, #15
 8007924:	20e1      	movs	r0, #225	; 0xe1
 8007926:	f7ff faeb 	bl	8006f00 <ILI9341_write_data>
}
 800792a:	bf00      	nop
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	bd90      	pop	{r4, r7, pc}
 8007932:	bf00      	nop
 8007934:	0800d2d0 	.word	0x0800d2d0

08007938 <ILI9341_interface_control>:
	
}


void ILI9341_interface_control(uint8_t isDefault)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[3] = {0x01,0x00,0x00};
 8007942:	4a0b      	ldr	r2, [pc, #44]	; (8007970 <ILI9341_interface_control+0x38>)
 8007944:	f107 030c 	add.w	r3, r7, #12
 8007948:	6812      	ldr	r2, [r2, #0]
 800794a:	4611      	mov	r1, r2
 800794c:	8019      	strh	r1, [r3, #0]
 800794e:	3302      	adds	r3, #2
 8007950:	0c12      	lsrs	r2, r2, #16
 8007952:	701a      	strb	r2, [r3, #0]
	if(isDefault == Default)
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d106      	bne.n	8007968 <ILI9341_interface_control+0x30>
	{
		ILI9341_write_data(Interface_control,3,Default_bytes);
 800795a:	f107 030c 	add.w	r3, r7, #12
 800795e:	461a      	mov	r2, r3
 8007960:	2103      	movs	r1, #3
 8007962:	20f6      	movs	r0, #246	; 0xf6
 8007964:	f7ff facc 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007968:	bf00      	nop
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	0800d2e0 	.word	0x0800d2e0

08007974 <ILI9341_Backlight_control_1>:

void ILI9341_Backlight_control_1(uint8_t isDefault)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x0C};
 800797e:	230c      	movs	r3, #12
 8007980:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d106      	bne.n	8007996 <ILI9341_Backlight_control_1+0x22>
	{
		ILI9341_write_data(Backlight_control_1,1,Default_bytes);
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	461a      	mov	r2, r3
 800798e:	2101      	movs	r1, #1
 8007990:	20b8      	movs	r0, #184	; 0xb8
 8007992:	f7ff fab5 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <ILI9341_Backlight_control_2>:
void ILI9341_Backlight_control_2(uint8_t isDefault)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	4603      	mov	r3, r0
 80079a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0xCC};
 80079a8:	23cc      	movs	r3, #204	; 0xcc
 80079aa:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d106      	bne.n	80079c0 <ILI9341_Backlight_control_2+0x22>
	{
		ILI9341_write_data(Backlight_control_2,1,Default_bytes);
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	461a      	mov	r2, r3
 80079b8:	2101      	movs	r1, #1
 80079ba:	20b9      	movs	r0, #185	; 0xb9
 80079bc:	f7ff faa0 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <ILI9341_Backlight_control_3>:
void ILI9341_Backlight_control_3(uint8_t isDefault)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x04};
 80079d2:	2304      	movs	r3, #4
 80079d4:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d106      	bne.n	80079ea <ILI9341_Backlight_control_3+0x22>
	{
		ILI9341_write_data(Backlight_control_3,1,Default_bytes);
 80079dc:	f107 030c 	add.w	r3, r7, #12
 80079e0:	461a      	mov	r2, r3
 80079e2:	2101      	movs	r1, #1
 80079e4:	20ba      	movs	r0, #186	; 0xba
 80079e6:	f7ff fa8b 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <ILI9341_Backlight_control_4>:
void ILI9341_Backlight_control_4(uint8_t isDefault)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	4603      	mov	r3, r0
 80079fa:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x65};
 80079fc:	2365      	movs	r3, #101	; 0x65
 80079fe:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d106      	bne.n	8007a14 <ILI9341_Backlight_control_4+0x22>
	{
		ILI9341_write_data(Backlight_control_4,1,Default_bytes);
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	20bb      	movs	r0, #187	; 0xbb
 8007a10:	f7ff fa76 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007a14:	bf00      	nop
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <ILI9341_Backlight_control_5>:
void ILI9341_Backlight_control_5(uint8_t isDefault)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x44};
 8007a26:	2344      	movs	r3, #68	; 0x44
 8007a28:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d106      	bne.n	8007a3e <ILI9341_Backlight_control_5+0x22>
	{
		ILI9341_write_data(Backlight_control_5,1,Default_bytes);
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	461a      	mov	r2, r3
 8007a36:	2101      	movs	r1, #1
 8007a38:	20bc      	movs	r0, #188	; 0xbc
 8007a3a:	f7ff fa61 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007a3e:	bf00      	nop
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <ILI9341_Backlight_control_7>:

void ILI9341_Backlight_control_7(uint8_t isDefault)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x0F};
 8007a50:	230f      	movs	r3, #15
 8007a52:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d106      	bne.n	8007a68 <ILI9341_Backlight_control_7+0x22>
	{
		ILI9341_write_data(Backlight_control_7,1,Default_bytes);
 8007a5a:	f107 030c 	add.w	r3, r7, #12
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2101      	movs	r1, #1
 8007a62:	20be      	movs	r0, #190	; 0xbe
 8007a64:	f7ff fa4c 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <ILI9341_Backlight_control_8>:
void ILI9341_Backlight_control_8(uint8_t isDefault)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x00};
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d106      	bne.n	8007a92 <ILI9341_Backlight_control_8+0x22>
	{
		ILI9341_write_data(Backlight_control_8,1,Default_bytes);
 8007a84:	f107 030c 	add.w	r3, r7, #12
 8007a88:	461a      	mov	r2, r3
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	20bf      	movs	r0, #191	; 0xbf
 8007a8e:	f7ff fa37 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007a92:	bf00      	nop
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <ILI9341_entry_mode_set>:

void ILI9341_entry_mode_set(uint8_t isDefault)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x06};
 8007aa4:	2306      	movs	r3, #6
 8007aa6:	733b      	strb	r3, [r7, #12]
	if(isDefault == Default)
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d106      	bne.n	8007abc <ILI9341_entry_mode_set+0x22>
	{
		ILI9341_write_data(Entry_mode_set,1,Default_bytes);
 8007aae:	f107 030c 	add.w	r3, r7, #12
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	20b7      	movs	r0, #183	; 0xb7
 8007ab8:	f7ff fa22 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <ILI9341_power_control_1>:

void ILI9341_power_control_1(uint8_t isDefault)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x21};
 8007ace:	2321      	movs	r3, #33	; 0x21
 8007ad0:	733b      	strb	r3, [r7, #12]
	uint8_t User_bytes[1] = {0x23};
 8007ad2:	2323      	movs	r3, #35	; 0x23
 8007ad4:	723b      	strb	r3, [r7, #8]
	if(isDefault == Default)
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d107      	bne.n	8007aec <ILI9341_power_control_1+0x28>
	{
		ILI9341_write_data(Power_control_1,1,Default_bytes);
 8007adc:	f107 030c 	add.w	r3, r7, #12
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	20c0      	movs	r0, #192	; 0xc0
 8007ae6:	f7ff fa0b 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Power_control_1,1,User_bytes);
	}
}
 8007aea:	e006      	b.n	8007afa <ILI9341_power_control_1+0x36>
		ILI9341_write_data(Power_control_1,1,User_bytes);
 8007aec:	f107 0308 	add.w	r3, r7, #8
 8007af0:	461a      	mov	r2, r3
 8007af2:	2101      	movs	r1, #1
 8007af4:	20c0      	movs	r0, #192	; 0xc0
 8007af6:	f7ff fa03 	bl	8006f00 <ILI9341_write_data>
}
 8007afa:	bf00      	nop
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <ILI9341_power_control_2>:
void ILI9341_power_control_2(uint8_t isDefault)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	4603      	mov	r3, r0
 8007b0a:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x10};
 8007b0c:	2310      	movs	r3, #16
 8007b0e:	733b      	strb	r3, [r7, #12]
	uint8_t User_bytes[1] = {0x10};
 8007b10:	2310      	movs	r3, #16
 8007b12:	723b      	strb	r3, [r7, #8]
	if(isDefault == Default)
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d107      	bne.n	8007b2a <ILI9341_power_control_2+0x28>
	{
		ILI9341_write_data(Power_control_2,1,Default_bytes);
 8007b1a:	f107 030c 	add.w	r3, r7, #12
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2101      	movs	r1, #1
 8007b22:	20c1      	movs	r0, #193	; 0xc1
 8007b24:	f7ff f9ec 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Power_control_2,1,User_bytes);
	}
}
 8007b28:	e006      	b.n	8007b38 <ILI9341_power_control_2+0x36>
		ILI9341_write_data(Power_control_2,1,User_bytes);
 8007b2a:	f107 0308 	add.w	r3, r7, #8
 8007b2e:	461a      	mov	r2, r3
 8007b30:	2101      	movs	r1, #1
 8007b32:	20c1      	movs	r0, #193	; 0xc1
 8007b34:	f7ff f9e4 	bl	8006f00 <ILI9341_write_data>
}
 8007b38:	bf00      	nop
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <ILI9341_VCOM_control_1>:
void ILI9341_VCOM_control_1(uint8_t isDefault)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[2] = {0x31,0x3C};
 8007b4a:	f643 4331 	movw	r3, #15409	; 0x3c31
 8007b4e:	81bb      	strh	r3, [r7, #12]
	uint8_t User_bytes[2] = {0x3E, 0x28};
 8007b50:	f642 033e 	movw	r3, #10302	; 0x283e
 8007b54:	813b      	strh	r3, [r7, #8]
	if(isDefault == Default)
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d107      	bne.n	8007b6c <ILI9341_VCOM_control_1+0x2c>
	{
		ILI9341_write_data(VCOM_control_1,2,Default_bytes);
 8007b5c:	f107 030c 	add.w	r3, r7, #12
 8007b60:	461a      	mov	r2, r3
 8007b62:	2102      	movs	r1, #2
 8007b64:	20c5      	movs	r0, #197	; 0xc5
 8007b66:	f7ff f9cb 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(VCOM_control_1,2,User_bytes);
	}
}
 8007b6a:	e006      	b.n	8007b7a <ILI9341_VCOM_control_1+0x3a>
		ILI9341_write_data(VCOM_control_1,2,User_bytes);
 8007b6c:	f107 0308 	add.w	r3, r7, #8
 8007b70:	461a      	mov	r2, r3
 8007b72:	2102      	movs	r1, #2
 8007b74:	20c5      	movs	r0, #197	; 0xc5
 8007b76:	f7ff f9c3 	bl	8006f00 <ILI9341_write_data>
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <ILI9341_VCOM_control_2>:
void ILI9341_VCOM_control_2(uint8_t isDefault)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	4603      	mov	r3, r0
 8007b8a:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0xC0};
 8007b8c:	23c0      	movs	r3, #192	; 0xc0
 8007b8e:	733b      	strb	r3, [r7, #12]
	uint8_t User_bytes[1] = {0x86};
 8007b90:	2386      	movs	r3, #134	; 0x86
 8007b92:	723b      	strb	r3, [r7, #8]
	if(isDefault == Default)
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d107      	bne.n	8007baa <ILI9341_VCOM_control_2+0x28>
	{
		ILI9341_write_data(VCOM_control_2,1,Default_bytes);
 8007b9a:	f107 030c 	add.w	r3, r7, #12
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	20c7      	movs	r0, #199	; 0xc7
 8007ba4:	f7ff f9ac 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(VCOM_control_2,1,User_bytes);
	}
}
 8007ba8:	e006      	b.n	8007bb8 <ILI9341_VCOM_control_2+0x36>
		ILI9341_write_data(VCOM_control_2,1,User_bytes);
 8007baa:	f107 0308 	add.w	r3, r7, #8
 8007bae:	461a      	mov	r2, r3
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	20c7      	movs	r0, #199	; 0xc7
 8007bb4:	f7ff f9a4 	bl	8006f00 <ILI9341_write_data>
}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <ILI9341_power_control_A>:

void ILI9341_power_control_A(uint8_t isDefault)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[5] = {0x39,0x2C,0x00,0x34,0x02};
 8007bca:	4a13      	ldr	r2, [pc, #76]	; (8007c18 <ILI9341_power_control_A+0x58>)
 8007bcc:	f107 0310 	add.w	r3, r7, #16
 8007bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bd4:	6018      	str	r0, [r3, #0]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	7019      	strb	r1, [r3, #0]
	uint8_t User_bytes[5] = {0x39, 0x2C, 0x00, 0x34, 0x02};
 8007bda:	4a0f      	ldr	r2, [pc, #60]	; (8007c18 <ILI9341_power_control_A+0x58>)
 8007bdc:	f107 0308 	add.w	r3, r7, #8
 8007be0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007be4:	6018      	str	r0, [r3, #0]
 8007be6:	3304      	adds	r3, #4
 8007be8:	7019      	strb	r1, [r3, #0]
	if(isDefault == Default)
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d107      	bne.n	8007c00 <ILI9341_power_control_A+0x40>
	{
		ILI9341_write_data(Power_control_A,5,Default_bytes);
 8007bf0:	f107 0310 	add.w	r3, r7, #16
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2105      	movs	r1, #5
 8007bf8:	20cb      	movs	r0, #203	; 0xcb
 8007bfa:	f7ff f981 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Power_control_A,5,User_bytes);
	}
}
 8007bfe:	e006      	b.n	8007c0e <ILI9341_power_control_A+0x4e>
		ILI9341_write_data(Power_control_A,5,User_bytes);
 8007c00:	f107 0308 	add.w	r3, r7, #8
 8007c04:	461a      	mov	r2, r3
 8007c06:	2105      	movs	r1, #5
 8007c08:	20cb      	movs	r0, #203	; 0xcb
 8007c0a:	f7ff f979 	bl	8006f00 <ILI9341_write_data>
}
 8007c0e:	bf00      	nop
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	0800d2e4 	.word	0x0800d2e4

08007c1c <ILI9341_power_control_B>:
void ILI9341_power_control_B(uint8_t isDefault)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[3] = {0x00,0x81,0x30};
 8007c26:	4a14      	ldr	r2, [pc, #80]	; (8007c78 <ILI9341_power_control_B+0x5c>)
 8007c28:	f107 030c 	add.w	r3, r7, #12
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	8019      	strh	r1, [r3, #0]
 8007c32:	3302      	adds	r3, #2
 8007c34:	0c12      	lsrs	r2, r2, #16
 8007c36:	701a      	strb	r2, [r3, #0]
	uint8_t User_bytes[3] = {0x00, 0xC1, 0x30};
 8007c38:	4a10      	ldr	r2, [pc, #64]	; (8007c7c <ILI9341_power_control_B+0x60>)
 8007c3a:	f107 0308 	add.w	r3, r7, #8
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	4611      	mov	r1, r2
 8007c42:	8019      	strh	r1, [r3, #0]
 8007c44:	3302      	adds	r3, #2
 8007c46:	0c12      	lsrs	r2, r2, #16
 8007c48:	701a      	strb	r2, [r3, #0]
	if(isDefault == Default)
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d107      	bne.n	8007c60 <ILI9341_power_control_B+0x44>
	{
		ILI9341_write_data(Power_control_B,3,Default_bytes);
 8007c50:	f107 030c 	add.w	r3, r7, #12
 8007c54:	461a      	mov	r2, r3
 8007c56:	2103      	movs	r1, #3
 8007c58:	20cf      	movs	r0, #207	; 0xcf
 8007c5a:	f7ff f951 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Power_control_B,3,User_bytes);
	}
}
 8007c5e:	e006      	b.n	8007c6e <ILI9341_power_control_B+0x52>
		ILI9341_write_data(Power_control_B,3,User_bytes);
 8007c60:	f107 0308 	add.w	r3, r7, #8
 8007c64:	461a      	mov	r2, r3
 8007c66:	2103      	movs	r1, #3
 8007c68:	20cf      	movs	r0, #207	; 0xcf
 8007c6a:	f7ff f949 	bl	8006f00 <ILI9341_write_data>
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	0800d2ec 	.word	0x0800d2ec
 8007c7c:	0800d2f0 	.word	0x0800d2f0

08007c80 <ILI9341_driver_timming_control_A>:
void ILI9341_driver_timming_control_A(uint8_t isDefault)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[3] = {0x84,0x11,0x7A};
 8007c8a:	4a0b      	ldr	r2, [pc, #44]	; (8007cb8 <ILI9341_driver_timming_control_A+0x38>)
 8007c8c:	f107 030c 	add.w	r3, r7, #12
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	4611      	mov	r1, r2
 8007c94:	8019      	strh	r1, [r3, #0]
 8007c96:	3302      	adds	r3, #2
 8007c98:	0c12      	lsrs	r2, r2, #16
 8007c9a:	701a      	strb	r2, [r3, #0]
	if(isDefault == Default)
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d106      	bne.n	8007cb0 <ILI9341_driver_timming_control_A+0x30>
	{
		ILI9341_write_data(Driver_timming_control_A,3,Default_bytes);
 8007ca2:	f107 030c 	add.w	r3, r7, #12
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	2103      	movs	r1, #3
 8007caa:	20e8      	movs	r0, #232	; 0xe8
 8007cac:	f7ff f928 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	0800d2f4 	.word	0x0800d2f4

08007cbc <ILI9341_driver_timming_control_A_>:
void ILI9341_driver_timming_control_A_(uint8_t isDefault)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[3] = {0x84,0x11,0x7A};
 8007cc6:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <ILI9341_driver_timming_control_A_+0x5c>)
 8007cc8:	f107 030c 	add.w	r3, r7, #12
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	8019      	strh	r1, [r3, #0]
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	0c12      	lsrs	r2, r2, #16
 8007cd6:	701a      	strb	r2, [r3, #0]
	uint8_t User_bytes[3] = {0x85, 0x00, 0x78};
 8007cd8:	4a10      	ldr	r2, [pc, #64]	; (8007d1c <ILI9341_driver_timming_control_A_+0x60>)
 8007cda:	f107 0308 	add.w	r3, r7, #8
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	8019      	strh	r1, [r3, #0]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	0c12      	lsrs	r2, r2, #16
 8007ce8:	701a      	strb	r2, [r3, #0]
	if(isDefault == Default)
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d107      	bne.n	8007d00 <ILI9341_driver_timming_control_A_+0x44>
	{
		ILI9341_write_data(Driver_timming_control_A_,3,Default_bytes);
 8007cf0:	f107 030c 	add.w	r3, r7, #12
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	2103      	movs	r1, #3
 8007cf8:	20e9      	movs	r0, #233	; 0xe9
 8007cfa:	f7ff f901 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Driver_timming_control_A_,3,User_bytes);
	}
}
 8007cfe:	e006      	b.n	8007d0e <ILI9341_driver_timming_control_A_+0x52>
		ILI9341_write_data(Driver_timming_control_A_,3,User_bytes);
 8007d00:	f107 0308 	add.w	r3, r7, #8
 8007d04:	461a      	mov	r2, r3
 8007d06:	2103      	movs	r1, #3
 8007d08:	20e9      	movs	r0, #233	; 0xe9
 8007d0a:	f7ff f8f9 	bl	8006f00 <ILI9341_write_data>
}
 8007d0e:	bf00      	nop
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	0800d2f4 	.word	0x0800d2f4
 8007d1c:	0800d2f8 	.word	0x0800d2f8

08007d20 <ILI9341_driver_timming_control_B>:
void ILI9341_driver_timming_control_B(uint8_t isDefault)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[2] = {0x66,0x00};
 8007d2a:	2366      	movs	r3, #102	; 0x66
 8007d2c:	81bb      	strh	r3, [r7, #12]
	uint8_t User_bytes[2] = {0x00,0x00};
 8007d2e:	2300      	movs	r3, #0
 8007d30:	813b      	strh	r3, [r7, #8]
	if(isDefault == Default)
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d107      	bne.n	8007d48 <ILI9341_driver_timming_control_B+0x28>
	{
		ILI9341_write_data(Driver_timming_control_B,2,Default_bytes);
 8007d38:	f107 030c 	add.w	r3, r7, #12
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	2102      	movs	r1, #2
 8007d40:	20ea      	movs	r0, #234	; 0xea
 8007d42:	f7ff f8dd 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Driver_timming_control_B,2,User_bytes);
	}
}
 8007d46:	e006      	b.n	8007d56 <ILI9341_driver_timming_control_B+0x36>
		ILI9341_write_data(Driver_timming_control_B,2,User_bytes);
 8007d48:	f107 0308 	add.w	r3, r7, #8
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	2102      	movs	r1, #2
 8007d50:	20ea      	movs	r0, #234	; 0xea
 8007d52:	f7ff f8d5 	bl	8006f00 <ILI9341_write_data>
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <ILI9341_power_sequence_control>:
void ILI9341_power_sequence_control(uint8_t isDefault)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[4] = {0x55,0x01,0x23,0x01};
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <ILI9341_power_sequence_control+0x40>)
 8007d6c:	60fb      	str	r3, [r7, #12]
	uint8_t User_bytes[4] = {0x64, 0x03, 0x12, 0x81};
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <ILI9341_power_sequence_control+0x44>)
 8007d70:	60bb      	str	r3, [r7, #8]
	if(isDefault == Default)
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d107      	bne.n	8007d88 <ILI9341_power_sequence_control+0x28>
	{
		ILI9341_write_data(Power_sequence_control,4,Default_bytes);
 8007d78:	f107 030c 	add.w	r3, r7, #12
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	2104      	movs	r1, #4
 8007d80:	20ed      	movs	r0, #237	; 0xed
 8007d82:	f7ff f8bd 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Power_sequence_control,4,User_bytes);
	}
}
 8007d86:	e006      	b.n	8007d96 <ILI9341_power_sequence_control+0x36>
		ILI9341_write_data(Power_sequence_control,4,User_bytes);
 8007d88:	f107 0308 	add.w	r3, r7, #8
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	2104      	movs	r1, #4
 8007d90:	20ed      	movs	r0, #237	; 0xed
 8007d92:	f7ff f8b5 	bl	8006f00 <ILI9341_write_data>
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	01230155 	.word	0x01230155
 8007da4:	81120364 	.word	0x81120364

08007da8 <ILI9341_pump_ratio_control>:
void ILI9341_pump_ratio_control(uint8_t isDefault)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	71fb      	strb	r3, [r7, #7]
	uint8_t Default_bytes[1] = {0x10};
 8007db2:	2310      	movs	r3, #16
 8007db4:	733b      	strb	r3, [r7, #12]
	uint8_t User_bytes[1] = {0x20};
 8007db6:	2320      	movs	r3, #32
 8007db8:	723b      	strb	r3, [r7, #8]
	if(isDefault == Default)
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d107      	bne.n	8007dd0 <ILI9341_pump_ratio_control+0x28>
	{
		ILI9341_write_data(Pump_ratio_control,1,Default_bytes);
 8007dc0:	f107 030c 	add.w	r3, r7, #12
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	20f7      	movs	r0, #247	; 0xf7
 8007dca:	f7ff f899 	bl	8006f00 <ILI9341_write_data>
	}
	else
	{
		ILI9341_write_data(Pump_ratio_control,1,User_bytes);
	}
}
 8007dce:	e006      	b.n	8007dde <ILI9341_pump_ratio_control+0x36>
		ILI9341_write_data(Pump_ratio_control,1,User_bytes);
 8007dd0:	f107 0308 	add.w	r3, r7, #8
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	20f7      	movs	r0, #247	; 0xf7
 8007dda:	f7ff f891 	bl	8006f00 <ILI9341_write_data>
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <setting_all>:

void setting_all()
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	af00      	add	r7, sp, #0
	ILI9341_gamma_set(!Default);
 8007dea:	2000      	movs	r0, #0
 8007dec:	f7ff fc4a 	bl	8007684 <ILI9341_gamma_set>
	
	ILI9341_pixel_format_set(Default);
 8007df0:	2001      	movs	r0, #1
 8007df2:	f7ff fc66 	bl	80076c2 <ILI9341_pixel_format_set>
	ILI9341_set_memory_data_access_control(!Default);
 8007df6:	2000      	movs	r0, #0
 8007df8:	f7ff fc82 	bl	8007700 <ILI9341_set_memory_data_access_control>

	ILI9341_RGB_interface_signal_control(Default);
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	f7ff fc9e 	bl	800773e <ILI9341_RGB_interface_signal_control>
	ILI9341_Frame_control_in_Normal_mode(!Default);
 8007e02:	2000      	movs	r0, #0
 8007e04:	f7ff fcb0 	bl	8007768 <ILI9341_Frame_control_in_Normal_mode>
	ILI9341_Frame_control_in_Idle_mode(Default);
 8007e08:	2001      	movs	r0, #1
 8007e0a:	f7ff fcce 	bl	80077aa <ILI9341_Frame_control_in_Idle_mode>
	ILI9341_Frame_control_in_Partial_mode(Default);
 8007e0e:	2001      	movs	r0, #1
 8007e10:	f7ff fce1 	bl	80077d6 <ILI9341_Frame_control_in_Partial_mode>
	ILI9341_blanking_porch_control(Default);
 8007e14:	2001      	movs	r0, #1
 8007e16:	f7ff fcf5 	bl	8007804 <ILI9341_blanking_porch_control>
	ILI9341_display_function_control(!Default);
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	f7ff fd0a 	bl	8007834 <ILI9341_display_function_control>
	ILI9341_Enable_3G(!Default);
 8007e20:	2000      	movs	r0, #0
 8007e22:	f7ff fd39 	bl	8007898 <ILI9341_Enable_3G>
	ILI9341_positive_Gamma_correction();
 8007e26:	f7ff fd57 	bl	80078d8 <ILI9341_positive_Gamma_correction>
	ILI9341_negative_Gamma_correction();
 8007e2a:	f7ff fd6d 	bl	8007908 <ILI9341_negative_Gamma_correction>
	
	ILI9341_interface_control(Default);
 8007e2e:	2001      	movs	r0, #1
 8007e30:	f7ff fd82 	bl	8007938 <ILI9341_interface_control>

	ILI9341_entry_mode_set(Default);
 8007e34:	2001      	movs	r0, #1
 8007e36:	f7ff fe30 	bl	8007a9a <ILI9341_entry_mode_set>
	ILI9341_Backlight_control_1(Default);
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	f7ff fd9a 	bl	8007974 <ILI9341_Backlight_control_1>
	ILI9341_Backlight_control_2(Default);
 8007e40:	2001      	movs	r0, #1
 8007e42:	f7ff fdac 	bl	800799e <ILI9341_Backlight_control_2>
	ILI9341_Backlight_control_3(Default);
 8007e46:	2001      	movs	r0, #1
 8007e48:	f7ff fdbe 	bl	80079c8 <ILI9341_Backlight_control_3>
	ILI9341_Backlight_control_4(Default);
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	f7ff fdd0 	bl	80079f2 <ILI9341_Backlight_control_4>
	ILI9341_Backlight_control_5(Default);
 8007e52:	2001      	movs	r0, #1
 8007e54:	f7ff fde2 	bl	8007a1c <ILI9341_Backlight_control_5>
	ILI9341_Backlight_control_7(Default);
 8007e58:	2001      	movs	r0, #1
 8007e5a:	f7ff fdf4 	bl	8007a46 <ILI9341_Backlight_control_7>
	ILI9341_Backlight_control_8(Default);
 8007e5e:	2001      	movs	r0, #1
 8007e60:	f7ff fe06 	bl	8007a70 <ILI9341_Backlight_control_8>
	ILI9341_power_control_1(!Default);
 8007e64:	2000      	movs	r0, #0
 8007e66:	f7ff fe2d 	bl	8007ac4 <ILI9341_power_control_1>
	ILI9341_power_control_2(!Default);
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	f7ff fe49 	bl	8007b02 <ILI9341_power_control_2>
	ILI9341_VCOM_control_1(!Default);
 8007e70:	2000      	movs	r0, #0
 8007e72:	f7ff fe65 	bl	8007b40 <ILI9341_VCOM_control_1>
	ILI9341_VCOM_control_2(!Default);
 8007e76:	2000      	movs	r0, #0
 8007e78:	f7ff fe83 	bl	8007b82 <ILI9341_VCOM_control_2>

	ILI9341_power_control_A(!Default);
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	f7ff fe9f 	bl	8007bc0 <ILI9341_power_control_A>
	ILI9341_power_control_B(!Default);
 8007e82:	2000      	movs	r0, #0
 8007e84:	f7ff feca 	bl	8007c1c <ILI9341_power_control_B>
	ILI9341_driver_timming_control_A(!Default);
 8007e88:	2000      	movs	r0, #0
 8007e8a:	f7ff fef9 	bl	8007c80 <ILI9341_driver_timming_control_A>
	ILI9341_driver_timming_control_A_(Default);
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f7ff ff14 	bl	8007cbc <ILI9341_driver_timming_control_A_>
	ILI9341_driver_timming_control_B(!Default);
 8007e94:	2000      	movs	r0, #0
 8007e96:	f7ff ff43 	bl	8007d20 <ILI9341_driver_timming_control_B>
	ILI9341_power_sequence_control(!Default);
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f7ff ff60 	bl	8007d60 <ILI9341_power_sequence_control>
	ILI9341_pump_ratio_control(!Default);
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	f7ff ff81 	bl	8007da8 <ILI9341_pump_ratio_control>
 8007ea6:	bf00      	nop
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <SHT31_init>:

volatile uint32_t temperature = 0;
volatile uint32_t humidity = 0;

void SHT31_init()
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	af00      	add	r7, sp, #0
  SHT31_Measure_period(Measure_period_1sec_high);
 8007eae:	f242 1030 	movw	r0, #8496	; 0x2130
 8007eb2:	f000 f841 	bl	8007f38 <SHT31_Measure_period>
  _delay_ms(50);
 8007eb6:	2032      	movs	r0, #50	; 0x32
 8007eb8:	f000 f960 	bl	800817c <_delay_ms>
}
 8007ebc:	bf00      	nop
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <SHT31_CRC8>:

uint8_t SHT31_CRC8(volatile uint8_t* data_bytes, uint8_t nums)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xFF;
 8007ecc:	23ff      	movs	r3, #255	; 0xff
 8007ece:	73fb      	strb	r3, [r7, #15]
	const uint8_t polynomial = 0x31;
 8007ed0:	2331      	movs	r3, #49	; 0x31
 8007ed2:	733b      	strb	r3, [r7, #12]
	for(uint8_t i = 0; i < nums; i++)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73bb      	strb	r3, [r7, #14]
 8007ed8:	e024      	b.n	8007f24 <SHT31_CRC8+0x64>
	{
		crc ^= *data_bytes++;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	4053      	eors	r3, r2
 8007ee8:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i < 8; i++)
 8007eea:	2300      	movs	r3, #0
 8007eec:	737b      	strb	r3, [r7, #13]
 8007eee:	e013      	b.n	8007f18 <SHT31_CRC8+0x58>
		{
			crc = (crc & 0x80) ? (crc << 1) ^ polynomial : (crc << 1);
 8007ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	da08      	bge.n	8007f0a <SHT31_CRC8+0x4a>
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	b25a      	sxtb	r2, r3
 8007efe:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007f02:	4053      	eors	r3, r2
 8007f04:	b25b      	sxtb	r3, r3
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	e002      	b.n	8007f10 <SHT31_CRC8+0x50>
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i < 8; i++)
 8007f12:	7b7b      	ldrb	r3, [r7, #13]
 8007f14:	3301      	adds	r3, #1
 8007f16:	737b      	strb	r3, [r7, #13]
 8007f18:	7b7b      	ldrb	r3, [r7, #13]
 8007f1a:	2b07      	cmp	r3, #7
 8007f1c:	d9e8      	bls.n	8007ef0 <SHT31_CRC8+0x30>
	for(uint8_t i = 0; i < nums; i++)
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	3301      	adds	r3, #1
 8007f22:	73bb      	strb	r3, [r7, #14]
 8007f24:	7bba      	ldrb	r2, [r7, #14]
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d3d6      	bcc.n	8007eda <SHT31_CRC8+0x1a>
		}
	}
	return crc;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr

08007f38 <SHT31_Measure_period>:
	printf("temp : %ld, humi : %ld\n\r", temperature, humidity);
	
}

void SHT31_Measure_period(uint16_t command)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	80fb      	strh	r3, [r7, #6]
	volatile uint8_t send_bytes[2];
	send_bytes[0] = command >> 8;
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	733b      	strb	r3, [r7, #12]
	send_bytes[1] = command & 0xFF;
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	737b      	strb	r3, [r7, #13]

	i2c_1_start_send_addr_send_data_stop(SHT31_address,send_bytes,2);
 8007f52:	f107 030c 	add.w	r3, r7, #12
 8007f56:	2202      	movs	r2, #2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	2044      	movs	r0, #68	; 0x44
 8007f5c:	f000 f8a0 	bl	80080a0 <i2c_1_start_send_addr_send_data_stop>

	/*SHT31_start_address_write(SHT31_address);
	SHT31_send_command(command);*/
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <SHT31_read_period>:

void SHT31_read_period()
{
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
	volatile uint8_t data_bytes[6] = {0};
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60bb      	str	r3, [r7, #8]
 8007f72:	2300      	movs	r3, #0
 8007f74:	81bb      	strh	r3, [r7, #12]
	uint32_t temp = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	617b      	str	r3, [r7, #20]
	uint32_t humi = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	613b      	str	r3, [r7, #16]
	volatile uint8_t send_bytes[2];
	send_bytes[0] = Read_period_data >> 8;
 8007f7e:	23e0      	movs	r3, #224	; 0xe0
 8007f80:	713b      	strb	r3, [r7, #4]
	send_bytes[1] = Read_period_data & 0xFF;
 8007f82:	2300      	movs	r3, #0
 8007f84:	717b      	strb	r3, [r7, #5]

	i2c_1_start_send_addr_send_data_stop(SHT31_address,send_bytes,2);
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	2202      	movs	r2, #2
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	2044      	movs	r0, #68	; 0x44
 8007f8e:	f000 f887 	bl	80080a0 <i2c_1_start_send_addr_send_data_stop>
	/*SHT31_start_address_write(SHT31_address);
	SHT31_send_command(Read_period_data);*/
	_delay_ms(10);
 8007f92:	200a      	movs	r0, #10
 8007f94:	f000 f8f2 	bl	800817c <_delay_ms>
	/*SHT31_start_address_read(SHT31_address);
	SHT31_receive_data(data_bytes,6);
	i2c_1_stop();*/
	i2c_1_start_receive_addr_receive_data_stop(SHT31_address,data_bytes,6);
 8007f98:	f107 0308 	add.w	r3, r7, #8
 8007f9c:	2206      	movs	r2, #6
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	2044      	movs	r0, #68	; 0x44
 8007fa2:	f000 f89b 	bl	80080dc <i2c_1_start_receive_addr_receive_data_stop>
	if(data_bytes[2] != SHT31_CRC8(data_bytes,2) || data_bytes[5] != SHT31_CRC8(data_bytes+3,2))
 8007fa6:	7abb      	ldrb	r3, [r7, #10]
 8007fa8:	b2dc      	uxtb	r4, r3
 8007faa:	f107 0308 	add.w	r3, r7, #8
 8007fae:	2102      	movs	r1, #2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff ff85 	bl	8007ec0 <SHT31_CRC8>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d10b      	bne.n	8007fd4 <SHT31_read_period+0x6c>
 8007fbc:	7b7b      	ldrb	r3, [r7, #13]
 8007fbe:	b2dc      	uxtb	r4, r3
 8007fc0:	f107 0308 	add.w	r3, r7, #8
 8007fc4:	3303      	adds	r3, #3
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff ff79 	bl	8007ec0 <SHT31_CRC8>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	d003      	beq.n	8007fdc <SHT31_read_period+0x74>
	{
		printf("CRC8 Failed");
 8007fd4:	4817      	ldr	r0, [pc, #92]	; (8008034 <SHT31_read_period+0xcc>)
 8007fd6:	f000 f9ed 	bl	80083b4 <printf>
 8007fda:	e01f      	b.n	800801c <SHT31_read_period+0xb4>
	}
	else
	{
		temp = (((uint16_t)data_bytes[0] << 8) + (uint16_t)data_bytes[1]);
 8007fdc:	7a3b      	ldrb	r3, [r7, #8]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	7a7a      	ldrb	r2, [r7, #9]
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
		humi = (((uint16_t)data_bytes[3] << 8) + (uint16_t)data_bytes[4]);
 8007fea:	7afb      	ldrb	r3, [r7, #11]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	7b3a      	ldrb	r2, [r7, #12]
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
		printf("before convert temp : %ld, humi : %ld\n\r", temp, humi);
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	6979      	ldr	r1, [r7, #20]
 8007ffc:	480e      	ldr	r0, [pc, #56]	; (8008038 <SHT31_read_period+0xd0>)
 8007ffe:	f000 f9d9 	bl	80083b4 <printf>
		printf("humi data_bytes : 0x%X, 0x%X\n\r", data_bytes[3], data_bytes[4]);
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	4619      	mov	r1, r3
 8008008:	7b3b      	ldrb	r3, [r7, #12]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	480b      	ldr	r0, [pc, #44]	; (800803c <SHT31_read_period+0xd4>)
 8008010:	f000 f9d0 	bl	80083b4 <printf>
		SHT31_convert_temp_humi(temp,humi);
 8008014:	6939      	ldr	r1, [r7, #16]
 8008016:	6978      	ldr	r0, [r7, #20]
 8008018:	f000 f818 	bl	800804c <SHT31_convert_temp_humi>
	}
	printf("temp : %ld, humi : %ld\n\r", temperature, humidity);
 800801c:	4b08      	ldr	r3, [pc, #32]	; (8008040 <SHT31_read_period+0xd8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a08      	ldr	r2, [pc, #32]	; (8008044 <SHT31_read_period+0xdc>)
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	4619      	mov	r1, r3
 8008026:	4808      	ldr	r0, [pc, #32]	; (8008048 <SHT31_read_period+0xe0>)
 8008028:	f000 f9c4 	bl	80083b4 <printf>
}
 800802c:	bf00      	nop
 800802e:	371c      	adds	r7, #28
 8008030:	46bd      	mov	sp, r7
 8008032:	bd90      	pop	{r4, r7, pc}
 8008034:	0800d2fc 	.word	0x0800d2fc
 8008038:	0800d308 	.word	0x0800d308
 800803c:	0800d330 	.word	0x0800d330
 8008040:	200010dc 	.word	0x200010dc
 8008044:	200010e0 	.word	0x200010e0
 8008048:	0800d350 	.word	0x0800d350

0800804c <SHT31_convert_temp_humi>:

void SHT31_convert_temp_humi(uint32_t temp, uint32_t humi)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
	uint32_t temp_temperature = (temp * 175);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	22af      	movs	r2, #175	; 0xaf
 800805a:	fb02 f303 	mul.w	r3, r2, r3
 800805e:	60fb      	str	r3, [r7, #12]
	temp_temperature >>= 16;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	60fb      	str	r3, [r7, #12]
	temp_temperature -= 44;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3b2c      	subs	r3, #44	; 0x2c
 800806a:	60fb      	str	r3, [r7, #12]
	uint32_t temp_humidity = (humi * 100);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2264      	movs	r2, #100	; 0x64
 8008070:	fb02 f303 	mul.w	r3, r2, r3
 8008074:	60bb      	str	r3, [r7, #8]
	temp_humidity >>= 16;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	0c1b      	lsrs	r3, r3, #16
 800807a:	60bb      	str	r3, [r7, #8]
	temp_humidity++;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	3301      	adds	r3, #1
 8008080:	60bb      	str	r3, [r7, #8]
	temperature = temp_temperature;
 8008082:	4a05      	ldr	r2, [pc, #20]	; (8008098 <SHT31_convert_temp_humi+0x4c>)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6013      	str	r3, [r2, #0]
	humidity = temp_humidity;
 8008088:	4a04      	ldr	r2, [pc, #16]	; (800809c <SHT31_convert_temp_humi+0x50>)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6013      	str	r3, [r2, #0]
}
 800808e:	bf00      	nop
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr
 8008098:	200010dc 	.word	0x200010dc
 800809c:	200010e0 	.word	0x200010e0

080080a0 <i2c_1_start_send_addr_send_data_stop>:
#include "i2c_init.h"

extern I2C_HandleTypeDef hi2c1;

void i2c_1_start_send_addr_send_data_stop(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	4603      	mov	r3, r0
 80080a8:	6039      	str	r1, [r7, #0]
 80080aa:	80fb      	strh	r3, [r7, #6]
 80080ac:	4613      	mov	r3, r2
 80080ae:	80bb      	strh	r3, [r7, #4]
	while(!(HAL_I2C_Master_Transmit(&hi2c1, (DevAddress << 1), pData, Size, 1000) == HAL_OK));
 80080b0:	bf00      	nop
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	b299      	uxth	r1, r3
 80080b8:	88bb      	ldrh	r3, [r7, #4]
 80080ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080be:	9200      	str	r2, [sp, #0]
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	4805      	ldr	r0, [pc, #20]	; (80080d8 <i2c_1_start_send_addr_send_data_stop+0x38>)
 80080c4:	f7f9 fff8 	bl	80020b8 <HAL_I2C_Master_Transmit>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f1      	bne.n	80080b2 <i2c_1_start_send_addr_send_data_stop+0x12>
}
 80080ce:	bf00      	nop
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20001158 	.word	0x20001158

080080dc <i2c_1_start_receive_addr_receive_data_stop>:

void i2c_1_start_receive_addr_receive_data_stop(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	4603      	mov	r3, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	80fb      	strh	r3, [r7, #6]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80bb      	strh	r3, [r7, #4]
	while(!(HAL_I2C_Master_Receive(&hi2c1, (DevAddress << 1)+1, pData, Size, 1000) == HAL_OK));
 80080ec:	bf00      	nop
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3301      	adds	r3, #1
 80080f6:	b299      	uxth	r1, r3
 80080f8:	88bb      	ldrh	r3, [r7, #4]
 80080fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080fe:	9200      	str	r2, [sp, #0]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	4805      	ldr	r0, [pc, #20]	; (8008118 <i2c_1_start_receive_addr_receive_data_stop+0x3c>)
 8008104:	f7fa f8d6 	bl	80022b4 <HAL_I2C_Master_Receive>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1ef      	bne.n	80080ee <i2c_1_start_receive_addr_receive_data_stop+0x12>
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20001158 	.word	0x20001158

0800811c <spi_1_chip_select>:
#include "spi_init.h"

extern SPI_HandleTypeDef hspi1;

void spi_1_chip_select()
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin, GPIO_PIN_RESET);
 8008120:	2200      	movs	r2, #0
 8008122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008126:	4802      	ldr	r0, [pc, #8]	; (8008130 <spi_1_chip_select+0x14>)
 8008128:	f7f9 fe52 	bl	8001dd0 <HAL_GPIO_WritePin>
}
 800812c:	bf00      	nop
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40010800 	.word	0x40010800

08008134 <spi_1_chip_deselect>:
void spi_1_chip_deselect()
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin, GPIO_PIN_SET);
 8008138:	2201      	movs	r2, #1
 800813a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800813e:	4802      	ldr	r0, [pc, #8]	; (8008148 <spi_1_chip_deselect+0x14>)
 8008140:	f7f9 fe46 	bl	8001dd0 <HAL_GPIO_WritePin>
}
 8008144:	bf00      	nop
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40010800 	.word	0x40010800

0800814c <spi_1_write_data>:
void spi_1_write_data(uint8_t pData)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	71fb      	strb	r3, [r7, #7]
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX);
 8008156:	bf00      	nop
 8008158:	4807      	ldr	r0, [pc, #28]	; (8008178 <spi_1_write_data+0x2c>)
 800815a:	f7fb fc11 	bl	8003980 <HAL_SPI_GetState>
 800815e:	4603      	mov	r3, r0
 8008160:	2b03      	cmp	r3, #3
 8008162:	d0f9      	beq.n	8008158 <spi_1_write_data+0xc>
	HAL_SPI_Transmit(&hspi1, &pData, 1, 100);
 8008164:	1df9      	adds	r1, r7, #7
 8008166:	2364      	movs	r3, #100	; 0x64
 8008168:	2201      	movs	r2, #1
 800816a:	4803      	ldr	r0, [pc, #12]	; (8008178 <spi_1_write_data+0x2c>)
 800816c:	f7fb facc 	bl	8003708 <HAL_SPI_Transmit>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	200011f4 	.word	0x200011f4

0800817c <_delay_ms>:
  {
    count--;
  }
}
void _delay_ms(uint32_t ncount)
{
 800817c:	b4b0      	push	{r4, r5, r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint64_t count = ncount * 2000;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800818a:	fb02 f303 	mul.w	r3, r2, r3
 800818e:	461a      	mov	r2, r3
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	e9c7 2302 	strd	r2, r3, [r7, #8]
  while (count != 0)
 8008198:	e007      	b.n	80081aa <_delay_ms+0x2e>
  {
    count--;
 800819a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800819e:	f112 34ff 	adds.w	r4, r2, #4294967295
 80081a2:	f143 35ff 	adc.w	r5, r3, #4294967295
 80081a6:	e9c7 4502 	strd	r4, r5, [r7, #8]
  while (count != 0)
 80081aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	d1f3      	bne.n	800819a <_delay_ms+0x1e>
  }
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bcb0      	pop	{r4, r5, r7}
 80081bc:	4770      	bx	lr

080081be <_delay_us>:
void _delay_us(uint32_t ncount)
{
 80081be:	b4b0      	push	{r4, r5, r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  uint64_t count = ncount * 2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	461a      	mov	r2, r3
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  while (count != 0)
 80081d4:	e007      	b.n	80081e6 <_delay_us+0x28>
  {
    count--;
 80081d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081da:	f112 34ff 	adds.w	r4, r2, #4294967295
 80081de:	f143 35ff 	adc.w	r5, r3, #4294967295
 80081e2:	e9c7 4502 	strd	r4, r5, [r7, #8]
  while (count != 0)
 80081e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	d1f3      	bne.n	80081d6 <_delay_us+0x18>
  }
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bcb0      	pop	{r4, r5, r7}
 80081f8:	4770      	bx	lr
	...

080081fc <timer_3_init>:
#include "timer_init.h"

extern TIM_HandleTypeDef htim3;

void timer_3_init()
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <timer_3_init+0x34>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2200      	movs	r2, #0
 8008206:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8008208:	4b09      	ldr	r3, [pc, #36]	; (8008230 <timer_3_init+0x34>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	4b08      	ldr	r3, [pc, #32]	; (8008230 <timer_3_init+0x34>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0201 	orr.w	r2, r2, #1
 8008216:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE(&htim3);
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <timer_3_init+0x34>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <timer_3_init+0x34>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr
 8008230:	200011ac 	.word	0x200011ac

08008234 <uart_2_transmit>:

extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;

void uart_2_transmit(uint8_t pData)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	71fb      	strb	r3, [r7, #7]
	while((HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX));
 800823e:	bf00      	nop
 8008240:	480a      	ldr	r0, [pc, #40]	; (800826c <uart_2_transmit+0x38>)
 8008242:	f7fc fcc1 	bl	8004bc8 <HAL_UART_GetState>
 8008246:	4603      	mov	r3, r0
 8008248:	2b21      	cmp	r3, #33	; 0x21
 800824a:	d0f9      	beq.n	8008240 <uart_2_transmit+0xc>
	while(!(HAL_UART_Transmit(&huart2, &pData, 1, 10000) == HAL_OK));
 800824c:	bf00      	nop
 800824e:	1df9      	adds	r1, r7, #7
 8008250:	f242 7310 	movw	r3, #10000	; 0x2710
 8008254:	2201      	movs	r2, #1
 8008256:	4805      	ldr	r0, [pc, #20]	; (800826c <uart_2_transmit+0x38>)
 8008258:	f7fc fa73 	bl	8004742 <HAL_UART_Transmit>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f5      	bne.n	800824e <uart_2_transmit+0x1a>
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	2000124c 	.word	0x2000124c

08008270 <uart_2_receive>:

uint8_t uart_2_receive()
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
	uint8_t pData;
	while((HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_RX));
 8008276:	bf00      	nop
 8008278:	480a      	ldr	r0, [pc, #40]	; (80082a4 <uart_2_receive+0x34>)
 800827a:	f7fc fca5 	bl	8004bc8 <HAL_UART_GetState>
 800827e:	4603      	mov	r3, r0
 8008280:	2b22      	cmp	r3, #34	; 0x22
 8008282:	d0f9      	beq.n	8008278 <uart_2_receive+0x8>
	while(!(HAL_UART_Receive(&huart2, &pData, 1, 10000) == HAL_OK));
 8008284:	bf00      	nop
 8008286:	1df9      	adds	r1, r7, #7
 8008288:	f242 7310 	movw	r3, #10000	; 0x2710
 800828c:	2201      	movs	r2, #1
 800828e:	4805      	ldr	r0, [pc, #20]	; (80082a4 <uart_2_receive+0x34>)
 8008290:	f7fc fae9 	bl	8004866 <HAL_UART_Receive>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1f5      	bne.n	8008286 <uart_2_receive+0x16>
	return pData;
 800829a:	79fb      	ldrb	r3, [r7, #7]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	2000124c 	.word	0x2000124c

080082a8 <uart_3_transmit>:

void uart_3_transmit(uint8_t pData)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
	while((HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX));
 80082b2:	bf00      	nop
 80082b4:	480a      	ldr	r0, [pc, #40]	; (80082e0 <uart_3_transmit+0x38>)
 80082b6:	f7fc fc87 	bl	8004bc8 <HAL_UART_GetState>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b21      	cmp	r3, #33	; 0x21
 80082be:	d0f9      	beq.n	80082b4 <uart_3_transmit+0xc>
	while(!(HAL_UART_Transmit(&huart3, &pData, 1, 10000) == HAL_OK));
 80082c0:	bf00      	nop
 80082c2:	1df9      	adds	r1, r7, #7
 80082c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80082c8:	2201      	movs	r2, #1
 80082ca:	4805      	ldr	r0, [pc, #20]	; (80082e0 <uart_3_transmit+0x38>)
 80082cc:	f7fc fa39 	bl	8004742 <HAL_UART_Transmit>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1f5      	bne.n	80082c2 <uart_3_transmit+0x1a>
}
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20001118 	.word	0x20001118

080082e4 <uart_3_receive>:

uint8_t uart_3_receive()
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
	uint8_t pData;
	while((HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_RX));
 80082ea:	bf00      	nop
 80082ec:	480a      	ldr	r0, [pc, #40]	; (8008318 <uart_3_receive+0x34>)
 80082ee:	f7fc fc6b 	bl	8004bc8 <HAL_UART_GetState>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b22      	cmp	r3, #34	; 0x22
 80082f6:	d0f9      	beq.n	80082ec <uart_3_receive+0x8>
	while(!(HAL_UART_Receive(&huart3, &pData, 1, 1000) == HAL_OK));
 80082f8:	bf00      	nop
 80082fa:	1df9      	adds	r1, r7, #7
 80082fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008300:	2201      	movs	r2, #1
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <uart_3_receive+0x34>)
 8008304:	f7fc faaf 	bl	8004866 <HAL_UART_Receive>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f5      	bne.n	80082fa <uart_3_receive+0x16>
	return pData;
 800830e:	79fb      	ldrb	r3, [r7, #7]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20001118 	.word	0x20001118

0800831c <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	uart_2_transmit(ch);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	b2db      	uxtb	r3, r3
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff ff83 	bl	8008234 <uart_2_transmit>
	return ch;
 800832e:	687b      	ldr	r3, [r7, #4]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
	int ch = uart_2_receive();
 800833e:	f7ff ff97 	bl	8008270 <uart_2_receive>
 8008342:	4603      	mov	r3, r0
 8008344:	607b      	str	r3, [r7, #4]
	return ch;
 8008346:	687b      	ldr	r3, [r7, #4]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	200006ec 	.word	0x200006ec

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	2600      	movs	r6, #0
 8008360:	4d0c      	ldr	r5, [pc, #48]	; (8008394 <__libc_init_array+0x38>)
 8008362:	4c0d      	ldr	r4, [pc, #52]	; (8008398 <__libc_init_array+0x3c>)
 8008364:	1b64      	subs	r4, r4, r5
 8008366:	10a4      	asrs	r4, r4, #2
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	f004 fe68 	bl	800d040 <_init>
 8008370:	2600      	movs	r6, #0
 8008372:	4d0a      	ldr	r5, [pc, #40]	; (800839c <__libc_init_array+0x40>)
 8008374:	4c0a      	ldr	r4, [pc, #40]	; (80083a0 <__libc_init_array+0x44>)
 8008376:	1b64      	subs	r4, r4, r5
 8008378:	10a4      	asrs	r4, r4, #2
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	0800d734 	.word	0x0800d734
 8008398:	0800d734 	.word	0x0800d734
 800839c:	0800d734 	.word	0x0800d734
 80083a0:	0800d73c 	.word	0x0800d73c

080083a4 <memset>:
 80083a4:	4603      	mov	r3, r0
 80083a6:	4402      	add	r2, r0
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d100      	bne.n	80083ae <memset+0xa>
 80083ac:	4770      	bx	lr
 80083ae:	f803 1b01 	strb.w	r1, [r3], #1
 80083b2:	e7f9      	b.n	80083a8 <memset+0x4>

080083b4 <printf>:
 80083b4:	b40f      	push	{r0, r1, r2, r3}
 80083b6:	b507      	push	{r0, r1, r2, lr}
 80083b8:	4906      	ldr	r1, [pc, #24]	; (80083d4 <printf+0x20>)
 80083ba:	ab04      	add	r3, sp, #16
 80083bc:	6808      	ldr	r0, [r1, #0]
 80083be:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c2:	6881      	ldr	r1, [r0, #8]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	f000 f92d 	bl	8008624 <_vfprintf_r>
 80083ca:	b003      	add	sp, #12
 80083cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d0:	b004      	add	sp, #16
 80083d2:	4770      	bx	lr
 80083d4:	200006ec 	.word	0x200006ec

080083d8 <putchar>:
 80083d8:	4b02      	ldr	r3, [pc, #8]	; (80083e4 <putchar+0xc>)
 80083da:	4601      	mov	r1, r0
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	6882      	ldr	r2, [r0, #8]
 80083e0:	f003 bc1c 	b.w	800bc1c <_putc_r>
 80083e4:	200006ec 	.word	0x200006ec

080083e8 <_puts_r>:
 80083e8:	b530      	push	{r4, r5, lr}
 80083ea:	4605      	mov	r5, r0
 80083ec:	b089      	sub	sp, #36	; 0x24
 80083ee:	4608      	mov	r0, r1
 80083f0:	460c      	mov	r4, r1
 80083f2:	f7f7 feb7 	bl	8000164 <strlen>
 80083f6:	4b1e      	ldr	r3, [pc, #120]	; (8008470 <_puts_r+0x88>)
 80083f8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80083fc:	9306      	str	r3, [sp, #24]
 80083fe:	2301      	movs	r3, #1
 8008400:	4418      	add	r0, r3
 8008402:	9307      	str	r3, [sp, #28]
 8008404:	ab04      	add	r3, sp, #16
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	2302      	movs	r3, #2
 800840a:	9302      	str	r3, [sp, #8]
 800840c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800840e:	68ac      	ldr	r4, [r5, #8]
 8008410:	9003      	str	r0, [sp, #12]
 8008412:	b913      	cbnz	r3, 800841a <_puts_r+0x32>
 8008414:	4628      	mov	r0, r5
 8008416:	f002 fb13 	bl	800aa40 <__sinit>
 800841a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800841c:	07db      	lsls	r3, r3, #31
 800841e:	d405      	bmi.n	800842c <_puts_r+0x44>
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	0598      	lsls	r0, r3, #22
 8008424:	d402      	bmi.n	800842c <_puts_r+0x44>
 8008426:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008428:	f002 fdca 	bl	800afc0 <__retarget_lock_acquire_recursive>
 800842c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008430:	0499      	lsls	r1, r3, #18
 8008432:	d406      	bmi.n	8008442 <_puts_r+0x5a>
 8008434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800843c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008440:	6663      	str	r3, [r4, #100]	; 0x64
 8008442:	4628      	mov	r0, r5
 8008444:	aa01      	add	r2, sp, #4
 8008446:	4621      	mov	r1, r4
 8008448:	f002 fc4a 	bl	800ace0 <__sfvwrite_r>
 800844c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800844e:	2800      	cmp	r0, #0
 8008450:	bf14      	ite	ne
 8008452:	f04f 35ff 	movne.w	r5, #4294967295
 8008456:	250a      	moveq	r5, #10
 8008458:	07da      	lsls	r2, r3, #31
 800845a:	d405      	bmi.n	8008468 <_puts_r+0x80>
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	059b      	lsls	r3, r3, #22
 8008460:	d402      	bmi.n	8008468 <_puts_r+0x80>
 8008462:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008464:	f002 fdad 	bl	800afc2 <__retarget_lock_release_recursive>
 8008468:	4628      	mov	r0, r5
 800846a:	b009      	add	sp, #36	; 0x24
 800846c:	bd30      	pop	{r4, r5, pc}
 800846e:	bf00      	nop
 8008470:	0800d71e 	.word	0x0800d71e

08008474 <puts>:
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <puts+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f7ff bfb5 	b.w	80083e8 <_puts_r>
 800847e:	bf00      	nop
 8008480:	200006ec 	.word	0x200006ec

08008484 <setvbuf>:
 8008484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008488:	461d      	mov	r5, r3
 800848a:	4b59      	ldr	r3, [pc, #356]	; (80085f0 <setvbuf+0x16c>)
 800848c:	4604      	mov	r4, r0
 800848e:	681f      	ldr	r7, [r3, #0]
 8008490:	460e      	mov	r6, r1
 8008492:	4690      	mov	r8, r2
 8008494:	b127      	cbz	r7, 80084a0 <setvbuf+0x1c>
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	b913      	cbnz	r3, 80084a0 <setvbuf+0x1c>
 800849a:	4638      	mov	r0, r7
 800849c:	f002 fad0 	bl	800aa40 <__sinit>
 80084a0:	f1b8 0f02 	cmp.w	r8, #2
 80084a4:	d006      	beq.n	80084b4 <setvbuf+0x30>
 80084a6:	f1b8 0f01 	cmp.w	r8, #1
 80084aa:	f200 809b 	bhi.w	80085e4 <setvbuf+0x160>
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	f2c0 8098 	blt.w	80085e4 <setvbuf+0x160>
 80084b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084b6:	07db      	lsls	r3, r3, #31
 80084b8:	d405      	bmi.n	80084c6 <setvbuf+0x42>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	0598      	lsls	r0, r3, #22
 80084be:	d402      	bmi.n	80084c6 <setvbuf+0x42>
 80084c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084c2:	f002 fd7d 	bl	800afc0 <__retarget_lock_acquire_recursive>
 80084c6:	4621      	mov	r1, r4
 80084c8:	4638      	mov	r0, r7
 80084ca:	f002 fa4d 	bl	800a968 <_fflush_r>
 80084ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80084d0:	b141      	cbz	r1, 80084e4 <setvbuf+0x60>
 80084d2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80084d6:	4299      	cmp	r1, r3
 80084d8:	d002      	beq.n	80084e0 <setvbuf+0x5c>
 80084da:	4638      	mov	r0, r7
 80084dc:	f002 fb40 	bl	800ab60 <_free_r>
 80084e0:	2300      	movs	r3, #0
 80084e2:	6323      	str	r3, [r4, #48]	; 0x30
 80084e4:	2300      	movs	r3, #0
 80084e6:	61a3      	str	r3, [r4, #24]
 80084e8:	6063      	str	r3, [r4, #4]
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	0619      	lsls	r1, r3, #24
 80084ee:	d503      	bpl.n	80084f8 <setvbuf+0x74>
 80084f0:	4638      	mov	r0, r7
 80084f2:	6921      	ldr	r1, [r4, #16]
 80084f4:	f002 fb34 	bl	800ab60 <_free_r>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f1b8 0f02 	cmp.w	r8, #2
 80084fe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008502:	f023 0303 	bic.w	r3, r3, #3
 8008506:	81a3      	strh	r3, [r4, #12]
 8008508:	d068      	beq.n	80085dc <setvbuf+0x158>
 800850a:	ab01      	add	r3, sp, #4
 800850c:	466a      	mov	r2, sp
 800850e:	4621      	mov	r1, r4
 8008510:	4638      	mov	r0, r7
 8008512:	f002 fd57 	bl	800afc4 <__swhatbuf_r>
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	4318      	orrs	r0, r3
 800851a:	81a0      	strh	r0, [r4, #12]
 800851c:	bb35      	cbnz	r5, 800856c <setvbuf+0xe8>
 800851e:	9d00      	ldr	r5, [sp, #0]
 8008520:	4628      	mov	r0, r5
 8008522:	f002 fdbb 	bl	800b09c <malloc>
 8008526:	4606      	mov	r6, r0
 8008528:	2800      	cmp	r0, #0
 800852a:	d152      	bne.n	80085d2 <setvbuf+0x14e>
 800852c:	f8dd 9000 	ldr.w	r9, [sp]
 8008530:	45a9      	cmp	r9, r5
 8008532:	d147      	bne.n	80085c4 <setvbuf+0x140>
 8008534:	f04f 35ff 	mov.w	r5, #4294967295
 8008538:	2200      	movs	r2, #0
 800853a:	60a2      	str	r2, [r4, #8]
 800853c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008540:	6022      	str	r2, [r4, #0]
 8008542:	6122      	str	r2, [r4, #16]
 8008544:	2201      	movs	r2, #1
 8008546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854a:	6162      	str	r2, [r4, #20]
 800854c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800854e:	f043 0302 	orr.w	r3, r3, #2
 8008552:	07d2      	lsls	r2, r2, #31
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	d405      	bmi.n	8008564 <setvbuf+0xe0>
 8008558:	f413 7f00 	tst.w	r3, #512	; 0x200
 800855c:	d102      	bne.n	8008564 <setvbuf+0xe0>
 800855e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008560:	f002 fd2f 	bl	800afc2 <__retarget_lock_release_recursive>
 8008564:	4628      	mov	r0, r5
 8008566:	b003      	add	sp, #12
 8008568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800856c:	2e00      	cmp	r6, #0
 800856e:	d0d7      	beq.n	8008520 <setvbuf+0x9c>
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	b913      	cbnz	r3, 800857a <setvbuf+0xf6>
 8008574:	4638      	mov	r0, r7
 8008576:	f002 fa63 	bl	800aa40 <__sinit>
 800857a:	9b00      	ldr	r3, [sp, #0]
 800857c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008580:	42ab      	cmp	r3, r5
 8008582:	bf18      	it	ne
 8008584:	89a3      	ldrhne	r3, [r4, #12]
 8008586:	6026      	str	r6, [r4, #0]
 8008588:	bf1c      	itt	ne
 800858a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800858e:	81a3      	strhne	r3, [r4, #12]
 8008590:	f1b8 0f01 	cmp.w	r8, #1
 8008594:	bf02      	ittt	eq
 8008596:	89a3      	ldrheq	r3, [r4, #12]
 8008598:	f043 0301 	orreq.w	r3, r3, #1
 800859c:	81a3      	strheq	r3, [r4, #12]
 800859e:	89a2      	ldrh	r2, [r4, #12]
 80085a0:	f012 0308 	ands.w	r3, r2, #8
 80085a4:	d01c      	beq.n	80085e0 <setvbuf+0x15c>
 80085a6:	07d3      	lsls	r3, r2, #31
 80085a8:	bf41      	itttt	mi
 80085aa:	2300      	movmi	r3, #0
 80085ac:	426d      	negmi	r5, r5
 80085ae:	60a3      	strmi	r3, [r4, #8]
 80085b0:	61a5      	strmi	r5, [r4, #24]
 80085b2:	bf58      	it	pl
 80085b4:	60a5      	strpl	r5, [r4, #8]
 80085b6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80085b8:	f015 0501 	ands.w	r5, r5, #1
 80085bc:	d115      	bne.n	80085ea <setvbuf+0x166>
 80085be:	f412 7f00 	tst.w	r2, #512	; 0x200
 80085c2:	e7cb      	b.n	800855c <setvbuf+0xd8>
 80085c4:	4648      	mov	r0, r9
 80085c6:	f002 fd69 	bl	800b09c <malloc>
 80085ca:	4606      	mov	r6, r0
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d0b1      	beq.n	8008534 <setvbuf+0xb0>
 80085d0:	464d      	mov	r5, r9
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	e7c9      	b.n	8008570 <setvbuf+0xec>
 80085dc:	2500      	movs	r5, #0
 80085de:	e7ab      	b.n	8008538 <setvbuf+0xb4>
 80085e0:	60a3      	str	r3, [r4, #8]
 80085e2:	e7e8      	b.n	80085b6 <setvbuf+0x132>
 80085e4:	f04f 35ff 	mov.w	r5, #4294967295
 80085e8:	e7bc      	b.n	8008564 <setvbuf+0xe0>
 80085ea:	2500      	movs	r5, #0
 80085ec:	e7ba      	b.n	8008564 <setvbuf+0xe0>
 80085ee:	bf00      	nop
 80085f0:	200006ec 	.word	0x200006ec

080085f4 <strstr>:
 80085f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f6:	780c      	ldrb	r4, [r1, #0]
 80085f8:	b164      	cbz	r4, 8008614 <strstr+0x20>
 80085fa:	4603      	mov	r3, r0
 80085fc:	781a      	ldrb	r2, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	1c5e      	adds	r6, r3, #1
 8008602:	b90a      	cbnz	r2, 8008608 <strstr+0x14>
 8008604:	4610      	mov	r0, r2
 8008606:	e005      	b.n	8008614 <strstr+0x20>
 8008608:	4294      	cmp	r4, r2
 800860a:	d108      	bne.n	800861e <strstr+0x2a>
 800860c:	460d      	mov	r5, r1
 800860e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008612:	b902      	cbnz	r2, 8008616 <strstr+0x22>
 8008614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008616:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800861a:	4297      	cmp	r7, r2
 800861c:	d0f7      	beq.n	800860e <strstr+0x1a>
 800861e:	4633      	mov	r3, r6
 8008620:	e7ec      	b.n	80085fc <strstr+0x8>
	...

08008624 <_vfprintf_r>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	b0d3      	sub	sp, #332	; 0x14c
 800862a:	468a      	mov	sl, r1
 800862c:	4691      	mov	r9, r2
 800862e:	461c      	mov	r4, r3
 8008630:	461e      	mov	r6, r3
 8008632:	4683      	mov	fp, r0
 8008634:	f002 fcbe 	bl	800afb4 <_localeconv_r>
 8008638:	6803      	ldr	r3, [r0, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	9318      	str	r3, [sp, #96]	; 0x60
 800863e:	f7f7 fd91 	bl	8000164 <strlen>
 8008642:	9012      	str	r0, [sp, #72]	; 0x48
 8008644:	f1bb 0f00 	cmp.w	fp, #0
 8008648:	d005      	beq.n	8008656 <_vfprintf_r+0x32>
 800864a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800864e:	b913      	cbnz	r3, 8008656 <_vfprintf_r+0x32>
 8008650:	4658      	mov	r0, fp
 8008652:	f002 f9f5 	bl	800aa40 <__sinit>
 8008656:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 800865a:	07da      	lsls	r2, r3, #31
 800865c:	d407      	bmi.n	800866e <_vfprintf_r+0x4a>
 800865e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008662:	059b      	lsls	r3, r3, #22
 8008664:	d403      	bmi.n	800866e <_vfprintf_r+0x4a>
 8008666:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 800866a:	f002 fca9 	bl	800afc0 <__retarget_lock_acquire_recursive>
 800866e:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8008672:	049f      	lsls	r7, r3, #18
 8008674:	d409      	bmi.n	800868a <_vfprintf_r+0x66>
 8008676:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800867a:	f8aa 300c 	strh.w	r3, [sl, #12]
 800867e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8008682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008686:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 800868a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800868e:	071d      	lsls	r5, r3, #28
 8008690:	d502      	bpl.n	8008698 <_vfprintf_r+0x74>
 8008692:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008696:	b9c3      	cbnz	r3, 80086ca <_vfprintf_r+0xa6>
 8008698:	4651      	mov	r1, sl
 800869a:	4658      	mov	r0, fp
 800869c:	f001 fa22 	bl	8009ae4 <__swsetup_r>
 80086a0:	b198      	cbz	r0, 80086ca <_vfprintf_r+0xa6>
 80086a2:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 80086a6:	07dc      	lsls	r4, r3, #31
 80086a8:	d506      	bpl.n	80086b8 <_vfprintf_r+0x94>
 80086aa:	f04f 33ff 	mov.w	r3, #4294967295
 80086ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80086b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80086b2:	b053      	add	sp, #332	; 0x14c
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80086bc:	0598      	lsls	r0, r3, #22
 80086be:	d4f4      	bmi.n	80086aa <_vfprintf_r+0x86>
 80086c0:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80086c4:	f002 fc7d 	bl	800afc2 <__retarget_lock_release_recursive>
 80086c8:	e7ef      	b.n	80086aa <_vfprintf_r+0x86>
 80086ca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80086ce:	f003 021a 	and.w	r2, r3, #26
 80086d2:	2a0a      	cmp	r2, #10
 80086d4:	d115      	bne.n	8008702 <_vfprintf_r+0xde>
 80086d6:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 80086da:	2a00      	cmp	r2, #0
 80086dc:	db11      	blt.n	8008702 <_vfprintf_r+0xde>
 80086de:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 80086e2:	07d1      	lsls	r1, r2, #31
 80086e4:	d405      	bmi.n	80086f2 <_vfprintf_r+0xce>
 80086e6:	059a      	lsls	r2, r3, #22
 80086e8:	d403      	bmi.n	80086f2 <_vfprintf_r+0xce>
 80086ea:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80086ee:	f002 fc68 	bl	800afc2 <__retarget_lock_release_recursive>
 80086f2:	4623      	mov	r3, r4
 80086f4:	464a      	mov	r2, r9
 80086f6:	4651      	mov	r1, sl
 80086f8:	4658      	mov	r0, fp
 80086fa:	f001 f9b3 	bl	8009a64 <__sbprintf>
 80086fe:	9013      	str	r0, [sp, #76]	; 0x4c
 8008700:	e7d6      	b.n	80086b0 <_vfprintf_r+0x8c>
 8008702:	2500      	movs	r5, #0
 8008704:	2200      	movs	r2, #0
 8008706:	2300      	movs	r3, #0
 8008708:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 800870c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008710:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
 8008714:	ac29      	add	r4, sp, #164	; 0xa4
 8008716:	9426      	str	r4, [sp, #152]	; 0x98
 8008718:	9508      	str	r5, [sp, #32]
 800871a:	950e      	str	r5, [sp, #56]	; 0x38
 800871c:	9516      	str	r5, [sp, #88]	; 0x58
 800871e:	9519      	str	r5, [sp, #100]	; 0x64
 8008720:	9513      	str	r5, [sp, #76]	; 0x4c
 8008722:	464b      	mov	r3, r9
 8008724:	461d      	mov	r5, r3
 8008726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800872a:	b10a      	cbz	r2, 8008730 <_vfprintf_r+0x10c>
 800872c:	2a25      	cmp	r2, #37	; 0x25
 800872e:	d1f9      	bne.n	8008724 <_vfprintf_r+0x100>
 8008730:	ebb5 0709 	subs.w	r7, r5, r9
 8008734:	d00d      	beq.n	8008752 <_vfprintf_r+0x12e>
 8008736:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008738:	e9c4 9700 	strd	r9, r7, [r4]
 800873c:	443b      	add	r3, r7
 800873e:	9328      	str	r3, [sp, #160]	; 0xa0
 8008740:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008742:	3301      	adds	r3, #1
 8008744:	2b07      	cmp	r3, #7
 8008746:	9327      	str	r3, [sp, #156]	; 0x9c
 8008748:	dc7a      	bgt.n	8008840 <_vfprintf_r+0x21c>
 800874a:	3408      	adds	r4, #8
 800874c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800874e:	443b      	add	r3, r7
 8008750:	9313      	str	r3, [sp, #76]	; 0x4c
 8008752:	782b      	ldrb	r3, [r5, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f001 813d 	beq.w	80099d4 <_vfprintf_r+0x13b0>
 800875a:	2300      	movs	r3, #0
 800875c:	f04f 32ff 	mov.w	r2, #4294967295
 8008760:	4698      	mov	r8, r3
 8008762:	270a      	movs	r7, #10
 8008764:	212b      	movs	r1, #43	; 0x2b
 8008766:	3501      	adds	r5, #1
 8008768:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800876c:	9207      	str	r2, [sp, #28]
 800876e:	9314      	str	r3, [sp, #80]	; 0x50
 8008770:	462a      	mov	r2, r5
 8008772:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008776:	930b      	str	r3, [sp, #44]	; 0x2c
 8008778:	4613      	mov	r3, r2
 800877a:	930f      	str	r3, [sp, #60]	; 0x3c
 800877c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877e:	3b20      	subs	r3, #32
 8008780:	2b5a      	cmp	r3, #90	; 0x5a
 8008782:	f200 85a6 	bhi.w	80092d2 <_vfprintf_r+0xcae>
 8008786:	e8df f013 	tbh	[pc, r3, lsl #1]
 800878a:	007e      	.short	0x007e
 800878c:	05a405a4 	.word	0x05a405a4
 8008790:	05a40086 	.word	0x05a40086
 8008794:	05a405a4 	.word	0x05a405a4
 8008798:	05a40065 	.word	0x05a40065
 800879c:	008905a4 	.word	0x008905a4
 80087a0:	05a40093 	.word	0x05a40093
 80087a4:	00960090 	.word	0x00960090
 80087a8:	00b205a4 	.word	0x00b205a4
 80087ac:	00b500b5 	.word	0x00b500b5
 80087b0:	00b500b5 	.word	0x00b500b5
 80087b4:	00b500b5 	.word	0x00b500b5
 80087b8:	00b500b5 	.word	0x00b500b5
 80087bc:	05a400b5 	.word	0x05a400b5
 80087c0:	05a405a4 	.word	0x05a405a4
 80087c4:	05a405a4 	.word	0x05a405a4
 80087c8:	05a405a4 	.word	0x05a405a4
 80087cc:	05a4011f 	.word	0x05a4011f
 80087d0:	00f500e2 	.word	0x00f500e2
 80087d4:	011f011f 	.word	0x011f011f
 80087d8:	05a4011f 	.word	0x05a4011f
 80087dc:	05a405a4 	.word	0x05a405a4
 80087e0:	00c505a4 	.word	0x00c505a4
 80087e4:	05a405a4 	.word	0x05a405a4
 80087e8:	05a40484 	.word	0x05a40484
 80087ec:	05a405a4 	.word	0x05a405a4
 80087f0:	05a404cb 	.word	0x05a404cb
 80087f4:	05a404ec 	.word	0x05a404ec
 80087f8:	050b05a4 	.word	0x050b05a4
 80087fc:	05a405a4 	.word	0x05a405a4
 8008800:	05a405a4 	.word	0x05a405a4
 8008804:	05a405a4 	.word	0x05a405a4
 8008808:	05a405a4 	.word	0x05a405a4
 800880c:	05a4011f 	.word	0x05a4011f
 8008810:	00f700e2 	.word	0x00f700e2
 8008814:	011f011f 	.word	0x011f011f
 8008818:	00c8011f 	.word	0x00c8011f
 800881c:	00dc00f7 	.word	0x00dc00f7
 8008820:	00d505a4 	.word	0x00d505a4
 8008824:	046105a4 	.word	0x046105a4
 8008828:	04ba0486 	.word	0x04ba0486
 800882c:	05a400dc 	.word	0x05a400dc
 8008830:	007c04cb 	.word	0x007c04cb
 8008834:	05a404ee 	.word	0x05a404ee
 8008838:	052805a4 	.word	0x052805a4
 800883c:	007c05a4 	.word	0x007c05a4
 8008840:	4651      	mov	r1, sl
 8008842:	4658      	mov	r0, fp
 8008844:	aa26      	add	r2, sp, #152	; 0x98
 8008846:	f003 fc6e 	bl	800c126 <__sprint_r>
 800884a:	2800      	cmp	r0, #0
 800884c:	f040 8127 	bne.w	8008a9e <_vfprintf_r+0x47a>
 8008850:	ac29      	add	r4, sp, #164	; 0xa4
 8008852:	e77b      	b.n	800874c <_vfprintf_r+0x128>
 8008854:	4658      	mov	r0, fp
 8008856:	f002 fbad 	bl	800afb4 <_localeconv_r>
 800885a:	6843      	ldr	r3, [r0, #4]
 800885c:	4618      	mov	r0, r3
 800885e:	9319      	str	r3, [sp, #100]	; 0x64
 8008860:	f7f7 fc80 	bl	8000164 <strlen>
 8008864:	9016      	str	r0, [sp, #88]	; 0x58
 8008866:	4658      	mov	r0, fp
 8008868:	f002 fba4 	bl	800afb4 <_localeconv_r>
 800886c:	6883      	ldr	r3, [r0, #8]
 800886e:	212b      	movs	r1, #43	; 0x2b
 8008870:	930e      	str	r3, [sp, #56]	; 0x38
 8008872:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008874:	b12b      	cbz	r3, 8008882 <_vfprintf_r+0x25e>
 8008876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008878:	b11b      	cbz	r3, 8008882 <_vfprintf_r+0x25e>
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	b10b      	cbz	r3, 8008882 <_vfprintf_r+0x25e>
 800887e:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8008882:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008884:	e774      	b.n	8008770 <_vfprintf_r+0x14c>
 8008886:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1f9      	bne.n	8008882 <_vfprintf_r+0x25e>
 800888e:	2320      	movs	r3, #32
 8008890:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8008894:	e7f5      	b.n	8008882 <_vfprintf_r+0x25e>
 8008896:	f048 0801 	orr.w	r8, r8, #1
 800889a:	e7f2      	b.n	8008882 <_vfprintf_r+0x25e>
 800889c:	f856 3b04 	ldr.w	r3, [r6], #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	9314      	str	r3, [sp, #80]	; 0x50
 80088a4:	daed      	bge.n	8008882 <_vfprintf_r+0x25e>
 80088a6:	425b      	negs	r3, r3
 80088a8:	9314      	str	r3, [sp, #80]	; 0x50
 80088aa:	f048 0804 	orr.w	r8, r8, #4
 80088ae:	e7e8      	b.n	8008882 <_vfprintf_r+0x25e>
 80088b0:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 80088b4:	e7e5      	b.n	8008882 <_vfprintf_r+0x25e>
 80088b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088bc:	2a2a      	cmp	r2, #42	; 0x2a
 80088be:	920b      	str	r2, [sp, #44]	; 0x2c
 80088c0:	d112      	bne.n	80088e8 <_vfprintf_r+0x2c4>
 80088c2:	f856 0b04 	ldr.w	r0, [r6], #4
 80088c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c8:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 80088cc:	9207      	str	r2, [sp, #28]
 80088ce:	e7d8      	b.n	8008882 <_vfprintf_r+0x25e>
 80088d0:	9807      	ldr	r0, [sp, #28]
 80088d2:	fb07 2200 	mla	r2, r7, r0, r2
 80088d6:	9207      	str	r2, [sp, #28]
 80088d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80088de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088e0:	3a30      	subs	r2, #48	; 0x30
 80088e2:	2a09      	cmp	r2, #9
 80088e4:	d9f4      	bls.n	80088d0 <_vfprintf_r+0x2ac>
 80088e6:	e748      	b.n	800877a <_vfprintf_r+0x156>
 80088e8:	2200      	movs	r2, #0
 80088ea:	9207      	str	r2, [sp, #28]
 80088ec:	e7f7      	b.n	80088de <_vfprintf_r+0x2ba>
 80088ee:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80088f2:	e7c6      	b.n	8008882 <_vfprintf_r+0x25e>
 80088f4:	2200      	movs	r2, #0
 80088f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f8:	9214      	str	r2, [sp, #80]	; 0x50
 80088fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80088fe:	3a30      	subs	r2, #48	; 0x30
 8008900:	fb07 2200 	mla	r2, r7, r0, r2
 8008904:	9214      	str	r2, [sp, #80]	; 0x50
 8008906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800890a:	920b      	str	r2, [sp, #44]	; 0x2c
 800890c:	3a30      	subs	r2, #48	; 0x30
 800890e:	2a09      	cmp	r2, #9
 8008910:	d9f3      	bls.n	80088fa <_vfprintf_r+0x2d6>
 8008912:	e732      	b.n	800877a <_vfprintf_r+0x156>
 8008914:	f048 0808 	orr.w	r8, r8, #8
 8008918:	e7b3      	b.n	8008882 <_vfprintf_r+0x25e>
 800891a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b68      	cmp	r3, #104	; 0x68
 8008920:	bf01      	itttt	eq
 8008922:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 8008924:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8008928:	3301      	addeq	r3, #1
 800892a:	930f      	streq	r3, [sp, #60]	; 0x3c
 800892c:	bf18      	it	ne
 800892e:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8008932:	e7a6      	b.n	8008882 <_vfprintf_r+0x25e>
 8008934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b6c      	cmp	r3, #108	; 0x6c
 800893a:	d105      	bne.n	8008948 <_vfprintf_r+0x324>
 800893c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800893e:	3301      	adds	r3, #1
 8008940:	930f      	str	r3, [sp, #60]	; 0x3c
 8008942:	f048 0820 	orr.w	r8, r8, #32
 8008946:	e79c      	b.n	8008882 <_vfprintf_r+0x25e>
 8008948:	f048 0810 	orr.w	r8, r8, #16
 800894c:	e799      	b.n	8008882 <_vfprintf_r+0x25e>
 800894e:	4632      	mov	r2, r6
 8008950:	2000      	movs	r0, #0
 8008952:	f852 3b04 	ldr.w	r3, [r2], #4
 8008956:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800895a:	920a      	str	r2, [sp, #40]	; 0x28
 800895c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8008960:	2301      	movs	r3, #1
 8008962:	4607      	mov	r7, r0
 8008964:	4606      	mov	r6, r0
 8008966:	4605      	mov	r5, r0
 8008968:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 800896c:	9307      	str	r3, [sp, #28]
 800896e:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8008972:	e1b4      	b.n	8008cde <_vfprintf_r+0x6ba>
 8008974:	f048 0810 	orr.w	r8, r8, #16
 8008978:	f018 0f20 	tst.w	r8, #32
 800897c:	d011      	beq.n	80089a2 <_vfprintf_r+0x37e>
 800897e:	3607      	adds	r6, #7
 8008980:	f026 0307 	bic.w	r3, r6, #7
 8008984:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8008988:	930a      	str	r3, [sp, #40]	; 0x28
 800898a:	2e00      	cmp	r6, #0
 800898c:	f177 0300 	sbcs.w	r3, r7, #0
 8008990:	da05      	bge.n	800899e <_vfprintf_r+0x37a>
 8008992:	232d      	movs	r3, #45	; 0x2d
 8008994:	4276      	negs	r6, r6
 8008996:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800899a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800899e:	2301      	movs	r3, #1
 80089a0:	e388      	b.n	80090b4 <_vfprintf_r+0xa90>
 80089a2:	1d33      	adds	r3, r6, #4
 80089a4:	f018 0f10 	tst.w	r8, #16
 80089a8:	930a      	str	r3, [sp, #40]	; 0x28
 80089aa:	d002      	beq.n	80089b2 <_vfprintf_r+0x38e>
 80089ac:	6836      	ldr	r6, [r6, #0]
 80089ae:	17f7      	asrs	r7, r6, #31
 80089b0:	e7eb      	b.n	800898a <_vfprintf_r+0x366>
 80089b2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80089b6:	6836      	ldr	r6, [r6, #0]
 80089b8:	d001      	beq.n	80089be <_vfprintf_r+0x39a>
 80089ba:	b236      	sxth	r6, r6
 80089bc:	e7f7      	b.n	80089ae <_vfprintf_r+0x38a>
 80089be:	f418 7f00 	tst.w	r8, #512	; 0x200
 80089c2:	bf18      	it	ne
 80089c4:	b276      	sxtbne	r6, r6
 80089c6:	e7f2      	b.n	80089ae <_vfprintf_r+0x38a>
 80089c8:	3607      	adds	r6, #7
 80089ca:	f026 0307 	bic.w	r3, r6, #7
 80089ce:	4619      	mov	r1, r3
 80089d0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80089d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80089d8:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 80089dc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80089e0:	910a      	str	r1, [sp, #40]	; 0x28
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295
 80089e6:	4630      	mov	r0, r6
 80089e8:	4629      	mov	r1, r5
 80089ea:	4b3c      	ldr	r3, [pc, #240]	; (8008adc <_vfprintf_r+0x4b8>)
 80089ec:	f7f8 f818 	bl	8000a20 <__aeabi_dcmpun>
 80089f0:	bb00      	cbnz	r0, 8008a34 <_vfprintf_r+0x410>
 80089f2:	f04f 32ff 	mov.w	r2, #4294967295
 80089f6:	4630      	mov	r0, r6
 80089f8:	4629      	mov	r1, r5
 80089fa:	4b38      	ldr	r3, [pc, #224]	; (8008adc <_vfprintf_r+0x4b8>)
 80089fc:	f7f7 fff2 	bl	80009e4 <__aeabi_dcmple>
 8008a00:	b9c0      	cbnz	r0, 8008a34 <_vfprintf_r+0x410>
 8008a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a06:	2200      	movs	r2, #0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f7f7 ffe1 	bl	80009d0 <__aeabi_dcmplt>
 8008a0e:	b110      	cbz	r0, 8008a16 <_vfprintf_r+0x3f2>
 8008a10:	232d      	movs	r3, #45	; 0x2d
 8008a12:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8008a16:	4a32      	ldr	r2, [pc, #200]	; (8008ae0 <_vfprintf_r+0x4bc>)
 8008a18:	4832      	ldr	r0, [pc, #200]	; (8008ae4 <_vfprintf_r+0x4c0>)
 8008a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a1c:	2700      	movs	r7, #0
 8008a1e:	2b47      	cmp	r3, #71	; 0x47
 8008a20:	bfd4      	ite	le
 8008a22:	4691      	movle	r9, r2
 8008a24:	4681      	movgt	r9, r0
 8008a26:	2303      	movs	r3, #3
 8008a28:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8008a2c:	9307      	str	r3, [sp, #28]
 8008a2e:	463e      	mov	r6, r7
 8008a30:	f001 b80e 	b.w	8009a50 <_vfprintf_r+0x142c>
 8008a34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f7f7 fff0 	bl	8000a20 <__aeabi_dcmpun>
 8008a40:	4607      	mov	r7, r0
 8008a42:	b148      	cbz	r0, 8008a58 <_vfprintf_r+0x434>
 8008a44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a46:	4a28      	ldr	r2, [pc, #160]	; (8008ae8 <_vfprintf_r+0x4c4>)
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bfb8      	it	lt
 8008a4c:	232d      	movlt	r3, #45	; 0x2d
 8008a4e:	4827      	ldr	r0, [pc, #156]	; (8008aec <_vfprintf_r+0x4c8>)
 8008a50:	bfb8      	it	lt
 8008a52:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8008a56:	e7e0      	b.n	8008a1a <_vfprintf_r+0x3f6>
 8008a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a5a:	f023 0320 	bic.w	r3, r3, #32
 8008a5e:	2b41      	cmp	r3, #65	; 0x41
 8008a60:	930c      	str	r3, [sp, #48]	; 0x30
 8008a62:	d12e      	bne.n	8008ac2 <_vfprintf_r+0x49e>
 8008a64:	2330      	movs	r3, #48	; 0x30
 8008a66:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8008a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6c:	f048 0802 	orr.w	r8, r8, #2
 8008a70:	2b61      	cmp	r3, #97	; 0x61
 8008a72:	bf0c      	ite	eq
 8008a74:	2378      	moveq	r3, #120	; 0x78
 8008a76:	2358      	movne	r3, #88	; 0x58
 8008a78:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	2b63      	cmp	r3, #99	; 0x63
 8008a80:	dd36      	ble.n	8008af0 <_vfprintf_r+0x4cc>
 8008a82:	4658      	mov	r0, fp
 8008a84:	1c59      	adds	r1, r3, #1
 8008a86:	f002 fb11 	bl	800b0ac <_malloc_r>
 8008a8a:	4681      	mov	r9, r0
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f040 8201 	bne.w	8008e94 <_vfprintf_r+0x870>
 8008a92:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9a:	f8aa 300c 	strh.w	r3, [sl, #12]
 8008a9e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8008aa2:	07d9      	lsls	r1, r3, #31
 8008aa4:	d407      	bmi.n	8008ab6 <_vfprintf_r+0x492>
 8008aa6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008aaa:	059a      	lsls	r2, r3, #22
 8008aac:	d403      	bmi.n	8008ab6 <_vfprintf_r+0x492>
 8008aae:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8008ab2:	f002 fa86 	bl	800afc2 <__retarget_lock_release_recursive>
 8008ab6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008aba:	065b      	lsls	r3, r3, #25
 8008abc:	f57f adf8 	bpl.w	80086b0 <_vfprintf_r+0x8c>
 8008ac0:	e5f3      	b.n	80086aa <_vfprintf_r+0x86>
 8008ac2:	9b07      	ldr	r3, [sp, #28]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	f000 81e7 	beq.w	8008e98 <_vfprintf_r+0x874>
 8008aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008acc:	2b47      	cmp	r3, #71	; 0x47
 8008ace:	d111      	bne.n	8008af4 <_vfprintf_r+0x4d0>
 8008ad0:	9b07      	ldr	r3, [sp, #28]
 8008ad2:	b97b      	cbnz	r3, 8008af4 <_vfprintf_r+0x4d0>
 8008ad4:	461f      	mov	r7, r3
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	9307      	str	r3, [sp, #28]
 8008ada:	e00b      	b.n	8008af4 <_vfprintf_r+0x4d0>
 8008adc:	7fefffff 	.word	0x7fefffff
 8008ae0:	0800d490 	.word	0x0800d490
 8008ae4:	0800d494 	.word	0x0800d494
 8008ae8:	0800d498 	.word	0x0800d498
 8008aec:	0800d49c 	.word	0x0800d49c
 8008af0:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8008af4:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8008af8:	9315      	str	r3, [sp, #84]	; 0x54
 8008afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008afc:	1e1d      	subs	r5, r3, #0
 8008afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b00:	9308      	str	r3, [sp, #32]
 8008b02:	bfb7      	itett	lt
 8008b04:	462b      	movlt	r3, r5
 8008b06:	2300      	movge	r3, #0
 8008b08:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8008b0c:	232d      	movlt	r3, #45	; 0x2d
 8008b0e:	931c      	str	r3, [sp, #112]	; 0x70
 8008b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b12:	2b41      	cmp	r3, #65	; 0x41
 8008b14:	f040 81d8 	bne.w	8008ec8 <_vfprintf_r+0x8a4>
 8008b18:	aa20      	add	r2, sp, #128	; 0x80
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	9808      	ldr	r0, [sp, #32]
 8008b1e:	f003 fa5b 	bl	800bfd8 <frexp>
 8008b22:	2200      	movs	r2, #0
 8008b24:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b28:	f7f7 fce0 	bl	80004ec <__aeabi_dmul>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b34:	2200      	movs	r2, #0
 8008b36:	2300      	movs	r3, #0
 8008b38:	f7f7 ff40 	bl	80009bc <__aeabi_dcmpeq>
 8008b3c:	b108      	cbz	r0, 8008b42 <_vfprintf_r+0x51e>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	9320      	str	r3, [sp, #128]	; 0x80
 8008b42:	4bb2      	ldr	r3, [pc, #712]	; (8008e0c <_vfprintf_r+0x7e8>)
 8008b44:	4eb2      	ldr	r6, [pc, #712]	; (8008e10 <_vfprintf_r+0x7ec>)
 8008b46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b48:	464d      	mov	r5, r9
 8008b4a:	2a61      	cmp	r2, #97	; 0x61
 8008b4c:	bf18      	it	ne
 8008b4e:	461e      	movne	r6, r3
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b54:	1e5e      	subs	r6, r3, #1
 8008b56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4bad      	ldr	r3, [pc, #692]	; (8008e14 <_vfprintf_r+0x7f0>)
 8008b5e:	f7f7 fcc5 	bl	80004ec <__aeabi_dmul>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b6a:	f7f7 ff6f 	bl	8000a4c <__aeabi_d2iz>
 8008b6e:	901d      	str	r0, [sp, #116]	; 0x74
 8008b70:	f7f7 fc52 	bl	8000418 <__aeabi_i2d>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b7c:	f7f7 fafe 	bl	800017c <__aeabi_dsub>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b8c:	960d      	str	r6, [sp, #52]	; 0x34
 8008b8e:	5c9b      	ldrb	r3, [r3, r2]
 8008b90:	f805 3b01 	strb.w	r3, [r5], #1
 8008b94:	1c73      	adds	r3, r6, #1
 8008b96:	d006      	beq.n	8008ba6 <_vfprintf_r+0x582>
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	3e01      	subs	r6, #1
 8008b9e:	f7f7 ff0d 	bl	80009bc <__aeabi_dcmpeq>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d0d7      	beq.n	8008b56 <_vfprintf_r+0x532>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bac:	4b9a      	ldr	r3, [pc, #616]	; (8008e18 <_vfprintf_r+0x7f4>)
 8008bae:	f7f7 ff2d 	bl	8000a0c <__aeabi_dcmpgt>
 8008bb2:	b960      	cbnz	r0, 8008bce <_vfprintf_r+0x5aa>
 8008bb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4b97      	ldr	r3, [pc, #604]	; (8008e18 <_vfprintf_r+0x7f4>)
 8008bbc:	f7f7 fefe 	bl	80009bc <__aeabi_dcmpeq>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	f000 817c 	beq.w	8008ebe <_vfprintf_r+0x89a>
 8008bc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bc8:	07da      	lsls	r2, r3, #31
 8008bca:	f140 8178 	bpl.w	8008ebe <_vfprintf_r+0x89a>
 8008bce:	2030      	movs	r0, #48	; 0x30
 8008bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bd2:	9524      	str	r5, [sp, #144]	; 0x90
 8008bd4:	7bd9      	ldrb	r1, [r3, #15]
 8008bd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008bd8:	1e53      	subs	r3, r2, #1
 8008bda:	9324      	str	r3, [sp, #144]	; 0x90
 8008bdc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008be0:	428b      	cmp	r3, r1
 8008be2:	f000 815b 	beq.w	8008e9c <_vfprintf_r+0x878>
 8008be6:	2b39      	cmp	r3, #57	; 0x39
 8008be8:	bf0b      	itete	eq
 8008bea:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008bec:	3301      	addne	r3, #1
 8008bee:	7a9b      	ldrbeq	r3, [r3, #10]
 8008bf0:	b2db      	uxtbne	r3, r3
 8008bf2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008bf6:	eba5 0309 	sub.w	r3, r5, r9
 8008bfa:	9308      	str	r3, [sp, #32]
 8008bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bfe:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008c00:	2b47      	cmp	r3, #71	; 0x47
 8008c02:	f040 81ae 	bne.w	8008f62 <_vfprintf_r+0x93e>
 8008c06:	1ceb      	adds	r3, r5, #3
 8008c08:	db03      	blt.n	8008c12 <_vfprintf_r+0x5ee>
 8008c0a:	9b07      	ldr	r3, [sp, #28]
 8008c0c:	429d      	cmp	r5, r3
 8008c0e:	f340 81d3 	ble.w	8008fb8 <_vfprintf_r+0x994>
 8008c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c14:	3b02      	subs	r3, #2
 8008c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c1a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8008c1e:	f021 0120 	bic.w	r1, r1, #32
 8008c22:	2941      	cmp	r1, #65	; 0x41
 8008c24:	bf08      	it	eq
 8008c26:	320f      	addeq	r2, #15
 8008c28:	f105 33ff 	add.w	r3, r5, #4294967295
 8008c2c:	bf06      	itte	eq
 8008c2e:	b2d2      	uxtbeq	r2, r2
 8008c30:	2101      	moveq	r1, #1
 8008c32:	2100      	movne	r1, #0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8008c3a:	bfb4      	ite	lt
 8008c3c:	222d      	movlt	r2, #45	; 0x2d
 8008c3e:	222b      	movge	r2, #43	; 0x2b
 8008c40:	9320      	str	r3, [sp, #128]	; 0x80
 8008c42:	bfb8      	it	lt
 8008c44:	f1c5 0301 	rsblt	r3, r5, #1
 8008c48:	2b09      	cmp	r3, #9
 8008c4a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8008c4e:	f340 81a1 	ble.w	8008f94 <_vfprintf_r+0x970>
 8008c52:	260a      	movs	r6, #10
 8008c54:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8008c58:	fb93 f5f6 	sdiv	r5, r3, r6
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	fb06 3015 	mls	r0, r6, r5, r3
 8008c62:	3030      	adds	r0, #48	; 0x30
 8008c64:	f801 0c01 	strb.w	r0, [r1, #-1]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	2863      	cmp	r0, #99	; 0x63
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008c72:	dcf1      	bgt.n	8008c58 <_vfprintf_r+0x634>
 8008c74:	3330      	adds	r3, #48	; 0x30
 8008c76:	1e88      	subs	r0, r1, #2
 8008c78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8008c82:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 8008c86:	42ab      	cmp	r3, r5
 8008c88:	f0c0 817f 	bcc.w	8008f8a <_vfprintf_r+0x966>
 8008c8c:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 8008c90:	1a52      	subs	r2, r2, r1
 8008c92:	42a8      	cmp	r0, r5
 8008c94:	bf88      	it	hi
 8008c96:	2200      	movhi	r2, #0
 8008c98:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8008c9c:	441a      	add	r2, r3
 8008c9e:	ab22      	add	r3, sp, #136	; 0x88
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	9a08      	ldr	r2, [sp, #32]
 8008ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ca6:	2a01      	cmp	r2, #1
 8008ca8:	4413      	add	r3, r2
 8008caa:	9307      	str	r3, [sp, #28]
 8008cac:	dc02      	bgt.n	8008cb4 <_vfprintf_r+0x690>
 8008cae:	f018 0f01 	tst.w	r8, #1
 8008cb2:	d003      	beq.n	8008cbc <_vfprintf_r+0x698>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cb8:	4413      	add	r3, r2
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8008cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cc4:	9315      	str	r3, [sp, #84]	; 0x54
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	461d      	mov	r5, r3
 8008cca:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8008cce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008cd0:	b113      	cbz	r3, 8008cd8 <_vfprintf_r+0x6b4>
 8008cd2:	232d      	movs	r3, #45	; 0x2d
 8008cd4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8008cd8:	2600      	movs	r6, #0
 8008cda:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8008cde:	9b07      	ldr	r3, [sp, #28]
 8008ce0:	42b3      	cmp	r3, r6
 8008ce2:	bfb8      	it	lt
 8008ce4:	4633      	movlt	r3, r6
 8008ce6:	9315      	str	r3, [sp, #84]	; 0x54
 8008ce8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8008cec:	b113      	cbz	r3, 8008cf4 <_vfprintf_r+0x6d0>
 8008cee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	9315      	str	r3, [sp, #84]	; 0x54
 8008cf4:	f018 0302 	ands.w	r3, r8, #2
 8008cf8:	931c      	str	r3, [sp, #112]	; 0x70
 8008cfa:	bf1e      	ittt	ne
 8008cfc:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8008cfe:	3302      	addne	r3, #2
 8008d00:	9315      	strne	r3, [sp, #84]	; 0x54
 8008d02:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8008d06:	931d      	str	r3, [sp, #116]	; 0x74
 8008d08:	d121      	bne.n	8008d4e <_vfprintf_r+0x72a>
 8008d0a:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d14:	dd1b      	ble.n	8008d4e <_vfprintf_r+0x72a>
 8008d16:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008d1a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	2810      	cmp	r0, #16
 8008d20:	483e      	ldr	r0, [pc, #248]	; (8008e1c <_vfprintf_r+0x7f8>)
 8008d22:	f104 0108 	add.w	r1, r4, #8
 8008d26:	6020      	str	r0, [r4, #0]
 8008d28:	f300 82df 	bgt.w	80092ea <_vfprintf_r+0xcc6>
 8008d2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d2e:	2b07      	cmp	r3, #7
 8008d30:	4402      	add	r2, r0
 8008d32:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8008d36:	6060      	str	r0, [r4, #4]
 8008d38:	f340 82ec 	ble.w	8009314 <_vfprintf_r+0xcf0>
 8008d3c:	4651      	mov	r1, sl
 8008d3e:	4658      	mov	r0, fp
 8008d40:	aa26      	add	r2, sp, #152	; 0x98
 8008d42:	f003 f9f0 	bl	800c126 <__sprint_r>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	f040 8622 	bne.w	8009990 <_vfprintf_r+0x136c>
 8008d4c:	ac29      	add	r4, sp, #164	; 0xa4
 8008d4e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8008d52:	b173      	cbz	r3, 8008d72 <_vfprintf_r+0x74e>
 8008d54:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	6063      	str	r3, [r4, #4]
 8008d5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008d60:	3301      	adds	r3, #1
 8008d62:	9328      	str	r3, [sp, #160]	; 0xa0
 8008d64:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008d66:	3301      	adds	r3, #1
 8008d68:	2b07      	cmp	r3, #7
 8008d6a:	9327      	str	r3, [sp, #156]	; 0x9c
 8008d6c:	f300 82d4 	bgt.w	8009318 <_vfprintf_r+0xcf4>
 8008d70:	3408      	adds	r4, #8
 8008d72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008d74:	b16b      	cbz	r3, 8008d92 <_vfprintf_r+0x76e>
 8008d76:	ab1f      	add	r3, sp, #124	; 0x7c
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	6063      	str	r3, [r4, #4]
 8008d7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008d80:	3302      	adds	r3, #2
 8008d82:	9328      	str	r3, [sp, #160]	; 0xa0
 8008d84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008d86:	3301      	adds	r3, #1
 8008d88:	2b07      	cmp	r3, #7
 8008d8a:	9327      	str	r3, [sp, #156]	; 0x9c
 8008d8c:	f300 82ce 	bgt.w	800932c <_vfprintf_r+0xd08>
 8008d90:	3408      	adds	r4, #8
 8008d92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d94:	2b80      	cmp	r3, #128	; 0x80
 8008d96:	d121      	bne.n	8008ddc <_vfprintf_r+0x7b8>
 8008d98:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008da2:	dd1b      	ble.n	8008ddc <_vfprintf_r+0x7b8>
 8008da4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008da8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008daa:	3301      	adds	r3, #1
 8008dac:	2810      	cmp	r0, #16
 8008dae:	481c      	ldr	r0, [pc, #112]	; (8008e20 <_vfprintf_r+0x7fc>)
 8008db0:	f104 0108 	add.w	r1, r4, #8
 8008db4:	6020      	str	r0, [r4, #0]
 8008db6:	f300 82c3 	bgt.w	8009340 <_vfprintf_r+0xd1c>
 8008dba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008dbc:	2b07      	cmp	r3, #7
 8008dbe:	4402      	add	r2, r0
 8008dc0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8008dc4:	6060      	str	r0, [r4, #4]
 8008dc6:	f340 82d0 	ble.w	800936a <_vfprintf_r+0xd46>
 8008dca:	4651      	mov	r1, sl
 8008dcc:	4658      	mov	r0, fp
 8008dce:	aa26      	add	r2, sp, #152	; 0x98
 8008dd0:	f003 f9a9 	bl	800c126 <__sprint_r>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	f040 85db 	bne.w	8009990 <_vfprintf_r+0x136c>
 8008dda:	ac29      	add	r4, sp, #164	; 0xa4
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	1af6      	subs	r6, r6, r3
 8008de0:	2e00      	cmp	r6, #0
 8008de2:	dd28      	ble.n	8008e36 <_vfprintf_r+0x812>
 8008de4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008de8:	480d      	ldr	r0, [pc, #52]	; (8008e20 <_vfprintf_r+0x7fc>)
 8008dea:	2e10      	cmp	r6, #16
 8008dec:	f103 0301 	add.w	r3, r3, #1
 8008df0:	f104 0108 	add.w	r1, r4, #8
 8008df4:	6020      	str	r0, [r4, #0]
 8008df6:	f300 82ba 	bgt.w	800936e <_vfprintf_r+0xd4a>
 8008dfa:	6066      	str	r6, [r4, #4]
 8008dfc:	2b07      	cmp	r3, #7
 8008dfe:	4416      	add	r6, r2
 8008e00:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8008e04:	f340 82c6 	ble.w	8009394 <_vfprintf_r+0xd70>
 8008e08:	e00c      	b.n	8008e24 <_vfprintf_r+0x800>
 8008e0a:	bf00      	nop
 8008e0c:	0800d4b1 	.word	0x0800d4b1
 8008e10:	0800d4a0 	.word	0x0800d4a0
 8008e14:	40300000 	.word	0x40300000
 8008e18:	3fe00000 	.word	0x3fe00000
 8008e1c:	0800d4c4 	.word	0x0800d4c4
 8008e20:	0800d4d4 	.word	0x0800d4d4
 8008e24:	4651      	mov	r1, sl
 8008e26:	4658      	mov	r0, fp
 8008e28:	aa26      	add	r2, sp, #152	; 0x98
 8008e2a:	f003 f97c 	bl	800c126 <__sprint_r>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f040 85ae 	bne.w	8009990 <_vfprintf_r+0x136c>
 8008e34:	ac29      	add	r4, sp, #164	; 0xa4
 8008e36:	f418 7f80 	tst.w	r8, #256	; 0x100
 8008e3a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8008e3c:	f040 82b0 	bne.w	80093a0 <_vfprintf_r+0xd7c>
 8008e40:	9b07      	ldr	r3, [sp, #28]
 8008e42:	f8c4 9000 	str.w	r9, [r4]
 8008e46:	441e      	add	r6, r3
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	9628      	str	r6, [sp, #160]	; 0xa0
 8008e4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008e4e:	3301      	adds	r3, #1
 8008e50:	2b07      	cmp	r3, #7
 8008e52:	9327      	str	r3, [sp, #156]	; 0x9c
 8008e54:	f300 82ea 	bgt.w	800942c <_vfprintf_r+0xe08>
 8008e58:	3408      	adds	r4, #8
 8008e5a:	f018 0f04 	tst.w	r8, #4
 8008e5e:	f040 8578 	bne.w	8009952 <_vfprintf_r+0x132e>
 8008e62:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8008e66:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008e68:	428a      	cmp	r2, r1
 8008e6a:	bfac      	ite	ge
 8008e6c:	189b      	addge	r3, r3, r2
 8008e6e:	185b      	addlt	r3, r3, r1
 8008e70:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008e74:	b13b      	cbz	r3, 8008e86 <_vfprintf_r+0x862>
 8008e76:	4651      	mov	r1, sl
 8008e78:	4658      	mov	r0, fp
 8008e7a:	aa26      	add	r2, sp, #152	; 0x98
 8008e7c:	f003 f953 	bl	800c126 <__sprint_r>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	f040 8585 	bne.w	8009990 <_vfprintf_r+0x136c>
 8008e86:	2300      	movs	r3, #0
 8008e88:	9327      	str	r3, [sp, #156]	; 0x9c
 8008e8a:	2f00      	cmp	r7, #0
 8008e8c:	f040 859c 	bne.w	80099c8 <_vfprintf_r+0x13a4>
 8008e90:	ac29      	add	r4, sp, #164	; 0xa4
 8008e92:	e0e7      	b.n	8009064 <_vfprintf_r+0xa40>
 8008e94:	4607      	mov	r7, r0
 8008e96:	e62d      	b.n	8008af4 <_vfprintf_r+0x4d0>
 8008e98:	2306      	movs	r3, #6
 8008e9a:	e61d      	b.n	8008ad8 <_vfprintf_r+0x4b4>
 8008e9c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008ea0:	e699      	b.n	8008bd6 <_vfprintf_r+0x5b2>
 8008ea2:	f803 0b01 	strb.w	r0, [r3], #1
 8008ea6:	1aca      	subs	r2, r1, r3
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	dafa      	bge.n	8008ea2 <_vfprintf_r+0x87e>
 8008eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	f103 0301 	add.w	r3, r3, #1
 8008eb6:	bfb8      	it	lt
 8008eb8:	2300      	movlt	r3, #0
 8008eba:	441d      	add	r5, r3
 8008ebc:	e69b      	b.n	8008bf6 <_vfprintf_r+0x5d2>
 8008ebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	2030      	movs	r0, #48	; 0x30
 8008ec4:	18a9      	adds	r1, r5, r2
 8008ec6:	e7ee      	b.n	8008ea6 <_vfprintf_r+0x882>
 8008ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eca:	2b46      	cmp	r3, #70	; 0x46
 8008ecc:	d005      	beq.n	8008eda <_vfprintf_r+0x8b6>
 8008ece:	2b45      	cmp	r3, #69	; 0x45
 8008ed0:	d11b      	bne.n	8008f0a <_vfprintf_r+0x8e6>
 8008ed2:	9b07      	ldr	r3, [sp, #28]
 8008ed4:	1c5e      	adds	r6, r3, #1
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	e001      	b.n	8008ede <_vfprintf_r+0x8ba>
 8008eda:	2303      	movs	r3, #3
 8008edc:	9e07      	ldr	r6, [sp, #28]
 8008ede:	aa24      	add	r2, sp, #144	; 0x90
 8008ee0:	9204      	str	r2, [sp, #16]
 8008ee2:	aa21      	add	r2, sp, #132	; 0x84
 8008ee4:	9203      	str	r2, [sp, #12]
 8008ee6:	aa20      	add	r2, sp, #128	; 0x80
 8008ee8:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	4658      	mov	r0, fp
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	9a08      	ldr	r2, [sp, #32]
 8008ef4:	f000 feec 	bl	8009cd0 <_dtoa_r>
 8008ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008efa:	4681      	mov	r9, r0
 8008efc:	2b47      	cmp	r3, #71	; 0x47
 8008efe:	d106      	bne.n	8008f0e <_vfprintf_r+0x8ea>
 8008f00:	f018 0f01 	tst.w	r8, #1
 8008f04:	d103      	bne.n	8008f0e <_vfprintf_r+0x8ea>
 8008f06:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8008f08:	e675      	b.n	8008bf6 <_vfprintf_r+0x5d2>
 8008f0a:	9e07      	ldr	r6, [sp, #28]
 8008f0c:	e7e3      	b.n	8008ed6 <_vfprintf_r+0x8b2>
 8008f0e:	eb09 0306 	add.w	r3, r9, r6
 8008f12:	930d      	str	r3, [sp, #52]	; 0x34
 8008f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f16:	2b46      	cmp	r3, #70	; 0x46
 8008f18:	d111      	bne.n	8008f3e <_vfprintf_r+0x91a>
 8008f1a:	f899 3000 	ldrb.w	r3, [r9]
 8008f1e:	2b30      	cmp	r3, #48	; 0x30
 8008f20:	d109      	bne.n	8008f36 <_vfprintf_r+0x912>
 8008f22:	2200      	movs	r2, #0
 8008f24:	2300      	movs	r3, #0
 8008f26:	4629      	mov	r1, r5
 8008f28:	9808      	ldr	r0, [sp, #32]
 8008f2a:	f7f7 fd47 	bl	80009bc <__aeabi_dcmpeq>
 8008f2e:	b910      	cbnz	r0, 8008f36 <_vfprintf_r+0x912>
 8008f30:	f1c6 0601 	rsb	r6, r6, #1
 8008f34:	9620      	str	r6, [sp, #128]	; 0x80
 8008f36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f3a:	441a      	add	r2, r3
 8008f3c:	920d      	str	r2, [sp, #52]	; 0x34
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2300      	movs	r3, #0
 8008f42:	4629      	mov	r1, r5
 8008f44:	9808      	ldr	r0, [sp, #32]
 8008f46:	f7f7 fd39 	bl	80009bc <__aeabi_dcmpeq>
 8008f4a:	b108      	cbz	r0, 8008f50 <_vfprintf_r+0x92c>
 8008f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f4e:	9324      	str	r3, [sp, #144]	; 0x90
 8008f50:	2230      	movs	r2, #48	; 0x30
 8008f52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f56:	4299      	cmp	r1, r3
 8008f58:	d9d5      	bls.n	8008f06 <_vfprintf_r+0x8e2>
 8008f5a:	1c59      	adds	r1, r3, #1
 8008f5c:	9124      	str	r1, [sp, #144]	; 0x90
 8008f5e:	701a      	strb	r2, [r3, #0]
 8008f60:	e7f7      	b.n	8008f52 <_vfprintf_r+0x92e>
 8008f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f64:	2b46      	cmp	r3, #70	; 0x46
 8008f66:	f47f ae57 	bne.w	8008c18 <_vfprintf_r+0x5f4>
 8008f6a:	9a07      	ldr	r2, [sp, #28]
 8008f6c:	f008 0301 	and.w	r3, r8, #1
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	ea43 0302 	orr.w	r3, r3, r2
 8008f76:	dd1a      	ble.n	8008fae <_vfprintf_r+0x98a>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d034      	beq.n	8008fe6 <_vfprintf_r+0x9c2>
 8008f7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f7e:	18eb      	adds	r3, r5, r3
 8008f80:	441a      	add	r2, r3
 8008f82:	9207      	str	r2, [sp, #28]
 8008f84:	2366      	movs	r3, #102	; 0x66
 8008f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f88:	e033      	b.n	8008ff2 <_vfprintf_r+0x9ce>
 8008f8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f8e:	f802 6b01 	strb.w	r6, [r2], #1
 8008f92:	e678      	b.n	8008c86 <_vfprintf_r+0x662>
 8008f94:	b941      	cbnz	r1, 8008fa8 <_vfprintf_r+0x984>
 8008f96:	2230      	movs	r2, #48	; 0x30
 8008f98:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8008f9c:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8008fa0:	3330      	adds	r3, #48	; 0x30
 8008fa2:	f802 3b01 	strb.w	r3, [r2], #1
 8008fa6:	e67a      	b.n	8008c9e <_vfprintf_r+0x67a>
 8008fa8:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8008fac:	e7f8      	b.n	8008fa0 <_vfprintf_r+0x97c>
 8008fae:	b1e3      	cbz	r3, 8008fea <_vfprintf_r+0x9c6>
 8008fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fb2:	9a07      	ldr	r2, [sp, #28]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	e7e3      	b.n	8008f80 <_vfprintf_r+0x95c>
 8008fb8:	9b08      	ldr	r3, [sp, #32]
 8008fba:	429d      	cmp	r5, r3
 8008fbc:	db07      	blt.n	8008fce <_vfprintf_r+0x9aa>
 8008fbe:	f018 0f01 	tst.w	r8, #1
 8008fc2:	d02d      	beq.n	8009020 <_vfprintf_r+0x9fc>
 8008fc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fc6:	18eb      	adds	r3, r5, r3
 8008fc8:	9307      	str	r3, [sp, #28]
 8008fca:	2367      	movs	r3, #103	; 0x67
 8008fcc:	e7db      	b.n	8008f86 <_vfprintf_r+0x962>
 8008fce:	9b08      	ldr	r3, [sp, #32]
 8008fd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	4413      	add	r3, r2
 8008fd6:	9307      	str	r3, [sp, #28]
 8008fd8:	dcf7      	bgt.n	8008fca <_vfprintf_r+0x9a6>
 8008fda:	9a07      	ldr	r2, [sp, #28]
 8008fdc:	f1c5 0301 	rsb	r3, r5, #1
 8008fe0:	441a      	add	r2, r3
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	e7f0      	b.n	8008fc8 <_vfprintf_r+0x9a4>
 8008fe6:	9507      	str	r5, [sp, #28]
 8008fe8:	e7cc      	b.n	8008f84 <_vfprintf_r+0x960>
 8008fea:	2366      	movs	r3, #102	; 0x66
 8008fec:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fee:	2301      	movs	r3, #1
 8008ff0:	9307      	str	r3, [sp, #28]
 8008ff2:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8008ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ff8:	d025      	beq.n	8009046 <_vfprintf_r+0xa22>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8009002:	f77f ae64 	ble.w	8008cce <_vfprintf_r+0x6aa>
 8009006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2bff      	cmp	r3, #255	; 0xff
 800900c:	d10a      	bne.n	8009024 <_vfprintf_r+0xa00>
 800900e:	9907      	ldr	r1, [sp, #28]
 8009010:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009014:	4413      	add	r3, r2
 8009016:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009018:	fb02 1303 	mla	r3, r2, r3, r1
 800901c:	9307      	str	r3, [sp, #28]
 800901e:	e656      	b.n	8008cce <_vfprintf_r+0x6aa>
 8009020:	9507      	str	r5, [sp, #28]
 8009022:	e7d2      	b.n	8008fca <_vfprintf_r+0x9a6>
 8009024:	42ab      	cmp	r3, r5
 8009026:	daf2      	bge.n	800900e <_vfprintf_r+0x9ea>
 8009028:	1aed      	subs	r5, r5, r3
 800902a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	b133      	cbz	r3, 800903e <_vfprintf_r+0xa1a>
 8009030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009032:	3301      	adds	r3, #1
 8009034:	930d      	str	r3, [sp, #52]	; 0x34
 8009036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009038:	3301      	adds	r3, #1
 800903a:	930e      	str	r3, [sp, #56]	; 0x38
 800903c:	e7e3      	b.n	8009006 <_vfprintf_r+0x9e2>
 800903e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009040:	3301      	adds	r3, #1
 8009042:	930c      	str	r3, [sp, #48]	; 0x30
 8009044:	e7df      	b.n	8009006 <_vfprintf_r+0x9e2>
 8009046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009048:	930c      	str	r3, [sp, #48]	; 0x30
 800904a:	e640      	b.n	8008cce <_vfprintf_r+0x6aa>
 800904c:	4632      	mov	r2, r6
 800904e:	f852 3b04 	ldr.w	r3, [r2], #4
 8009052:	f018 0f20 	tst.w	r8, #32
 8009056:	920a      	str	r2, [sp, #40]	; 0x28
 8009058:	d009      	beq.n	800906e <_vfprintf_r+0xa4a>
 800905a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800905c:	4610      	mov	r0, r2
 800905e:	17d1      	asrs	r1, r2, #31
 8009060:	e9c3 0100 	strd	r0, r1, [r3]
 8009064:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009066:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800906a:	f7ff bb5a 	b.w	8008722 <_vfprintf_r+0xfe>
 800906e:	f018 0f10 	tst.w	r8, #16
 8009072:	d002      	beq.n	800907a <_vfprintf_r+0xa56>
 8009074:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	e7f4      	b.n	8009064 <_vfprintf_r+0xa40>
 800907a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800907e:	d002      	beq.n	8009086 <_vfprintf_r+0xa62>
 8009080:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009082:	801a      	strh	r2, [r3, #0]
 8009084:	e7ee      	b.n	8009064 <_vfprintf_r+0xa40>
 8009086:	f418 7f00 	tst.w	r8, #512	; 0x200
 800908a:	d0f3      	beq.n	8009074 <_vfprintf_r+0xa50>
 800908c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	e7e8      	b.n	8009064 <_vfprintf_r+0xa40>
 8009092:	f048 0810 	orr.w	r8, r8, #16
 8009096:	f018 0f20 	tst.w	r8, #32
 800909a:	d01e      	beq.n	80090da <_vfprintf_r+0xab6>
 800909c:	3607      	adds	r6, #7
 800909e:	f026 0307 	bic.w	r3, r6, #7
 80090a2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80090a6:	930a      	str	r3, [sp, #40]	; 0x28
 80090a8:	2300      	movs	r3, #0
 80090aa:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80090ae:	2200      	movs	r2, #0
 80090b0:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80090b4:	9a07      	ldr	r2, [sp, #28]
 80090b6:	3201      	adds	r2, #1
 80090b8:	f000 849b 	beq.w	80099f2 <_vfprintf_r+0x13ce>
 80090bc:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 80090c0:	920c      	str	r2, [sp, #48]	; 0x30
 80090c2:	ea56 0207 	orrs.w	r2, r6, r7
 80090c6:	f040 849a 	bne.w	80099fe <_vfprintf_r+0x13da>
 80090ca:	9a07      	ldr	r2, [sp, #28]
 80090cc:	2a00      	cmp	r2, #0
 80090ce:	f000 80f5 	beq.w	80092bc <_vfprintf_r+0xc98>
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	f040 8496 	bne.w	8009a04 <_vfprintf_r+0x13e0>
 80090d8:	e097      	b.n	800920a <_vfprintf_r+0xbe6>
 80090da:	1d33      	adds	r3, r6, #4
 80090dc:	f018 0f10 	tst.w	r8, #16
 80090e0:	930a      	str	r3, [sp, #40]	; 0x28
 80090e2:	d001      	beq.n	80090e8 <_vfprintf_r+0xac4>
 80090e4:	6836      	ldr	r6, [r6, #0]
 80090e6:	e003      	b.n	80090f0 <_vfprintf_r+0xacc>
 80090e8:	f018 0f40 	tst.w	r8, #64	; 0x40
 80090ec:	d002      	beq.n	80090f4 <_vfprintf_r+0xad0>
 80090ee:	8836      	ldrh	r6, [r6, #0]
 80090f0:	2700      	movs	r7, #0
 80090f2:	e7d9      	b.n	80090a8 <_vfprintf_r+0xa84>
 80090f4:	f418 7f00 	tst.w	r8, #512	; 0x200
 80090f8:	d0f4      	beq.n	80090e4 <_vfprintf_r+0xac0>
 80090fa:	7836      	ldrb	r6, [r6, #0]
 80090fc:	e7f8      	b.n	80090f0 <_vfprintf_r+0xacc>
 80090fe:	4633      	mov	r3, r6
 8009100:	f853 6b04 	ldr.w	r6, [r3], #4
 8009104:	2278      	movs	r2, #120	; 0x78
 8009106:	930a      	str	r3, [sp, #40]	; 0x28
 8009108:	f647 0330 	movw	r3, #30768	; 0x7830
 800910c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8009110:	4ba1      	ldr	r3, [pc, #644]	; (8009398 <_vfprintf_r+0xd74>)
 8009112:	2700      	movs	r7, #0
 8009114:	931b      	str	r3, [sp, #108]	; 0x6c
 8009116:	f048 0802 	orr.w	r8, r8, #2
 800911a:	2302      	movs	r3, #2
 800911c:	920b      	str	r2, [sp, #44]	; 0x2c
 800911e:	e7c6      	b.n	80090ae <_vfprintf_r+0xa8a>
 8009120:	4633      	mov	r3, r6
 8009122:	2500      	movs	r5, #0
 8009124:	f853 9b04 	ldr.w	r9, [r3], #4
 8009128:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 800912c:	930a      	str	r3, [sp, #40]	; 0x28
 800912e:	9b07      	ldr	r3, [sp, #28]
 8009130:	1c5e      	adds	r6, r3, #1
 8009132:	d010      	beq.n	8009156 <_vfprintf_r+0xb32>
 8009134:	461a      	mov	r2, r3
 8009136:	4629      	mov	r1, r5
 8009138:	4648      	mov	r0, r9
 800913a:	f002 f9f9 	bl	800b530 <memchr>
 800913e:	4607      	mov	r7, r0
 8009140:	2800      	cmp	r0, #0
 8009142:	f43f ac74 	beq.w	8008a2e <_vfprintf_r+0x40a>
 8009146:	eba0 0309 	sub.w	r3, r0, r9
 800914a:	462f      	mov	r7, r5
 800914c:	462e      	mov	r6, r5
 800914e:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 8009152:	9307      	str	r3, [sp, #28]
 8009154:	e5c3      	b.n	8008cde <_vfprintf_r+0x6ba>
 8009156:	4648      	mov	r0, r9
 8009158:	f7f7 f804 	bl	8000164 <strlen>
 800915c:	462f      	mov	r7, r5
 800915e:	9007      	str	r0, [sp, #28]
 8009160:	e465      	b.n	8008a2e <_vfprintf_r+0x40a>
 8009162:	f048 0810 	orr.w	r8, r8, #16
 8009166:	f018 0f20 	tst.w	r8, #32
 800916a:	d007      	beq.n	800917c <_vfprintf_r+0xb58>
 800916c:	3607      	adds	r6, #7
 800916e:	f026 0307 	bic.w	r3, r6, #7
 8009172:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8009176:	930a      	str	r3, [sp, #40]	; 0x28
 8009178:	2301      	movs	r3, #1
 800917a:	e798      	b.n	80090ae <_vfprintf_r+0xa8a>
 800917c:	1d33      	adds	r3, r6, #4
 800917e:	f018 0f10 	tst.w	r8, #16
 8009182:	930a      	str	r3, [sp, #40]	; 0x28
 8009184:	d001      	beq.n	800918a <_vfprintf_r+0xb66>
 8009186:	6836      	ldr	r6, [r6, #0]
 8009188:	e003      	b.n	8009192 <_vfprintf_r+0xb6e>
 800918a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800918e:	d002      	beq.n	8009196 <_vfprintf_r+0xb72>
 8009190:	8836      	ldrh	r6, [r6, #0]
 8009192:	2700      	movs	r7, #0
 8009194:	e7f0      	b.n	8009178 <_vfprintf_r+0xb54>
 8009196:	f418 7f00 	tst.w	r8, #512	; 0x200
 800919a:	d0f4      	beq.n	8009186 <_vfprintf_r+0xb62>
 800919c:	7836      	ldrb	r6, [r6, #0]
 800919e:	e7f8      	b.n	8009192 <_vfprintf_r+0xb6e>
 80091a0:	4b7e      	ldr	r3, [pc, #504]	; (800939c <_vfprintf_r+0xd78>)
 80091a2:	f018 0f20 	tst.w	r8, #32
 80091a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80091a8:	d019      	beq.n	80091de <_vfprintf_r+0xbba>
 80091aa:	3607      	adds	r6, #7
 80091ac:	f026 0307 	bic.w	r3, r6, #7
 80091b0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80091b4:	930a      	str	r3, [sp, #40]	; 0x28
 80091b6:	f018 0f01 	tst.w	r8, #1
 80091ba:	d00a      	beq.n	80091d2 <_vfprintf_r+0xbae>
 80091bc:	ea56 0307 	orrs.w	r3, r6, r7
 80091c0:	d007      	beq.n	80091d2 <_vfprintf_r+0xbae>
 80091c2:	2330      	movs	r3, #48	; 0x30
 80091c4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80091c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ca:	f048 0802 	orr.w	r8, r8, #2
 80091ce:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80091d2:	2302      	movs	r3, #2
 80091d4:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80091d8:	e769      	b.n	80090ae <_vfprintf_r+0xa8a>
 80091da:	4b6f      	ldr	r3, [pc, #444]	; (8009398 <_vfprintf_r+0xd74>)
 80091dc:	e7e1      	b.n	80091a2 <_vfprintf_r+0xb7e>
 80091de:	1d33      	adds	r3, r6, #4
 80091e0:	f018 0f10 	tst.w	r8, #16
 80091e4:	930a      	str	r3, [sp, #40]	; 0x28
 80091e6:	d001      	beq.n	80091ec <_vfprintf_r+0xbc8>
 80091e8:	6836      	ldr	r6, [r6, #0]
 80091ea:	e003      	b.n	80091f4 <_vfprintf_r+0xbd0>
 80091ec:	f018 0f40 	tst.w	r8, #64	; 0x40
 80091f0:	d002      	beq.n	80091f8 <_vfprintf_r+0xbd4>
 80091f2:	8836      	ldrh	r6, [r6, #0]
 80091f4:	2700      	movs	r7, #0
 80091f6:	e7de      	b.n	80091b6 <_vfprintf_r+0xb92>
 80091f8:	f418 7f00 	tst.w	r8, #512	; 0x200
 80091fc:	d0f4      	beq.n	80091e8 <_vfprintf_r+0xbc4>
 80091fe:	7836      	ldrb	r6, [r6, #0]
 8009200:	e7f8      	b.n	80091f4 <_vfprintf_r+0xbd0>
 8009202:	2f00      	cmp	r7, #0
 8009204:	bf08      	it	eq
 8009206:	2e0a      	cmpeq	r6, #10
 8009208:	d206      	bcs.n	8009218 <_vfprintf_r+0xbf4>
 800920a:	3630      	adds	r6, #48	; 0x30
 800920c:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 8009210:	f20d 1947 	addw	r9, sp, #327	; 0x147
 8009214:	f000 bc14 	b.w	8009a40 <_vfprintf_r+0x141c>
 8009218:	2300      	movs	r3, #0
 800921a:	9308      	str	r3, [sp, #32]
 800921c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800921e:	ad52      	add	r5, sp, #328	; 0x148
 8009220:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8009224:	220a      	movs	r2, #10
 8009226:	2300      	movs	r3, #0
 8009228:	4630      	mov	r0, r6
 800922a:	4639      	mov	r1, r7
 800922c:	f7f7 fc36 	bl	8000a9c <__aeabi_uldivmod>
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	3230      	adds	r2, #48	; 0x30
 8009234:	3301      	adds	r3, #1
 8009236:	f105 39ff 	add.w	r9, r5, #4294967295
 800923a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800923e:	9308      	str	r3, [sp, #32]
 8009240:	f1b8 0f00 	cmp.w	r8, #0
 8009244:	d019      	beq.n	800927a <_vfprintf_r+0xc56>
 8009246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009248:	9a08      	ldr	r2, [sp, #32]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d114      	bne.n	800927a <_vfprintf_r+0xc56>
 8009250:	2aff      	cmp	r2, #255	; 0xff
 8009252:	d012      	beq.n	800927a <_vfprintf_r+0xc56>
 8009254:	2f00      	cmp	r7, #0
 8009256:	bf08      	it	eq
 8009258:	2e0a      	cmpeq	r6, #10
 800925a:	d30e      	bcc.n	800927a <_vfprintf_r+0xc56>
 800925c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800925e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009260:	eba9 0903 	sub.w	r9, r9, r3
 8009264:	461a      	mov	r2, r3
 8009266:	4648      	mov	r0, r9
 8009268:	f002 ff3d 	bl	800c0e6 <strncpy>
 800926c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800926e:	785d      	ldrb	r5, [r3, #1]
 8009270:	b195      	cbz	r5, 8009298 <_vfprintf_r+0xc74>
 8009272:	3301      	adds	r3, #1
 8009274:	930e      	str	r3, [sp, #56]	; 0x38
 8009276:	2300      	movs	r3, #0
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	220a      	movs	r2, #10
 800927c:	2300      	movs	r3, #0
 800927e:	4630      	mov	r0, r6
 8009280:	4639      	mov	r1, r7
 8009282:	f7f7 fc0b 	bl	8000a9c <__aeabi_uldivmod>
 8009286:	2f00      	cmp	r7, #0
 8009288:	bf08      	it	eq
 800928a:	2e0a      	cmpeq	r6, #10
 800928c:	f0c0 83d8 	bcc.w	8009a40 <_vfprintf_r+0x141c>
 8009290:	4606      	mov	r6, r0
 8009292:	460f      	mov	r7, r1
 8009294:	464d      	mov	r5, r9
 8009296:	e7c5      	b.n	8009224 <_vfprintf_r+0xc00>
 8009298:	9508      	str	r5, [sp, #32]
 800929a:	e7ee      	b.n	800927a <_vfprintf_r+0xc56>
 800929c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800929e:	f006 030f 	and.w	r3, r6, #15
 80092a2:	5cd3      	ldrb	r3, [r2, r3]
 80092a4:	093a      	lsrs	r2, r7, #4
 80092a6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80092aa:	0933      	lsrs	r3, r6, #4
 80092ac:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80092b0:	461e      	mov	r6, r3
 80092b2:	4617      	mov	r7, r2
 80092b4:	ea56 0307 	orrs.w	r3, r6, r7
 80092b8:	d1f0      	bne.n	800929c <_vfprintf_r+0xc78>
 80092ba:	e3c1      	b.n	8009a40 <_vfprintf_r+0x141c>
 80092bc:	b933      	cbnz	r3, 80092cc <_vfprintf_r+0xca8>
 80092be:	f018 0f01 	tst.w	r8, #1
 80092c2:	d003      	beq.n	80092cc <_vfprintf_r+0xca8>
 80092c4:	2330      	movs	r3, #48	; 0x30
 80092c6:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 80092ca:	e7a1      	b.n	8009210 <_vfprintf_r+0xbec>
 80092cc:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80092d0:	e3b6      	b.n	8009a40 <_vfprintf_r+0x141c>
 80092d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 837d 	beq.w	80099d4 <_vfprintf_r+0x13b0>
 80092da:	2000      	movs	r0, #0
 80092dc:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80092e0:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80092e4:	960a      	str	r6, [sp, #40]	; 0x28
 80092e6:	f7ff bb3b 	b.w	8008960 <_vfprintf_r+0x33c>
 80092ea:	2010      	movs	r0, #16
 80092ec:	2b07      	cmp	r3, #7
 80092ee:	4402      	add	r2, r0
 80092f0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80092f4:	6060      	str	r0, [r4, #4]
 80092f6:	dd08      	ble.n	800930a <_vfprintf_r+0xce6>
 80092f8:	4651      	mov	r1, sl
 80092fa:	4658      	mov	r0, fp
 80092fc:	aa26      	add	r2, sp, #152	; 0x98
 80092fe:	f002 ff12 	bl	800c126 <__sprint_r>
 8009302:	2800      	cmp	r0, #0
 8009304:	f040 8344 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009308:	a929      	add	r1, sp, #164	; 0xa4
 800930a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800930c:	460c      	mov	r4, r1
 800930e:	3b10      	subs	r3, #16
 8009310:	9317      	str	r3, [sp, #92]	; 0x5c
 8009312:	e500      	b.n	8008d16 <_vfprintf_r+0x6f2>
 8009314:	460c      	mov	r4, r1
 8009316:	e51a      	b.n	8008d4e <_vfprintf_r+0x72a>
 8009318:	4651      	mov	r1, sl
 800931a:	4658      	mov	r0, fp
 800931c:	aa26      	add	r2, sp, #152	; 0x98
 800931e:	f002 ff02 	bl	800c126 <__sprint_r>
 8009322:	2800      	cmp	r0, #0
 8009324:	f040 8334 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009328:	ac29      	add	r4, sp, #164	; 0xa4
 800932a:	e522      	b.n	8008d72 <_vfprintf_r+0x74e>
 800932c:	4651      	mov	r1, sl
 800932e:	4658      	mov	r0, fp
 8009330:	aa26      	add	r2, sp, #152	; 0x98
 8009332:	f002 fef8 	bl	800c126 <__sprint_r>
 8009336:	2800      	cmp	r0, #0
 8009338:	f040 832a 	bne.w	8009990 <_vfprintf_r+0x136c>
 800933c:	ac29      	add	r4, sp, #164	; 0xa4
 800933e:	e528      	b.n	8008d92 <_vfprintf_r+0x76e>
 8009340:	2010      	movs	r0, #16
 8009342:	2b07      	cmp	r3, #7
 8009344:	4402      	add	r2, r0
 8009346:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800934a:	6060      	str	r0, [r4, #4]
 800934c:	dd08      	ble.n	8009360 <_vfprintf_r+0xd3c>
 800934e:	4651      	mov	r1, sl
 8009350:	4658      	mov	r0, fp
 8009352:	aa26      	add	r2, sp, #152	; 0x98
 8009354:	f002 fee7 	bl	800c126 <__sprint_r>
 8009358:	2800      	cmp	r0, #0
 800935a:	f040 8319 	bne.w	8009990 <_vfprintf_r+0x136c>
 800935e:	a929      	add	r1, sp, #164	; 0xa4
 8009360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009362:	460c      	mov	r4, r1
 8009364:	3b10      	subs	r3, #16
 8009366:	9317      	str	r3, [sp, #92]	; 0x5c
 8009368:	e51c      	b.n	8008da4 <_vfprintf_r+0x780>
 800936a:	460c      	mov	r4, r1
 800936c:	e536      	b.n	8008ddc <_vfprintf_r+0x7b8>
 800936e:	2010      	movs	r0, #16
 8009370:	2b07      	cmp	r3, #7
 8009372:	4402      	add	r2, r0
 8009374:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009378:	6060      	str	r0, [r4, #4]
 800937a:	dd08      	ble.n	800938e <_vfprintf_r+0xd6a>
 800937c:	4651      	mov	r1, sl
 800937e:	4658      	mov	r0, fp
 8009380:	aa26      	add	r2, sp, #152	; 0x98
 8009382:	f002 fed0 	bl	800c126 <__sprint_r>
 8009386:	2800      	cmp	r0, #0
 8009388:	f040 8302 	bne.w	8009990 <_vfprintf_r+0x136c>
 800938c:	a929      	add	r1, sp, #164	; 0xa4
 800938e:	460c      	mov	r4, r1
 8009390:	3e10      	subs	r6, #16
 8009392:	e527      	b.n	8008de4 <_vfprintf_r+0x7c0>
 8009394:	460c      	mov	r4, r1
 8009396:	e54e      	b.n	8008e36 <_vfprintf_r+0x812>
 8009398:	0800d4a0 	.word	0x0800d4a0
 800939c:	0800d4b1 	.word	0x0800d4b1
 80093a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a2:	2b65      	cmp	r3, #101	; 0x65
 80093a4:	f340 8238 	ble.w	8009818 <_vfprintf_r+0x11f4>
 80093a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093ac:	2200      	movs	r2, #0
 80093ae:	2300      	movs	r3, #0
 80093b0:	f7f7 fb04 	bl	80009bc <__aeabi_dcmpeq>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d06a      	beq.n	800948e <_vfprintf_r+0xe6a>
 80093b8:	4b6e      	ldr	r3, [pc, #440]	; (8009574 <_vfprintf_r+0xf50>)
 80093ba:	6023      	str	r3, [r4, #0]
 80093bc:	2301      	movs	r3, #1
 80093be:	441e      	add	r6, r3
 80093c0:	6063      	str	r3, [r4, #4]
 80093c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80093c4:	9628      	str	r6, [sp, #160]	; 0xa0
 80093c6:	3301      	adds	r3, #1
 80093c8:	2b07      	cmp	r3, #7
 80093ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80093cc:	dc38      	bgt.n	8009440 <_vfprintf_r+0xe1c>
 80093ce:	3408      	adds	r4, #8
 80093d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80093d2:	9a08      	ldr	r2, [sp, #32]
 80093d4:	4293      	cmp	r3, r2
 80093d6:	db03      	blt.n	80093e0 <_vfprintf_r+0xdbc>
 80093d8:	f018 0f01 	tst.w	r8, #1
 80093dc:	f43f ad3d 	beq.w	8008e5a <_vfprintf_r+0x836>
 80093e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80093e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093e8:	6063      	str	r3, [r4, #4]
 80093ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80093ec:	4413      	add	r3, r2
 80093ee:	9328      	str	r3, [sp, #160]	; 0xa0
 80093f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80093f2:	3301      	adds	r3, #1
 80093f4:	2b07      	cmp	r3, #7
 80093f6:	9327      	str	r3, [sp, #156]	; 0x9c
 80093f8:	dc2c      	bgt.n	8009454 <_vfprintf_r+0xe30>
 80093fa:	3408      	adds	r4, #8
 80093fc:	9b08      	ldr	r3, [sp, #32]
 80093fe:	1e5d      	subs	r5, r3, #1
 8009400:	2d00      	cmp	r5, #0
 8009402:	f77f ad2a 	ble.w	8008e5a <_vfprintf_r+0x836>
 8009406:	f04f 0910 	mov.w	r9, #16
 800940a:	4e5b      	ldr	r6, [pc, #364]	; (8009578 <_vfprintf_r+0xf54>)
 800940c:	2d10      	cmp	r5, #16
 800940e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8009412:	f104 0108 	add.w	r1, r4, #8
 8009416:	f103 0301 	add.w	r3, r3, #1
 800941a:	6026      	str	r6, [r4, #0]
 800941c:	dc24      	bgt.n	8009468 <_vfprintf_r+0xe44>
 800941e:	6065      	str	r5, [r4, #4]
 8009420:	2b07      	cmp	r3, #7
 8009422:	4415      	add	r5, r2
 8009424:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8009428:	f340 8290 	ble.w	800994c <_vfprintf_r+0x1328>
 800942c:	4651      	mov	r1, sl
 800942e:	4658      	mov	r0, fp
 8009430:	aa26      	add	r2, sp, #152	; 0x98
 8009432:	f002 fe78 	bl	800c126 <__sprint_r>
 8009436:	2800      	cmp	r0, #0
 8009438:	f040 82aa 	bne.w	8009990 <_vfprintf_r+0x136c>
 800943c:	ac29      	add	r4, sp, #164	; 0xa4
 800943e:	e50c      	b.n	8008e5a <_vfprintf_r+0x836>
 8009440:	4651      	mov	r1, sl
 8009442:	4658      	mov	r0, fp
 8009444:	aa26      	add	r2, sp, #152	; 0x98
 8009446:	f002 fe6e 	bl	800c126 <__sprint_r>
 800944a:	2800      	cmp	r0, #0
 800944c:	f040 82a0 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009450:	ac29      	add	r4, sp, #164	; 0xa4
 8009452:	e7bd      	b.n	80093d0 <_vfprintf_r+0xdac>
 8009454:	4651      	mov	r1, sl
 8009456:	4658      	mov	r0, fp
 8009458:	aa26      	add	r2, sp, #152	; 0x98
 800945a:	f002 fe64 	bl	800c126 <__sprint_r>
 800945e:	2800      	cmp	r0, #0
 8009460:	f040 8296 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009464:	ac29      	add	r4, sp, #164	; 0xa4
 8009466:	e7c9      	b.n	80093fc <_vfprintf_r+0xdd8>
 8009468:	3210      	adds	r2, #16
 800946a:	2b07      	cmp	r3, #7
 800946c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009470:	f8c4 9004 	str.w	r9, [r4, #4]
 8009474:	dd08      	ble.n	8009488 <_vfprintf_r+0xe64>
 8009476:	4651      	mov	r1, sl
 8009478:	4658      	mov	r0, fp
 800947a:	aa26      	add	r2, sp, #152	; 0x98
 800947c:	f002 fe53 	bl	800c126 <__sprint_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	f040 8285 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009486:	a929      	add	r1, sp, #164	; 0xa4
 8009488:	460c      	mov	r4, r1
 800948a:	3d10      	subs	r5, #16
 800948c:	e7be      	b.n	800940c <_vfprintf_r+0xde8>
 800948e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009490:	2b00      	cmp	r3, #0
 8009492:	dc73      	bgt.n	800957c <_vfprintf_r+0xf58>
 8009494:	4b37      	ldr	r3, [pc, #220]	; (8009574 <_vfprintf_r+0xf50>)
 8009496:	6023      	str	r3, [r4, #0]
 8009498:	2301      	movs	r3, #1
 800949a:	441e      	add	r6, r3
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80094a0:	9628      	str	r6, [sp, #160]	; 0xa0
 80094a2:	3301      	adds	r3, #1
 80094a4:	2b07      	cmp	r3, #7
 80094a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80094a8:	dc3c      	bgt.n	8009524 <_vfprintf_r+0xf00>
 80094aa:	3408      	adds	r4, #8
 80094ac:	9908      	ldr	r1, [sp, #32]
 80094ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80094b2:	430a      	orrs	r2, r1
 80094b4:	f008 0101 	and.w	r1, r8, #1
 80094b8:	430a      	orrs	r2, r1
 80094ba:	f43f acce 	beq.w	8008e5a <_vfprintf_r+0x836>
 80094be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80094c0:	6022      	str	r2, [r4, #0]
 80094c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094c4:	4413      	add	r3, r2
 80094c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80094c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80094ca:	6062      	str	r2, [r4, #4]
 80094cc:	3301      	adds	r3, #1
 80094ce:	2b07      	cmp	r3, #7
 80094d0:	9327      	str	r3, [sp, #156]	; 0x9c
 80094d2:	dc31      	bgt.n	8009538 <_vfprintf_r+0xf14>
 80094d4:	3408      	adds	r4, #8
 80094d6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80094d8:	2d00      	cmp	r5, #0
 80094da:	da1a      	bge.n	8009512 <_vfprintf_r+0xeee>
 80094dc:	4623      	mov	r3, r4
 80094de:	4e26      	ldr	r6, [pc, #152]	; (8009578 <_vfprintf_r+0xf54>)
 80094e0:	426d      	negs	r5, r5
 80094e2:	2d10      	cmp	r5, #16
 80094e4:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 80094e8:	f104 0408 	add.w	r4, r4, #8
 80094ec:	f102 0201 	add.w	r2, r2, #1
 80094f0:	601e      	str	r6, [r3, #0]
 80094f2:	dc2b      	bgt.n	800954c <_vfprintf_r+0xf28>
 80094f4:	605d      	str	r5, [r3, #4]
 80094f6:	2a07      	cmp	r2, #7
 80094f8:	440d      	add	r5, r1
 80094fa:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 80094fe:	dd08      	ble.n	8009512 <_vfprintf_r+0xeee>
 8009500:	4651      	mov	r1, sl
 8009502:	4658      	mov	r0, fp
 8009504:	aa26      	add	r2, sp, #152	; 0x98
 8009506:	f002 fe0e 	bl	800c126 <__sprint_r>
 800950a:	2800      	cmp	r0, #0
 800950c:	f040 8240 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009510:	ac29      	add	r4, sp, #164	; 0xa4
 8009512:	9b08      	ldr	r3, [sp, #32]
 8009514:	9a08      	ldr	r2, [sp, #32]
 8009516:	6063      	str	r3, [r4, #4]
 8009518:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800951a:	f8c4 9000 	str.w	r9, [r4]
 800951e:	4413      	add	r3, r2
 8009520:	9328      	str	r3, [sp, #160]	; 0xa0
 8009522:	e493      	b.n	8008e4c <_vfprintf_r+0x828>
 8009524:	4651      	mov	r1, sl
 8009526:	4658      	mov	r0, fp
 8009528:	aa26      	add	r2, sp, #152	; 0x98
 800952a:	f002 fdfc 	bl	800c126 <__sprint_r>
 800952e:	2800      	cmp	r0, #0
 8009530:	f040 822e 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009534:	ac29      	add	r4, sp, #164	; 0xa4
 8009536:	e7b9      	b.n	80094ac <_vfprintf_r+0xe88>
 8009538:	4651      	mov	r1, sl
 800953a:	4658      	mov	r0, fp
 800953c:	aa26      	add	r2, sp, #152	; 0x98
 800953e:	f002 fdf2 	bl	800c126 <__sprint_r>
 8009542:	2800      	cmp	r0, #0
 8009544:	f040 8224 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009548:	ac29      	add	r4, sp, #164	; 0xa4
 800954a:	e7c4      	b.n	80094d6 <_vfprintf_r+0xeb2>
 800954c:	2010      	movs	r0, #16
 800954e:	2a07      	cmp	r2, #7
 8009550:	4401      	add	r1, r0
 8009552:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8009556:	6058      	str	r0, [r3, #4]
 8009558:	dd08      	ble.n	800956c <_vfprintf_r+0xf48>
 800955a:	4651      	mov	r1, sl
 800955c:	4658      	mov	r0, fp
 800955e:	aa26      	add	r2, sp, #152	; 0x98
 8009560:	f002 fde1 	bl	800c126 <__sprint_r>
 8009564:	2800      	cmp	r0, #0
 8009566:	f040 8213 	bne.w	8009990 <_vfprintf_r+0x136c>
 800956a:	ac29      	add	r4, sp, #164	; 0xa4
 800956c:	4623      	mov	r3, r4
 800956e:	3d10      	subs	r5, #16
 8009570:	e7b7      	b.n	80094e2 <_vfprintf_r+0xebe>
 8009572:	bf00      	nop
 8009574:	0800d4c2 	.word	0x0800d4c2
 8009578:	0800d4d4 	.word	0x0800d4d4
 800957c:	9b08      	ldr	r3, [sp, #32]
 800957e:	42ab      	cmp	r3, r5
 8009580:	bfa8      	it	ge
 8009582:	462b      	movge	r3, r5
 8009584:	2b00      	cmp	r3, #0
 8009586:	9307      	str	r3, [sp, #28]
 8009588:	dd0a      	ble.n	80095a0 <_vfprintf_r+0xf7c>
 800958a:	441e      	add	r6, r3
 800958c:	e9c4 9300 	strd	r9, r3, [r4]
 8009590:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009592:	9628      	str	r6, [sp, #160]	; 0xa0
 8009594:	3301      	adds	r3, #1
 8009596:	2b07      	cmp	r3, #7
 8009598:	9327      	str	r3, [sp, #156]	; 0x9c
 800959a:	f300 8088 	bgt.w	80096ae <_vfprintf_r+0x108a>
 800959e:	3408      	adds	r4, #8
 80095a0:	9b07      	ldr	r3, [sp, #28]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bfb4      	ite	lt
 80095a6:	462e      	movlt	r6, r5
 80095a8:	1aee      	subge	r6, r5, r3
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	dd19      	ble.n	80095e2 <_vfprintf_r+0xfbe>
 80095ae:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80095b2:	4898      	ldr	r0, [pc, #608]	; (8009814 <_vfprintf_r+0x11f0>)
 80095b4:	2e10      	cmp	r6, #16
 80095b6:	f103 0301 	add.w	r3, r3, #1
 80095ba:	f104 0108 	add.w	r1, r4, #8
 80095be:	6020      	str	r0, [r4, #0]
 80095c0:	dc7f      	bgt.n	80096c2 <_vfprintf_r+0x109e>
 80095c2:	6066      	str	r6, [r4, #4]
 80095c4:	2b07      	cmp	r3, #7
 80095c6:	4416      	add	r6, r2
 80095c8:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 80095cc:	f340 808c 	ble.w	80096e8 <_vfprintf_r+0x10c4>
 80095d0:	4651      	mov	r1, sl
 80095d2:	4658      	mov	r0, fp
 80095d4:	aa26      	add	r2, sp, #152	; 0x98
 80095d6:	f002 fda6 	bl	800c126 <__sprint_r>
 80095da:	2800      	cmp	r0, #0
 80095dc:	f040 81d8 	bne.w	8009990 <_vfprintf_r+0x136c>
 80095e0:	ac29      	add	r4, sp, #164	; 0xa4
 80095e2:	f418 6f80 	tst.w	r8, #1024	; 0x400
 80095e6:	444d      	add	r5, r9
 80095e8:	d00a      	beq.n	8009600 <_vfprintf_r+0xfdc>
 80095ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d17d      	bne.n	80096ec <_vfprintf_r+0x10c8>
 80095f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d17d      	bne.n	80096f2 <_vfprintf_r+0x10ce>
 80095f6:	9b08      	ldr	r3, [sp, #32]
 80095f8:	444b      	add	r3, r9
 80095fa:	429d      	cmp	r5, r3
 80095fc:	bf28      	it	cs
 80095fe:	461d      	movcs	r5, r3
 8009600:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009602:	9a08      	ldr	r2, [sp, #32]
 8009604:	4293      	cmp	r3, r2
 8009606:	db02      	blt.n	800960e <_vfprintf_r+0xfea>
 8009608:	f018 0f01 	tst.w	r8, #1
 800960c:	d00e      	beq.n	800962c <_vfprintf_r+0x1008>
 800960e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009610:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009616:	6063      	str	r3, [r4, #4]
 8009618:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800961a:	4413      	add	r3, r2
 800961c:	9328      	str	r3, [sp, #160]	; 0xa0
 800961e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009620:	3301      	adds	r3, #1
 8009622:	2b07      	cmp	r3, #7
 8009624:	9327      	str	r3, [sp, #156]	; 0x9c
 8009626:	f300 80e0 	bgt.w	80097ea <_vfprintf_r+0x11c6>
 800962a:	3408      	adds	r4, #8
 800962c:	9b08      	ldr	r3, [sp, #32]
 800962e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8009630:	eb09 0203 	add.w	r2, r9, r3
 8009634:	1b9e      	subs	r6, r3, r6
 8009636:	1b52      	subs	r2, r2, r5
 8009638:	4296      	cmp	r6, r2
 800963a:	bfa8      	it	ge
 800963c:	4616      	movge	r6, r2
 800963e:	2e00      	cmp	r6, #0
 8009640:	dd0b      	ble.n	800965a <_vfprintf_r+0x1036>
 8009642:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009644:	e9c4 5600 	strd	r5, r6, [r4]
 8009648:	4433      	add	r3, r6
 800964a:	9328      	str	r3, [sp, #160]	; 0xa0
 800964c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800964e:	3301      	adds	r3, #1
 8009650:	2b07      	cmp	r3, #7
 8009652:	9327      	str	r3, [sp, #156]	; 0x9c
 8009654:	f300 80d3 	bgt.w	80097fe <_vfprintf_r+0x11da>
 8009658:	3408      	adds	r4, #8
 800965a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800965c:	9b08      	ldr	r3, [sp, #32]
 800965e:	2e00      	cmp	r6, #0
 8009660:	eba3 0505 	sub.w	r5, r3, r5
 8009664:	bfa8      	it	ge
 8009666:	1bad      	subge	r5, r5, r6
 8009668:	2d00      	cmp	r5, #0
 800966a:	f77f abf6 	ble.w	8008e5a <_vfprintf_r+0x836>
 800966e:	f04f 0910 	mov.w	r9, #16
 8009672:	4e68      	ldr	r6, [pc, #416]	; (8009814 <_vfprintf_r+0x11f0>)
 8009674:	2d10      	cmp	r5, #16
 8009676:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800967a:	f104 0108 	add.w	r1, r4, #8
 800967e:	f103 0301 	add.w	r3, r3, #1
 8009682:	6026      	str	r6, [r4, #0]
 8009684:	f77f aecb 	ble.w	800941e <_vfprintf_r+0xdfa>
 8009688:	3210      	adds	r2, #16
 800968a:	2b07      	cmp	r3, #7
 800968c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009690:	f8c4 9004 	str.w	r9, [r4, #4]
 8009694:	dd08      	ble.n	80096a8 <_vfprintf_r+0x1084>
 8009696:	4651      	mov	r1, sl
 8009698:	4658      	mov	r0, fp
 800969a:	aa26      	add	r2, sp, #152	; 0x98
 800969c:	f002 fd43 	bl	800c126 <__sprint_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f040 8175 	bne.w	8009990 <_vfprintf_r+0x136c>
 80096a6:	a929      	add	r1, sp, #164	; 0xa4
 80096a8:	460c      	mov	r4, r1
 80096aa:	3d10      	subs	r5, #16
 80096ac:	e7e2      	b.n	8009674 <_vfprintf_r+0x1050>
 80096ae:	4651      	mov	r1, sl
 80096b0:	4658      	mov	r0, fp
 80096b2:	aa26      	add	r2, sp, #152	; 0x98
 80096b4:	f002 fd37 	bl	800c126 <__sprint_r>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	f040 8169 	bne.w	8009990 <_vfprintf_r+0x136c>
 80096be:	ac29      	add	r4, sp, #164	; 0xa4
 80096c0:	e76e      	b.n	80095a0 <_vfprintf_r+0xf7c>
 80096c2:	2010      	movs	r0, #16
 80096c4:	2b07      	cmp	r3, #7
 80096c6:	4402      	add	r2, r0
 80096c8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80096cc:	6060      	str	r0, [r4, #4]
 80096ce:	dd08      	ble.n	80096e2 <_vfprintf_r+0x10be>
 80096d0:	4651      	mov	r1, sl
 80096d2:	4658      	mov	r0, fp
 80096d4:	aa26      	add	r2, sp, #152	; 0x98
 80096d6:	f002 fd26 	bl	800c126 <__sprint_r>
 80096da:	2800      	cmp	r0, #0
 80096dc:	f040 8158 	bne.w	8009990 <_vfprintf_r+0x136c>
 80096e0:	a929      	add	r1, sp, #164	; 0xa4
 80096e2:	460c      	mov	r4, r1
 80096e4:	3e10      	subs	r6, #16
 80096e6:	e762      	b.n	80095ae <_vfprintf_r+0xf8a>
 80096e8:	460c      	mov	r4, r1
 80096ea:	e77a      	b.n	80095e2 <_vfprintf_r+0xfbe>
 80096ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d04b      	beq.n	800978a <_vfprintf_r+0x1166>
 80096f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096f4:	3b01      	subs	r3, #1
 80096f6:	930c      	str	r3, [sp, #48]	; 0x30
 80096f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009700:	6063      	str	r3, [r4, #4]
 8009702:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009704:	4413      	add	r3, r2
 8009706:	9328      	str	r3, [sp, #160]	; 0xa0
 8009708:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800970a:	3301      	adds	r3, #1
 800970c:	2b07      	cmp	r3, #7
 800970e:	9327      	str	r3, [sp, #156]	; 0x9c
 8009710:	dc42      	bgt.n	8009798 <_vfprintf_r+0x1174>
 8009712:	3408      	adds	r4, #8
 8009714:	9b08      	ldr	r3, [sp, #32]
 8009716:	444b      	add	r3, r9
 8009718:	1b5a      	subs	r2, r3, r5
 800971a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	4293      	cmp	r3, r2
 8009720:	bfa8      	it	ge
 8009722:	4613      	movge	r3, r2
 8009724:	2b00      	cmp	r3, #0
 8009726:	461e      	mov	r6, r3
 8009728:	dd0a      	ble.n	8009740 <_vfprintf_r+0x111c>
 800972a:	e9c4 5300 	strd	r5, r3, [r4]
 800972e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009730:	4433      	add	r3, r6
 8009732:	9328      	str	r3, [sp, #160]	; 0xa0
 8009734:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009736:	3301      	adds	r3, #1
 8009738:	2b07      	cmp	r3, #7
 800973a:	9327      	str	r3, [sp, #156]	; 0x9c
 800973c:	dc36      	bgt.n	80097ac <_vfprintf_r+0x1188>
 800973e:	3408      	adds	r4, #8
 8009740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009742:	2e00      	cmp	r6, #0
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	bfb4      	ite	lt
 8009748:	461e      	movlt	r6, r3
 800974a:	1b9e      	subge	r6, r3, r6
 800974c:	2e00      	cmp	r6, #0
 800974e:	dd18      	ble.n	8009782 <_vfprintf_r+0x115e>
 8009750:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8009754:	482f      	ldr	r0, [pc, #188]	; (8009814 <_vfprintf_r+0x11f0>)
 8009756:	2e10      	cmp	r6, #16
 8009758:	f102 0201 	add.w	r2, r2, #1
 800975c:	f104 0108 	add.w	r1, r4, #8
 8009760:	6020      	str	r0, [r4, #0]
 8009762:	dc2d      	bgt.n	80097c0 <_vfprintf_r+0x119c>
 8009764:	4433      	add	r3, r6
 8009766:	2a07      	cmp	r2, #7
 8009768:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800976c:	6066      	str	r6, [r4, #4]
 800976e:	dd3a      	ble.n	80097e6 <_vfprintf_r+0x11c2>
 8009770:	4651      	mov	r1, sl
 8009772:	4658      	mov	r0, fp
 8009774:	aa26      	add	r2, sp, #152	; 0x98
 8009776:	f002 fcd6 	bl	800c126 <__sprint_r>
 800977a:	2800      	cmp	r0, #0
 800977c:	f040 8108 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009780:	ac29      	add	r4, sp, #164	; 0xa4
 8009782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	441d      	add	r5, r3
 8009788:	e72f      	b.n	80095ea <_vfprintf_r+0xfc6>
 800978a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800978c:	3b01      	subs	r3, #1
 800978e:	930e      	str	r3, [sp, #56]	; 0x38
 8009790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009792:	3b01      	subs	r3, #1
 8009794:	930d      	str	r3, [sp, #52]	; 0x34
 8009796:	e7af      	b.n	80096f8 <_vfprintf_r+0x10d4>
 8009798:	4651      	mov	r1, sl
 800979a:	4658      	mov	r0, fp
 800979c:	aa26      	add	r2, sp, #152	; 0x98
 800979e:	f002 fcc2 	bl	800c126 <__sprint_r>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	f040 80f4 	bne.w	8009990 <_vfprintf_r+0x136c>
 80097a8:	ac29      	add	r4, sp, #164	; 0xa4
 80097aa:	e7b3      	b.n	8009714 <_vfprintf_r+0x10f0>
 80097ac:	4651      	mov	r1, sl
 80097ae:	4658      	mov	r0, fp
 80097b0:	aa26      	add	r2, sp, #152	; 0x98
 80097b2:	f002 fcb8 	bl	800c126 <__sprint_r>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f040 80ea 	bne.w	8009990 <_vfprintf_r+0x136c>
 80097bc:	ac29      	add	r4, sp, #164	; 0xa4
 80097be:	e7bf      	b.n	8009740 <_vfprintf_r+0x111c>
 80097c0:	2010      	movs	r0, #16
 80097c2:	2a07      	cmp	r2, #7
 80097c4:	4403      	add	r3, r0
 80097c6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80097ca:	6060      	str	r0, [r4, #4]
 80097cc:	dd08      	ble.n	80097e0 <_vfprintf_r+0x11bc>
 80097ce:	4651      	mov	r1, sl
 80097d0:	4658      	mov	r0, fp
 80097d2:	aa26      	add	r2, sp, #152	; 0x98
 80097d4:	f002 fca7 	bl	800c126 <__sprint_r>
 80097d8:	2800      	cmp	r0, #0
 80097da:	f040 80d9 	bne.w	8009990 <_vfprintf_r+0x136c>
 80097de:	a929      	add	r1, sp, #164	; 0xa4
 80097e0:	460c      	mov	r4, r1
 80097e2:	3e10      	subs	r6, #16
 80097e4:	e7b4      	b.n	8009750 <_vfprintf_r+0x112c>
 80097e6:	460c      	mov	r4, r1
 80097e8:	e7cb      	b.n	8009782 <_vfprintf_r+0x115e>
 80097ea:	4651      	mov	r1, sl
 80097ec:	4658      	mov	r0, fp
 80097ee:	aa26      	add	r2, sp, #152	; 0x98
 80097f0:	f002 fc99 	bl	800c126 <__sprint_r>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f040 80cb 	bne.w	8009990 <_vfprintf_r+0x136c>
 80097fa:	ac29      	add	r4, sp, #164	; 0xa4
 80097fc:	e716      	b.n	800962c <_vfprintf_r+0x1008>
 80097fe:	4651      	mov	r1, sl
 8009800:	4658      	mov	r0, fp
 8009802:	aa26      	add	r2, sp, #152	; 0x98
 8009804:	f002 fc8f 	bl	800c126 <__sprint_r>
 8009808:	2800      	cmp	r0, #0
 800980a:	f040 80c1 	bne.w	8009990 <_vfprintf_r+0x136c>
 800980e:	ac29      	add	r4, sp, #164	; 0xa4
 8009810:	e723      	b.n	800965a <_vfprintf_r+0x1036>
 8009812:	bf00      	nop
 8009814:	0800d4d4 	.word	0x0800d4d4
 8009818:	9a08      	ldr	r2, [sp, #32]
 800981a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800981c:	2a01      	cmp	r2, #1
 800981e:	f106 0601 	add.w	r6, r6, #1
 8009822:	f103 0301 	add.w	r3, r3, #1
 8009826:	f104 0508 	add.w	r5, r4, #8
 800982a:	dc03      	bgt.n	8009834 <_vfprintf_r+0x1210>
 800982c:	f018 0f01 	tst.w	r8, #1
 8009830:	f000 8081 	beq.w	8009936 <_vfprintf_r+0x1312>
 8009834:	2201      	movs	r2, #1
 8009836:	2b07      	cmp	r3, #7
 8009838:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 800983c:	f8c4 9000 	str.w	r9, [r4]
 8009840:	6062      	str	r2, [r4, #4]
 8009842:	dd08      	ble.n	8009856 <_vfprintf_r+0x1232>
 8009844:	4651      	mov	r1, sl
 8009846:	4658      	mov	r0, fp
 8009848:	aa26      	add	r2, sp, #152	; 0x98
 800984a:	f002 fc6c 	bl	800c126 <__sprint_r>
 800984e:	2800      	cmp	r0, #0
 8009850:	f040 809e 	bne.w	8009990 <_vfprintf_r+0x136c>
 8009854:	ad29      	add	r5, sp, #164	; 0xa4
 8009856:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009858:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800985e:	606b      	str	r3, [r5, #4]
 8009860:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009862:	4413      	add	r3, r2
 8009864:	9328      	str	r3, [sp, #160]	; 0xa0
 8009866:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009868:	3301      	adds	r3, #1
 800986a:	2b07      	cmp	r3, #7
 800986c:	9327      	str	r3, [sp, #156]	; 0x9c
 800986e:	dc32      	bgt.n	80098d6 <_vfprintf_r+0x12b2>
 8009870:	3508      	adds	r5, #8
 8009872:	9b08      	ldr	r3, [sp, #32]
 8009874:	2200      	movs	r2, #0
 8009876:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800987a:	1e5c      	subs	r4, r3, #1
 800987c:	2300      	movs	r3, #0
 800987e:	f7f7 f89d 	bl	80009bc <__aeabi_dcmpeq>
 8009882:	2800      	cmp	r0, #0
 8009884:	d130      	bne.n	80098e8 <_vfprintf_r+0x12c4>
 8009886:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009888:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800988a:	9a08      	ldr	r2, [sp, #32]
 800988c:	3101      	adds	r1, #1
 800988e:	3b01      	subs	r3, #1
 8009890:	f109 0001 	add.w	r0, r9, #1
 8009894:	4413      	add	r3, r2
 8009896:	2907      	cmp	r1, #7
 8009898:	e9c5 0400 	strd	r0, r4, [r5]
 800989c:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 80098a0:	dd52      	ble.n	8009948 <_vfprintf_r+0x1324>
 80098a2:	4651      	mov	r1, sl
 80098a4:	4658      	mov	r0, fp
 80098a6:	aa26      	add	r2, sp, #152	; 0x98
 80098a8:	f002 fc3d 	bl	800c126 <__sprint_r>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d16f      	bne.n	8009990 <_vfprintf_r+0x136c>
 80098b0:	ad29      	add	r5, sp, #164	; 0xa4
 80098b2:	ab22      	add	r3, sp, #136	; 0x88
 80098b4:	602b      	str	r3, [r5, #0]
 80098b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80098b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098ba:	606b      	str	r3, [r5, #4]
 80098bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80098be:	4413      	add	r3, r2
 80098c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80098c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80098c4:	3301      	adds	r3, #1
 80098c6:	2b07      	cmp	r3, #7
 80098c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80098ca:	f73f adaf 	bgt.w	800942c <_vfprintf_r+0xe08>
 80098ce:	f105 0408 	add.w	r4, r5, #8
 80098d2:	f7ff bac2 	b.w	8008e5a <_vfprintf_r+0x836>
 80098d6:	4651      	mov	r1, sl
 80098d8:	4658      	mov	r0, fp
 80098da:	aa26      	add	r2, sp, #152	; 0x98
 80098dc:	f002 fc23 	bl	800c126 <__sprint_r>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d155      	bne.n	8009990 <_vfprintf_r+0x136c>
 80098e4:	ad29      	add	r5, sp, #164	; 0xa4
 80098e6:	e7c4      	b.n	8009872 <_vfprintf_r+0x124e>
 80098e8:	2c00      	cmp	r4, #0
 80098ea:	dde2      	ble.n	80098b2 <_vfprintf_r+0x128e>
 80098ec:	f04f 0910 	mov.w	r9, #16
 80098f0:	4e5a      	ldr	r6, [pc, #360]	; (8009a5c <_vfprintf_r+0x1438>)
 80098f2:	2c10      	cmp	r4, #16
 80098f4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80098f8:	f105 0108 	add.w	r1, r5, #8
 80098fc:	f103 0301 	add.w	r3, r3, #1
 8009900:	602e      	str	r6, [r5, #0]
 8009902:	dc07      	bgt.n	8009914 <_vfprintf_r+0x12f0>
 8009904:	606c      	str	r4, [r5, #4]
 8009906:	2b07      	cmp	r3, #7
 8009908:	4414      	add	r4, r2
 800990a:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800990e:	dcc8      	bgt.n	80098a2 <_vfprintf_r+0x127e>
 8009910:	460d      	mov	r5, r1
 8009912:	e7ce      	b.n	80098b2 <_vfprintf_r+0x128e>
 8009914:	3210      	adds	r2, #16
 8009916:	2b07      	cmp	r3, #7
 8009918:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800991c:	f8c5 9004 	str.w	r9, [r5, #4]
 8009920:	dd06      	ble.n	8009930 <_vfprintf_r+0x130c>
 8009922:	4651      	mov	r1, sl
 8009924:	4658      	mov	r0, fp
 8009926:	aa26      	add	r2, sp, #152	; 0x98
 8009928:	f002 fbfd 	bl	800c126 <__sprint_r>
 800992c:	bb80      	cbnz	r0, 8009990 <_vfprintf_r+0x136c>
 800992e:	a929      	add	r1, sp, #164	; 0xa4
 8009930:	460d      	mov	r5, r1
 8009932:	3c10      	subs	r4, #16
 8009934:	e7dd      	b.n	80098f2 <_vfprintf_r+0x12ce>
 8009936:	2201      	movs	r2, #1
 8009938:	2b07      	cmp	r3, #7
 800993a:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 800993e:	f8c4 9000 	str.w	r9, [r4]
 8009942:	6062      	str	r2, [r4, #4]
 8009944:	ddb5      	ble.n	80098b2 <_vfprintf_r+0x128e>
 8009946:	e7ac      	b.n	80098a2 <_vfprintf_r+0x127e>
 8009948:	3508      	adds	r5, #8
 800994a:	e7b2      	b.n	80098b2 <_vfprintf_r+0x128e>
 800994c:	460c      	mov	r4, r1
 800994e:	f7ff ba84 	b.w	8008e5a <_vfprintf_r+0x836>
 8009952:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8009956:	1a9d      	subs	r5, r3, r2
 8009958:	2d00      	cmp	r5, #0
 800995a:	f77f aa82 	ble.w	8008e62 <_vfprintf_r+0x83e>
 800995e:	f04f 0810 	mov.w	r8, #16
 8009962:	4e3f      	ldr	r6, [pc, #252]	; (8009a60 <_vfprintf_r+0x143c>)
 8009964:	2d10      	cmp	r5, #16
 8009966:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800996a:	6026      	str	r6, [r4, #0]
 800996c:	f103 0301 	add.w	r3, r3, #1
 8009970:	dc17      	bgt.n	80099a2 <_vfprintf_r+0x137e>
 8009972:	6065      	str	r5, [r4, #4]
 8009974:	2b07      	cmp	r3, #7
 8009976:	4415      	add	r5, r2
 8009978:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800997c:	f77f aa71 	ble.w	8008e62 <_vfprintf_r+0x83e>
 8009980:	4651      	mov	r1, sl
 8009982:	4658      	mov	r0, fp
 8009984:	aa26      	add	r2, sp, #152	; 0x98
 8009986:	f002 fbce 	bl	800c126 <__sprint_r>
 800998a:	2800      	cmp	r0, #0
 800998c:	f43f aa69 	beq.w	8008e62 <_vfprintf_r+0x83e>
 8009990:	2f00      	cmp	r7, #0
 8009992:	f43f a884 	beq.w	8008a9e <_vfprintf_r+0x47a>
 8009996:	4639      	mov	r1, r7
 8009998:	4658      	mov	r0, fp
 800999a:	f001 f8e1 	bl	800ab60 <_free_r>
 800999e:	f7ff b87e 	b.w	8008a9e <_vfprintf_r+0x47a>
 80099a2:	3210      	adds	r2, #16
 80099a4:	2b07      	cmp	r3, #7
 80099a6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80099aa:	f8c4 8004 	str.w	r8, [r4, #4]
 80099ae:	dc02      	bgt.n	80099b6 <_vfprintf_r+0x1392>
 80099b0:	3408      	adds	r4, #8
 80099b2:	3d10      	subs	r5, #16
 80099b4:	e7d6      	b.n	8009964 <_vfprintf_r+0x1340>
 80099b6:	4651      	mov	r1, sl
 80099b8:	4658      	mov	r0, fp
 80099ba:	aa26      	add	r2, sp, #152	; 0x98
 80099bc:	f002 fbb3 	bl	800c126 <__sprint_r>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d1e5      	bne.n	8009990 <_vfprintf_r+0x136c>
 80099c4:	ac29      	add	r4, sp, #164	; 0xa4
 80099c6:	e7f4      	b.n	80099b2 <_vfprintf_r+0x138e>
 80099c8:	4639      	mov	r1, r7
 80099ca:	4658      	mov	r0, fp
 80099cc:	f001 f8c8 	bl	800ab60 <_free_r>
 80099d0:	f7ff ba5e 	b.w	8008e90 <_vfprintf_r+0x86c>
 80099d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80099d6:	b91b      	cbnz	r3, 80099e0 <_vfprintf_r+0x13bc>
 80099d8:	2300      	movs	r3, #0
 80099da:	9327      	str	r3, [sp, #156]	; 0x9c
 80099dc:	f7ff b85f 	b.w	8008a9e <_vfprintf_r+0x47a>
 80099e0:	4651      	mov	r1, sl
 80099e2:	4658      	mov	r0, fp
 80099e4:	aa26      	add	r2, sp, #152	; 0x98
 80099e6:	f002 fb9e 	bl	800c126 <__sprint_r>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d0f4      	beq.n	80099d8 <_vfprintf_r+0x13b4>
 80099ee:	f7ff b856 	b.w	8008a9e <_vfprintf_r+0x47a>
 80099f2:	ea56 0207 	orrs.w	r2, r6, r7
 80099f6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80099fa:	f43f ab6a 	beq.w	80090d2 <_vfprintf_r+0xaae>
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	f43f abff 	beq.w	8009202 <_vfprintf_r+0xbde>
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8009a0a:	f43f ac47 	beq.w	800929c <_vfprintf_r+0xc78>
 8009a0e:	08f2      	lsrs	r2, r6, #3
 8009a10:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8009a14:	08f8      	lsrs	r0, r7, #3
 8009a16:	f006 0307 	and.w	r3, r6, #7
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	4616      	mov	r6, r2
 8009a1e:	3330      	adds	r3, #48	; 0x30
 8009a20:	ea56 0207 	orrs.w	r2, r6, r7
 8009a24:	4649      	mov	r1, r9
 8009a26:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8009a2a:	d1f0      	bne.n	8009a0e <_vfprintf_r+0x13ea>
 8009a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a2e:	07d0      	lsls	r0, r2, #31
 8009a30:	d506      	bpl.n	8009a40 <_vfprintf_r+0x141c>
 8009a32:	2b30      	cmp	r3, #48	; 0x30
 8009a34:	d004      	beq.n	8009a40 <_vfprintf_r+0x141c>
 8009a36:	2330      	movs	r3, #48	; 0x30
 8009a38:	f809 3c01 	strb.w	r3, [r9, #-1]
 8009a3c:	f1a1 0902 	sub.w	r9, r1, #2
 8009a40:	2700      	movs	r7, #0
 8009a42:	ab52      	add	r3, sp, #328	; 0x148
 8009a44:	eba3 0309 	sub.w	r3, r3, r9
 8009a48:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009a4c:	9e07      	ldr	r6, [sp, #28]
 8009a4e:	9307      	str	r3, [sp, #28]
 8009a50:	463d      	mov	r5, r7
 8009a52:	e9cd 770c 	strd	r7, r7, [sp, #48]	; 0x30
 8009a56:	f7ff b942 	b.w	8008cde <_vfprintf_r+0x6ba>
 8009a5a:	bf00      	nop
 8009a5c:	0800d4d4 	.word	0x0800d4d4
 8009a60:	0800d4c4 	.word	0x0800d4c4

08009a64 <__sbprintf>:
 8009a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a66:	461f      	mov	r7, r3
 8009a68:	898b      	ldrh	r3, [r1, #12]
 8009a6a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8009a6e:	f023 0302 	bic.w	r3, r3, #2
 8009a72:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a76:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009a78:	4615      	mov	r5, r2
 8009a7a:	9319      	str	r3, [sp, #100]	; 0x64
 8009a7c:	89cb      	ldrh	r3, [r1, #14]
 8009a7e:	4606      	mov	r6, r0
 8009a80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009a84:	69cb      	ldr	r3, [r1, #28]
 8009a86:	a816      	add	r0, sp, #88	; 0x58
 8009a88:	9307      	str	r3, [sp, #28]
 8009a8a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a90:	ab1a      	add	r3, sp, #104	; 0x68
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	9305      	str	r3, [sp, #20]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9306      	str	r3, [sp, #24]
 8009aa2:	f001 fa8b 	bl	800afbc <__retarget_lock_init_recursive>
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	463b      	mov	r3, r7
 8009aaa:	4669      	mov	r1, sp
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7fe fdb9 	bl	8008624 <_vfprintf_r>
 8009ab2:	1e05      	subs	r5, r0, #0
 8009ab4:	db07      	blt.n	8009ac6 <__sbprintf+0x62>
 8009ab6:	4669      	mov	r1, sp
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f000 ff55 	bl	800a968 <_fflush_r>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	bf18      	it	ne
 8009ac2:	f04f 35ff 	movne.w	r5, #4294967295
 8009ac6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009aca:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009acc:	065b      	lsls	r3, r3, #25
 8009ace:	bf42      	ittt	mi
 8009ad0:	89a3      	ldrhmi	r3, [r4, #12]
 8009ad2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009ad6:	81a3      	strhmi	r3, [r4, #12]
 8009ad8:	f001 fa71 	bl	800afbe <__retarget_lock_close_recursive>
 8009adc:	4628      	mov	r0, r5
 8009ade:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8009ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ae4 <__swsetup_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4b2a      	ldr	r3, [pc, #168]	; (8009b90 <__swsetup_r+0xac>)
 8009ae8:	4605      	mov	r5, r0
 8009aea:	6818      	ldr	r0, [r3, #0]
 8009aec:	460c      	mov	r4, r1
 8009aee:	b118      	cbz	r0, 8009af8 <__swsetup_r+0x14>
 8009af0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009af2:	b90b      	cbnz	r3, 8009af8 <__swsetup_r+0x14>
 8009af4:	f000 ffa4 	bl	800aa40 <__sinit>
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009afe:	0718      	lsls	r0, r3, #28
 8009b00:	d422      	bmi.n	8009b48 <__swsetup_r+0x64>
 8009b02:	06d9      	lsls	r1, r3, #27
 8009b04:	d407      	bmi.n	8009b16 <__swsetup_r+0x32>
 8009b06:	2309      	movs	r3, #9
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	e034      	b.n	8009b80 <__swsetup_r+0x9c>
 8009b16:	0758      	lsls	r0, r3, #29
 8009b18:	d512      	bpl.n	8009b40 <__swsetup_r+0x5c>
 8009b1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b1c:	b141      	cbz	r1, 8009b30 <__swsetup_r+0x4c>
 8009b1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009b22:	4299      	cmp	r1, r3
 8009b24:	d002      	beq.n	8009b2c <__swsetup_r+0x48>
 8009b26:	4628      	mov	r0, r5
 8009b28:	f001 f81a 	bl	800ab60 <_free_r>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	2300      	movs	r3, #0
 8009b3a:	6063      	str	r3, [r4, #4]
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f043 0308 	orr.w	r3, r3, #8
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	b94b      	cbnz	r3, 8009b60 <__swsetup_r+0x7c>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b56:	d003      	beq.n	8009b60 <__swsetup_r+0x7c>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f001 fa5e 	bl	800b01c <__smakebuf_r>
 8009b60:	89a0      	ldrh	r0, [r4, #12]
 8009b62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b66:	f010 0301 	ands.w	r3, r0, #1
 8009b6a:	d00a      	beq.n	8009b82 <__swsetup_r+0x9e>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60a3      	str	r3, [r4, #8]
 8009b70:	6963      	ldr	r3, [r4, #20]
 8009b72:	425b      	negs	r3, r3
 8009b74:	61a3      	str	r3, [r4, #24]
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	b943      	cbnz	r3, 8009b8c <__swsetup_r+0xa8>
 8009b7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b7e:	d1c4      	bne.n	8009b0a <__swsetup_r+0x26>
 8009b80:	bd38      	pop	{r3, r4, r5, pc}
 8009b82:	0781      	lsls	r1, r0, #30
 8009b84:	bf58      	it	pl
 8009b86:	6963      	ldrpl	r3, [r4, #20]
 8009b88:	60a3      	str	r3, [r4, #8]
 8009b8a:	e7f4      	b.n	8009b76 <__swsetup_r+0x92>
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	e7f7      	b.n	8009b80 <__swsetup_r+0x9c>
 8009b90:	200006ec 	.word	0x200006ec

08009b94 <register_fini>:
 8009b94:	4b02      	ldr	r3, [pc, #8]	; (8009ba0 <register_fini+0xc>)
 8009b96:	b113      	cbz	r3, 8009b9e <register_fini+0xa>
 8009b98:	4802      	ldr	r0, [pc, #8]	; (8009ba4 <register_fini+0x10>)
 8009b9a:	f000 b805 	b.w	8009ba8 <atexit>
 8009b9e:	4770      	bx	lr
 8009ba0:	00000000 	.word	0x00000000
 8009ba4:	0800aa91 	.word	0x0800aa91

08009ba8 <atexit>:
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4601      	mov	r1, r0
 8009bac:	461a      	mov	r2, r3
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f003 b808 	b.w	800cbc4 <__register_exitproc>

08009bb4 <quorem>:
 8009bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	6903      	ldr	r3, [r0, #16]
 8009bba:	690c      	ldr	r4, [r1, #16]
 8009bbc:	4607      	mov	r7, r0
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	f2c0 8083 	blt.w	8009cca <quorem+0x116>
 8009bc4:	3c01      	subs	r4, #1
 8009bc6:	f100 0514 	add.w	r5, r0, #20
 8009bca:	f101 0814 	add.w	r8, r1, #20
 8009bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	429a      	cmp	r2, r3
 8009be0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009be4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009be8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bec:	d332      	bcc.n	8009c54 <quorem+0xa0>
 8009bee:	f04f 0e00 	mov.w	lr, #0
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	46ac      	mov	ip, r5
 8009bf6:	46f2      	mov	sl, lr
 8009bf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bfc:	b293      	uxth	r3, r2
 8009bfe:	fb06 e303 	mla	r3, r6, r3, lr
 8009c02:	0c12      	lsrs	r2, r2, #16
 8009c04:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c08:	fb06 e202 	mla	r2, r6, r2, lr
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	ebaa 0303 	sub.w	r3, sl, r3
 8009c12:	f8dc a000 	ldr.w	sl, [ip]
 8009c16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c1a:	fa1f fa8a 	uxth.w	sl, sl
 8009c1e:	4453      	add	r3, sl
 8009c20:	fa1f fa82 	uxth.w	sl, r2
 8009c24:	f8dc 2000 	ldr.w	r2, [ip]
 8009c28:	4581      	cmp	r9, r0
 8009c2a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009c2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c38:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c3c:	f84c 3b04 	str.w	r3, [ip], #4
 8009c40:	d2da      	bcs.n	8009bf8 <quorem+0x44>
 8009c42:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c46:	b92b      	cbnz	r3, 8009c54 <quorem+0xa0>
 8009c48:	9b01      	ldr	r3, [sp, #4]
 8009c4a:	3b04      	subs	r3, #4
 8009c4c:	429d      	cmp	r5, r3
 8009c4e:	461a      	mov	r2, r3
 8009c50:	d32f      	bcc.n	8009cb2 <quorem+0xfe>
 8009c52:	613c      	str	r4, [r7, #16]
 8009c54:	4638      	mov	r0, r7
 8009c56:	f001 fed9 	bl	800ba0c <__mcmp>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	db25      	blt.n	8009caa <quorem+0xf6>
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f04f 0c00 	mov.w	ip, #0
 8009c64:	3601      	adds	r6, #1
 8009c66:	f858 1b04 	ldr.w	r1, [r8], #4
 8009c6a:	f8d0 e000 	ldr.w	lr, [r0]
 8009c6e:	b28b      	uxth	r3, r1
 8009c70:	ebac 0303 	sub.w	r3, ip, r3
 8009c74:	fa1f f28e 	uxth.w	r2, lr
 8009c78:	4413      	add	r3, r2
 8009c7a:	0c0a      	lsrs	r2, r1, #16
 8009c7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c8a:	45c1      	cmp	r9, r8
 8009c8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c90:	f840 3b04 	str.w	r3, [r0], #4
 8009c94:	d2e7      	bcs.n	8009c66 <quorem+0xb2>
 8009c96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c9e:	b922      	cbnz	r2, 8009caa <quorem+0xf6>
 8009ca0:	3b04      	subs	r3, #4
 8009ca2:	429d      	cmp	r5, r3
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	d30a      	bcc.n	8009cbe <quorem+0x10a>
 8009ca8:	613c      	str	r4, [r7, #16]
 8009caa:	4630      	mov	r0, r6
 8009cac:	b003      	add	sp, #12
 8009cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	6812      	ldr	r2, [r2, #0]
 8009cb4:	3b04      	subs	r3, #4
 8009cb6:	2a00      	cmp	r2, #0
 8009cb8:	d1cb      	bne.n	8009c52 <quorem+0x9e>
 8009cba:	3c01      	subs	r4, #1
 8009cbc:	e7c6      	b.n	8009c4c <quorem+0x98>
 8009cbe:	6812      	ldr	r2, [r2, #0]
 8009cc0:	3b04      	subs	r3, #4
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	d1f0      	bne.n	8009ca8 <quorem+0xf4>
 8009cc6:	3c01      	subs	r4, #1
 8009cc8:	e7eb      	b.n	8009ca2 <quorem+0xee>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e7ee      	b.n	8009cac <quorem+0xf8>
	...

08009cd0 <_dtoa_r>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009cd6:	b097      	sub	sp, #92	; 0x5c
 8009cd8:	4681      	mov	r9, r0
 8009cda:	4614      	mov	r4, r2
 8009cdc:	461d      	mov	r5, r3
 8009cde:	4692      	mov	sl, r2
 8009ce0:	469b      	mov	fp, r3
 8009ce2:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8009ce4:	b149      	cbz	r1, 8009cfa <_dtoa_r+0x2a>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cea:	4093      	lsls	r3, r2
 8009cec:	608b      	str	r3, [r1, #8]
 8009cee:	604a      	str	r2, [r1, #4]
 8009cf0:	f001 fc85 	bl	800b5fe <_Bfree>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8009cfa:	1e2b      	subs	r3, r5, #0
 8009cfc:	bfad      	iteet	ge
 8009cfe:	2300      	movge	r3, #0
 8009d00:	2201      	movlt	r2, #1
 8009d02:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009d06:	6033      	strge	r3, [r6, #0]
 8009d08:	4ba3      	ldr	r3, [pc, #652]	; (8009f98 <_dtoa_r+0x2c8>)
 8009d0a:	bfb8      	it	lt
 8009d0c:	6032      	strlt	r2, [r6, #0]
 8009d0e:	ea33 030b 	bics.w	r3, r3, fp
 8009d12:	f8cd b00c 	str.w	fp, [sp, #12]
 8009d16:	d119      	bne.n	8009d4c <_dtoa_r+0x7c>
 8009d18:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d1e:	6013      	str	r3, [r2, #0]
 8009d20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d24:	4323      	orrs	r3, r4
 8009d26:	f000 857b 	beq.w	800a820 <_dtoa_r+0xb50>
 8009d2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009d2c:	b90b      	cbnz	r3, 8009d32 <_dtoa_r+0x62>
 8009d2e:	4b9b      	ldr	r3, [pc, #620]	; (8009f9c <_dtoa_r+0x2cc>)
 8009d30:	e020      	b.n	8009d74 <_dtoa_r+0xa4>
 8009d32:	4b9a      	ldr	r3, [pc, #616]	; (8009f9c <_dtoa_r+0x2cc>)
 8009d34:	9306      	str	r3, [sp, #24]
 8009d36:	3303      	adds	r3, #3
 8009d38:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	9806      	ldr	r0, [sp, #24]
 8009d3e:	b017      	add	sp, #92	; 0x5c
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	4b96      	ldr	r3, [pc, #600]	; (8009fa0 <_dtoa_r+0x2d0>)
 8009d46:	9306      	str	r3, [sp, #24]
 8009d48:	3308      	adds	r3, #8
 8009d4a:	e7f5      	b.n	8009d38 <_dtoa_r+0x68>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4650      	mov	r0, sl
 8009d52:	4659      	mov	r1, fp
 8009d54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8009d58:	f7f6 fe30 	bl	80009bc <__aeabi_dcmpeq>
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	b158      	cbz	r0, 8009d78 <_dtoa_r+0xa8>
 8009d60:	2301      	movs	r3, #1
 8009d62:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 8556 	beq.w	800a81a <_dtoa_r+0xb4a>
 8009d6e:	488d      	ldr	r0, [pc, #564]	; (8009fa4 <_dtoa_r+0x2d4>)
 8009d70:	6018      	str	r0, [r3, #0]
 8009d72:	1e43      	subs	r3, r0, #1
 8009d74:	9306      	str	r3, [sp, #24]
 8009d76:	e7e1      	b.n	8009d3c <_dtoa_r+0x6c>
 8009d78:	ab14      	add	r3, sp, #80	; 0x50
 8009d7a:	9301      	str	r3, [sp, #4]
 8009d7c:	ab15      	add	r3, sp, #84	; 0x54
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	4648      	mov	r0, r9
 8009d82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d86:	f001 feed 	bl	800bb64 <__d2b>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	4680      	mov	r8, r0
 8009d8e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8009d92:	2e00      	cmp	r6, #0
 8009d94:	d07f      	beq.n	8009e96 <_dtoa_r+0x1c6>
 8009d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8009da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009da4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009da8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009dac:	9713      	str	r7, [sp, #76]	; 0x4c
 8009dae:	2200      	movs	r2, #0
 8009db0:	4b7d      	ldr	r3, [pc, #500]	; (8009fa8 <_dtoa_r+0x2d8>)
 8009db2:	f7f6 f9e3 	bl	800017c <__aeabi_dsub>
 8009db6:	a372      	add	r3, pc, #456	; (adr r3, 8009f80 <_dtoa_r+0x2b0>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f7f6 fb96 	bl	80004ec <__aeabi_dmul>
 8009dc0:	a371      	add	r3, pc, #452	; (adr r3, 8009f88 <_dtoa_r+0x2b8>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 f9db 	bl	8000180 <__adddf3>
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4630      	mov	r0, r6
 8009dce:	460d      	mov	r5, r1
 8009dd0:	f7f6 fb22 	bl	8000418 <__aeabi_i2d>
 8009dd4:	a36e      	add	r3, pc, #440	; (adr r3, 8009f90 <_dtoa_r+0x2c0>)
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	f7f6 fb87 	bl	80004ec <__aeabi_dmul>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4620      	mov	r0, r4
 8009de4:	4629      	mov	r1, r5
 8009de6:	f7f6 f9cb 	bl	8000180 <__adddf3>
 8009dea:	4604      	mov	r4, r0
 8009dec:	460d      	mov	r5, r1
 8009dee:	f7f6 fe2d 	bl	8000a4c <__aeabi_d2iz>
 8009df2:	2200      	movs	r2, #0
 8009df4:	9003      	str	r0, [sp, #12]
 8009df6:	2300      	movs	r3, #0
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 fde8 	bl	80009d0 <__aeabi_dcmplt>
 8009e00:	b150      	cbz	r0, 8009e18 <_dtoa_r+0x148>
 8009e02:	9803      	ldr	r0, [sp, #12]
 8009e04:	f7f6 fb08 	bl	8000418 <__aeabi_i2d>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	462b      	mov	r3, r5
 8009e0c:	f7f6 fdd6 	bl	80009bc <__aeabi_dcmpeq>
 8009e10:	b910      	cbnz	r0, 8009e18 <_dtoa_r+0x148>
 8009e12:	9b03      	ldr	r3, [sp, #12]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	9303      	str	r3, [sp, #12]
 8009e18:	9b03      	ldr	r3, [sp, #12]
 8009e1a:	2b16      	cmp	r3, #22
 8009e1c:	d858      	bhi.n	8009ed0 <_dtoa_r+0x200>
 8009e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e22:	9a03      	ldr	r2, [sp, #12]
 8009e24:	4b61      	ldr	r3, [pc, #388]	; (8009fac <_dtoa_r+0x2dc>)
 8009e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f7f6 fdcf 	bl	80009d0 <__aeabi_dcmplt>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d04e      	beq.n	8009ed4 <_dtoa_r+0x204>
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e42:	1b9e      	subs	r6, r3, r6
 8009e44:	1e73      	subs	r3, r6, #1
 8009e46:	9309      	str	r3, [sp, #36]	; 0x24
 8009e48:	bf49      	itett	mi
 8009e4a:	f1c6 0301 	rsbmi	r3, r6, #1
 8009e4e:	2300      	movpl	r3, #0
 8009e50:	9308      	strmi	r3, [sp, #32]
 8009e52:	2300      	movmi	r3, #0
 8009e54:	bf54      	ite	pl
 8009e56:	9308      	strpl	r3, [sp, #32]
 8009e58:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	db3b      	blt.n	8009ed8 <_dtoa_r+0x208>
 8009e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e62:	9a03      	ldr	r2, [sp, #12]
 8009e64:	4413      	add	r3, r2
 8009e66:	9309      	str	r3, [sp, #36]	; 0x24
 8009e68:	2300      	movs	r3, #0
 8009e6a:	920e      	str	r2, [sp, #56]	; 0x38
 8009e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009e70:	2b09      	cmp	r3, #9
 8009e72:	d86b      	bhi.n	8009f4c <_dtoa_r+0x27c>
 8009e74:	2b05      	cmp	r3, #5
 8009e76:	bfc4      	itt	gt
 8009e78:	3b04      	subgt	r3, #4
 8009e7a:	9320      	strgt	r3, [sp, #128]	; 0x80
 8009e7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009e7e:	bfc8      	it	gt
 8009e80:	2400      	movgt	r4, #0
 8009e82:	f1a3 0302 	sub.w	r3, r3, #2
 8009e86:	bfd8      	it	le
 8009e88:	2401      	movle	r4, #1
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d869      	bhi.n	8009f62 <_dtoa_r+0x292>
 8009e8e:	e8df f003 	tbb	[pc, r3]
 8009e92:	392c      	.short	0x392c
 8009e94:	5b37      	.short	0x5b37
 8009e96:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 8009e9a:	441e      	add	r6, r3
 8009e9c:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	dd10      	ble.n	8009ec6 <_dtoa_r+0x1f6>
 8009ea4:	9a03      	ldr	r2, [sp, #12]
 8009ea6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009eaa:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8009eae:	409a      	lsls	r2, r3
 8009eb0:	fa24 f000 	lsr.w	r0, r4, r0
 8009eb4:	4310      	orrs	r0, r2
 8009eb6:	f7f6 fa9f 	bl	80003f8 <__aeabi_ui2d>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009ec0:	3e01      	subs	r6, #1
 8009ec2:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ec4:	e773      	b.n	8009dae <_dtoa_r+0xde>
 8009ec6:	f1c3 0320 	rsb	r3, r3, #32
 8009eca:	fa04 f003 	lsl.w	r0, r4, r3
 8009ece:	e7f2      	b.n	8009eb6 <_dtoa_r+0x1e6>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e7b4      	b.n	8009e3e <_dtoa_r+0x16e>
 8009ed4:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ed6:	e7b3      	b.n	8009e40 <_dtoa_r+0x170>
 8009ed8:	9b08      	ldr	r3, [sp, #32]
 8009eda:	9a03      	ldr	r2, [sp, #12]
 8009edc:	1a9b      	subs	r3, r3, r2
 8009ede:	9308      	str	r3, [sp, #32]
 8009ee0:	4253      	negs	r3, r2
 8009ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ee8:	e7c1      	b.n	8009e6e <_dtoa_r+0x19e>
 8009eea:	2300      	movs	r3, #0
 8009eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	dc39      	bgt.n	8009f68 <_dtoa_r+0x298>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	9304      	str	r3, [sp, #16]
 8009efa:	9307      	str	r3, [sp, #28]
 8009efc:	9221      	str	r2, [sp, #132]	; 0x84
 8009efe:	e00c      	b.n	8009f1a <_dtoa_r+0x24a>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e7f3      	b.n	8009eec <_dtoa_r+0x21c>
 8009f04:	2300      	movs	r3, #0
 8009f06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f0a:	9b03      	ldr	r3, [sp, #12]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	9304      	str	r3, [sp, #16]
 8009f10:	3301      	adds	r3, #1
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	9307      	str	r3, [sp, #28]
 8009f16:	bfb8      	it	lt
 8009f18:	2301      	movlt	r3, #1
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 8009f20:	2204      	movs	r2, #4
 8009f22:	f102 0014 	add.w	r0, r2, #20
 8009f26:	4298      	cmp	r0, r3
 8009f28:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8009f2c:	d920      	bls.n	8009f70 <_dtoa_r+0x2a0>
 8009f2e:	4648      	mov	r0, r9
 8009f30:	f001 fb40 	bl	800b5b4 <_Balloc>
 8009f34:	9006      	str	r0, [sp, #24]
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d13e      	bne.n	8009fb8 <_dtoa_r+0x2e8>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f40:	4b1b      	ldr	r3, [pc, #108]	; (8009fb0 <_dtoa_r+0x2e0>)
 8009f42:	481c      	ldr	r0, [pc, #112]	; (8009fb4 <_dtoa_r+0x2e4>)
 8009f44:	f002 fe7e 	bl	800cc44 <__assert_func>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e7dc      	b.n	8009f06 <_dtoa_r+0x236>
 8009f4c:	2401      	movs	r4, #1
 8009f4e:	2300      	movs	r3, #0
 8009f50:	940b      	str	r4, [sp, #44]	; 0x2c
 8009f52:	9320      	str	r3, [sp, #128]	; 0x80
 8009f54:	f04f 33ff 	mov.w	r3, #4294967295
 8009f58:	2200      	movs	r2, #0
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	9307      	str	r3, [sp, #28]
 8009f5e:	2312      	movs	r3, #18
 8009f60:	e7cc      	b.n	8009efc <_dtoa_r+0x22c>
 8009f62:	2301      	movs	r3, #1
 8009f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f66:	e7f5      	b.n	8009f54 <_dtoa_r+0x284>
 8009f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	9307      	str	r3, [sp, #28]
 8009f6e:	e7d4      	b.n	8009f1a <_dtoa_r+0x24a>
 8009f70:	3101      	adds	r1, #1
 8009f72:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8009f76:	0052      	lsls	r2, r2, #1
 8009f78:	e7d3      	b.n	8009f22 <_dtoa_r+0x252>
 8009f7a:	bf00      	nop
 8009f7c:	f3af 8000 	nop.w
 8009f80:	636f4361 	.word	0x636f4361
 8009f84:	3fd287a7 	.word	0x3fd287a7
 8009f88:	8b60c8b3 	.word	0x8b60c8b3
 8009f8c:	3fc68a28 	.word	0x3fc68a28
 8009f90:	509f79fb 	.word	0x509f79fb
 8009f94:	3fd34413 	.word	0x3fd34413
 8009f98:	7ff00000 	.word	0x7ff00000
 8009f9c:	0800d4e4 	.word	0x0800d4e4
 8009fa0:	0800d4e8 	.word	0x0800d4e8
 8009fa4:	0800d4c3 	.word	0x0800d4c3
 8009fa8:	3ff80000 	.word	0x3ff80000
 8009fac:	0800d5f0 	.word	0x0800d5f0
 8009fb0:	0800d4f1 	.word	0x0800d4f1
 8009fb4:	0800d502 	.word	0x0800d502
 8009fb8:	9b06      	ldr	r3, [sp, #24]
 8009fba:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8009fbe:	9b07      	ldr	r3, [sp, #28]
 8009fc0:	2b0e      	cmp	r3, #14
 8009fc2:	f200 80a1 	bhi.w	800a108 <_dtoa_r+0x438>
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	f000 809e 	beq.w	800a108 <_dtoa_r+0x438>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dd34      	ble.n	800a03c <_dtoa_r+0x36c>
 8009fd2:	4a96      	ldr	r2, [pc, #600]	; (800a22c <_dtoa_r+0x55c>)
 8009fd4:	f003 030f 	and.w	r3, r3, #15
 8009fd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fe0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	05d8      	lsls	r0, r3, #23
 8009fe8:	ea4f 1523 	mov.w	r5, r3, asr #4
 8009fec:	d516      	bpl.n	800a01c <_dtoa_r+0x34c>
 8009fee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ff2:	4b8f      	ldr	r3, [pc, #572]	; (800a230 <_dtoa_r+0x560>)
 8009ff4:	2603      	movs	r6, #3
 8009ff6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ffa:	f7f6 fba1 	bl	8000740 <__aeabi_ddiv>
 8009ffe:	4682      	mov	sl, r0
 800a000:	468b      	mov	fp, r1
 800a002:	f005 050f 	and.w	r5, r5, #15
 800a006:	4c8a      	ldr	r4, [pc, #552]	; (800a230 <_dtoa_r+0x560>)
 800a008:	b955      	cbnz	r5, 800a020 <_dtoa_r+0x350>
 800a00a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a00e:	4650      	mov	r0, sl
 800a010:	4659      	mov	r1, fp
 800a012:	f7f6 fb95 	bl	8000740 <__aeabi_ddiv>
 800a016:	4682      	mov	sl, r0
 800a018:	468b      	mov	fp, r1
 800a01a:	e028      	b.n	800a06e <_dtoa_r+0x39e>
 800a01c:	2602      	movs	r6, #2
 800a01e:	e7f2      	b.n	800a006 <_dtoa_r+0x336>
 800a020:	07e9      	lsls	r1, r5, #31
 800a022:	d508      	bpl.n	800a036 <_dtoa_r+0x366>
 800a024:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a028:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a02c:	f7f6 fa5e 	bl	80004ec <__aeabi_dmul>
 800a030:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a034:	3601      	adds	r6, #1
 800a036:	106d      	asrs	r5, r5, #1
 800a038:	3408      	adds	r4, #8
 800a03a:	e7e5      	b.n	800a008 <_dtoa_r+0x338>
 800a03c:	f000 809f 	beq.w	800a17e <_dtoa_r+0x4ae>
 800a040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	2602      	movs	r6, #2
 800a048:	425c      	negs	r4, r3
 800a04a:	4b78      	ldr	r3, [pc, #480]	; (800a22c <_dtoa_r+0x55c>)
 800a04c:	f004 020f 	and.w	r2, r4, #15
 800a050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	f7f6 fa48 	bl	80004ec <__aeabi_dmul>
 800a05c:	2300      	movs	r3, #0
 800a05e:	4682      	mov	sl, r0
 800a060:	468b      	mov	fp, r1
 800a062:	4d73      	ldr	r5, [pc, #460]	; (800a230 <_dtoa_r+0x560>)
 800a064:	1124      	asrs	r4, r4, #4
 800a066:	2c00      	cmp	r4, #0
 800a068:	d17e      	bne.n	800a168 <_dtoa_r+0x498>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1d3      	bne.n	800a016 <_dtoa_r+0x346>
 800a06e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 8086 	beq.w	800a182 <_dtoa_r+0x4b2>
 800a076:	2200      	movs	r2, #0
 800a078:	4650      	mov	r0, sl
 800a07a:	4659      	mov	r1, fp
 800a07c:	4b6d      	ldr	r3, [pc, #436]	; (800a234 <_dtoa_r+0x564>)
 800a07e:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800a082:	f7f6 fca5 	bl	80009d0 <__aeabi_dcmplt>
 800a086:	2800      	cmp	r0, #0
 800a088:	d07b      	beq.n	800a182 <_dtoa_r+0x4b2>
 800a08a:	9b07      	ldr	r3, [sp, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d078      	beq.n	800a182 <_dtoa_r+0x4b2>
 800a090:	9b04      	ldr	r3, [sp, #16]
 800a092:	2b00      	cmp	r3, #0
 800a094:	dd36      	ble.n	800a104 <_dtoa_r+0x434>
 800a096:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	1e5d      	subs	r5, r3, #1
 800a0a0:	4b65      	ldr	r3, [pc, #404]	; (800a238 <_dtoa_r+0x568>)
 800a0a2:	f7f6 fa23 	bl	80004ec <__aeabi_dmul>
 800a0a6:	4682      	mov	sl, r0
 800a0a8:	468b      	mov	fp, r1
 800a0aa:	9c04      	ldr	r4, [sp, #16]
 800a0ac:	3601      	adds	r6, #1
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f7f6 f9b2 	bl	8000418 <__aeabi_i2d>
 800a0b4:	4652      	mov	r2, sl
 800a0b6:	465b      	mov	r3, fp
 800a0b8:	f7f6 fa18 	bl	80004ec <__aeabi_dmul>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4b5f      	ldr	r3, [pc, #380]	; (800a23c <_dtoa_r+0x56c>)
 800a0c0:	f7f6 f85e 	bl	8000180 <__adddf3>
 800a0c4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a0c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0cc:	9611      	str	r6, [sp, #68]	; 0x44
 800a0ce:	2c00      	cmp	r4, #0
 800a0d0:	d15a      	bne.n	800a188 <_dtoa_r+0x4b8>
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	4650      	mov	r0, sl
 800a0d6:	4659      	mov	r1, fp
 800a0d8:	4b59      	ldr	r3, [pc, #356]	; (800a240 <_dtoa_r+0x570>)
 800a0da:	f7f6 f84f 	bl	800017c <__aeabi_dsub>
 800a0de:	4633      	mov	r3, r6
 800a0e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0e2:	4682      	mov	sl, r0
 800a0e4:	468b      	mov	fp, r1
 800a0e6:	f7f6 fc91 	bl	8000a0c <__aeabi_dcmpgt>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	f040 828b 	bne.w	800a606 <_dtoa_r+0x936>
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a0fa:	f7f6 fc69 	bl	80009d0 <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f040 827f 	bne.w	800a602 <_dtoa_r+0x932>
 800a104:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 800a108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f2c0 814d 	blt.w	800a3aa <_dtoa_r+0x6da>
 800a110:	9a03      	ldr	r2, [sp, #12]
 800a112:	2a0e      	cmp	r2, #14
 800a114:	f300 8149 	bgt.w	800a3aa <_dtoa_r+0x6da>
 800a118:	4b44      	ldr	r3, [pc, #272]	; (800a22c <_dtoa_r+0x55c>)
 800a11a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a11e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a122:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f280 80d6 	bge.w	800a2da <_dtoa_r+0x60a>
 800a12e:	9b07      	ldr	r3, [sp, #28]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f300 80d2 	bgt.w	800a2da <_dtoa_r+0x60a>
 800a136:	f040 8263 	bne.w	800a600 <_dtoa_r+0x930>
 800a13a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a13e:	2200      	movs	r2, #0
 800a140:	4b3f      	ldr	r3, [pc, #252]	; (800a240 <_dtoa_r+0x570>)
 800a142:	f7f6 f9d3 	bl	80004ec <__aeabi_dmul>
 800a146:	4652      	mov	r2, sl
 800a148:	465b      	mov	r3, fp
 800a14a:	f7f6 fc55 	bl	80009f8 <__aeabi_dcmpge>
 800a14e:	9c07      	ldr	r4, [sp, #28]
 800a150:	4625      	mov	r5, r4
 800a152:	2800      	cmp	r0, #0
 800a154:	f040 823c 	bne.w	800a5d0 <_dtoa_r+0x900>
 800a158:	2331      	movs	r3, #49	; 0x31
 800a15a:	9e06      	ldr	r6, [sp, #24]
 800a15c:	f806 3b01 	strb.w	r3, [r6], #1
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	3301      	adds	r3, #1
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	e237      	b.n	800a5d8 <_dtoa_r+0x908>
 800a168:	07e2      	lsls	r2, r4, #31
 800a16a:	d505      	bpl.n	800a178 <_dtoa_r+0x4a8>
 800a16c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a170:	f7f6 f9bc 	bl	80004ec <__aeabi_dmul>
 800a174:	2301      	movs	r3, #1
 800a176:	3601      	adds	r6, #1
 800a178:	1064      	asrs	r4, r4, #1
 800a17a:	3508      	adds	r5, #8
 800a17c:	e773      	b.n	800a066 <_dtoa_r+0x396>
 800a17e:	2602      	movs	r6, #2
 800a180:	e775      	b.n	800a06e <_dtoa_r+0x39e>
 800a182:	9d03      	ldr	r5, [sp, #12]
 800a184:	9c07      	ldr	r4, [sp, #28]
 800a186:	e792      	b.n	800a0ae <_dtoa_r+0x3de>
 800a188:	9906      	ldr	r1, [sp, #24]
 800a18a:	4b28      	ldr	r3, [pc, #160]	; (800a22c <_dtoa_r+0x55c>)
 800a18c:	4421      	add	r1, r4
 800a18e:	9112      	str	r1, [sp, #72]	; 0x48
 800a190:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a196:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a19a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	d052      	beq.n	800a248 <_dtoa_r+0x578>
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	4927      	ldr	r1, [pc, #156]	; (800a244 <_dtoa_r+0x574>)
 800a1a6:	f7f6 facb 	bl	8000740 <__aeabi_ddiv>
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	463b      	mov	r3, r7
 800a1ae:	f7f5 ffe5 	bl	800017c <__aeabi_dsub>
 800a1b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1b6:	9e06      	ldr	r6, [sp, #24]
 800a1b8:	4659      	mov	r1, fp
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	f7f6 fc46 	bl	8000a4c <__aeabi_d2iz>
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	f7f6 f929 	bl	8000418 <__aeabi_i2d>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	4659      	mov	r1, fp
 800a1ce:	f7f5 ffd5 	bl	800017c <__aeabi_dsub>
 800a1d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1d6:	3430      	adds	r4, #48	; 0x30
 800a1d8:	f806 4b01 	strb.w	r4, [r6], #1
 800a1dc:	4682      	mov	sl, r0
 800a1de:	468b      	mov	fp, r1
 800a1e0:	f7f6 fbf6 	bl	80009d0 <__aeabi_dcmplt>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d170      	bne.n	800a2ca <_dtoa_r+0x5fa>
 800a1e8:	4652      	mov	r2, sl
 800a1ea:	465b      	mov	r3, fp
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	4911      	ldr	r1, [pc, #68]	; (800a234 <_dtoa_r+0x564>)
 800a1f0:	f7f5 ffc4 	bl	800017c <__aeabi_dsub>
 800a1f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1f8:	f7f6 fbea 	bl	80009d0 <__aeabi_dcmplt>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f040 80b6 	bne.w	800a36e <_dtoa_r+0x69e>
 800a202:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a204:	429e      	cmp	r6, r3
 800a206:	f43f af7d 	beq.w	800a104 <_dtoa_r+0x434>
 800a20a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a20e:	2200      	movs	r2, #0
 800a210:	4b09      	ldr	r3, [pc, #36]	; (800a238 <_dtoa_r+0x568>)
 800a212:	f7f6 f96b 	bl	80004ec <__aeabi_dmul>
 800a216:	2200      	movs	r2, #0
 800a218:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a21c:	4b06      	ldr	r3, [pc, #24]	; (800a238 <_dtoa_r+0x568>)
 800a21e:	4650      	mov	r0, sl
 800a220:	4659      	mov	r1, fp
 800a222:	f7f6 f963 	bl	80004ec <__aeabi_dmul>
 800a226:	4682      	mov	sl, r0
 800a228:	468b      	mov	fp, r1
 800a22a:	e7c5      	b.n	800a1b8 <_dtoa_r+0x4e8>
 800a22c:	0800d5f0 	.word	0x0800d5f0
 800a230:	0800d5c8 	.word	0x0800d5c8
 800a234:	3ff00000 	.word	0x3ff00000
 800a238:	40240000 	.word	0x40240000
 800a23c:	401c0000 	.word	0x401c0000
 800a240:	40140000 	.word	0x40140000
 800a244:	3fe00000 	.word	0x3fe00000
 800a248:	4630      	mov	r0, r6
 800a24a:	4639      	mov	r1, r7
 800a24c:	f7f6 f94e 	bl	80004ec <__aeabi_dmul>
 800a250:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a254:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a256:	9e06      	ldr	r6, [sp, #24]
 800a258:	4659      	mov	r1, fp
 800a25a:	4650      	mov	r0, sl
 800a25c:	f7f6 fbf6 	bl	8000a4c <__aeabi_d2iz>
 800a260:	4604      	mov	r4, r0
 800a262:	f7f6 f8d9 	bl	8000418 <__aeabi_i2d>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4650      	mov	r0, sl
 800a26c:	4659      	mov	r1, fp
 800a26e:	f7f5 ff85 	bl	800017c <__aeabi_dsub>
 800a272:	3430      	adds	r4, #48	; 0x30
 800a274:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a276:	f806 4b01 	strb.w	r4, [r6], #1
 800a27a:	429e      	cmp	r6, r3
 800a27c:	4682      	mov	sl, r0
 800a27e:	468b      	mov	fp, r1
 800a280:	f04f 0200 	mov.w	r2, #0
 800a284:	d123      	bne.n	800a2ce <_dtoa_r+0x5fe>
 800a286:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a28a:	4bb2      	ldr	r3, [pc, #712]	; (800a554 <_dtoa_r+0x884>)
 800a28c:	f7f5 ff78 	bl	8000180 <__adddf3>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4650      	mov	r0, sl
 800a296:	4659      	mov	r1, fp
 800a298:	f7f6 fbb8 	bl	8000a0c <__aeabi_dcmpgt>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d166      	bne.n	800a36e <_dtoa_r+0x69e>
 800a2a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	49ab      	ldr	r1, [pc, #684]	; (800a554 <_dtoa_r+0x884>)
 800a2a8:	f7f5 ff68 	bl	800017c <__aeabi_dsub>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	4659      	mov	r1, fp
 800a2b4:	f7f6 fb8c 	bl	80009d0 <__aeabi_dcmplt>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	f43f af23 	beq.w	800a104 <_dtoa_r+0x434>
 800a2be:	463e      	mov	r6, r7
 800a2c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2c4:	3f01      	subs	r7, #1
 800a2c6:	2b30      	cmp	r3, #48	; 0x30
 800a2c8:	d0f9      	beq.n	800a2be <_dtoa_r+0x5ee>
 800a2ca:	9503      	str	r5, [sp, #12]
 800a2cc:	e03e      	b.n	800a34c <_dtoa_r+0x67c>
 800a2ce:	4ba2      	ldr	r3, [pc, #648]	; (800a558 <_dtoa_r+0x888>)
 800a2d0:	f7f6 f90c 	bl	80004ec <__aeabi_dmul>
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	468b      	mov	fp, r1
 800a2d8:	e7be      	b.n	800a258 <_dtoa_r+0x588>
 800a2da:	4654      	mov	r4, sl
 800a2dc:	f04f 0a00 	mov.w	sl, #0
 800a2e0:	465d      	mov	r5, fp
 800a2e2:	9e06      	ldr	r6, [sp, #24]
 800a2e4:	f8df b270 	ldr.w	fp, [pc, #624]	; 800a558 <_dtoa_r+0x888>
 800a2e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7f6 fa26 	bl	8000740 <__aeabi_ddiv>
 800a2f4:	f7f6 fbaa 	bl	8000a4c <__aeabi_d2iz>
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	f7f6 f88d 	bl	8000418 <__aeabi_i2d>
 800a2fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a302:	f7f6 f8f3 	bl	80004ec <__aeabi_dmul>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4620      	mov	r0, r4
 800a30c:	4629      	mov	r1, r5
 800a30e:	f7f5 ff35 	bl	800017c <__aeabi_dsub>
 800a312:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a316:	f806 4b01 	strb.w	r4, [r6], #1
 800a31a:	9c06      	ldr	r4, [sp, #24]
 800a31c:	9d07      	ldr	r5, [sp, #28]
 800a31e:	1b34      	subs	r4, r6, r4
 800a320:	42a5      	cmp	r5, r4
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	d133      	bne.n	800a390 <_dtoa_r+0x6c0>
 800a328:	f7f5 ff2a 	bl	8000180 <__adddf3>
 800a32c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a330:	4604      	mov	r4, r0
 800a332:	460d      	mov	r5, r1
 800a334:	f7f6 fb6a 	bl	8000a0c <__aeabi_dcmpgt>
 800a338:	b9c0      	cbnz	r0, 800a36c <_dtoa_r+0x69c>
 800a33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a33e:	4620      	mov	r0, r4
 800a340:	4629      	mov	r1, r5
 800a342:	f7f6 fb3b 	bl	80009bc <__aeabi_dcmpeq>
 800a346:	b108      	cbz	r0, 800a34c <_dtoa_r+0x67c>
 800a348:	07fb      	lsls	r3, r7, #31
 800a34a:	d40f      	bmi.n	800a36c <_dtoa_r+0x69c>
 800a34c:	4648      	mov	r0, r9
 800a34e:	4641      	mov	r1, r8
 800a350:	f001 f955 	bl	800b5fe <_Bfree>
 800a354:	2300      	movs	r3, #0
 800a356:	9803      	ldr	r0, [sp, #12]
 800a358:	7033      	strb	r3, [r6, #0]
 800a35a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a35c:	3001      	adds	r0, #1
 800a35e:	6018      	str	r0, [r3, #0]
 800a360:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a362:	2b00      	cmp	r3, #0
 800a364:	f43f acea 	beq.w	8009d3c <_dtoa_r+0x6c>
 800a368:	601e      	str	r6, [r3, #0]
 800a36a:	e4e7      	b.n	8009d3c <_dtoa_r+0x6c>
 800a36c:	9d03      	ldr	r5, [sp, #12]
 800a36e:	4633      	mov	r3, r6
 800a370:	461e      	mov	r6, r3
 800a372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a376:	2a39      	cmp	r2, #57	; 0x39
 800a378:	d106      	bne.n	800a388 <_dtoa_r+0x6b8>
 800a37a:	9a06      	ldr	r2, [sp, #24]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d1f7      	bne.n	800a370 <_dtoa_r+0x6a0>
 800a380:	2230      	movs	r2, #48	; 0x30
 800a382:	9906      	ldr	r1, [sp, #24]
 800a384:	3501      	adds	r5, #1
 800a386:	700a      	strb	r2, [r1, #0]
 800a388:	781a      	ldrb	r2, [r3, #0]
 800a38a:	3201      	adds	r2, #1
 800a38c:	701a      	strb	r2, [r3, #0]
 800a38e:	e79c      	b.n	800a2ca <_dtoa_r+0x5fa>
 800a390:	4652      	mov	r2, sl
 800a392:	465b      	mov	r3, fp
 800a394:	f7f6 f8aa 	bl	80004ec <__aeabi_dmul>
 800a398:	2200      	movs	r2, #0
 800a39a:	2300      	movs	r3, #0
 800a39c:	4604      	mov	r4, r0
 800a39e:	460d      	mov	r5, r1
 800a3a0:	f7f6 fb0c 	bl	80009bc <__aeabi_dcmpeq>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d09f      	beq.n	800a2e8 <_dtoa_r+0x618>
 800a3a8:	e7d0      	b.n	800a34c <_dtoa_r+0x67c>
 800a3aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3ac:	2a00      	cmp	r2, #0
 800a3ae:	f000 80cb 	beq.w	800a548 <_dtoa_r+0x878>
 800a3b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3b4:	2a01      	cmp	r2, #1
 800a3b6:	f300 80ae 	bgt.w	800a516 <_dtoa_r+0x846>
 800a3ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	f000 80a6 	beq.w	800a50e <_dtoa_r+0x83e>
 800a3c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a3c8:	9e08      	ldr	r6, [sp, #32]
 800a3ca:	9a08      	ldr	r2, [sp, #32]
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	441a      	add	r2, r3
 800a3d0:	9208      	str	r2, [sp, #32]
 800a3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d4:	4648      	mov	r0, r9
 800a3d6:	441a      	add	r2, r3
 800a3d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3da:	f001 f9b1 	bl	800b740 <__i2b>
 800a3de:	4605      	mov	r5, r0
 800a3e0:	2e00      	cmp	r6, #0
 800a3e2:	dd0c      	ble.n	800a3fe <_dtoa_r+0x72e>
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	dd09      	ble.n	800a3fe <_dtoa_r+0x72e>
 800a3ea:	42b3      	cmp	r3, r6
 800a3ec:	bfa8      	it	ge
 800a3ee:	4633      	movge	r3, r6
 800a3f0:	9a08      	ldr	r2, [sp, #32]
 800a3f2:	1af6      	subs	r6, r6, r3
 800a3f4:	1ad2      	subs	r2, r2, r3
 800a3f6:	9208      	str	r2, [sp, #32]
 800a3f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a400:	b1f3      	cbz	r3, 800a440 <_dtoa_r+0x770>
 800a402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 80a3 	beq.w	800a550 <_dtoa_r+0x880>
 800a40a:	2c00      	cmp	r4, #0
 800a40c:	dd10      	ble.n	800a430 <_dtoa_r+0x760>
 800a40e:	4629      	mov	r1, r5
 800a410:	4622      	mov	r2, r4
 800a412:	4648      	mov	r0, r9
 800a414:	f001 fa4e 	bl	800b8b4 <__pow5mult>
 800a418:	4642      	mov	r2, r8
 800a41a:	4601      	mov	r1, r0
 800a41c:	4605      	mov	r5, r0
 800a41e:	4648      	mov	r0, r9
 800a420:	f001 f9a4 	bl	800b76c <__multiply>
 800a424:	4607      	mov	r7, r0
 800a426:	4641      	mov	r1, r8
 800a428:	4648      	mov	r0, r9
 800a42a:	f001 f8e8 	bl	800b5fe <_Bfree>
 800a42e:	46b8      	mov	r8, r7
 800a430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a432:	1b1a      	subs	r2, r3, r4
 800a434:	d004      	beq.n	800a440 <_dtoa_r+0x770>
 800a436:	4641      	mov	r1, r8
 800a438:	4648      	mov	r0, r9
 800a43a:	f001 fa3b 	bl	800b8b4 <__pow5mult>
 800a43e:	4680      	mov	r8, r0
 800a440:	2101      	movs	r1, #1
 800a442:	4648      	mov	r0, r9
 800a444:	f001 f97c 	bl	800b740 <__i2b>
 800a448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a44a:	4604      	mov	r4, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f340 8085 	ble.w	800a55c <_dtoa_r+0x88c>
 800a452:	461a      	mov	r2, r3
 800a454:	4601      	mov	r1, r0
 800a456:	4648      	mov	r0, r9
 800a458:	f001 fa2c 	bl	800b8b4 <__pow5mult>
 800a45c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a45e:	4604      	mov	r4, r0
 800a460:	2b01      	cmp	r3, #1
 800a462:	dd7e      	ble.n	800a562 <_dtoa_r+0x892>
 800a464:	2700      	movs	r7, #0
 800a466:	6923      	ldr	r3, [r4, #16]
 800a468:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a46c:	6918      	ldr	r0, [r3, #16]
 800a46e:	f001 f919 	bl	800b6a4 <__hi0bits>
 800a472:	f1c0 0020 	rsb	r0, r0, #32
 800a476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a478:	4418      	add	r0, r3
 800a47a:	f010 001f 	ands.w	r0, r0, #31
 800a47e:	f000 808e 	beq.w	800a59e <_dtoa_r+0x8ce>
 800a482:	f1c0 0320 	rsb	r3, r0, #32
 800a486:	2b04      	cmp	r3, #4
 800a488:	f340 8087 	ble.w	800a59a <_dtoa_r+0x8ca>
 800a48c:	f1c0 001c 	rsb	r0, r0, #28
 800a490:	9b08      	ldr	r3, [sp, #32]
 800a492:	4406      	add	r6, r0
 800a494:	4403      	add	r3, r0
 800a496:	9308      	str	r3, [sp, #32]
 800a498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49a:	4403      	add	r3, r0
 800a49c:	9309      	str	r3, [sp, #36]	; 0x24
 800a49e:	9b08      	ldr	r3, [sp, #32]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dd05      	ble.n	800a4b0 <_dtoa_r+0x7e0>
 800a4a4:	4641      	mov	r1, r8
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	4648      	mov	r0, r9
 800a4aa:	f001 fa43 	bl	800b934 <__lshift>
 800a4ae:	4680      	mov	r8, r0
 800a4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	dd05      	ble.n	800a4c2 <_dtoa_r+0x7f2>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4648      	mov	r0, r9
 800a4bc:	f001 fa3a 	bl	800b934 <__lshift>
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d06c      	beq.n	800a5a2 <_dtoa_r+0x8d2>
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	f001 fa9e 	bl	800ba0c <__mcmp>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	da66      	bge.n	800a5a2 <_dtoa_r+0x8d2>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	4641      	mov	r1, r8
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	9303      	str	r3, [sp, #12]
 800a4dc:	220a      	movs	r2, #10
 800a4de:	2300      	movs	r3, #0
 800a4e0:	4648      	mov	r0, r9
 800a4e2:	f001 f895 	bl	800b610 <__multadd>
 800a4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e8:	4680      	mov	r8, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 819f 	beq.w	800a82e <_dtoa_r+0xb5e>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	220a      	movs	r2, #10
 800a4f6:	4648      	mov	r0, r9
 800a4f8:	f001 f88a 	bl	800b610 <__multadd>
 800a4fc:	9b04      	ldr	r3, [sp, #16]
 800a4fe:	4605      	mov	r5, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	f300 8089 	bgt.w	800a618 <_dtoa_r+0x948>
 800a506:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a508:	2b02      	cmp	r3, #2
 800a50a:	dc52      	bgt.n	800a5b2 <_dtoa_r+0x8e2>
 800a50c:	e084      	b.n	800a618 <_dtoa_r+0x948>
 800a50e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a510:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a514:	e757      	b.n	800a3c6 <_dtoa_r+0x6f6>
 800a516:	9b07      	ldr	r3, [sp, #28]
 800a518:	1e5c      	subs	r4, r3, #1
 800a51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a51c:	42a3      	cmp	r3, r4
 800a51e:	bfb7      	itett	lt
 800a520:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a522:	1b1c      	subge	r4, r3, r4
 800a524:	1ae2      	sublt	r2, r4, r3
 800a526:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a528:	bfbe      	ittt	lt
 800a52a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a52c:	189b      	addlt	r3, r3, r2
 800a52e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a530:	9b07      	ldr	r3, [sp, #28]
 800a532:	bfb8      	it	lt
 800a534:	2400      	movlt	r4, #0
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfb7      	itett	lt
 800a53a:	e9dd 2307 	ldrdlt	r2, r3, [sp, #28]
 800a53e:	e9dd 3607 	ldrdge	r3, r6, [sp, #28]
 800a542:	1a9e      	sublt	r6, r3, r2
 800a544:	2300      	movlt	r3, #0
 800a546:	e740      	b.n	800a3ca <_dtoa_r+0x6fa>
 800a548:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a54a:	9e08      	ldr	r6, [sp, #32]
 800a54c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a54e:	e747      	b.n	800a3e0 <_dtoa_r+0x710>
 800a550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a552:	e770      	b.n	800a436 <_dtoa_r+0x766>
 800a554:	3fe00000 	.word	0x3fe00000
 800a558:	40240000 	.word	0x40240000
 800a55c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a55e:	2b01      	cmp	r3, #1
 800a560:	dc17      	bgt.n	800a592 <_dtoa_r+0x8c2>
 800a562:	f1ba 0f00 	cmp.w	sl, #0
 800a566:	d114      	bne.n	800a592 <_dtoa_r+0x8c2>
 800a568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a56c:	b99b      	cbnz	r3, 800a596 <_dtoa_r+0x8c6>
 800a56e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800a572:	0d3f      	lsrs	r7, r7, #20
 800a574:	053f      	lsls	r7, r7, #20
 800a576:	b137      	cbz	r7, 800a586 <_dtoa_r+0x8b6>
 800a578:	2701      	movs	r7, #1
 800a57a:	9b08      	ldr	r3, [sp, #32]
 800a57c:	3301      	adds	r3, #1
 800a57e:	9308      	str	r3, [sp, #32]
 800a580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a582:	3301      	adds	r3, #1
 800a584:	9309      	str	r3, [sp, #36]	; 0x24
 800a586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f47f af6c 	bne.w	800a466 <_dtoa_r+0x796>
 800a58e:	2001      	movs	r0, #1
 800a590:	e771      	b.n	800a476 <_dtoa_r+0x7a6>
 800a592:	2700      	movs	r7, #0
 800a594:	e7f7      	b.n	800a586 <_dtoa_r+0x8b6>
 800a596:	4657      	mov	r7, sl
 800a598:	e7f5      	b.n	800a586 <_dtoa_r+0x8b6>
 800a59a:	d080      	beq.n	800a49e <_dtoa_r+0x7ce>
 800a59c:	4618      	mov	r0, r3
 800a59e:	301c      	adds	r0, #28
 800a5a0:	e776      	b.n	800a490 <_dtoa_r+0x7c0>
 800a5a2:	9b07      	ldr	r3, [sp, #28]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dc31      	bgt.n	800a60c <_dtoa_r+0x93c>
 800a5a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	dd2e      	ble.n	800a60c <_dtoa_r+0x93c>
 800a5ae:	9b07      	ldr	r3, [sp, #28]
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	9b04      	ldr	r3, [sp, #16]
 800a5b4:	b963      	cbnz	r3, 800a5d0 <_dtoa_r+0x900>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	2205      	movs	r2, #5
 800a5ba:	4648      	mov	r0, r9
 800a5bc:	f001 f828 	bl	800b610 <__multadd>
 800a5c0:	4601      	mov	r1, r0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	f001 fa21 	bl	800ba0c <__mcmp>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	f73f adc4 	bgt.w	800a158 <_dtoa_r+0x488>
 800a5d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5d2:	9e06      	ldr	r6, [sp, #24]
 800a5d4:	43db      	mvns	r3, r3
 800a5d6:	9303      	str	r3, [sp, #12]
 800a5d8:	2700      	movs	r7, #0
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4648      	mov	r0, r9
 800a5de:	f001 f80e 	bl	800b5fe <_Bfree>
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	f43f aeb2 	beq.w	800a34c <_dtoa_r+0x67c>
 800a5e8:	b12f      	cbz	r7, 800a5f6 <_dtoa_r+0x926>
 800a5ea:	42af      	cmp	r7, r5
 800a5ec:	d003      	beq.n	800a5f6 <_dtoa_r+0x926>
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	4648      	mov	r0, r9
 800a5f2:	f001 f804 	bl	800b5fe <_Bfree>
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4648      	mov	r0, r9
 800a5fa:	f001 f800 	bl	800b5fe <_Bfree>
 800a5fe:	e6a5      	b.n	800a34c <_dtoa_r+0x67c>
 800a600:	2400      	movs	r4, #0
 800a602:	4625      	mov	r5, r4
 800a604:	e7e4      	b.n	800a5d0 <_dtoa_r+0x900>
 800a606:	9503      	str	r5, [sp, #12]
 800a608:	4625      	mov	r5, r4
 800a60a:	e5a5      	b.n	800a158 <_dtoa_r+0x488>
 800a60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 80c4 	beq.w	800a79c <_dtoa_r+0xacc>
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	9304      	str	r3, [sp, #16]
 800a618:	2e00      	cmp	r6, #0
 800a61a:	dd05      	ble.n	800a628 <_dtoa_r+0x958>
 800a61c:	4629      	mov	r1, r5
 800a61e:	4632      	mov	r2, r6
 800a620:	4648      	mov	r0, r9
 800a622:	f001 f987 	bl	800b934 <__lshift>
 800a626:	4605      	mov	r5, r0
 800a628:	2f00      	cmp	r7, #0
 800a62a:	d058      	beq.n	800a6de <_dtoa_r+0xa0e>
 800a62c:	4648      	mov	r0, r9
 800a62e:	6869      	ldr	r1, [r5, #4]
 800a630:	f000 ffc0 	bl	800b5b4 <_Balloc>
 800a634:	4606      	mov	r6, r0
 800a636:	b920      	cbnz	r0, 800a642 <_dtoa_r+0x972>
 800a638:	4602      	mov	r2, r0
 800a63a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a63e:	4b80      	ldr	r3, [pc, #512]	; (800a840 <_dtoa_r+0xb70>)
 800a640:	e47f      	b.n	8009f42 <_dtoa_r+0x272>
 800a642:	692a      	ldr	r2, [r5, #16]
 800a644:	f105 010c 	add.w	r1, r5, #12
 800a648:	3202      	adds	r2, #2
 800a64a:	0092      	lsls	r2, r2, #2
 800a64c:	300c      	adds	r0, #12
 800a64e:	f000 ff7d 	bl	800b54c <memcpy>
 800a652:	2201      	movs	r2, #1
 800a654:	4631      	mov	r1, r6
 800a656:	4648      	mov	r0, r9
 800a658:	f001 f96c 	bl	800b934 <__lshift>
 800a65c:	462f      	mov	r7, r5
 800a65e:	4605      	mov	r5, r0
 800a660:	9b06      	ldr	r3, [sp, #24]
 800a662:	9a06      	ldr	r2, [sp, #24]
 800a664:	3301      	adds	r3, #1
 800a666:	9307      	str	r3, [sp, #28]
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	4413      	add	r3, r2
 800a66c:	930a      	str	r3, [sp, #40]	; 0x28
 800a66e:	f00a 0301 	and.w	r3, sl, #1
 800a672:	9309      	str	r3, [sp, #36]	; 0x24
 800a674:	9b07      	ldr	r3, [sp, #28]
 800a676:	4621      	mov	r1, r4
 800a678:	4640      	mov	r0, r8
 800a67a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a67e:	f7ff fa99 	bl	8009bb4 <quorem>
 800a682:	4639      	mov	r1, r7
 800a684:	9004      	str	r0, [sp, #16]
 800a686:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a68a:	4640      	mov	r0, r8
 800a68c:	f001 f9be 	bl	800ba0c <__mcmp>
 800a690:	462a      	mov	r2, r5
 800a692:	9008      	str	r0, [sp, #32]
 800a694:	4621      	mov	r1, r4
 800a696:	4648      	mov	r0, r9
 800a698:	f001 f9d4 	bl	800ba44 <__mdiff>
 800a69c:	68c2      	ldr	r2, [r0, #12]
 800a69e:	4606      	mov	r6, r0
 800a6a0:	b9fa      	cbnz	r2, 800a6e2 <_dtoa_r+0xa12>
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	f001 f9b1 	bl	800ba0c <__mcmp>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	4631      	mov	r1, r6
 800a6ae:	4648      	mov	r0, r9
 800a6b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6b2:	f000 ffa4 	bl	800b5fe <_Bfree>
 800a6b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a6b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6ba:	9e07      	ldr	r6, [sp, #28]
 800a6bc:	ea43 0102 	orr.w	r1, r3, r2
 800a6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c2:	430b      	orrs	r3, r1
 800a6c4:	d10f      	bne.n	800a6e6 <_dtoa_r+0xa16>
 800a6c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6ca:	d028      	beq.n	800a71e <_dtoa_r+0xa4e>
 800a6cc:	9b08      	ldr	r3, [sp, #32]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	dd02      	ble.n	800a6d8 <_dtoa_r+0xa08>
 800a6d2:	9b04      	ldr	r3, [sp, #16]
 800a6d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a6d8:	f88b a000 	strb.w	sl, [fp]
 800a6dc:	e77d      	b.n	800a5da <_dtoa_r+0x90a>
 800a6de:	4628      	mov	r0, r5
 800a6e0:	e7bc      	b.n	800a65c <_dtoa_r+0x98c>
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	e7e2      	b.n	800a6ac <_dtoa_r+0x9dc>
 800a6e6:	9b08      	ldr	r3, [sp, #32]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	db04      	blt.n	800a6f6 <_dtoa_r+0xa26>
 800a6ec:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a6ee:	430b      	orrs	r3, r1
 800a6f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6f2:	430b      	orrs	r3, r1
 800a6f4:	d120      	bne.n	800a738 <_dtoa_r+0xa68>
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	ddee      	ble.n	800a6d8 <_dtoa_r+0xa08>
 800a6fa:	4641      	mov	r1, r8
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	4648      	mov	r0, r9
 800a700:	f001 f918 	bl	800b934 <__lshift>
 800a704:	4621      	mov	r1, r4
 800a706:	4680      	mov	r8, r0
 800a708:	f001 f980 	bl	800ba0c <__mcmp>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	dc03      	bgt.n	800a718 <_dtoa_r+0xa48>
 800a710:	d1e2      	bne.n	800a6d8 <_dtoa_r+0xa08>
 800a712:	f01a 0f01 	tst.w	sl, #1
 800a716:	d0df      	beq.n	800a6d8 <_dtoa_r+0xa08>
 800a718:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a71c:	d1d9      	bne.n	800a6d2 <_dtoa_r+0xa02>
 800a71e:	2339      	movs	r3, #57	; 0x39
 800a720:	f88b 3000 	strb.w	r3, [fp]
 800a724:	4633      	mov	r3, r6
 800a726:	461e      	mov	r6, r3
 800a728:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	2a39      	cmp	r2, #57	; 0x39
 800a730:	d06a      	beq.n	800a808 <_dtoa_r+0xb38>
 800a732:	3201      	adds	r2, #1
 800a734:	701a      	strb	r2, [r3, #0]
 800a736:	e750      	b.n	800a5da <_dtoa_r+0x90a>
 800a738:	2a00      	cmp	r2, #0
 800a73a:	dd07      	ble.n	800a74c <_dtoa_r+0xa7c>
 800a73c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a740:	d0ed      	beq.n	800a71e <_dtoa_r+0xa4e>
 800a742:	f10a 0301 	add.w	r3, sl, #1
 800a746:	f88b 3000 	strb.w	r3, [fp]
 800a74a:	e746      	b.n	800a5da <_dtoa_r+0x90a>
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a750:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a754:	4293      	cmp	r3, r2
 800a756:	d041      	beq.n	800a7dc <_dtoa_r+0xb0c>
 800a758:	4641      	mov	r1, r8
 800a75a:	2300      	movs	r3, #0
 800a75c:	220a      	movs	r2, #10
 800a75e:	4648      	mov	r0, r9
 800a760:	f000 ff56 	bl	800b610 <__multadd>
 800a764:	42af      	cmp	r7, r5
 800a766:	4680      	mov	r8, r0
 800a768:	f04f 0300 	mov.w	r3, #0
 800a76c:	f04f 020a 	mov.w	r2, #10
 800a770:	4639      	mov	r1, r7
 800a772:	4648      	mov	r0, r9
 800a774:	d107      	bne.n	800a786 <_dtoa_r+0xab6>
 800a776:	f000 ff4b 	bl	800b610 <__multadd>
 800a77a:	4607      	mov	r7, r0
 800a77c:	4605      	mov	r5, r0
 800a77e:	9b07      	ldr	r3, [sp, #28]
 800a780:	3301      	adds	r3, #1
 800a782:	9307      	str	r3, [sp, #28]
 800a784:	e776      	b.n	800a674 <_dtoa_r+0x9a4>
 800a786:	f000 ff43 	bl	800b610 <__multadd>
 800a78a:	4629      	mov	r1, r5
 800a78c:	4607      	mov	r7, r0
 800a78e:	2300      	movs	r3, #0
 800a790:	220a      	movs	r2, #10
 800a792:	4648      	mov	r0, r9
 800a794:	f000 ff3c 	bl	800b610 <__multadd>
 800a798:	4605      	mov	r5, r0
 800a79a:	e7f0      	b.n	800a77e <_dtoa_r+0xaae>
 800a79c:	9b07      	ldr	r3, [sp, #28]
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	9e06      	ldr	r6, [sp, #24]
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	f7ff fa05 	bl	8009bb4 <quorem>
 800a7aa:	9b06      	ldr	r3, [sp, #24]
 800a7ac:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a7b0:	f806 ab01 	strb.w	sl, [r6], #1
 800a7b4:	1af2      	subs	r2, r6, r3
 800a7b6:	9b04      	ldr	r3, [sp, #16]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	dd07      	ble.n	800a7cc <_dtoa_r+0xafc>
 800a7bc:	4641      	mov	r1, r8
 800a7be:	2300      	movs	r3, #0
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	4648      	mov	r0, r9
 800a7c4:	f000 ff24 	bl	800b610 <__multadd>
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	e7ea      	b.n	800a7a2 <_dtoa_r+0xad2>
 800a7cc:	9b04      	ldr	r3, [sp, #16]
 800a7ce:	2700      	movs	r7, #0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bfcc      	ite	gt
 800a7d4:	461e      	movgt	r6, r3
 800a7d6:	2601      	movle	r6, #1
 800a7d8:	9b06      	ldr	r3, [sp, #24]
 800a7da:	441e      	add	r6, r3
 800a7dc:	4641      	mov	r1, r8
 800a7de:	2201      	movs	r2, #1
 800a7e0:	4648      	mov	r0, r9
 800a7e2:	f001 f8a7 	bl	800b934 <__lshift>
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	4680      	mov	r8, r0
 800a7ea:	f001 f90f 	bl	800ba0c <__mcmp>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	dc98      	bgt.n	800a724 <_dtoa_r+0xa54>
 800a7f2:	d102      	bne.n	800a7fa <_dtoa_r+0xb2a>
 800a7f4:	f01a 0f01 	tst.w	sl, #1
 800a7f8:	d194      	bne.n	800a724 <_dtoa_r+0xa54>
 800a7fa:	4633      	mov	r3, r6
 800a7fc:	461e      	mov	r6, r3
 800a7fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a802:	2a30      	cmp	r2, #48	; 0x30
 800a804:	d0fa      	beq.n	800a7fc <_dtoa_r+0xb2c>
 800a806:	e6e8      	b.n	800a5da <_dtoa_r+0x90a>
 800a808:	9a06      	ldr	r2, [sp, #24]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d18b      	bne.n	800a726 <_dtoa_r+0xa56>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	3301      	adds	r3, #1
 800a812:	9303      	str	r3, [sp, #12]
 800a814:	2331      	movs	r3, #49	; 0x31
 800a816:	7013      	strb	r3, [r2, #0]
 800a818:	e6df      	b.n	800a5da <_dtoa_r+0x90a>
 800a81a:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <_dtoa_r+0xb74>)
 800a81c:	f7ff baaa 	b.w	8009d74 <_dtoa_r+0xa4>
 800a820:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a822:	2b00      	cmp	r3, #0
 800a824:	f47f aa8e 	bne.w	8009d44 <_dtoa_r+0x74>
 800a828:	4b07      	ldr	r3, [pc, #28]	; (800a848 <_dtoa_r+0xb78>)
 800a82a:	f7ff baa3 	b.w	8009d74 <_dtoa_r+0xa4>
 800a82e:	9b04      	ldr	r3, [sp, #16]
 800a830:	2b00      	cmp	r3, #0
 800a832:	dcb5      	bgt.n	800a7a0 <_dtoa_r+0xad0>
 800a834:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a836:	2b02      	cmp	r3, #2
 800a838:	f73f aebb 	bgt.w	800a5b2 <_dtoa_r+0x8e2>
 800a83c:	e7b0      	b.n	800a7a0 <_dtoa_r+0xad0>
 800a83e:	bf00      	nop
 800a840:	0800d4f1 	.word	0x0800d4f1
 800a844:	0800d4c2 	.word	0x0800d4c2
 800a848:	0800d4e8 	.word	0x0800d4e8

0800a84c <__sflush_r>:
 800a84c:	898b      	ldrh	r3, [r1, #12]
 800a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	4605      	mov	r5, r0
 800a854:	0718      	lsls	r0, r3, #28
 800a856:	460c      	mov	r4, r1
 800a858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a85c:	d45f      	bmi.n	800a91e <__sflush_r+0xd2>
 800a85e:	684b      	ldr	r3, [r1, #4]
 800a860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a864:	2b00      	cmp	r3, #0
 800a866:	818a      	strh	r2, [r1, #12]
 800a868:	dc05      	bgt.n	800a876 <__sflush_r+0x2a>
 800a86a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dc02      	bgt.n	800a876 <__sflush_r+0x2a>
 800a870:	2000      	movs	r0, #0
 800a872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a878:	2e00      	cmp	r6, #0
 800a87a:	d0f9      	beq.n	800a870 <__sflush_r+0x24>
 800a87c:	2300      	movs	r3, #0
 800a87e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a882:	682f      	ldr	r7, [r5, #0]
 800a884:	602b      	str	r3, [r5, #0]
 800a886:	d036      	beq.n	800a8f6 <__sflush_r+0xaa>
 800a888:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	075a      	lsls	r2, r3, #29
 800a88e:	d505      	bpl.n	800a89c <__sflush_r+0x50>
 800a890:	6863      	ldr	r3, [r4, #4]
 800a892:	1ac0      	subs	r0, r0, r3
 800a894:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a896:	b10b      	cbz	r3, 800a89c <__sflush_r+0x50>
 800a898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a89a:	1ac0      	subs	r0, r0, r3
 800a89c:	2300      	movs	r3, #0
 800a89e:	4602      	mov	r2, r0
 800a8a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	69e1      	ldr	r1, [r4, #28]
 800a8a6:	47b0      	blx	r6
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	d106      	bne.n	800a8bc <__sflush_r+0x70>
 800a8ae:	6829      	ldr	r1, [r5, #0]
 800a8b0:	291d      	cmp	r1, #29
 800a8b2:	d830      	bhi.n	800a916 <__sflush_r+0xca>
 800a8b4:	4a2b      	ldr	r2, [pc, #172]	; (800a964 <__sflush_r+0x118>)
 800a8b6:	40ca      	lsrs	r2, r1
 800a8b8:	07d6      	lsls	r6, r2, #31
 800a8ba:	d52c      	bpl.n	800a916 <__sflush_r+0xca>
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8c2:	b21b      	sxth	r3, r3
 800a8c4:	6062      	str	r2, [r4, #4]
 800a8c6:	6922      	ldr	r2, [r4, #16]
 800a8c8:	04d9      	lsls	r1, r3, #19
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	6022      	str	r2, [r4, #0]
 800a8ce:	d504      	bpl.n	800a8da <__sflush_r+0x8e>
 800a8d0:	1c42      	adds	r2, r0, #1
 800a8d2:	d101      	bne.n	800a8d8 <__sflush_r+0x8c>
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	b903      	cbnz	r3, 800a8da <__sflush_r+0x8e>
 800a8d8:	6520      	str	r0, [r4, #80]	; 0x50
 800a8da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a8dc:	602f      	str	r7, [r5, #0]
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d0c6      	beq.n	800a870 <__sflush_r+0x24>
 800a8e2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a8e6:	4299      	cmp	r1, r3
 800a8e8:	d002      	beq.n	800a8f0 <__sflush_r+0xa4>
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f000 f938 	bl	800ab60 <_free_r>
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	6320      	str	r0, [r4, #48]	; 0x30
 800a8f4:	e7bd      	b.n	800a872 <__sflush_r+0x26>
 800a8f6:	69e1      	ldr	r1, [r4, #28]
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b0      	blx	r6
 800a8fe:	1c41      	adds	r1, r0, #1
 800a900:	d1c3      	bne.n	800a88a <__sflush_r+0x3e>
 800a902:	682b      	ldr	r3, [r5, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0c0      	beq.n	800a88a <__sflush_r+0x3e>
 800a908:	2b1d      	cmp	r3, #29
 800a90a:	d001      	beq.n	800a910 <__sflush_r+0xc4>
 800a90c:	2b16      	cmp	r3, #22
 800a90e:	d101      	bne.n	800a914 <__sflush_r+0xc8>
 800a910:	602f      	str	r7, [r5, #0]
 800a912:	e7ad      	b.n	800a870 <__sflush_r+0x24>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a91a:	81a3      	strh	r3, [r4, #12]
 800a91c:	e7a9      	b.n	800a872 <__sflush_r+0x26>
 800a91e:	690f      	ldr	r7, [r1, #16]
 800a920:	2f00      	cmp	r7, #0
 800a922:	d0a5      	beq.n	800a870 <__sflush_r+0x24>
 800a924:	079b      	lsls	r3, r3, #30
 800a926:	bf18      	it	ne
 800a928:	2300      	movne	r3, #0
 800a92a:	680e      	ldr	r6, [r1, #0]
 800a92c:	bf08      	it	eq
 800a92e:	694b      	ldreq	r3, [r1, #20]
 800a930:	eba6 0807 	sub.w	r8, r6, r7
 800a934:	600f      	str	r7, [r1, #0]
 800a936:	608b      	str	r3, [r1, #8]
 800a938:	f1b8 0f00 	cmp.w	r8, #0
 800a93c:	dd98      	ble.n	800a870 <__sflush_r+0x24>
 800a93e:	4643      	mov	r3, r8
 800a940:	463a      	mov	r2, r7
 800a942:	4628      	mov	r0, r5
 800a944:	69e1      	ldr	r1, [r4, #28]
 800a946:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a948:	47b0      	blx	r6
 800a94a:	2800      	cmp	r0, #0
 800a94c:	dc06      	bgt.n	800a95c <__sflush_r+0x110>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f04f 30ff 	mov.w	r0, #4294967295
 800a954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	e78a      	b.n	800a872 <__sflush_r+0x26>
 800a95c:	4407      	add	r7, r0
 800a95e:	eba8 0800 	sub.w	r8, r8, r0
 800a962:	e7e9      	b.n	800a938 <__sflush_r+0xec>
 800a964:	20400001 	.word	0x20400001

0800a968 <_fflush_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	460c      	mov	r4, r1
 800a96c:	4605      	mov	r5, r0
 800a96e:	b118      	cbz	r0, 800a978 <_fflush_r+0x10>
 800a970:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a972:	b90b      	cbnz	r3, 800a978 <_fflush_r+0x10>
 800a974:	f000 f864 	bl	800aa40 <__sinit>
 800a978:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800a97c:	b1b8      	cbz	r0, 800a9ae <_fflush_r+0x46>
 800a97e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a980:	07db      	lsls	r3, r3, #31
 800a982:	d404      	bmi.n	800a98e <_fflush_r+0x26>
 800a984:	0581      	lsls	r1, r0, #22
 800a986:	d402      	bmi.n	800a98e <_fflush_r+0x26>
 800a988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a98a:	f000 fb19 	bl	800afc0 <__retarget_lock_acquire_recursive>
 800a98e:	4628      	mov	r0, r5
 800a990:	4621      	mov	r1, r4
 800a992:	f7ff ff5b 	bl	800a84c <__sflush_r>
 800a996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a998:	4605      	mov	r5, r0
 800a99a:	07da      	lsls	r2, r3, #31
 800a99c:	d405      	bmi.n	800a9aa <_fflush_r+0x42>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	059b      	lsls	r3, r3, #22
 800a9a2:	d402      	bmi.n	800a9aa <_fflush_r+0x42>
 800a9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9a6:	f000 fb0c 	bl	800afc2 <__retarget_lock_release_recursive>
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	bd38      	pop	{r3, r4, r5, pc}
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	e7fb      	b.n	800a9aa <_fflush_r+0x42>
	...

0800a9b4 <std>:
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	b510      	push	{r4, lr}
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a9be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9c2:	6083      	str	r3, [r0, #8]
 800a9c4:	8181      	strh	r1, [r0, #12]
 800a9c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a9c8:	81c2      	strh	r2, [r0, #14]
 800a9ca:	6183      	str	r3, [r0, #24]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	2208      	movs	r2, #8
 800a9d0:	305c      	adds	r0, #92	; 0x5c
 800a9d2:	f7fd fce7 	bl	80083a4 <memset>
 800a9d6:	4b07      	ldr	r3, [pc, #28]	; (800a9f4 <std+0x40>)
 800a9d8:	61e4      	str	r4, [r4, #28]
 800a9da:	6223      	str	r3, [r4, #32]
 800a9dc:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <std+0x44>)
 800a9de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9e2:	6263      	str	r3, [r4, #36]	; 0x24
 800a9e4:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <std+0x48>)
 800a9e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9e8:	4b05      	ldr	r3, [pc, #20]	; (800aa00 <std+0x4c>)
 800a9ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f0:	f000 bae4 	b.w	800afbc <__retarget_lock_init_recursive>
 800a9f4:	0800c061 	.word	0x0800c061
 800a9f8:	0800c083 	.word	0x0800c083
 800a9fc:	0800c0bb 	.word	0x0800c0bb
 800aa00:	0800c0df 	.word	0x0800c0df

0800aa04 <_cleanup_r>:
 800aa04:	4901      	ldr	r1, [pc, #4]	; (800aa0c <_cleanup_r+0x8>)
 800aa06:	f000 bab5 	b.w	800af74 <_fwalk_reent>
 800aa0a:	bf00      	nop
 800aa0c:	0800ccfd 	.word	0x0800ccfd

0800aa10 <__sfp_lock_acquire>:
 800aa10:	4801      	ldr	r0, [pc, #4]	; (800aa18 <__sfp_lock_acquire+0x8>)
 800aa12:	f000 bad5 	b.w	800afc0 <__retarget_lock_acquire_recursive>
 800aa16:	bf00      	nop
 800aa18:	200015e4 	.word	0x200015e4

0800aa1c <__sfp_lock_release>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	; (800aa24 <__sfp_lock_release+0x8>)
 800aa1e:	f000 bad0 	b.w	800afc2 <__retarget_lock_release_recursive>
 800aa22:	bf00      	nop
 800aa24:	200015e4 	.word	0x200015e4

0800aa28 <__sinit_lock_acquire>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__sinit_lock_acquire+0x8>)
 800aa2a:	f000 bac9 	b.w	800afc0 <__retarget_lock_acquire_recursive>
 800aa2e:	bf00      	nop
 800aa30:	200015df 	.word	0x200015df

0800aa34 <__sinit_lock_release>:
 800aa34:	4801      	ldr	r0, [pc, #4]	; (800aa3c <__sinit_lock_release+0x8>)
 800aa36:	f000 bac4 	b.w	800afc2 <__retarget_lock_release_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	200015df 	.word	0x200015df

0800aa40 <__sinit>:
 800aa40:	b510      	push	{r4, lr}
 800aa42:	4604      	mov	r4, r0
 800aa44:	f7ff fff0 	bl	800aa28 <__sinit_lock_acquire>
 800aa48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800aa4a:	b11a      	cbz	r2, 800aa54 <__sinit+0x14>
 800aa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa50:	f7ff bff0 	b.w	800aa34 <__sinit_lock_release>
 800aa54:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <__sinit+0x4c>)
 800aa56:	2104      	movs	r1, #4
 800aa58:	63e3      	str	r3, [r4, #60]	; 0x3c
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800aa60:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800aa64:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800aa68:	6860      	ldr	r0, [r4, #4]
 800aa6a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800aa6e:	f7ff ffa1 	bl	800a9b4 <std>
 800aa72:	2201      	movs	r2, #1
 800aa74:	2109      	movs	r1, #9
 800aa76:	68a0      	ldr	r0, [r4, #8]
 800aa78:	f7ff ff9c 	bl	800a9b4 <std>
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	2112      	movs	r1, #18
 800aa80:	68e0      	ldr	r0, [r4, #12]
 800aa82:	f7ff ff97 	bl	800a9b4 <std>
 800aa86:	2301      	movs	r3, #1
 800aa88:	63a3      	str	r3, [r4, #56]	; 0x38
 800aa8a:	e7df      	b.n	800aa4c <__sinit+0xc>
 800aa8c:	0800aa05 	.word	0x0800aa05

0800aa90 <__libc_fini_array>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4d07      	ldr	r5, [pc, #28]	; (800aab0 <__libc_fini_array+0x20>)
 800aa94:	4c07      	ldr	r4, [pc, #28]	; (800aab4 <__libc_fini_array+0x24>)
 800aa96:	1b64      	subs	r4, r4, r5
 800aa98:	10a4      	asrs	r4, r4, #2
 800aa9a:	b91c      	cbnz	r4, 800aaa4 <__libc_fini_array+0x14>
 800aa9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaa0:	f002 bad4 	b.w	800d04c <_fini>
 800aaa4:	3c01      	subs	r4, #1
 800aaa6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800aaaa:	4798      	blx	r3
 800aaac:	e7f5      	b.n	800aa9a <__libc_fini_array+0xa>
 800aaae:	bf00      	nop
 800aab0:	0800d73c 	.word	0x0800d73c
 800aab4:	0800d740 	.word	0x0800d740

0800aab8 <_malloc_trim_r>:
 800aab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aabc:	4606      	mov	r6, r0
 800aabe:	2008      	movs	r0, #8
 800aac0:	460c      	mov	r4, r1
 800aac2:	f001 fb23 	bl	800c10c <sysconf>
 800aac6:	4680      	mov	r8, r0
 800aac8:	4f22      	ldr	r7, [pc, #136]	; (800ab54 <_malloc_trim_r+0x9c>)
 800aaca:	4630      	mov	r0, r6
 800aacc:	f000 fd66 	bl	800b59c <__malloc_lock>
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	685d      	ldr	r5, [r3, #4]
 800aad4:	f025 0503 	bic.w	r5, r5, #3
 800aad8:	1b2c      	subs	r4, r5, r4
 800aada:	3c11      	subs	r4, #17
 800aadc:	4444      	add	r4, r8
 800aade:	fbb4 f4f8 	udiv	r4, r4, r8
 800aae2:	3c01      	subs	r4, #1
 800aae4:	fb08 f404 	mul.w	r4, r8, r4
 800aae8:	45a0      	cmp	r8, r4
 800aaea:	dd05      	ble.n	800aaf8 <_malloc_trim_r+0x40>
 800aaec:	4630      	mov	r0, r6
 800aaee:	f000 fd5b 	bl	800b5a8 <__malloc_unlock>
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf8:	2100      	movs	r1, #0
 800aafa:	4630      	mov	r0, r6
 800aafc:	f001 faa0 	bl	800c040 <_sbrk_r>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	442b      	add	r3, r5
 800ab04:	4298      	cmp	r0, r3
 800ab06:	d1f1      	bne.n	800aaec <_malloc_trim_r+0x34>
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4261      	negs	r1, r4
 800ab0c:	f001 fa98 	bl	800c040 <_sbrk_r>
 800ab10:	3001      	adds	r0, #1
 800ab12:	d110      	bne.n	800ab36 <_malloc_trim_r+0x7e>
 800ab14:	2100      	movs	r1, #0
 800ab16:	4630      	mov	r0, r6
 800ab18:	f001 fa92 	bl	800c040 <_sbrk_r>
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	1a83      	subs	r3, r0, r2
 800ab20:	2b0f      	cmp	r3, #15
 800ab22:	dde3      	ble.n	800aaec <_malloc_trim_r+0x34>
 800ab24:	490c      	ldr	r1, [pc, #48]	; (800ab58 <_malloc_trim_r+0xa0>)
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	6809      	ldr	r1, [r1, #0]
 800ab2c:	6053      	str	r3, [r2, #4]
 800ab2e:	1a40      	subs	r0, r0, r1
 800ab30:	490a      	ldr	r1, [pc, #40]	; (800ab5c <_malloc_trim_r+0xa4>)
 800ab32:	6008      	str	r0, [r1, #0]
 800ab34:	e7da      	b.n	800aaec <_malloc_trim_r+0x34>
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	4a08      	ldr	r2, [pc, #32]	; (800ab5c <_malloc_trim_r+0xa4>)
 800ab3a:	1b2d      	subs	r5, r5, r4
 800ab3c:	f045 0501 	orr.w	r5, r5, #1
 800ab40:	605d      	str	r5, [r3, #4]
 800ab42:	6813      	ldr	r3, [r2, #0]
 800ab44:	4630      	mov	r0, r6
 800ab46:	1b1c      	subs	r4, r3, r4
 800ab48:	6014      	str	r4, [r2, #0]
 800ab4a:	f000 fd2d 	bl	800b5a8 <__malloc_unlock>
 800ab4e:	2001      	movs	r0, #1
 800ab50:	e7d0      	b.n	800aaf4 <_malloc_trim_r+0x3c>
 800ab52:	bf00      	nop
 800ab54:	20000b1c 	.word	0x20000b1c
 800ab58:	20000f24 	.word	0x20000f24
 800ab5c:	200010e4 	.word	0x200010e4

0800ab60 <_free_r>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	4605      	mov	r5, r0
 800ab64:	460f      	mov	r7, r1
 800ab66:	2900      	cmp	r1, #0
 800ab68:	f000 80b1 	beq.w	800acce <_free_r+0x16e>
 800ab6c:	f000 fd16 	bl	800b59c <__malloc_lock>
 800ab70:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ab74:	4856      	ldr	r0, [pc, #344]	; (800acd0 <_free_r+0x170>)
 800ab76:	f022 0401 	bic.w	r4, r2, #1
 800ab7a:	f1a7 0308 	sub.w	r3, r7, #8
 800ab7e:	eb03 0c04 	add.w	ip, r3, r4
 800ab82:	6881      	ldr	r1, [r0, #8]
 800ab84:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800ab88:	4561      	cmp	r1, ip
 800ab8a:	f026 0603 	bic.w	r6, r6, #3
 800ab8e:	f002 0201 	and.w	r2, r2, #1
 800ab92:	d11b      	bne.n	800abcc <_free_r+0x6c>
 800ab94:	4434      	add	r4, r6
 800ab96:	b93a      	cbnz	r2, 800aba8 <_free_r+0x48>
 800ab98:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800ab9c:	1a9b      	subs	r3, r3, r2
 800ab9e:	4414      	add	r4, r2
 800aba0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800aba4:	60ca      	str	r2, [r1, #12]
 800aba6:	6091      	str	r1, [r2, #8]
 800aba8:	f044 0201 	orr.w	r2, r4, #1
 800abac:	605a      	str	r2, [r3, #4]
 800abae:	6083      	str	r3, [r0, #8]
 800abb0:	4b48      	ldr	r3, [pc, #288]	; (800acd4 <_free_r+0x174>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	d804      	bhi.n	800abc2 <_free_r+0x62>
 800abb8:	4b47      	ldr	r3, [pc, #284]	; (800acd8 <_free_r+0x178>)
 800abba:	4628      	mov	r0, r5
 800abbc:	6819      	ldr	r1, [r3, #0]
 800abbe:	f7ff ff7b 	bl	800aab8 <_malloc_trim_r>
 800abc2:	4628      	mov	r0, r5
 800abc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abc8:	f000 bcee 	b.w	800b5a8 <__malloc_unlock>
 800abcc:	f8cc 6004 	str.w	r6, [ip, #4]
 800abd0:	2a00      	cmp	r2, #0
 800abd2:	d138      	bne.n	800ac46 <_free_r+0xe6>
 800abd4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800abd8:	f100 0708 	add.w	r7, r0, #8
 800abdc:	1a5b      	subs	r3, r3, r1
 800abde:	440c      	add	r4, r1
 800abe0:	6899      	ldr	r1, [r3, #8]
 800abe2:	42b9      	cmp	r1, r7
 800abe4:	d031      	beq.n	800ac4a <_free_r+0xea>
 800abe6:	68df      	ldr	r7, [r3, #12]
 800abe8:	60cf      	str	r7, [r1, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	eb0c 0106 	add.w	r1, ip, r6
 800abf0:	6849      	ldr	r1, [r1, #4]
 800abf2:	07c9      	lsls	r1, r1, #31
 800abf4:	d40b      	bmi.n	800ac0e <_free_r+0xae>
 800abf6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800abfa:	4434      	add	r4, r6
 800abfc:	bb3a      	cbnz	r2, 800ac4e <_free_r+0xee>
 800abfe:	4e37      	ldr	r6, [pc, #220]	; (800acdc <_free_r+0x17c>)
 800ac00:	42b1      	cmp	r1, r6
 800ac02:	d124      	bne.n	800ac4e <_free_r+0xee>
 800ac04:	2201      	movs	r2, #1
 800ac06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac0a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800ac0e:	f044 0101 	orr.w	r1, r4, #1
 800ac12:	6059      	str	r1, [r3, #4]
 800ac14:	511c      	str	r4, [r3, r4]
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	d1d3      	bne.n	800abc2 <_free_r+0x62>
 800ac1a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800ac1e:	d21b      	bcs.n	800ac58 <_free_r+0xf8>
 800ac20:	0961      	lsrs	r1, r4, #5
 800ac22:	08e2      	lsrs	r2, r4, #3
 800ac24:	2401      	movs	r4, #1
 800ac26:	408c      	lsls	r4, r1
 800ac28:	6841      	ldr	r1, [r0, #4]
 800ac2a:	3201      	adds	r2, #1
 800ac2c:	430c      	orrs	r4, r1
 800ac2e:	6044      	str	r4, [r0, #4]
 800ac30:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800ac34:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800ac38:	3908      	subs	r1, #8
 800ac3a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800ac3e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800ac42:	60e3      	str	r3, [r4, #12]
 800ac44:	e7bd      	b.n	800abc2 <_free_r+0x62>
 800ac46:	2200      	movs	r2, #0
 800ac48:	e7d0      	b.n	800abec <_free_r+0x8c>
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	e7ce      	b.n	800abec <_free_r+0x8c>
 800ac4e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800ac52:	60ce      	str	r6, [r1, #12]
 800ac54:	60b1      	str	r1, [r6, #8]
 800ac56:	e7da      	b.n	800ac0e <_free_r+0xae>
 800ac58:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800ac5c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800ac60:	d214      	bcs.n	800ac8c <_free_r+0x12c>
 800ac62:	09a2      	lsrs	r2, r4, #6
 800ac64:	3238      	adds	r2, #56	; 0x38
 800ac66:	1c51      	adds	r1, r2, #1
 800ac68:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800ac6c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800ac70:	428e      	cmp	r6, r1
 800ac72:	d125      	bne.n	800acc0 <_free_r+0x160>
 800ac74:	2401      	movs	r4, #1
 800ac76:	1092      	asrs	r2, r2, #2
 800ac78:	fa04 f202 	lsl.w	r2, r4, r2
 800ac7c:	6844      	ldr	r4, [r0, #4]
 800ac7e:	4322      	orrs	r2, r4
 800ac80:	6042      	str	r2, [r0, #4]
 800ac82:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800ac86:	60b3      	str	r3, [r6, #8]
 800ac88:	60cb      	str	r3, [r1, #12]
 800ac8a:	e79a      	b.n	800abc2 <_free_r+0x62>
 800ac8c:	2a14      	cmp	r2, #20
 800ac8e:	d801      	bhi.n	800ac94 <_free_r+0x134>
 800ac90:	325b      	adds	r2, #91	; 0x5b
 800ac92:	e7e8      	b.n	800ac66 <_free_r+0x106>
 800ac94:	2a54      	cmp	r2, #84	; 0x54
 800ac96:	d802      	bhi.n	800ac9e <_free_r+0x13e>
 800ac98:	0b22      	lsrs	r2, r4, #12
 800ac9a:	326e      	adds	r2, #110	; 0x6e
 800ac9c:	e7e3      	b.n	800ac66 <_free_r+0x106>
 800ac9e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800aca2:	d802      	bhi.n	800acaa <_free_r+0x14a>
 800aca4:	0be2      	lsrs	r2, r4, #15
 800aca6:	3277      	adds	r2, #119	; 0x77
 800aca8:	e7dd      	b.n	800ac66 <_free_r+0x106>
 800acaa:	f240 5154 	movw	r1, #1364	; 0x554
 800acae:	428a      	cmp	r2, r1
 800acb0:	bf96      	itet	ls
 800acb2:	0ca2      	lsrls	r2, r4, #18
 800acb4:	227e      	movhi	r2, #126	; 0x7e
 800acb6:	327c      	addls	r2, #124	; 0x7c
 800acb8:	e7d5      	b.n	800ac66 <_free_r+0x106>
 800acba:	6889      	ldr	r1, [r1, #8]
 800acbc:	428e      	cmp	r6, r1
 800acbe:	d004      	beq.n	800acca <_free_r+0x16a>
 800acc0:	684a      	ldr	r2, [r1, #4]
 800acc2:	f022 0203 	bic.w	r2, r2, #3
 800acc6:	42a2      	cmp	r2, r4
 800acc8:	d8f7      	bhi.n	800acba <_free_r+0x15a>
 800acca:	68ce      	ldr	r6, [r1, #12]
 800accc:	e7d9      	b.n	800ac82 <_free_r+0x122>
 800acce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd0:	20000b1c 	.word	0x20000b1c
 800acd4:	20000f28 	.word	0x20000f28
 800acd8:	20001114 	.word	0x20001114
 800acdc:	20000b24 	.word	0x20000b24

0800ace0 <__sfvwrite_r>:
 800ace0:	6893      	ldr	r3, [r2, #8]
 800ace2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace6:	4606      	mov	r6, r0
 800ace8:	460c      	mov	r4, r1
 800acea:	4690      	mov	r8, r2
 800acec:	b91b      	cbnz	r3, 800acf6 <__sfvwrite_r+0x16>
 800acee:	2000      	movs	r0, #0
 800acf0:	b003      	add	sp, #12
 800acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf6:	898b      	ldrh	r3, [r1, #12]
 800acf8:	0718      	lsls	r0, r3, #28
 800acfa:	d550      	bpl.n	800ad9e <__sfvwrite_r+0xbe>
 800acfc:	690b      	ldr	r3, [r1, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d04d      	beq.n	800ad9e <__sfvwrite_r+0xbe>
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f8d8 7000 	ldr.w	r7, [r8]
 800ad08:	f013 0902 	ands.w	r9, r3, #2
 800ad0c:	d16c      	bne.n	800ade8 <__sfvwrite_r+0x108>
 800ad0e:	f013 0301 	ands.w	r3, r3, #1
 800ad12:	f000 809c 	beq.w	800ae4e <__sfvwrite_r+0x16e>
 800ad16:	4648      	mov	r0, r9
 800ad18:	46ca      	mov	sl, r9
 800ad1a:	46cb      	mov	fp, r9
 800ad1c:	f1bb 0f00 	cmp.w	fp, #0
 800ad20:	f000 8103 	beq.w	800af2a <__sfvwrite_r+0x24a>
 800ad24:	b950      	cbnz	r0, 800ad3c <__sfvwrite_r+0x5c>
 800ad26:	465a      	mov	r2, fp
 800ad28:	210a      	movs	r1, #10
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	f000 fc00 	bl	800b530 <memchr>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	f000 80ff 	beq.w	800af34 <__sfvwrite_r+0x254>
 800ad36:	3001      	adds	r0, #1
 800ad38:	eba0 090a 	sub.w	r9, r0, sl
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	6921      	ldr	r1, [r4, #16]
 800ad40:	45d9      	cmp	r9, fp
 800ad42:	464a      	mov	r2, r9
 800ad44:	bf28      	it	cs
 800ad46:	465a      	movcs	r2, fp
 800ad48:	4288      	cmp	r0, r1
 800ad4a:	6963      	ldr	r3, [r4, #20]
 800ad4c:	f240 80f5 	bls.w	800af3a <__sfvwrite_r+0x25a>
 800ad50:	68a5      	ldr	r5, [r4, #8]
 800ad52:	441d      	add	r5, r3
 800ad54:	42aa      	cmp	r2, r5
 800ad56:	f340 80f0 	ble.w	800af3a <__sfvwrite_r+0x25a>
 800ad5a:	4651      	mov	r1, sl
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	f000 fc03 	bl	800b568 <memmove>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	4621      	mov	r1, r4
 800ad66:	442b      	add	r3, r5
 800ad68:	4630      	mov	r0, r6
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	f7ff fdfc 	bl	800a968 <_fflush_r>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d167      	bne.n	800ae44 <__sfvwrite_r+0x164>
 800ad74:	ebb9 0905 	subs.w	r9, r9, r5
 800ad78:	f040 80f7 	bne.w	800af6a <__sfvwrite_r+0x28a>
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7ff fdf2 	bl	800a968 <_fflush_r>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d15d      	bne.n	800ae44 <__sfvwrite_r+0x164>
 800ad88:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800ad8c:	44aa      	add	sl, r5
 800ad8e:	ebab 0b05 	sub.w	fp, fp, r5
 800ad92:	1b55      	subs	r5, r2, r5
 800ad94:	f8c8 5008 	str.w	r5, [r8, #8]
 800ad98:	2d00      	cmp	r5, #0
 800ad9a:	d1bf      	bne.n	800ad1c <__sfvwrite_r+0x3c>
 800ad9c:	e7a7      	b.n	800acee <__sfvwrite_r+0xe>
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7fe fe9f 	bl	8009ae4 <__swsetup_r>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d0ab      	beq.n	800ad02 <__sfvwrite_r+0x22>
 800adaa:	f04f 30ff 	mov.w	r0, #4294967295
 800adae:	e79f      	b.n	800acf0 <__sfvwrite_r+0x10>
 800adb0:	e9d7 b900 	ldrd	fp, r9, [r7]
 800adb4:	3708      	adds	r7, #8
 800adb6:	f1b9 0f00 	cmp.w	r9, #0
 800adba:	d0f9      	beq.n	800adb0 <__sfvwrite_r+0xd0>
 800adbc:	45d1      	cmp	r9, sl
 800adbe:	464b      	mov	r3, r9
 800adc0:	465a      	mov	r2, fp
 800adc2:	bf28      	it	cs
 800adc4:	4653      	movcs	r3, sl
 800adc6:	4630      	mov	r0, r6
 800adc8:	69e1      	ldr	r1, [r4, #28]
 800adca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800adcc:	47a8      	blx	r5
 800adce:	2800      	cmp	r0, #0
 800add0:	dd38      	ble.n	800ae44 <__sfvwrite_r+0x164>
 800add2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800add6:	4483      	add	fp, r0
 800add8:	eba9 0900 	sub.w	r9, r9, r0
 800addc:	1a18      	subs	r0, r3, r0
 800adde:	f8c8 0008 	str.w	r0, [r8, #8]
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d1e7      	bne.n	800adb6 <__sfvwrite_r+0xd6>
 800ade6:	e782      	b.n	800acee <__sfvwrite_r+0xe>
 800ade8:	f04f 0b00 	mov.w	fp, #0
 800adec:	f8df a180 	ldr.w	sl, [pc, #384]	; 800af70 <__sfvwrite_r+0x290>
 800adf0:	46d9      	mov	r9, fp
 800adf2:	e7e0      	b.n	800adb6 <__sfvwrite_r+0xd6>
 800adf4:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800adf8:	3708      	adds	r7, #8
 800adfa:	f1ba 0f00 	cmp.w	sl, #0
 800adfe:	d0f9      	beq.n	800adf4 <__sfvwrite_r+0x114>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	68a2      	ldr	r2, [r4, #8]
 800ae04:	0599      	lsls	r1, r3, #22
 800ae06:	6820      	ldr	r0, [r4, #0]
 800ae08:	d563      	bpl.n	800aed2 <__sfvwrite_r+0x1f2>
 800ae0a:	4552      	cmp	r2, sl
 800ae0c:	d836      	bhi.n	800ae7c <__sfvwrite_r+0x19c>
 800ae0e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800ae12:	d033      	beq.n	800ae7c <__sfvwrite_r+0x19c>
 800ae14:	6921      	ldr	r1, [r4, #16]
 800ae16:	6965      	ldr	r5, [r4, #20]
 800ae18:	eba0 0b01 	sub.w	fp, r0, r1
 800ae1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae24:	f10b 0201 	add.w	r2, fp, #1
 800ae28:	106d      	asrs	r5, r5, #1
 800ae2a:	4452      	add	r2, sl
 800ae2c:	4295      	cmp	r5, r2
 800ae2e:	bf38      	it	cc
 800ae30:	4615      	movcc	r5, r2
 800ae32:	055b      	lsls	r3, r3, #21
 800ae34:	d53d      	bpl.n	800aeb2 <__sfvwrite_r+0x1d2>
 800ae36:	4629      	mov	r1, r5
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 f937 	bl	800b0ac <_malloc_r>
 800ae3e:	b948      	cbnz	r0, 800ae54 <__sfvwrite_r+0x174>
 800ae40:	230c      	movs	r3, #12
 800ae42:	6033      	str	r3, [r6, #0]
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	e7ad      	b.n	800adaa <__sfvwrite_r+0xca>
 800ae4e:	4699      	mov	r9, r3
 800ae50:	469a      	mov	sl, r3
 800ae52:	e7d2      	b.n	800adfa <__sfvwrite_r+0x11a>
 800ae54:	465a      	mov	r2, fp
 800ae56:	6921      	ldr	r1, [r4, #16]
 800ae58:	9001      	str	r0, [sp, #4]
 800ae5a:	f000 fb77 	bl	800b54c <memcpy>
 800ae5e:	89a2      	ldrh	r2, [r4, #12]
 800ae60:	9b01      	ldr	r3, [sp, #4]
 800ae62:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ae66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae6a:	81a2      	strh	r2, [r4, #12]
 800ae6c:	4652      	mov	r2, sl
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	6165      	str	r5, [r4, #20]
 800ae72:	445b      	add	r3, fp
 800ae74:	eba5 050b 	sub.w	r5, r5, fp
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	60a5      	str	r5, [r4, #8]
 800ae7c:	4552      	cmp	r2, sl
 800ae7e:	bf28      	it	cs
 800ae80:	4652      	movcs	r2, sl
 800ae82:	4655      	mov	r5, sl
 800ae84:	4649      	mov	r1, r9
 800ae86:	6820      	ldr	r0, [r4, #0]
 800ae88:	9201      	str	r2, [sp, #4]
 800ae8a:	f000 fb6d 	bl	800b568 <memmove>
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	9a01      	ldr	r2, [sp, #4]
 800ae92:	1a9b      	subs	r3, r3, r2
 800ae94:	60a3      	str	r3, [r4, #8]
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	441a      	add	r2, r3
 800ae9a:	6022      	str	r2, [r4, #0]
 800ae9c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800aea0:	44a9      	add	r9, r5
 800aea2:	ebaa 0a05 	sub.w	sl, sl, r5
 800aea6:	1b45      	subs	r5, r0, r5
 800aea8:	f8c8 5008 	str.w	r5, [r8, #8]
 800aeac:	2d00      	cmp	r5, #0
 800aeae:	d1a4      	bne.n	800adfa <__sfvwrite_r+0x11a>
 800aeb0:	e71d      	b.n	800acee <__sfvwrite_r+0xe>
 800aeb2:	462a      	mov	r2, r5
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f000 fee5 	bl	800bc84 <_realloc_r>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d1d5      	bne.n	800ae6c <__sfvwrite_r+0x18c>
 800aec0:	4630      	mov	r0, r6
 800aec2:	6921      	ldr	r1, [r4, #16]
 800aec4:	f7ff fe4c 	bl	800ab60 <_free_r>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aece:	81a3      	strh	r3, [r4, #12]
 800aed0:	e7b6      	b.n	800ae40 <__sfvwrite_r+0x160>
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	4283      	cmp	r3, r0
 800aed6:	d302      	bcc.n	800aede <__sfvwrite_r+0x1fe>
 800aed8:	6961      	ldr	r1, [r4, #20]
 800aeda:	4551      	cmp	r1, sl
 800aedc:	d915      	bls.n	800af0a <__sfvwrite_r+0x22a>
 800aede:	4552      	cmp	r2, sl
 800aee0:	bf28      	it	cs
 800aee2:	4652      	movcs	r2, sl
 800aee4:	4615      	mov	r5, r2
 800aee6:	4649      	mov	r1, r9
 800aee8:	f000 fb3e 	bl	800b568 <memmove>
 800aeec:	68a3      	ldr	r3, [r4, #8]
 800aeee:	6822      	ldr	r2, [r4, #0]
 800aef0:	1b5b      	subs	r3, r3, r5
 800aef2:	442a      	add	r2, r5
 800aef4:	60a3      	str	r3, [r4, #8]
 800aef6:	6022      	str	r2, [r4, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1cf      	bne.n	800ae9c <__sfvwrite_r+0x1bc>
 800aefc:	4621      	mov	r1, r4
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff fd32 	bl	800a968 <_fflush_r>
 800af04:	2800      	cmp	r0, #0
 800af06:	d0c9      	beq.n	800ae9c <__sfvwrite_r+0x1bc>
 800af08:	e79c      	b.n	800ae44 <__sfvwrite_r+0x164>
 800af0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800af0e:	459a      	cmp	sl, r3
 800af10:	bf38      	it	cc
 800af12:	4653      	movcc	r3, sl
 800af14:	fb93 f3f1 	sdiv	r3, r3, r1
 800af18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800af1a:	434b      	muls	r3, r1
 800af1c:	464a      	mov	r2, r9
 800af1e:	4630      	mov	r0, r6
 800af20:	69e1      	ldr	r1, [r4, #28]
 800af22:	47a8      	blx	r5
 800af24:	1e05      	subs	r5, r0, #0
 800af26:	dcb9      	bgt.n	800ae9c <__sfvwrite_r+0x1bc>
 800af28:	e78c      	b.n	800ae44 <__sfvwrite_r+0x164>
 800af2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af2e:	2000      	movs	r0, #0
 800af30:	3708      	adds	r7, #8
 800af32:	e6f3      	b.n	800ad1c <__sfvwrite_r+0x3c>
 800af34:	f10b 0901 	add.w	r9, fp, #1
 800af38:	e700      	b.n	800ad3c <__sfvwrite_r+0x5c>
 800af3a:	4293      	cmp	r3, r2
 800af3c:	dc08      	bgt.n	800af50 <__sfvwrite_r+0x270>
 800af3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800af40:	4652      	mov	r2, sl
 800af42:	4630      	mov	r0, r6
 800af44:	69e1      	ldr	r1, [r4, #28]
 800af46:	47a8      	blx	r5
 800af48:	1e05      	subs	r5, r0, #0
 800af4a:	f73f af13 	bgt.w	800ad74 <__sfvwrite_r+0x94>
 800af4e:	e779      	b.n	800ae44 <__sfvwrite_r+0x164>
 800af50:	4651      	mov	r1, sl
 800af52:	9201      	str	r2, [sp, #4]
 800af54:	f000 fb08 	bl	800b568 <memmove>
 800af58:	9a01      	ldr	r2, [sp, #4]
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	4615      	mov	r5, r2
 800af5e:	1a9b      	subs	r3, r3, r2
 800af60:	60a3      	str	r3, [r4, #8]
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	4413      	add	r3, r2
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	e704      	b.n	800ad74 <__sfvwrite_r+0x94>
 800af6a:	2001      	movs	r0, #1
 800af6c:	e70c      	b.n	800ad88 <__sfvwrite_r+0xa8>
 800af6e:	bf00      	nop
 800af70:	7ffffc00 	.word	0x7ffffc00

0800af74 <_fwalk_reent>:
 800af74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af78:	4606      	mov	r6, r0
 800af7a:	4688      	mov	r8, r1
 800af7c:	2700      	movs	r7, #0
 800af7e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800af82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af86:	f1b9 0901 	subs.w	r9, r9, #1
 800af8a:	d505      	bpl.n	800af98 <_fwalk_reent+0x24>
 800af8c:	6824      	ldr	r4, [r4, #0]
 800af8e:	2c00      	cmp	r4, #0
 800af90:	d1f7      	bne.n	800af82 <_fwalk_reent+0xe>
 800af92:	4638      	mov	r0, r7
 800af94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af98:	89ab      	ldrh	r3, [r5, #12]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d907      	bls.n	800afae <_fwalk_reent+0x3a>
 800af9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afa2:	3301      	adds	r3, #1
 800afa4:	d003      	beq.n	800afae <_fwalk_reent+0x3a>
 800afa6:	4629      	mov	r1, r5
 800afa8:	4630      	mov	r0, r6
 800afaa:	47c0      	blx	r8
 800afac:	4307      	orrs	r7, r0
 800afae:	3568      	adds	r5, #104	; 0x68
 800afb0:	e7e9      	b.n	800af86 <_fwalk_reent+0x12>
	...

0800afb4 <_localeconv_r>:
 800afb4:	4800      	ldr	r0, [pc, #0]	; (800afb8 <_localeconv_r+0x4>)
 800afb6:	4770      	bx	lr
 800afb8:	2000101c 	.word	0x2000101c

0800afbc <__retarget_lock_init_recursive>:
 800afbc:	4770      	bx	lr

0800afbe <__retarget_lock_close_recursive>:
 800afbe:	4770      	bx	lr

0800afc0 <__retarget_lock_acquire_recursive>:
 800afc0:	4770      	bx	lr

0800afc2 <__retarget_lock_release_recursive>:
 800afc2:	4770      	bx	lr

0800afc4 <__swhatbuf_r>:
 800afc4:	b570      	push	{r4, r5, r6, lr}
 800afc6:	460e      	mov	r6, r1
 800afc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afcc:	4614      	mov	r4, r2
 800afce:	2900      	cmp	r1, #0
 800afd0:	461d      	mov	r5, r3
 800afd2:	b096      	sub	sp, #88	; 0x58
 800afd4:	da09      	bge.n	800afea <__swhatbuf_r+0x26>
 800afd6:	2200      	movs	r2, #0
 800afd8:	89b3      	ldrh	r3, [r6, #12]
 800afda:	602a      	str	r2, [r5, #0]
 800afdc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800afe0:	d116      	bne.n	800b010 <__swhatbuf_r+0x4c>
 800afe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	e015      	b.n	800b016 <__swhatbuf_r+0x52>
 800afea:	466a      	mov	r2, sp
 800afec:	f001 ff5a 	bl	800cea4 <_fstat_r>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	dbf0      	blt.n	800afd6 <__swhatbuf_r+0x12>
 800aff4:	9a01      	ldr	r2, [sp, #4]
 800aff6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800affa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800affe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b002:	425a      	negs	r2, r3
 800b004:	415a      	adcs	r2, r3
 800b006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b00a:	602a      	str	r2, [r5, #0]
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	e002      	b.n	800b016 <__swhatbuf_r+0x52>
 800b010:	2340      	movs	r3, #64	; 0x40
 800b012:	4610      	mov	r0, r2
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	b016      	add	sp, #88	; 0x58
 800b018:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b01c <__smakebuf_r>:
 800b01c:	898b      	ldrh	r3, [r1, #12]
 800b01e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b020:	079d      	lsls	r5, r3, #30
 800b022:	4606      	mov	r6, r0
 800b024:	460c      	mov	r4, r1
 800b026:	d507      	bpl.n	800b038 <__smakebuf_r+0x1c>
 800b028:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	6123      	str	r3, [r4, #16]
 800b030:	2301      	movs	r3, #1
 800b032:	6163      	str	r3, [r4, #20]
 800b034:	b002      	add	sp, #8
 800b036:	bd70      	pop	{r4, r5, r6, pc}
 800b038:	466a      	mov	r2, sp
 800b03a:	ab01      	add	r3, sp, #4
 800b03c:	f7ff ffc2 	bl	800afc4 <__swhatbuf_r>
 800b040:	9900      	ldr	r1, [sp, #0]
 800b042:	4605      	mov	r5, r0
 800b044:	4630      	mov	r0, r6
 800b046:	f000 f831 	bl	800b0ac <_malloc_r>
 800b04a:	b948      	cbnz	r0, 800b060 <__smakebuf_r+0x44>
 800b04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b050:	059a      	lsls	r2, r3, #22
 800b052:	d4ef      	bmi.n	800b034 <__smakebuf_r+0x18>
 800b054:	f023 0303 	bic.w	r3, r3, #3
 800b058:	f043 0302 	orr.w	r3, r3, #2
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	e7e3      	b.n	800b028 <__smakebuf_r+0xc>
 800b060:	4b0d      	ldr	r3, [pc, #52]	; (800b098 <__smakebuf_r+0x7c>)
 800b062:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	6020      	str	r0, [r4, #0]
 800b068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	9b00      	ldr	r3, [sp, #0]
 800b070:	6120      	str	r0, [r4, #16]
 800b072:	6163      	str	r3, [r4, #20]
 800b074:	9b01      	ldr	r3, [sp, #4]
 800b076:	b15b      	cbz	r3, 800b090 <__smakebuf_r+0x74>
 800b078:	4630      	mov	r0, r6
 800b07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b07e:	f001 ff23 	bl	800cec8 <_isatty_r>
 800b082:	b128      	cbz	r0, 800b090 <__smakebuf_r+0x74>
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	f023 0303 	bic.w	r3, r3, #3
 800b08a:	f043 0301 	orr.w	r3, r3, #1
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	89a0      	ldrh	r0, [r4, #12]
 800b092:	4305      	orrs	r5, r0
 800b094:	81a5      	strh	r5, [r4, #12]
 800b096:	e7cd      	b.n	800b034 <__smakebuf_r+0x18>
 800b098:	0800aa05 	.word	0x0800aa05

0800b09c <malloc>:
 800b09c:	4b02      	ldr	r3, [pc, #8]	; (800b0a8 <malloc+0xc>)
 800b09e:	4601      	mov	r1, r0
 800b0a0:	6818      	ldr	r0, [r3, #0]
 800b0a2:	f000 b803 	b.w	800b0ac <_malloc_r>
 800b0a6:	bf00      	nop
 800b0a8:	200006ec 	.word	0x200006ec

0800b0ac <_malloc_r>:
 800b0ac:	f101 030b 	add.w	r3, r1, #11
 800b0b0:	2b16      	cmp	r3, #22
 800b0b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	d906      	bls.n	800b0c8 <_malloc_r+0x1c>
 800b0ba:	f033 0707 	bics.w	r7, r3, #7
 800b0be:	d504      	bpl.n	800b0ca <_malloc_r+0x1e>
 800b0c0:	230c      	movs	r3, #12
 800b0c2:	602b      	str	r3, [r5, #0]
 800b0c4:	2400      	movs	r4, #0
 800b0c6:	e1ae      	b.n	800b426 <_malloc_r+0x37a>
 800b0c8:	2710      	movs	r7, #16
 800b0ca:	42b9      	cmp	r1, r7
 800b0cc:	d8f8      	bhi.n	800b0c0 <_malloc_r+0x14>
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f000 fa64 	bl	800b59c <__malloc_lock>
 800b0d4:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800b0d8:	4ec3      	ldr	r6, [pc, #780]	; (800b3e8 <_malloc_r+0x33c>)
 800b0da:	d238      	bcs.n	800b14e <_malloc_r+0xa2>
 800b0dc:	f107 0208 	add.w	r2, r7, #8
 800b0e0:	4432      	add	r2, r6
 800b0e2:	6854      	ldr	r4, [r2, #4]
 800b0e4:	f1a2 0108 	sub.w	r1, r2, #8
 800b0e8:	428c      	cmp	r4, r1
 800b0ea:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800b0ee:	d102      	bne.n	800b0f6 <_malloc_r+0x4a>
 800b0f0:	68d4      	ldr	r4, [r2, #12]
 800b0f2:	42a2      	cmp	r2, r4
 800b0f4:	d010      	beq.n	800b118 <_malloc_r+0x6c>
 800b0f6:	6863      	ldr	r3, [r4, #4]
 800b0f8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b0fc:	f023 0303 	bic.w	r3, r3, #3
 800b100:	60ca      	str	r2, [r1, #12]
 800b102:	4423      	add	r3, r4
 800b104:	6091      	str	r1, [r2, #8]
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	f042 0201 	orr.w	r2, r2, #1
 800b10c:	605a      	str	r2, [r3, #4]
 800b10e:	4628      	mov	r0, r5
 800b110:	f000 fa4a 	bl	800b5a8 <__malloc_unlock>
 800b114:	3408      	adds	r4, #8
 800b116:	e186      	b.n	800b426 <_malloc_r+0x37a>
 800b118:	3302      	adds	r3, #2
 800b11a:	4ab4      	ldr	r2, [pc, #720]	; (800b3ec <_malloc_r+0x340>)
 800b11c:	6934      	ldr	r4, [r6, #16]
 800b11e:	4611      	mov	r1, r2
 800b120:	4294      	cmp	r4, r2
 800b122:	d077      	beq.n	800b214 <_malloc_r+0x168>
 800b124:	6860      	ldr	r0, [r4, #4]
 800b126:	f020 0c03 	bic.w	ip, r0, #3
 800b12a:	ebac 0007 	sub.w	r0, ip, r7
 800b12e:	280f      	cmp	r0, #15
 800b130:	dd48      	ble.n	800b1c4 <_malloc_r+0x118>
 800b132:	19e1      	adds	r1, r4, r7
 800b134:	f040 0301 	orr.w	r3, r0, #1
 800b138:	f047 0701 	orr.w	r7, r7, #1
 800b13c:	6067      	str	r7, [r4, #4]
 800b13e:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800b142:	e9c1 2202 	strd	r2, r2, [r1, #8]
 800b146:	604b      	str	r3, [r1, #4]
 800b148:	f844 000c 	str.w	r0, [r4, ip]
 800b14c:	e7df      	b.n	800b10e <_malloc_r+0x62>
 800b14e:	0a7b      	lsrs	r3, r7, #9
 800b150:	d02a      	beq.n	800b1a8 <_malloc_r+0xfc>
 800b152:	2b04      	cmp	r3, #4
 800b154:	d812      	bhi.n	800b17c <_malloc_r+0xd0>
 800b156:	09bb      	lsrs	r3, r7, #6
 800b158:	3338      	adds	r3, #56	; 0x38
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800b160:	6854      	ldr	r4, [r2, #4]
 800b162:	f1a2 0c08 	sub.w	ip, r2, #8
 800b166:	4564      	cmp	r4, ip
 800b168:	d006      	beq.n	800b178 <_malloc_r+0xcc>
 800b16a:	6862      	ldr	r2, [r4, #4]
 800b16c:	f022 0203 	bic.w	r2, r2, #3
 800b170:	1bd0      	subs	r0, r2, r7
 800b172:	280f      	cmp	r0, #15
 800b174:	dd1c      	ble.n	800b1b0 <_malloc_r+0x104>
 800b176:	3b01      	subs	r3, #1
 800b178:	3301      	adds	r3, #1
 800b17a:	e7ce      	b.n	800b11a <_malloc_r+0x6e>
 800b17c:	2b14      	cmp	r3, #20
 800b17e:	d801      	bhi.n	800b184 <_malloc_r+0xd8>
 800b180:	335b      	adds	r3, #91	; 0x5b
 800b182:	e7ea      	b.n	800b15a <_malloc_r+0xae>
 800b184:	2b54      	cmp	r3, #84	; 0x54
 800b186:	d802      	bhi.n	800b18e <_malloc_r+0xe2>
 800b188:	0b3b      	lsrs	r3, r7, #12
 800b18a:	336e      	adds	r3, #110	; 0x6e
 800b18c:	e7e5      	b.n	800b15a <_malloc_r+0xae>
 800b18e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b192:	d802      	bhi.n	800b19a <_malloc_r+0xee>
 800b194:	0bfb      	lsrs	r3, r7, #15
 800b196:	3377      	adds	r3, #119	; 0x77
 800b198:	e7df      	b.n	800b15a <_malloc_r+0xae>
 800b19a:	f240 5254 	movw	r2, #1364	; 0x554
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d804      	bhi.n	800b1ac <_malloc_r+0x100>
 800b1a2:	0cbb      	lsrs	r3, r7, #18
 800b1a4:	337c      	adds	r3, #124	; 0x7c
 800b1a6:	e7d8      	b.n	800b15a <_malloc_r+0xae>
 800b1a8:	233f      	movs	r3, #63	; 0x3f
 800b1aa:	e7d6      	b.n	800b15a <_malloc_r+0xae>
 800b1ac:	237e      	movs	r3, #126	; 0x7e
 800b1ae:	e7d4      	b.n	800b15a <_malloc_r+0xae>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	68e1      	ldr	r1, [r4, #12]
 800b1b4:	db04      	blt.n	800b1c0 <_malloc_r+0x114>
 800b1b6:	68a3      	ldr	r3, [r4, #8]
 800b1b8:	60d9      	str	r1, [r3, #12]
 800b1ba:	608b      	str	r3, [r1, #8]
 800b1bc:	18a3      	adds	r3, r4, r2
 800b1be:	e7a2      	b.n	800b106 <_malloc_r+0x5a>
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	e7d0      	b.n	800b166 <_malloc_r+0xba>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800b1ca:	db07      	blt.n	800b1dc <_malloc_r+0x130>
 800b1cc:	44a4      	add	ip, r4
 800b1ce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b1d2:	f043 0301 	orr.w	r3, r3, #1
 800b1d6:	f8cc 3004 	str.w	r3, [ip, #4]
 800b1da:	e798      	b.n	800b10e <_malloc_r+0x62>
 800b1dc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800b1e0:	6870      	ldr	r0, [r6, #4]
 800b1e2:	f080 809e 	bcs.w	800b322 <_malloc_r+0x276>
 800b1e6:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800b1ea:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800b1ee:	f04f 0c01 	mov.w	ip, #1
 800b1f2:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b1f6:	ea4c 0000 	orr.w	r0, ip, r0
 800b1fa:	3201      	adds	r2, #1
 800b1fc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800b200:	6070      	str	r0, [r6, #4]
 800b202:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800b206:	3808      	subs	r0, #8
 800b208:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800b20c:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800b210:	f8cc 400c 	str.w	r4, [ip, #12]
 800b214:	2001      	movs	r0, #1
 800b216:	109a      	asrs	r2, r3, #2
 800b218:	fa00 f202 	lsl.w	r2, r0, r2
 800b21c:	6870      	ldr	r0, [r6, #4]
 800b21e:	4290      	cmp	r0, r2
 800b220:	d326      	bcc.n	800b270 <_malloc_r+0x1c4>
 800b222:	4210      	tst	r0, r2
 800b224:	d106      	bne.n	800b234 <_malloc_r+0x188>
 800b226:	f023 0303 	bic.w	r3, r3, #3
 800b22a:	0052      	lsls	r2, r2, #1
 800b22c:	4210      	tst	r0, r2
 800b22e:	f103 0304 	add.w	r3, r3, #4
 800b232:	d0fa      	beq.n	800b22a <_malloc_r+0x17e>
 800b234:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800b238:	46c1      	mov	r9, r8
 800b23a:	469e      	mov	lr, r3
 800b23c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b240:	454c      	cmp	r4, r9
 800b242:	f040 80b3 	bne.w	800b3ac <_malloc_r+0x300>
 800b246:	f10e 0e01 	add.w	lr, lr, #1
 800b24a:	f01e 0f03 	tst.w	lr, #3
 800b24e:	f109 0908 	add.w	r9, r9, #8
 800b252:	d1f3      	bne.n	800b23c <_malloc_r+0x190>
 800b254:	0798      	lsls	r0, r3, #30
 800b256:	f040 80ec 	bne.w	800b432 <_malloc_r+0x386>
 800b25a:	6873      	ldr	r3, [r6, #4]
 800b25c:	ea23 0302 	bic.w	r3, r3, r2
 800b260:	6073      	str	r3, [r6, #4]
 800b262:	6870      	ldr	r0, [r6, #4]
 800b264:	0052      	lsls	r2, r2, #1
 800b266:	4290      	cmp	r0, r2
 800b268:	d302      	bcc.n	800b270 <_malloc_r+0x1c4>
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	f040 80ed 	bne.w	800b44a <_malloc_r+0x39e>
 800b270:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800b274:	f8db 1004 	ldr.w	r1, [fp, #4]
 800b278:	f021 0903 	bic.w	r9, r1, #3
 800b27c:	45b9      	cmp	r9, r7
 800b27e:	d304      	bcc.n	800b28a <_malloc_r+0x1de>
 800b280:	eba9 0207 	sub.w	r2, r9, r7
 800b284:	2a0f      	cmp	r2, #15
 800b286:	f300 8148 	bgt.w	800b51a <_malloc_r+0x46e>
 800b28a:	4a59      	ldr	r2, [pc, #356]	; (800b3f0 <_malloc_r+0x344>)
 800b28c:	eb0b 0309 	add.w	r3, fp, r9
 800b290:	6811      	ldr	r1, [r2, #0]
 800b292:	2008      	movs	r0, #8
 800b294:	3110      	adds	r1, #16
 800b296:	4439      	add	r1, r7
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	9100      	str	r1, [sp, #0]
 800b29c:	f000 ff36 	bl	800c10c <sysconf>
 800b2a0:	e9dd 1300 	ldrd	r1, r3, [sp]
 800b2a4:	4680      	mov	r8, r0
 800b2a6:	4a53      	ldr	r2, [pc, #332]	; (800b3f4 <_malloc_r+0x348>)
 800b2a8:	6810      	ldr	r0, [r2, #0]
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	bf1f      	itttt	ne
 800b2ae:	f101 31ff 	addne.w	r1, r1, #4294967295
 800b2b2:	4441      	addne	r1, r8
 800b2b4:	f1c8 0000 	rsbne	r0, r8, #0
 800b2b8:	4001      	andne	r1, r0
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	e9cd 1300 	strd	r1, r3, [sp]
 800b2c0:	f000 febe 	bl	800c040 <_sbrk_r>
 800b2c4:	1c42      	adds	r2, r0, #1
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	f000 80fb 	beq.w	800b4c2 <_malloc_r+0x416>
 800b2cc:	9b01      	ldr	r3, [sp, #4]
 800b2ce:	9900      	ldr	r1, [sp, #0]
 800b2d0:	4283      	cmp	r3, r0
 800b2d2:	4a48      	ldr	r2, [pc, #288]	; (800b3f4 <_malloc_r+0x348>)
 800b2d4:	d902      	bls.n	800b2dc <_malloc_r+0x230>
 800b2d6:	45b3      	cmp	fp, r6
 800b2d8:	f040 80f3 	bne.w	800b4c2 <_malloc_r+0x416>
 800b2dc:	f8df a120 	ldr.w	sl, [pc, #288]	; 800b400 <_malloc_r+0x354>
 800b2e0:	42a3      	cmp	r3, r4
 800b2e2:	f8da 0000 	ldr.w	r0, [sl]
 800b2e6:	f108 3cff 	add.w	ip, r8, #4294967295
 800b2ea:	eb00 0e01 	add.w	lr, r0, r1
 800b2ee:	f8ca e000 	str.w	lr, [sl]
 800b2f2:	f040 80ac 	bne.w	800b44e <_malloc_r+0x3a2>
 800b2f6:	ea13 0f0c 	tst.w	r3, ip
 800b2fa:	f040 80a8 	bne.w	800b44e <_malloc_r+0x3a2>
 800b2fe:	68b3      	ldr	r3, [r6, #8]
 800b300:	4449      	add	r1, r9
 800b302:	f041 0101 	orr.w	r1, r1, #1
 800b306:	6059      	str	r1, [r3, #4]
 800b308:	4a3b      	ldr	r2, [pc, #236]	; (800b3f8 <_malloc_r+0x34c>)
 800b30a:	f8da 3000 	ldr.w	r3, [sl]
 800b30e:	6811      	ldr	r1, [r2, #0]
 800b310:	428b      	cmp	r3, r1
 800b312:	bf88      	it	hi
 800b314:	6013      	strhi	r3, [r2, #0]
 800b316:	4a39      	ldr	r2, [pc, #228]	; (800b3fc <_malloc_r+0x350>)
 800b318:	6811      	ldr	r1, [r2, #0]
 800b31a:	428b      	cmp	r3, r1
 800b31c:	bf88      	it	hi
 800b31e:	6013      	strhi	r3, [r2, #0]
 800b320:	e0cf      	b.n	800b4c2 <_malloc_r+0x416>
 800b322:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800b326:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800b32a:	d218      	bcs.n	800b35e <_malloc_r+0x2b2>
 800b32c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800b330:	3238      	adds	r2, #56	; 0x38
 800b332:	f102 0e01 	add.w	lr, r2, #1
 800b336:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800b33a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800b33e:	45f0      	cmp	r8, lr
 800b340:	d12b      	bne.n	800b39a <_malloc_r+0x2ee>
 800b342:	f04f 0c01 	mov.w	ip, #1
 800b346:	1092      	asrs	r2, r2, #2
 800b348:	fa0c f202 	lsl.w	r2, ip, r2
 800b34c:	4310      	orrs	r0, r2
 800b34e:	6070      	str	r0, [r6, #4]
 800b350:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800b354:	f8c8 4008 	str.w	r4, [r8, #8]
 800b358:	f8ce 400c 	str.w	r4, [lr, #12]
 800b35c:	e75a      	b.n	800b214 <_malloc_r+0x168>
 800b35e:	2a14      	cmp	r2, #20
 800b360:	d801      	bhi.n	800b366 <_malloc_r+0x2ba>
 800b362:	325b      	adds	r2, #91	; 0x5b
 800b364:	e7e5      	b.n	800b332 <_malloc_r+0x286>
 800b366:	2a54      	cmp	r2, #84	; 0x54
 800b368:	d803      	bhi.n	800b372 <_malloc_r+0x2c6>
 800b36a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800b36e:	326e      	adds	r2, #110	; 0x6e
 800b370:	e7df      	b.n	800b332 <_malloc_r+0x286>
 800b372:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b376:	d803      	bhi.n	800b380 <_malloc_r+0x2d4>
 800b378:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800b37c:	3277      	adds	r2, #119	; 0x77
 800b37e:	e7d8      	b.n	800b332 <_malloc_r+0x286>
 800b380:	f240 5e54 	movw	lr, #1364	; 0x554
 800b384:	4572      	cmp	r2, lr
 800b386:	bf96      	itet	ls
 800b388:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800b38c:	227e      	movhi	r2, #126	; 0x7e
 800b38e:	327c      	addls	r2, #124	; 0x7c
 800b390:	e7cf      	b.n	800b332 <_malloc_r+0x286>
 800b392:	f8de e008 	ldr.w	lr, [lr, #8]
 800b396:	45f0      	cmp	r8, lr
 800b398:	d005      	beq.n	800b3a6 <_malloc_r+0x2fa>
 800b39a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b39e:	f022 0203 	bic.w	r2, r2, #3
 800b3a2:	4562      	cmp	r2, ip
 800b3a4:	d8f5      	bhi.n	800b392 <_malloc_r+0x2e6>
 800b3a6:	f8de 800c 	ldr.w	r8, [lr, #12]
 800b3aa:	e7d1      	b.n	800b350 <_malloc_r+0x2a4>
 800b3ac:	6860      	ldr	r0, [r4, #4]
 800b3ae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b3b2:	f020 0003 	bic.w	r0, r0, #3
 800b3b6:	eba0 0a07 	sub.w	sl, r0, r7
 800b3ba:	f1ba 0f0f 	cmp.w	sl, #15
 800b3be:	dd21      	ble.n	800b404 <_malloc_r+0x358>
 800b3c0:	68a3      	ldr	r3, [r4, #8]
 800b3c2:	19e2      	adds	r2, r4, r7
 800b3c4:	f047 0701 	orr.w	r7, r7, #1
 800b3c8:	6067      	str	r7, [r4, #4]
 800b3ca:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b3ce:	f8cc 3008 	str.w	r3, [ip, #8]
 800b3d2:	f04a 0301 	orr.w	r3, sl, #1
 800b3d6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800b3da:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800b3de:	6053      	str	r3, [r2, #4]
 800b3e0:	f844 a000 	str.w	sl, [r4, r0]
 800b3e4:	e693      	b.n	800b10e <_malloc_r+0x62>
 800b3e6:	bf00      	nop
 800b3e8:	20000b1c 	.word	0x20000b1c
 800b3ec:	20000b24 	.word	0x20000b24
 800b3f0:	20001114 	.word	0x20001114
 800b3f4:	20000f24 	.word	0x20000f24
 800b3f8:	2000110c 	.word	0x2000110c
 800b3fc:	20001110 	.word	0x20001110
 800b400:	200010e4 	.word	0x200010e4
 800b404:	f1ba 0f00 	cmp.w	sl, #0
 800b408:	db11      	blt.n	800b42e <_malloc_r+0x382>
 800b40a:	4420      	add	r0, r4
 800b40c:	6843      	ldr	r3, [r0, #4]
 800b40e:	f043 0301 	orr.w	r3, r3, #1
 800b412:	6043      	str	r3, [r0, #4]
 800b414:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800b418:	4628      	mov	r0, r5
 800b41a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b41e:	f8cc 3008 	str.w	r3, [ip, #8]
 800b422:	f000 f8c1 	bl	800b5a8 <__malloc_unlock>
 800b426:	4620      	mov	r0, r4
 800b428:	b003      	add	sp, #12
 800b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42e:	4664      	mov	r4, ip
 800b430:	e706      	b.n	800b240 <_malloc_r+0x194>
 800b432:	f858 0908 	ldr.w	r0, [r8], #-8
 800b436:	3b01      	subs	r3, #1
 800b438:	4540      	cmp	r0, r8
 800b43a:	f43f af0b 	beq.w	800b254 <_malloc_r+0x1a8>
 800b43e:	e710      	b.n	800b262 <_malloc_r+0x1b6>
 800b440:	3304      	adds	r3, #4
 800b442:	0052      	lsls	r2, r2, #1
 800b444:	4210      	tst	r0, r2
 800b446:	d0fb      	beq.n	800b440 <_malloc_r+0x394>
 800b448:	e6f4      	b.n	800b234 <_malloc_r+0x188>
 800b44a:	4673      	mov	r3, lr
 800b44c:	e7fa      	b.n	800b444 <_malloc_r+0x398>
 800b44e:	6810      	ldr	r0, [r2, #0]
 800b450:	3001      	adds	r0, #1
 800b452:	bf1b      	ittet	ne
 800b454:	1ae3      	subne	r3, r4, r3
 800b456:	4473      	addne	r3, lr
 800b458:	6014      	streq	r4, [r2, #0]
 800b45a:	f8ca 3000 	strne.w	r3, [sl]
 800b45e:	f014 0307 	ands.w	r3, r4, #7
 800b462:	bf0e      	itee	eq
 800b464:	4618      	moveq	r0, r3
 800b466:	f1c3 0008 	rsbne	r0, r3, #8
 800b46a:	1824      	addne	r4, r4, r0
 800b46c:	1862      	adds	r2, r4, r1
 800b46e:	ea02 010c 	and.w	r1, r2, ip
 800b472:	4480      	add	r8, r0
 800b474:	eba8 0801 	sub.w	r8, r8, r1
 800b478:	ea08 080c 	and.w	r8, r8, ip
 800b47c:	4641      	mov	r1, r8
 800b47e:	4628      	mov	r0, r5
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	9200      	str	r2, [sp, #0]
 800b484:	f000 fddc 	bl	800c040 <_sbrk_r>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b48e:	d105      	bne.n	800b49c <_malloc_r+0x3f0>
 800b490:	b32b      	cbz	r3, 800b4de <_malloc_r+0x432>
 800b492:	f04f 0800 	mov.w	r8, #0
 800b496:	f1a3 0008 	sub.w	r0, r3, #8
 800b49a:	4410      	add	r0, r2
 800b49c:	f8da 2000 	ldr.w	r2, [sl]
 800b4a0:	1b00      	subs	r0, r0, r4
 800b4a2:	4440      	add	r0, r8
 800b4a4:	4442      	add	r2, r8
 800b4a6:	f040 0001 	orr.w	r0, r0, #1
 800b4aa:	45b3      	cmp	fp, r6
 800b4ac:	60b4      	str	r4, [r6, #8]
 800b4ae:	f8ca 2000 	str.w	r2, [sl]
 800b4b2:	6060      	str	r0, [r4, #4]
 800b4b4:	f43f af28 	beq.w	800b308 <_malloc_r+0x25c>
 800b4b8:	f1b9 0f0f 	cmp.w	r9, #15
 800b4bc:	d812      	bhi.n	800b4e4 <_malloc_r+0x438>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	6063      	str	r3, [r4, #4]
 800b4c2:	68b3      	ldr	r3, [r6, #8]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f023 0303 	bic.w	r3, r3, #3
 800b4ca:	42bb      	cmp	r3, r7
 800b4cc:	eba3 0207 	sub.w	r2, r3, r7
 800b4d0:	d301      	bcc.n	800b4d6 <_malloc_r+0x42a>
 800b4d2:	2a0f      	cmp	r2, #15
 800b4d4:	dc21      	bgt.n	800b51a <_malloc_r+0x46e>
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 f866 	bl	800b5a8 <__malloc_unlock>
 800b4dc:	e5f2      	b.n	800b0c4 <_malloc_r+0x18>
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4698      	mov	r8, r3
 800b4e2:	e7db      	b.n	800b49c <_malloc_r+0x3f0>
 800b4e4:	2205      	movs	r2, #5
 800b4e6:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b4ea:	f1a9 090c 	sub.w	r9, r9, #12
 800b4ee:	f029 0907 	bic.w	r9, r9, #7
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	ea43 0309 	orr.w	r3, r3, r9
 800b4fa:	f8cb 3004 	str.w	r3, [fp, #4]
 800b4fe:	f1b9 0f0f 	cmp.w	r9, #15
 800b502:	eb0b 0309 	add.w	r3, fp, r9
 800b506:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800b50a:	f67f aefd 	bls.w	800b308 <_malloc_r+0x25c>
 800b50e:	4628      	mov	r0, r5
 800b510:	f10b 0108 	add.w	r1, fp, #8
 800b514:	f7ff fb24 	bl	800ab60 <_free_r>
 800b518:	e6f6      	b.n	800b308 <_malloc_r+0x25c>
 800b51a:	68b4      	ldr	r4, [r6, #8]
 800b51c:	f047 0301 	orr.w	r3, r7, #1
 800b520:	f042 0201 	orr.w	r2, r2, #1
 800b524:	4427      	add	r7, r4
 800b526:	6063      	str	r3, [r4, #4]
 800b528:	60b7      	str	r7, [r6, #8]
 800b52a:	607a      	str	r2, [r7, #4]
 800b52c:	e5ef      	b.n	800b10e <_malloc_r+0x62>
 800b52e:	bf00      	nop

0800b530 <memchr>:
 800b530:	4603      	mov	r3, r0
 800b532:	b510      	push	{r4, lr}
 800b534:	b2c9      	uxtb	r1, r1
 800b536:	4402      	add	r2, r0
 800b538:	4293      	cmp	r3, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	d101      	bne.n	800b542 <memchr+0x12>
 800b53e:	2000      	movs	r0, #0
 800b540:	e003      	b.n	800b54a <memchr+0x1a>
 800b542:	7804      	ldrb	r4, [r0, #0]
 800b544:	3301      	adds	r3, #1
 800b546:	428c      	cmp	r4, r1
 800b548:	d1f6      	bne.n	800b538 <memchr+0x8>
 800b54a:	bd10      	pop	{r4, pc}

0800b54c <memcpy>:
 800b54c:	440a      	add	r2, r1
 800b54e:	4291      	cmp	r1, r2
 800b550:	f100 33ff 	add.w	r3, r0, #4294967295
 800b554:	d100      	bne.n	800b558 <memcpy+0xc>
 800b556:	4770      	bx	lr
 800b558:	b510      	push	{r4, lr}
 800b55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b55e:	4291      	cmp	r1, r2
 800b560:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b564:	d1f9      	bne.n	800b55a <memcpy+0xe>
 800b566:	bd10      	pop	{r4, pc}

0800b568 <memmove>:
 800b568:	4288      	cmp	r0, r1
 800b56a:	b510      	push	{r4, lr}
 800b56c:	eb01 0402 	add.w	r4, r1, r2
 800b570:	d902      	bls.n	800b578 <memmove+0x10>
 800b572:	4284      	cmp	r4, r0
 800b574:	4623      	mov	r3, r4
 800b576:	d807      	bhi.n	800b588 <memmove+0x20>
 800b578:	1e43      	subs	r3, r0, #1
 800b57a:	42a1      	cmp	r1, r4
 800b57c:	d008      	beq.n	800b590 <memmove+0x28>
 800b57e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b582:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b586:	e7f8      	b.n	800b57a <memmove+0x12>
 800b588:	4601      	mov	r1, r0
 800b58a:	4402      	add	r2, r0
 800b58c:	428a      	cmp	r2, r1
 800b58e:	d100      	bne.n	800b592 <memmove+0x2a>
 800b590:	bd10      	pop	{r4, pc}
 800b592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b59a:	e7f7      	b.n	800b58c <memmove+0x24>

0800b59c <__malloc_lock>:
 800b59c:	4801      	ldr	r0, [pc, #4]	; (800b5a4 <__malloc_lock+0x8>)
 800b59e:	f7ff bd0f 	b.w	800afc0 <__retarget_lock_acquire_recursive>
 800b5a2:	bf00      	nop
 800b5a4:	200015e0 	.word	0x200015e0

0800b5a8 <__malloc_unlock>:
 800b5a8:	4801      	ldr	r0, [pc, #4]	; (800b5b0 <__malloc_unlock+0x8>)
 800b5aa:	f7ff bd0a 	b.w	800afc2 <__retarget_lock_release_recursive>
 800b5ae:	bf00      	nop
 800b5b0:	200015e0 	.word	0x200015e0

0800b5b4 <_Balloc>:
 800b5b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b5b6:	b570      	push	{r4, r5, r6, lr}
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	b17b      	cbz	r3, 800b5de <_Balloc+0x2a>
 800b5be:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b5c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b5c4:	b9a0      	cbnz	r0, 800b5f0 <_Balloc+0x3c>
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	fa01 f604 	lsl.w	r6, r1, r4
 800b5cc:	1d72      	adds	r2, r6, #5
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	0092      	lsls	r2, r2, #2
 800b5d2:	f001 fb55 	bl	800cc80 <_calloc_r>
 800b5d6:	b148      	cbz	r0, 800b5ec <_Balloc+0x38>
 800b5d8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b5dc:	e00b      	b.n	800b5f6 <_Balloc+0x42>
 800b5de:	2221      	movs	r2, #33	; 0x21
 800b5e0:	2104      	movs	r1, #4
 800b5e2:	f001 fb4d 	bl	800cc80 <_calloc_r>
 800b5e6:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d1e8      	bne.n	800b5be <_Balloc+0xa>
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	6802      	ldr	r2, [r0, #0]
 800b5f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5fc:	e7f7      	b.n	800b5ee <_Balloc+0x3a>

0800b5fe <_Bfree>:
 800b5fe:	b131      	cbz	r1, 800b60e <_Bfree+0x10>
 800b600:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b602:	684a      	ldr	r2, [r1, #4]
 800b604:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b608:	6008      	str	r0, [r1, #0]
 800b60a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b60e:	4770      	bx	lr

0800b610 <__multadd>:
 800b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b614:	4698      	mov	r8, r3
 800b616:	460c      	mov	r4, r1
 800b618:	2300      	movs	r3, #0
 800b61a:	690e      	ldr	r6, [r1, #16]
 800b61c:	4607      	mov	r7, r0
 800b61e:	f101 0014 	add.w	r0, r1, #20
 800b622:	6805      	ldr	r5, [r0, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	b2a9      	uxth	r1, r5
 800b628:	fb02 8101 	mla	r1, r2, r1, r8
 800b62c:	0c2d      	lsrs	r5, r5, #16
 800b62e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b632:	fb02 c505 	mla	r5, r2, r5, ip
 800b636:	b289      	uxth	r1, r1
 800b638:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b63c:	429e      	cmp	r6, r3
 800b63e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b642:	f840 1b04 	str.w	r1, [r0], #4
 800b646:	dcec      	bgt.n	800b622 <__multadd+0x12>
 800b648:	f1b8 0f00 	cmp.w	r8, #0
 800b64c:	d022      	beq.n	800b694 <__multadd+0x84>
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	42b3      	cmp	r3, r6
 800b652:	dc19      	bgt.n	800b688 <__multadd+0x78>
 800b654:	6861      	ldr	r1, [r4, #4]
 800b656:	4638      	mov	r0, r7
 800b658:	3101      	adds	r1, #1
 800b65a:	f7ff ffab 	bl	800b5b4 <_Balloc>
 800b65e:	4605      	mov	r5, r0
 800b660:	b928      	cbnz	r0, 800b66e <__multadd+0x5e>
 800b662:	4602      	mov	r2, r0
 800b664:	21b5      	movs	r1, #181	; 0xb5
 800b666:	4b0d      	ldr	r3, [pc, #52]	; (800b69c <__multadd+0x8c>)
 800b668:	480d      	ldr	r0, [pc, #52]	; (800b6a0 <__multadd+0x90>)
 800b66a:	f001 faeb 	bl	800cc44 <__assert_func>
 800b66e:	6922      	ldr	r2, [r4, #16]
 800b670:	f104 010c 	add.w	r1, r4, #12
 800b674:	3202      	adds	r2, #2
 800b676:	0092      	lsls	r2, r2, #2
 800b678:	300c      	adds	r0, #12
 800b67a:	f7ff ff67 	bl	800b54c <memcpy>
 800b67e:	4621      	mov	r1, r4
 800b680:	4638      	mov	r0, r7
 800b682:	f7ff ffbc 	bl	800b5fe <_Bfree>
 800b686:	462c      	mov	r4, r5
 800b688:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b68c:	3601      	adds	r6, #1
 800b68e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b692:	6126      	str	r6, [r4, #16]
 800b694:	4620      	mov	r0, r4
 800b696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69a:	bf00      	nop
 800b69c:	0800d4f1 	.word	0x0800d4f1
 800b6a0:	0800d561 	.word	0x0800d561

0800b6a4 <__hi0bits>:
 800b6a4:	0c02      	lsrs	r2, r0, #16
 800b6a6:	0412      	lsls	r2, r2, #16
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	b9ca      	cbnz	r2, 800b6e0 <__hi0bits+0x3c>
 800b6ac:	0403      	lsls	r3, r0, #16
 800b6ae:	2010      	movs	r0, #16
 800b6b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b6b4:	bf04      	itt	eq
 800b6b6:	021b      	lsleq	r3, r3, #8
 800b6b8:	3008      	addeq	r0, #8
 800b6ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b6be:	bf04      	itt	eq
 800b6c0:	011b      	lsleq	r3, r3, #4
 800b6c2:	3004      	addeq	r0, #4
 800b6c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b6c8:	bf04      	itt	eq
 800b6ca:	009b      	lsleq	r3, r3, #2
 800b6cc:	3002      	addeq	r0, #2
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	db05      	blt.n	800b6de <__hi0bits+0x3a>
 800b6d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b6d6:	f100 0001 	add.w	r0, r0, #1
 800b6da:	bf08      	it	eq
 800b6dc:	2020      	moveq	r0, #32
 800b6de:	4770      	bx	lr
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	e7e5      	b.n	800b6b0 <__hi0bits+0xc>

0800b6e4 <__lo0bits>:
 800b6e4:	6803      	ldr	r3, [r0, #0]
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	f013 0007 	ands.w	r0, r3, #7
 800b6ec:	d00b      	beq.n	800b706 <__lo0bits+0x22>
 800b6ee:	07d9      	lsls	r1, r3, #31
 800b6f0:	d422      	bmi.n	800b738 <__lo0bits+0x54>
 800b6f2:	0798      	lsls	r0, r3, #30
 800b6f4:	bf49      	itett	mi
 800b6f6:	085b      	lsrmi	r3, r3, #1
 800b6f8:	089b      	lsrpl	r3, r3, #2
 800b6fa:	2001      	movmi	r0, #1
 800b6fc:	6013      	strmi	r3, [r2, #0]
 800b6fe:	bf5c      	itt	pl
 800b700:	2002      	movpl	r0, #2
 800b702:	6013      	strpl	r3, [r2, #0]
 800b704:	4770      	bx	lr
 800b706:	b299      	uxth	r1, r3
 800b708:	b909      	cbnz	r1, 800b70e <__lo0bits+0x2a>
 800b70a:	2010      	movs	r0, #16
 800b70c:	0c1b      	lsrs	r3, r3, #16
 800b70e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b712:	bf04      	itt	eq
 800b714:	0a1b      	lsreq	r3, r3, #8
 800b716:	3008      	addeq	r0, #8
 800b718:	0719      	lsls	r1, r3, #28
 800b71a:	bf04      	itt	eq
 800b71c:	091b      	lsreq	r3, r3, #4
 800b71e:	3004      	addeq	r0, #4
 800b720:	0799      	lsls	r1, r3, #30
 800b722:	bf04      	itt	eq
 800b724:	089b      	lsreq	r3, r3, #2
 800b726:	3002      	addeq	r0, #2
 800b728:	07d9      	lsls	r1, r3, #31
 800b72a:	d403      	bmi.n	800b734 <__lo0bits+0x50>
 800b72c:	085b      	lsrs	r3, r3, #1
 800b72e:	f100 0001 	add.w	r0, r0, #1
 800b732:	d003      	beq.n	800b73c <__lo0bits+0x58>
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	4770      	bx	lr
 800b738:	2000      	movs	r0, #0
 800b73a:	4770      	bx	lr
 800b73c:	2020      	movs	r0, #32
 800b73e:	4770      	bx	lr

0800b740 <__i2b>:
 800b740:	b510      	push	{r4, lr}
 800b742:	460c      	mov	r4, r1
 800b744:	2101      	movs	r1, #1
 800b746:	f7ff ff35 	bl	800b5b4 <_Balloc>
 800b74a:	4602      	mov	r2, r0
 800b74c:	b928      	cbnz	r0, 800b75a <__i2b+0x1a>
 800b74e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b752:	4b04      	ldr	r3, [pc, #16]	; (800b764 <__i2b+0x24>)
 800b754:	4804      	ldr	r0, [pc, #16]	; (800b768 <__i2b+0x28>)
 800b756:	f001 fa75 	bl	800cc44 <__assert_func>
 800b75a:	2301      	movs	r3, #1
 800b75c:	6144      	str	r4, [r0, #20]
 800b75e:	6103      	str	r3, [r0, #16]
 800b760:	bd10      	pop	{r4, pc}
 800b762:	bf00      	nop
 800b764:	0800d4f1 	.word	0x0800d4f1
 800b768:	0800d561 	.word	0x0800d561

0800b76c <__multiply>:
 800b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b770:	4614      	mov	r4, r2
 800b772:	690a      	ldr	r2, [r1, #16]
 800b774:	6923      	ldr	r3, [r4, #16]
 800b776:	460d      	mov	r5, r1
 800b778:	429a      	cmp	r2, r3
 800b77a:	bfbe      	ittt	lt
 800b77c:	460b      	movlt	r3, r1
 800b77e:	4625      	movlt	r5, r4
 800b780:	461c      	movlt	r4, r3
 800b782:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b786:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b78a:	68ab      	ldr	r3, [r5, #8]
 800b78c:	6869      	ldr	r1, [r5, #4]
 800b78e:	eb0a 0709 	add.w	r7, sl, r9
 800b792:	42bb      	cmp	r3, r7
 800b794:	b085      	sub	sp, #20
 800b796:	bfb8      	it	lt
 800b798:	3101      	addlt	r1, #1
 800b79a:	f7ff ff0b 	bl	800b5b4 <_Balloc>
 800b79e:	b930      	cbnz	r0, 800b7ae <__multiply+0x42>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	f240 115d 	movw	r1, #349	; 0x15d
 800b7a6:	4b41      	ldr	r3, [pc, #260]	; (800b8ac <__multiply+0x140>)
 800b7a8:	4841      	ldr	r0, [pc, #260]	; (800b8b0 <__multiply+0x144>)
 800b7aa:	f001 fa4b 	bl	800cc44 <__assert_func>
 800b7ae:	f100 0614 	add.w	r6, r0, #20
 800b7b2:	4633      	mov	r3, r6
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b7ba:	4543      	cmp	r3, r8
 800b7bc:	d31e      	bcc.n	800b7fc <__multiply+0x90>
 800b7be:	f105 0c14 	add.w	ip, r5, #20
 800b7c2:	f104 0314 	add.w	r3, r4, #20
 800b7c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b7ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b7ce:	9202      	str	r2, [sp, #8]
 800b7d0:	ebac 0205 	sub.w	r2, ip, r5
 800b7d4:	3a15      	subs	r2, #21
 800b7d6:	f022 0203 	bic.w	r2, r2, #3
 800b7da:	3204      	adds	r2, #4
 800b7dc:	f105 0115 	add.w	r1, r5, #21
 800b7e0:	458c      	cmp	ip, r1
 800b7e2:	bf38      	it	cc
 800b7e4:	2204      	movcc	r2, #4
 800b7e6:	9201      	str	r2, [sp, #4]
 800b7e8:	9a02      	ldr	r2, [sp, #8]
 800b7ea:	9303      	str	r3, [sp, #12]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d808      	bhi.n	800b802 <__multiply+0x96>
 800b7f0:	2f00      	cmp	r7, #0
 800b7f2:	dc55      	bgt.n	800b8a0 <__multiply+0x134>
 800b7f4:	6107      	str	r7, [r0, #16]
 800b7f6:	b005      	add	sp, #20
 800b7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fc:	f843 2b04 	str.w	r2, [r3], #4
 800b800:	e7db      	b.n	800b7ba <__multiply+0x4e>
 800b802:	f8b3 a000 	ldrh.w	sl, [r3]
 800b806:	f1ba 0f00 	cmp.w	sl, #0
 800b80a:	d020      	beq.n	800b84e <__multiply+0xe2>
 800b80c:	46b1      	mov	r9, r6
 800b80e:	2200      	movs	r2, #0
 800b810:	f105 0e14 	add.w	lr, r5, #20
 800b814:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b818:	f8d9 b000 	ldr.w	fp, [r9]
 800b81c:	b2a1      	uxth	r1, r4
 800b81e:	fa1f fb8b 	uxth.w	fp, fp
 800b822:	fb0a b101 	mla	r1, sl, r1, fp
 800b826:	4411      	add	r1, r2
 800b828:	f8d9 2000 	ldr.w	r2, [r9]
 800b82c:	0c24      	lsrs	r4, r4, #16
 800b82e:	0c12      	lsrs	r2, r2, #16
 800b830:	fb0a 2404 	mla	r4, sl, r4, r2
 800b834:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b838:	b289      	uxth	r1, r1
 800b83a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b83e:	45f4      	cmp	ip, lr
 800b840:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b844:	f849 1b04 	str.w	r1, [r9], #4
 800b848:	d8e4      	bhi.n	800b814 <__multiply+0xa8>
 800b84a:	9901      	ldr	r1, [sp, #4]
 800b84c:	5072      	str	r2, [r6, r1]
 800b84e:	9a03      	ldr	r2, [sp, #12]
 800b850:	3304      	adds	r3, #4
 800b852:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b856:	f1b9 0f00 	cmp.w	r9, #0
 800b85a:	d01f      	beq.n	800b89c <__multiply+0x130>
 800b85c:	46b6      	mov	lr, r6
 800b85e:	f04f 0a00 	mov.w	sl, #0
 800b862:	6834      	ldr	r4, [r6, #0]
 800b864:	f105 0114 	add.w	r1, r5, #20
 800b868:	880a      	ldrh	r2, [r1, #0]
 800b86a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b86e:	b2a4      	uxth	r4, r4
 800b870:	fb09 b202 	mla	r2, r9, r2, fp
 800b874:	4492      	add	sl, r2
 800b876:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b87a:	f84e 4b04 	str.w	r4, [lr], #4
 800b87e:	f851 4b04 	ldr.w	r4, [r1], #4
 800b882:	f8be 2000 	ldrh.w	r2, [lr]
 800b886:	0c24      	lsrs	r4, r4, #16
 800b888:	fb09 2404 	mla	r4, r9, r4, r2
 800b88c:	458c      	cmp	ip, r1
 800b88e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b892:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b896:	d8e7      	bhi.n	800b868 <__multiply+0xfc>
 800b898:	9a01      	ldr	r2, [sp, #4]
 800b89a:	50b4      	str	r4, [r6, r2]
 800b89c:	3604      	adds	r6, #4
 800b89e:	e7a3      	b.n	800b7e8 <__multiply+0x7c>
 800b8a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1a5      	bne.n	800b7f4 <__multiply+0x88>
 800b8a8:	3f01      	subs	r7, #1
 800b8aa:	e7a1      	b.n	800b7f0 <__multiply+0x84>
 800b8ac:	0800d4f1 	.word	0x0800d4f1
 800b8b0:	0800d561 	.word	0x0800d561

0800b8b4 <__pow5mult>:
 800b8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b8:	4615      	mov	r5, r2
 800b8ba:	f012 0203 	ands.w	r2, r2, #3
 800b8be:	4606      	mov	r6, r0
 800b8c0:	460f      	mov	r7, r1
 800b8c2:	d007      	beq.n	800b8d4 <__pow5mult+0x20>
 800b8c4:	4c1a      	ldr	r4, [pc, #104]	; (800b930 <__pow5mult+0x7c>)
 800b8c6:	3a01      	subs	r2, #1
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8ce:	f7ff fe9f 	bl	800b610 <__multadd>
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	10ad      	asrs	r5, r5, #2
 800b8d6:	d027      	beq.n	800b928 <__pow5mult+0x74>
 800b8d8:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b8da:	b944      	cbnz	r4, 800b8ee <__pow5mult+0x3a>
 800b8dc:	f240 2171 	movw	r1, #625	; 0x271
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff ff2d 	bl	800b740 <__i2b>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	64b0      	str	r0, [r6, #72]	; 0x48
 800b8ec:	6003      	str	r3, [r0, #0]
 800b8ee:	f04f 0900 	mov.w	r9, #0
 800b8f2:	07eb      	lsls	r3, r5, #31
 800b8f4:	d50a      	bpl.n	800b90c <__pow5mult+0x58>
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	4622      	mov	r2, r4
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f7ff ff36 	bl	800b76c <__multiply>
 800b900:	4680      	mov	r8, r0
 800b902:	4639      	mov	r1, r7
 800b904:	4630      	mov	r0, r6
 800b906:	f7ff fe7a 	bl	800b5fe <_Bfree>
 800b90a:	4647      	mov	r7, r8
 800b90c:	106d      	asrs	r5, r5, #1
 800b90e:	d00b      	beq.n	800b928 <__pow5mult+0x74>
 800b910:	6820      	ldr	r0, [r4, #0]
 800b912:	b938      	cbnz	r0, 800b924 <__pow5mult+0x70>
 800b914:	4622      	mov	r2, r4
 800b916:	4621      	mov	r1, r4
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff ff27 	bl	800b76c <__multiply>
 800b91e:	6020      	str	r0, [r4, #0]
 800b920:	f8c0 9000 	str.w	r9, [r0]
 800b924:	4604      	mov	r4, r0
 800b926:	e7e4      	b.n	800b8f2 <__pow5mult+0x3e>
 800b928:	4638      	mov	r0, r7
 800b92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b92e:	bf00      	nop
 800b930:	0800d6b8 	.word	0x0800d6b8

0800b934 <__lshift>:
 800b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	460c      	mov	r4, r1
 800b93a:	4607      	mov	r7, r0
 800b93c:	4691      	mov	r9, r2
 800b93e:	6923      	ldr	r3, [r4, #16]
 800b940:	6849      	ldr	r1, [r1, #4]
 800b942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b946:	68a3      	ldr	r3, [r4, #8]
 800b948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b94c:	f108 0601 	add.w	r6, r8, #1
 800b950:	42b3      	cmp	r3, r6
 800b952:	db0b      	blt.n	800b96c <__lshift+0x38>
 800b954:	4638      	mov	r0, r7
 800b956:	f7ff fe2d 	bl	800b5b4 <_Balloc>
 800b95a:	4605      	mov	r5, r0
 800b95c:	b948      	cbnz	r0, 800b972 <__lshift+0x3e>
 800b95e:	4602      	mov	r2, r0
 800b960:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b964:	4b27      	ldr	r3, [pc, #156]	; (800ba04 <__lshift+0xd0>)
 800b966:	4828      	ldr	r0, [pc, #160]	; (800ba08 <__lshift+0xd4>)
 800b968:	f001 f96c 	bl	800cc44 <__assert_func>
 800b96c:	3101      	adds	r1, #1
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	e7ee      	b.n	800b950 <__lshift+0x1c>
 800b972:	2300      	movs	r3, #0
 800b974:	f100 0114 	add.w	r1, r0, #20
 800b978:	f100 0210 	add.w	r2, r0, #16
 800b97c:	4618      	mov	r0, r3
 800b97e:	4553      	cmp	r3, sl
 800b980:	db33      	blt.n	800b9ea <__lshift+0xb6>
 800b982:	6920      	ldr	r0, [r4, #16]
 800b984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b988:	f104 0314 	add.w	r3, r4, #20
 800b98c:	f019 091f 	ands.w	r9, r9, #31
 800b990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b998:	d02b      	beq.n	800b9f2 <__lshift+0xbe>
 800b99a:	468a      	mov	sl, r1
 800b99c:	2200      	movs	r2, #0
 800b99e:	f1c9 0e20 	rsb	lr, r9, #32
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b9a8:	4302      	orrs	r2, r0
 800b9aa:	f84a 2b04 	str.w	r2, [sl], #4
 800b9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b2:	459c      	cmp	ip, r3
 800b9b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9b8:	d8f3      	bhi.n	800b9a2 <__lshift+0x6e>
 800b9ba:	ebac 0304 	sub.w	r3, ip, r4
 800b9be:	3b15      	subs	r3, #21
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	f104 0015 	add.w	r0, r4, #21
 800b9ca:	4584      	cmp	ip, r0
 800b9cc:	bf38      	it	cc
 800b9ce:	2304      	movcc	r3, #4
 800b9d0:	50ca      	str	r2, [r1, r3]
 800b9d2:	b10a      	cbz	r2, 800b9d8 <__lshift+0xa4>
 800b9d4:	f108 0602 	add.w	r6, r8, #2
 800b9d8:	3e01      	subs	r6, #1
 800b9da:	4638      	mov	r0, r7
 800b9dc:	4621      	mov	r1, r4
 800b9de:	612e      	str	r6, [r5, #16]
 800b9e0:	f7ff fe0d 	bl	800b5fe <_Bfree>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	e7c5      	b.n	800b97e <__lshift+0x4a>
 800b9f2:	3904      	subs	r1, #4
 800b9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f8:	459c      	cmp	ip, r3
 800b9fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9fe:	d8f9      	bhi.n	800b9f4 <__lshift+0xc0>
 800ba00:	e7ea      	b.n	800b9d8 <__lshift+0xa4>
 800ba02:	bf00      	nop
 800ba04:	0800d4f1 	.word	0x0800d4f1
 800ba08:	0800d561 	.word	0x0800d561

0800ba0c <__mcmp>:
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	690a      	ldr	r2, [r1, #16]
 800ba10:	6900      	ldr	r0, [r0, #16]
 800ba12:	b530      	push	{r4, r5, lr}
 800ba14:	1a80      	subs	r0, r0, r2
 800ba16:	d10d      	bne.n	800ba34 <__mcmp+0x28>
 800ba18:	3314      	adds	r3, #20
 800ba1a:	3114      	adds	r1, #20
 800ba1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba2c:	4295      	cmp	r5, r2
 800ba2e:	d002      	beq.n	800ba36 <__mcmp+0x2a>
 800ba30:	d304      	bcc.n	800ba3c <__mcmp+0x30>
 800ba32:	2001      	movs	r0, #1
 800ba34:	bd30      	pop	{r4, r5, pc}
 800ba36:	42a3      	cmp	r3, r4
 800ba38:	d3f4      	bcc.n	800ba24 <__mcmp+0x18>
 800ba3a:	e7fb      	b.n	800ba34 <__mcmp+0x28>
 800ba3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba40:	e7f8      	b.n	800ba34 <__mcmp+0x28>
	...

0800ba44 <__mdiff>:
 800ba44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	460c      	mov	r4, r1
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	4620      	mov	r0, r4
 800ba50:	4692      	mov	sl, r2
 800ba52:	f7ff ffdb 	bl	800ba0c <__mcmp>
 800ba56:	1e05      	subs	r5, r0, #0
 800ba58:	d111      	bne.n	800ba7e <__mdiff+0x3a>
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f7ff fda9 	bl	800b5b4 <_Balloc>
 800ba62:	4602      	mov	r2, r0
 800ba64:	b928      	cbnz	r0, 800ba72 <__mdiff+0x2e>
 800ba66:	f240 2132 	movw	r1, #562	; 0x232
 800ba6a:	4b3c      	ldr	r3, [pc, #240]	; (800bb5c <__mdiff+0x118>)
 800ba6c:	483c      	ldr	r0, [pc, #240]	; (800bb60 <__mdiff+0x11c>)
 800ba6e:	f001 f8e9 	bl	800cc44 <__assert_func>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba78:	4610      	mov	r0, r2
 800ba7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7e:	bfa4      	itt	ge
 800ba80:	4653      	movge	r3, sl
 800ba82:	46a2      	movge	sl, r4
 800ba84:	4630      	mov	r0, r6
 800ba86:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ba8a:	bfa6      	itte	ge
 800ba8c:	461c      	movge	r4, r3
 800ba8e:	2500      	movge	r5, #0
 800ba90:	2501      	movlt	r5, #1
 800ba92:	f7ff fd8f 	bl	800b5b4 <_Balloc>
 800ba96:	4602      	mov	r2, r0
 800ba98:	b918      	cbnz	r0, 800baa2 <__mdiff+0x5e>
 800ba9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba9e:	4b2f      	ldr	r3, [pc, #188]	; (800bb5c <__mdiff+0x118>)
 800baa0:	e7e4      	b.n	800ba6c <__mdiff+0x28>
 800baa2:	f100 0814 	add.w	r8, r0, #20
 800baa6:	f8da 7010 	ldr.w	r7, [sl, #16]
 800baaa:	60c5      	str	r5, [r0, #12]
 800baac:	f04f 0c00 	mov.w	ip, #0
 800bab0:	f10a 0514 	add.w	r5, sl, #20
 800bab4:	f10a 0010 	add.w	r0, sl, #16
 800bab8:	46c2      	mov	sl, r8
 800baba:	6926      	ldr	r6, [r4, #16]
 800babc:	f104 0914 	add.w	r9, r4, #20
 800bac0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bac4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bac8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bacc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bad0:	fa1f f18b 	uxth.w	r1, fp
 800bad4:	4461      	add	r1, ip
 800bad6:	fa1f fc83 	uxth.w	ip, r3
 800bada:	0c1b      	lsrs	r3, r3, #16
 800badc:	eba1 010c 	sub.w	r1, r1, ip
 800bae0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bae4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bae8:	b289      	uxth	r1, r1
 800baea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800baee:	454e      	cmp	r6, r9
 800baf0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800baf4:	f84a 3b04 	str.w	r3, [sl], #4
 800baf8:	d8e6      	bhi.n	800bac8 <__mdiff+0x84>
 800bafa:	1b33      	subs	r3, r6, r4
 800bafc:	3b15      	subs	r3, #21
 800bafe:	f023 0303 	bic.w	r3, r3, #3
 800bb02:	3415      	adds	r4, #21
 800bb04:	3304      	adds	r3, #4
 800bb06:	42a6      	cmp	r6, r4
 800bb08:	bf38      	it	cc
 800bb0a:	2304      	movcc	r3, #4
 800bb0c:	441d      	add	r5, r3
 800bb0e:	4443      	add	r3, r8
 800bb10:	461e      	mov	r6, r3
 800bb12:	462c      	mov	r4, r5
 800bb14:	4574      	cmp	r4, lr
 800bb16:	d30e      	bcc.n	800bb36 <__mdiff+0xf2>
 800bb18:	f10e 0103 	add.w	r1, lr, #3
 800bb1c:	1b49      	subs	r1, r1, r5
 800bb1e:	f021 0103 	bic.w	r1, r1, #3
 800bb22:	3d03      	subs	r5, #3
 800bb24:	45ae      	cmp	lr, r5
 800bb26:	bf38      	it	cc
 800bb28:	2100      	movcc	r1, #0
 800bb2a:	4419      	add	r1, r3
 800bb2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bb30:	b18b      	cbz	r3, 800bb56 <__mdiff+0x112>
 800bb32:	6117      	str	r7, [r2, #16]
 800bb34:	e7a0      	b.n	800ba78 <__mdiff+0x34>
 800bb36:	f854 8b04 	ldr.w	r8, [r4], #4
 800bb3a:	fa1f f188 	uxth.w	r1, r8
 800bb3e:	4461      	add	r1, ip
 800bb40:	1408      	asrs	r0, r1, #16
 800bb42:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bb46:	b289      	uxth	r1, r1
 800bb48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb50:	f846 1b04 	str.w	r1, [r6], #4
 800bb54:	e7de      	b.n	800bb14 <__mdiff+0xd0>
 800bb56:	3f01      	subs	r7, #1
 800bb58:	e7e8      	b.n	800bb2c <__mdiff+0xe8>
 800bb5a:	bf00      	nop
 800bb5c:	0800d4f1 	.word	0x0800d4f1
 800bb60:	0800d561 	.word	0x0800d561

0800bb64 <__d2b>:
 800bb64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bb68:	2101      	movs	r1, #1
 800bb6a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bb6e:	4690      	mov	r8, r2
 800bb70:	461d      	mov	r5, r3
 800bb72:	f7ff fd1f 	bl	800b5b4 <_Balloc>
 800bb76:	4604      	mov	r4, r0
 800bb78:	b930      	cbnz	r0, 800bb88 <__d2b+0x24>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	f240 310a 	movw	r1, #778	; 0x30a
 800bb80:	4b24      	ldr	r3, [pc, #144]	; (800bc14 <__d2b+0xb0>)
 800bb82:	4825      	ldr	r0, [pc, #148]	; (800bc18 <__d2b+0xb4>)
 800bb84:	f001 f85e 	bl	800cc44 <__assert_func>
 800bb88:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bb8c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bb90:	bb2d      	cbnz	r5, 800bbde <__d2b+0x7a>
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	f1b8 0300 	subs.w	r3, r8, #0
 800bb98:	d026      	beq.n	800bbe8 <__d2b+0x84>
 800bb9a:	4668      	mov	r0, sp
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	f7ff fda1 	bl	800b6e4 <__lo0bits>
 800bba2:	9900      	ldr	r1, [sp, #0]
 800bba4:	b1f0      	cbz	r0, 800bbe4 <__d2b+0x80>
 800bba6:	9a01      	ldr	r2, [sp, #4]
 800bba8:	f1c0 0320 	rsb	r3, r0, #32
 800bbac:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb0:	430b      	orrs	r3, r1
 800bbb2:	40c2      	lsrs	r2, r0
 800bbb4:	6163      	str	r3, [r4, #20]
 800bbb6:	9201      	str	r2, [sp, #4]
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	bf14      	ite	ne
 800bbbe:	2102      	movne	r1, #2
 800bbc0:	2101      	moveq	r1, #1
 800bbc2:	61a3      	str	r3, [r4, #24]
 800bbc4:	6121      	str	r1, [r4, #16]
 800bbc6:	b1c5      	cbz	r5, 800bbfa <__d2b+0x96>
 800bbc8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbcc:	4405      	add	r5, r0
 800bbce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbd2:	603d      	str	r5, [r7, #0]
 800bbd4:	6030      	str	r0, [r6, #0]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	b002      	add	sp, #8
 800bbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbe2:	e7d6      	b.n	800bb92 <__d2b+0x2e>
 800bbe4:	6161      	str	r1, [r4, #20]
 800bbe6:	e7e7      	b.n	800bbb8 <__d2b+0x54>
 800bbe8:	a801      	add	r0, sp, #4
 800bbea:	f7ff fd7b 	bl	800b6e4 <__lo0bits>
 800bbee:	2101      	movs	r1, #1
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	6121      	str	r1, [r4, #16]
 800bbf4:	6163      	str	r3, [r4, #20]
 800bbf6:	3020      	adds	r0, #32
 800bbf8:	e7e5      	b.n	800bbc6 <__d2b+0x62>
 800bbfa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bbfe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc02:	6038      	str	r0, [r7, #0]
 800bc04:	6918      	ldr	r0, [r3, #16]
 800bc06:	f7ff fd4d 	bl	800b6a4 <__hi0bits>
 800bc0a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bc0e:	6031      	str	r1, [r6, #0]
 800bc10:	e7e1      	b.n	800bbd6 <__d2b+0x72>
 800bc12:	bf00      	nop
 800bc14:	0800d4f1 	.word	0x0800d4f1
 800bc18:	0800d561 	.word	0x0800d561

0800bc1c <_putc_r>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	460d      	mov	r5, r1
 800bc20:	4614      	mov	r4, r2
 800bc22:	4606      	mov	r6, r0
 800bc24:	b118      	cbz	r0, 800bc2e <_putc_r+0x12>
 800bc26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bc28:	b90b      	cbnz	r3, 800bc2e <_putc_r+0x12>
 800bc2a:	f7fe ff09 	bl	800aa40 <__sinit>
 800bc2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc30:	07d8      	lsls	r0, r3, #31
 800bc32:	d405      	bmi.n	800bc40 <_putc_r+0x24>
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	0599      	lsls	r1, r3, #22
 800bc38:	d402      	bmi.n	800bc40 <_putc_r+0x24>
 800bc3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc3c:	f7ff f9c0 	bl	800afc0 <__retarget_lock_acquire_recursive>
 800bc40:	68a3      	ldr	r3, [r4, #8]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	60a3      	str	r3, [r4, #8]
 800bc48:	da05      	bge.n	800bc56 <_putc_r+0x3a>
 800bc4a:	69a2      	ldr	r2, [r4, #24]
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	db12      	blt.n	800bc76 <_putc_r+0x5a>
 800bc50:	b2eb      	uxtb	r3, r5
 800bc52:	2b0a      	cmp	r3, #10
 800bc54:	d00f      	beq.n	800bc76 <_putc_r+0x5a>
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	1c5a      	adds	r2, r3, #1
 800bc5a:	6022      	str	r2, [r4, #0]
 800bc5c:	701d      	strb	r5, [r3, #0]
 800bc5e:	b2ed      	uxtb	r5, r5
 800bc60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc62:	07da      	lsls	r2, r3, #31
 800bc64:	d405      	bmi.n	800bc72 <_putc_r+0x56>
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	059b      	lsls	r3, r3, #22
 800bc6a:	d402      	bmi.n	800bc72 <_putc_r+0x56>
 800bc6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc6e:	f7ff f9a8 	bl	800afc2 <__retarget_lock_release_recursive>
 800bc72:	4628      	mov	r0, r5
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
 800bc76:	4629      	mov	r1, r5
 800bc78:	4622      	mov	r2, r4
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f000 ff46 	bl	800cb0c <__swbuf_r>
 800bc80:	4605      	mov	r5, r0
 800bc82:	e7ed      	b.n	800bc60 <_putc_r+0x44>

0800bc84 <_realloc_r>:
 800bc84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	460c      	mov	r4, r1
 800bc8a:	4681      	mov	r9, r0
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	b924      	cbnz	r4, 800bc9a <_realloc_r+0x16>
 800bc90:	b003      	add	sp, #12
 800bc92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc96:	f7ff ba09 	b.w	800b0ac <_malloc_r>
 800bc9a:	9201      	str	r2, [sp, #4]
 800bc9c:	f7ff fc7e 	bl	800b59c <__malloc_lock>
 800bca0:	9901      	ldr	r1, [sp, #4]
 800bca2:	f101 080b 	add.w	r8, r1, #11
 800bca6:	f1b8 0f16 	cmp.w	r8, #22
 800bcaa:	d90b      	bls.n	800bcc4 <_realloc_r+0x40>
 800bcac:	f038 0807 	bics.w	r8, r8, #7
 800bcb0:	d50a      	bpl.n	800bcc8 <_realloc_r+0x44>
 800bcb2:	230c      	movs	r3, #12
 800bcb4:	f04f 0b00 	mov.w	fp, #0
 800bcb8:	f8c9 3000 	str.w	r3, [r9]
 800bcbc:	4658      	mov	r0, fp
 800bcbe:	b003      	add	sp, #12
 800bcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc4:	f04f 0810 	mov.w	r8, #16
 800bcc8:	4588      	cmp	r8, r1
 800bcca:	d3f2      	bcc.n	800bcb2 <_realloc_r+0x2e>
 800bccc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800bcd0:	f1a4 0a08 	sub.w	sl, r4, #8
 800bcd4:	f025 0603 	bic.w	r6, r5, #3
 800bcd8:	45b0      	cmp	r8, r6
 800bcda:	f340 8173 	ble.w	800bfc4 <_realloc_r+0x340>
 800bcde:	48aa      	ldr	r0, [pc, #680]	; (800bf88 <_realloc_r+0x304>)
 800bce0:	eb0a 0306 	add.w	r3, sl, r6
 800bce4:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	459c      	cmp	ip, r3
 800bcec:	9001      	str	r0, [sp, #4]
 800bcee:	d005      	beq.n	800bcfc <_realloc_r+0x78>
 800bcf0:	f022 0001 	bic.w	r0, r2, #1
 800bcf4:	4418      	add	r0, r3
 800bcf6:	6840      	ldr	r0, [r0, #4]
 800bcf8:	07c7      	lsls	r7, r0, #31
 800bcfa:	d427      	bmi.n	800bd4c <_realloc_r+0xc8>
 800bcfc:	f022 0203 	bic.w	r2, r2, #3
 800bd00:	459c      	cmp	ip, r3
 800bd02:	eb06 0702 	add.w	r7, r6, r2
 800bd06:	d119      	bne.n	800bd3c <_realloc_r+0xb8>
 800bd08:	f108 0010 	add.w	r0, r8, #16
 800bd0c:	42b8      	cmp	r0, r7
 800bd0e:	dc1f      	bgt.n	800bd50 <_realloc_r+0xcc>
 800bd10:	9a01      	ldr	r2, [sp, #4]
 800bd12:	eba7 0708 	sub.w	r7, r7, r8
 800bd16:	eb0a 0308 	add.w	r3, sl, r8
 800bd1a:	f047 0701 	orr.w	r7, r7, #1
 800bd1e:	6093      	str	r3, [r2, #8]
 800bd20:	605f      	str	r7, [r3, #4]
 800bd22:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bd26:	4648      	mov	r0, r9
 800bd28:	f003 0301 	and.w	r3, r3, #1
 800bd2c:	ea43 0308 	orr.w	r3, r3, r8
 800bd30:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd34:	f7ff fc38 	bl	800b5a8 <__malloc_unlock>
 800bd38:	46a3      	mov	fp, r4
 800bd3a:	e7bf      	b.n	800bcbc <_realloc_r+0x38>
 800bd3c:	45b8      	cmp	r8, r7
 800bd3e:	dc07      	bgt.n	800bd50 <_realloc_r+0xcc>
 800bd40:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bd44:	60da      	str	r2, [r3, #12]
 800bd46:	6093      	str	r3, [r2, #8]
 800bd48:	4655      	mov	r5, sl
 800bd4a:	e080      	b.n	800be4e <_realloc_r+0x1ca>
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	4613      	mov	r3, r2
 800bd50:	07e8      	lsls	r0, r5, #31
 800bd52:	f100 80e8 	bmi.w	800bf26 <_realloc_r+0x2a2>
 800bd56:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bd5a:	ebaa 0505 	sub.w	r5, sl, r5
 800bd5e:	6868      	ldr	r0, [r5, #4]
 800bd60:	f020 0003 	bic.w	r0, r0, #3
 800bd64:	eb00 0b06 	add.w	fp, r0, r6
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f000 80a7 	beq.w	800bebc <_realloc_r+0x238>
 800bd6e:	459c      	cmp	ip, r3
 800bd70:	eb02 070b 	add.w	r7, r2, fp
 800bd74:	d14b      	bne.n	800be0e <_realloc_r+0x18a>
 800bd76:	f108 0310 	add.w	r3, r8, #16
 800bd7a:	42bb      	cmp	r3, r7
 800bd7c:	f300 809e 	bgt.w	800bebc <_realloc_r+0x238>
 800bd80:	46ab      	mov	fp, r5
 800bd82:	68eb      	ldr	r3, [r5, #12]
 800bd84:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800bd88:	60d3      	str	r3, [r2, #12]
 800bd8a:	609a      	str	r2, [r3, #8]
 800bd8c:	1f32      	subs	r2, r6, #4
 800bd8e:	2a24      	cmp	r2, #36	; 0x24
 800bd90:	d838      	bhi.n	800be04 <_realloc_r+0x180>
 800bd92:	2a13      	cmp	r2, #19
 800bd94:	d934      	bls.n	800be00 <_realloc_r+0x17c>
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	2a1b      	cmp	r2, #27
 800bd9a:	60ab      	str	r3, [r5, #8]
 800bd9c:	6863      	ldr	r3, [r4, #4]
 800bd9e:	60eb      	str	r3, [r5, #12]
 800bda0:	d81b      	bhi.n	800bdda <_realloc_r+0x156>
 800bda2:	3408      	adds	r4, #8
 800bda4:	f105 0310 	add.w	r3, r5, #16
 800bda8:	6822      	ldr	r2, [r4, #0]
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	6862      	ldr	r2, [r4, #4]
 800bdae:	605a      	str	r2, [r3, #4]
 800bdb0:	68a2      	ldr	r2, [r4, #8]
 800bdb2:	609a      	str	r2, [r3, #8]
 800bdb4:	9a01      	ldr	r2, [sp, #4]
 800bdb6:	eba7 0708 	sub.w	r7, r7, r8
 800bdba:	eb05 0308 	add.w	r3, r5, r8
 800bdbe:	f047 0701 	orr.w	r7, r7, #1
 800bdc2:	6093      	str	r3, [r2, #8]
 800bdc4:	605f      	str	r7, [r3, #4]
 800bdc6:	686b      	ldr	r3, [r5, #4]
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	ea43 0308 	orr.w	r3, r3, r8
 800bdd0:	606b      	str	r3, [r5, #4]
 800bdd2:	4648      	mov	r0, r9
 800bdd4:	f7ff fbe8 	bl	800b5a8 <__malloc_unlock>
 800bdd8:	e770      	b.n	800bcbc <_realloc_r+0x38>
 800bdda:	68a3      	ldr	r3, [r4, #8]
 800bddc:	2a24      	cmp	r2, #36	; 0x24
 800bdde:	612b      	str	r3, [r5, #16]
 800bde0:	68e3      	ldr	r3, [r4, #12]
 800bde2:	bf18      	it	ne
 800bde4:	3410      	addne	r4, #16
 800bde6:	616b      	str	r3, [r5, #20]
 800bde8:	bf09      	itett	eq
 800bdea:	6923      	ldreq	r3, [r4, #16]
 800bdec:	f105 0318 	addne.w	r3, r5, #24
 800bdf0:	61ab      	streq	r3, [r5, #24]
 800bdf2:	6962      	ldreq	r2, [r4, #20]
 800bdf4:	bf02      	ittt	eq
 800bdf6:	f105 0320 	addeq.w	r3, r5, #32
 800bdfa:	61ea      	streq	r2, [r5, #28]
 800bdfc:	3418      	addeq	r4, #24
 800bdfe:	e7d3      	b.n	800bda8 <_realloc_r+0x124>
 800be00:	465b      	mov	r3, fp
 800be02:	e7d1      	b.n	800bda8 <_realloc_r+0x124>
 800be04:	4621      	mov	r1, r4
 800be06:	4658      	mov	r0, fp
 800be08:	f7ff fbae 	bl	800b568 <memmove>
 800be0c:	e7d2      	b.n	800bdb4 <_realloc_r+0x130>
 800be0e:	45b8      	cmp	r8, r7
 800be10:	dc54      	bgt.n	800bebc <_realloc_r+0x238>
 800be12:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800be16:	4628      	mov	r0, r5
 800be18:	60da      	str	r2, [r3, #12]
 800be1a:	6093      	str	r3, [r2, #8]
 800be1c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800be20:	68eb      	ldr	r3, [r5, #12]
 800be22:	60d3      	str	r3, [r2, #12]
 800be24:	609a      	str	r2, [r3, #8]
 800be26:	1f32      	subs	r2, r6, #4
 800be28:	2a24      	cmp	r2, #36	; 0x24
 800be2a:	d843      	bhi.n	800beb4 <_realloc_r+0x230>
 800be2c:	2a13      	cmp	r2, #19
 800be2e:	d908      	bls.n	800be42 <_realloc_r+0x1be>
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	2a1b      	cmp	r2, #27
 800be34:	60ab      	str	r3, [r5, #8]
 800be36:	6863      	ldr	r3, [r4, #4]
 800be38:	60eb      	str	r3, [r5, #12]
 800be3a:	d828      	bhi.n	800be8e <_realloc_r+0x20a>
 800be3c:	3408      	adds	r4, #8
 800be3e:	f105 0010 	add.w	r0, r5, #16
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	6863      	ldr	r3, [r4, #4]
 800be48:	6043      	str	r3, [r0, #4]
 800be4a:	68a3      	ldr	r3, [r4, #8]
 800be4c:	6083      	str	r3, [r0, #8]
 800be4e:	686a      	ldr	r2, [r5, #4]
 800be50:	eba7 0008 	sub.w	r0, r7, r8
 800be54:	280f      	cmp	r0, #15
 800be56:	f002 0201 	and.w	r2, r2, #1
 800be5a:	eb05 0307 	add.w	r3, r5, r7
 800be5e:	f240 80b3 	bls.w	800bfc8 <_realloc_r+0x344>
 800be62:	eb05 0108 	add.w	r1, r5, r8
 800be66:	ea48 0202 	orr.w	r2, r8, r2
 800be6a:	f040 0001 	orr.w	r0, r0, #1
 800be6e:	606a      	str	r2, [r5, #4]
 800be70:	6048      	str	r0, [r1, #4]
 800be72:	685a      	ldr	r2, [r3, #4]
 800be74:	4648      	mov	r0, r9
 800be76:	f042 0201 	orr.w	r2, r2, #1
 800be7a:	605a      	str	r2, [r3, #4]
 800be7c:	3108      	adds	r1, #8
 800be7e:	f7fe fe6f 	bl	800ab60 <_free_r>
 800be82:	4648      	mov	r0, r9
 800be84:	f7ff fb90 	bl	800b5a8 <__malloc_unlock>
 800be88:	f105 0b08 	add.w	fp, r5, #8
 800be8c:	e716      	b.n	800bcbc <_realloc_r+0x38>
 800be8e:	68a3      	ldr	r3, [r4, #8]
 800be90:	2a24      	cmp	r2, #36	; 0x24
 800be92:	612b      	str	r3, [r5, #16]
 800be94:	68e3      	ldr	r3, [r4, #12]
 800be96:	bf18      	it	ne
 800be98:	f105 0018 	addne.w	r0, r5, #24
 800be9c:	616b      	str	r3, [r5, #20]
 800be9e:	bf09      	itett	eq
 800bea0:	6923      	ldreq	r3, [r4, #16]
 800bea2:	3410      	addne	r4, #16
 800bea4:	61ab      	streq	r3, [r5, #24]
 800bea6:	6963      	ldreq	r3, [r4, #20]
 800bea8:	bf02      	ittt	eq
 800beaa:	f105 0020 	addeq.w	r0, r5, #32
 800beae:	61eb      	streq	r3, [r5, #28]
 800beb0:	3418      	addeq	r4, #24
 800beb2:	e7c6      	b.n	800be42 <_realloc_r+0x1be>
 800beb4:	4621      	mov	r1, r4
 800beb6:	f7ff fb57 	bl	800b568 <memmove>
 800beba:	e7c8      	b.n	800be4e <_realloc_r+0x1ca>
 800bebc:	45d8      	cmp	r8, fp
 800bebe:	dc32      	bgt.n	800bf26 <_realloc_r+0x2a2>
 800bec0:	4628      	mov	r0, r5
 800bec2:	68eb      	ldr	r3, [r5, #12]
 800bec4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bec8:	60d3      	str	r3, [r2, #12]
 800beca:	609a      	str	r2, [r3, #8]
 800becc:	1f32      	subs	r2, r6, #4
 800bece:	2a24      	cmp	r2, #36	; 0x24
 800bed0:	d825      	bhi.n	800bf1e <_realloc_r+0x29a>
 800bed2:	2a13      	cmp	r2, #19
 800bed4:	d908      	bls.n	800bee8 <_realloc_r+0x264>
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	2a1b      	cmp	r2, #27
 800beda:	60ab      	str	r3, [r5, #8]
 800bedc:	6863      	ldr	r3, [r4, #4]
 800bede:	60eb      	str	r3, [r5, #12]
 800bee0:	d80a      	bhi.n	800bef8 <_realloc_r+0x274>
 800bee2:	3408      	adds	r4, #8
 800bee4:	f105 0010 	add.w	r0, r5, #16
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	6003      	str	r3, [r0, #0]
 800beec:	6863      	ldr	r3, [r4, #4]
 800beee:	6043      	str	r3, [r0, #4]
 800bef0:	68a3      	ldr	r3, [r4, #8]
 800bef2:	6083      	str	r3, [r0, #8]
 800bef4:	465f      	mov	r7, fp
 800bef6:	e7aa      	b.n	800be4e <_realloc_r+0x1ca>
 800bef8:	68a3      	ldr	r3, [r4, #8]
 800befa:	2a24      	cmp	r2, #36	; 0x24
 800befc:	612b      	str	r3, [r5, #16]
 800befe:	68e3      	ldr	r3, [r4, #12]
 800bf00:	bf18      	it	ne
 800bf02:	f105 0018 	addne.w	r0, r5, #24
 800bf06:	616b      	str	r3, [r5, #20]
 800bf08:	bf09      	itett	eq
 800bf0a:	6923      	ldreq	r3, [r4, #16]
 800bf0c:	3410      	addne	r4, #16
 800bf0e:	61ab      	streq	r3, [r5, #24]
 800bf10:	6963      	ldreq	r3, [r4, #20]
 800bf12:	bf02      	ittt	eq
 800bf14:	f105 0020 	addeq.w	r0, r5, #32
 800bf18:	61eb      	streq	r3, [r5, #28]
 800bf1a:	3418      	addeq	r4, #24
 800bf1c:	e7e4      	b.n	800bee8 <_realloc_r+0x264>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	f7ff fb22 	bl	800b568 <memmove>
 800bf24:	e7e6      	b.n	800bef4 <_realloc_r+0x270>
 800bf26:	4648      	mov	r0, r9
 800bf28:	f7ff f8c0 	bl	800b0ac <_malloc_r>
 800bf2c:	4683      	mov	fp, r0
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	f43f af4f 	beq.w	800bdd2 <_realloc_r+0x14e>
 800bf34:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bf38:	f1a0 0208 	sub.w	r2, r0, #8
 800bf3c:	f023 0301 	bic.w	r3, r3, #1
 800bf40:	4453      	add	r3, sl
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d105      	bne.n	800bf52 <_realloc_r+0x2ce>
 800bf46:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800bf4a:	f027 0703 	bic.w	r7, r7, #3
 800bf4e:	4437      	add	r7, r6
 800bf50:	e6fa      	b.n	800bd48 <_realloc_r+0xc4>
 800bf52:	1f32      	subs	r2, r6, #4
 800bf54:	2a24      	cmp	r2, #36	; 0x24
 800bf56:	d831      	bhi.n	800bfbc <_realloc_r+0x338>
 800bf58:	2a13      	cmp	r2, #19
 800bf5a:	d92c      	bls.n	800bfb6 <_realloc_r+0x332>
 800bf5c:	6823      	ldr	r3, [r4, #0]
 800bf5e:	2a1b      	cmp	r2, #27
 800bf60:	6003      	str	r3, [r0, #0]
 800bf62:	6863      	ldr	r3, [r4, #4]
 800bf64:	6043      	str	r3, [r0, #4]
 800bf66:	d811      	bhi.n	800bf8c <_realloc_r+0x308>
 800bf68:	f104 0208 	add.w	r2, r4, #8
 800bf6c:	f100 0308 	add.w	r3, r0, #8
 800bf70:	6811      	ldr	r1, [r2, #0]
 800bf72:	6019      	str	r1, [r3, #0]
 800bf74:	6851      	ldr	r1, [r2, #4]
 800bf76:	6059      	str	r1, [r3, #4]
 800bf78:	6892      	ldr	r2, [r2, #8]
 800bf7a:	609a      	str	r2, [r3, #8]
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	4648      	mov	r0, r9
 800bf80:	f7fe fdee 	bl	800ab60 <_free_r>
 800bf84:	e725      	b.n	800bdd2 <_realloc_r+0x14e>
 800bf86:	bf00      	nop
 800bf88:	20000b1c 	.word	0x20000b1c
 800bf8c:	68a3      	ldr	r3, [r4, #8]
 800bf8e:	2a24      	cmp	r2, #36	; 0x24
 800bf90:	6083      	str	r3, [r0, #8]
 800bf92:	68e3      	ldr	r3, [r4, #12]
 800bf94:	bf18      	it	ne
 800bf96:	f104 0210 	addne.w	r2, r4, #16
 800bf9a:	60c3      	str	r3, [r0, #12]
 800bf9c:	bf09      	itett	eq
 800bf9e:	6923      	ldreq	r3, [r4, #16]
 800bfa0:	f100 0310 	addne.w	r3, r0, #16
 800bfa4:	6103      	streq	r3, [r0, #16]
 800bfa6:	6961      	ldreq	r1, [r4, #20]
 800bfa8:	bf02      	ittt	eq
 800bfaa:	f104 0218 	addeq.w	r2, r4, #24
 800bfae:	f100 0318 	addeq.w	r3, r0, #24
 800bfb2:	6141      	streq	r1, [r0, #20]
 800bfb4:	e7dc      	b.n	800bf70 <_realloc_r+0x2ec>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	4622      	mov	r2, r4
 800bfba:	e7d9      	b.n	800bf70 <_realloc_r+0x2ec>
 800bfbc:	4621      	mov	r1, r4
 800bfbe:	f7ff fad3 	bl	800b568 <memmove>
 800bfc2:	e7db      	b.n	800bf7c <_realloc_r+0x2f8>
 800bfc4:	4637      	mov	r7, r6
 800bfc6:	e6bf      	b.n	800bd48 <_realloc_r+0xc4>
 800bfc8:	4317      	orrs	r7, r2
 800bfca:	606f      	str	r7, [r5, #4]
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	f042 0201 	orr.w	r2, r2, #1
 800bfd2:	605a      	str	r2, [r3, #4]
 800bfd4:	e755      	b.n	800be82 <_realloc_r+0x1fe>
 800bfd6:	bf00      	nop

0800bfd8 <frexp>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	4617      	mov	r7, r2
 800bfdc:	2200      	movs	r2, #0
 800bfde:	603a      	str	r2, [r7, #0]
 800bfe0:	4a14      	ldr	r2, [pc, #80]	; (800c034 <frexp+0x5c>)
 800bfe2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bfe6:	4296      	cmp	r6, r2
 800bfe8:	4604      	mov	r4, r0
 800bfea:	460d      	mov	r5, r1
 800bfec:	460b      	mov	r3, r1
 800bfee:	dc1e      	bgt.n	800c02e <frexp+0x56>
 800bff0:	4602      	mov	r2, r0
 800bff2:	4332      	orrs	r2, r6
 800bff4:	d01b      	beq.n	800c02e <frexp+0x56>
 800bff6:	4a10      	ldr	r2, [pc, #64]	; (800c038 <frexp+0x60>)
 800bff8:	400a      	ands	r2, r1
 800bffa:	b952      	cbnz	r2, 800c012 <frexp+0x3a>
 800bffc:	2200      	movs	r2, #0
 800bffe:	4b0f      	ldr	r3, [pc, #60]	; (800c03c <frexp+0x64>)
 800c000:	f7f4 fa74 	bl	80004ec <__aeabi_dmul>
 800c004:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800c008:	4604      	mov	r4, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c010:	603a      	str	r2, [r7, #0]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	1536      	asrs	r6, r6, #20
 800c016:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c01a:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 800c01e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c022:	4416      	add	r6, r2
 800c024:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800c028:	603e      	str	r6, [r7, #0]
 800c02a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800c02e:	4620      	mov	r0, r4
 800c030:	4629      	mov	r1, r5
 800c032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c034:	7fefffff 	.word	0x7fefffff
 800c038:	7ff00000 	.word	0x7ff00000
 800c03c:	43500000 	.word	0x43500000

0800c040 <_sbrk_r>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	2300      	movs	r3, #0
 800c044:	4d05      	ldr	r5, [pc, #20]	; (800c05c <_sbrk_r+0x1c>)
 800c046:	4604      	mov	r4, r0
 800c048:	4608      	mov	r0, r1
 800c04a:	602b      	str	r3, [r5, #0]
 800c04c:	f7f5 faf4 	bl	8001638 <_sbrk>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_sbrk_r+0x1a>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	b103      	cbz	r3, 800c05a <_sbrk_r+0x1a>
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	200015e8 	.word	0x200015e8

0800c060 <__sread>:
 800c060:	b510      	push	{r4, lr}
 800c062:	460c      	mov	r4, r1
 800c064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c068:	f000 ff68 	bl	800cf3c <_read_r>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	bfab      	itete	ge
 800c070:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800c072:	89a3      	ldrhlt	r3, [r4, #12]
 800c074:	181b      	addge	r3, r3, r0
 800c076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c07a:	bfac      	ite	ge
 800c07c:	6523      	strge	r3, [r4, #80]	; 0x50
 800c07e:	81a3      	strhlt	r3, [r4, #12]
 800c080:	bd10      	pop	{r4, pc}

0800c082 <__swrite>:
 800c082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c086:	461f      	mov	r7, r3
 800c088:	898b      	ldrh	r3, [r1, #12]
 800c08a:	4605      	mov	r5, r0
 800c08c:	05db      	lsls	r3, r3, #23
 800c08e:	460c      	mov	r4, r1
 800c090:	4616      	mov	r6, r2
 800c092:	d505      	bpl.n	800c0a0 <__swrite+0x1e>
 800c094:	2302      	movs	r3, #2
 800c096:	2200      	movs	r2, #0
 800c098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09c:	f000 ff2a 	bl	800cef4 <_lseek_r>
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	4632      	mov	r2, r6
 800c0a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0a8:	81a3      	strh	r3, [r4, #12]
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	463b      	mov	r3, r7
 800c0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b6:	f000 bd73 	b.w	800cba0 <_write_r>

0800c0ba <__sseek>:
 800c0ba:	b510      	push	{r4, lr}
 800c0bc:	460c      	mov	r4, r1
 800c0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c2:	f000 ff17 	bl	800cef4 <_lseek_r>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	89a3      	ldrh	r3, [r4, #12]
 800c0ca:	bf15      	itete	ne
 800c0cc:	6520      	strne	r0, [r4, #80]	; 0x50
 800c0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0d6:	81a3      	strheq	r3, [r4, #12]
 800c0d8:	bf18      	it	ne
 800c0da:	81a3      	strhne	r3, [r4, #12]
 800c0dc:	bd10      	pop	{r4, pc}

0800c0de <__sclose>:
 800c0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e2:	f000 bdfb 	b.w	800ccdc <_close_r>

0800c0e6 <strncpy>:
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	3901      	subs	r1, #1
 800c0ec:	b132      	cbz	r2, 800c0fc <strncpy+0x16>
 800c0ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c0f2:	3a01      	subs	r2, #1
 800c0f4:	f803 4b01 	strb.w	r4, [r3], #1
 800c0f8:	2c00      	cmp	r4, #0
 800c0fa:	d1f7      	bne.n	800c0ec <strncpy+0x6>
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	441a      	add	r2, r3
 800c100:	4293      	cmp	r3, r2
 800c102:	d100      	bne.n	800c106 <strncpy+0x20>
 800c104:	bd10      	pop	{r4, pc}
 800c106:	f803 1b01 	strb.w	r1, [r3], #1
 800c10a:	e7f9      	b.n	800c100 <strncpy+0x1a>

0800c10c <sysconf>:
 800c10c:	2808      	cmp	r0, #8
 800c10e:	b508      	push	{r3, lr}
 800c110:	d006      	beq.n	800c120 <sysconf+0x14>
 800c112:	f7fc f91d 	bl	8008350 <__errno>
 800c116:	2316      	movs	r3, #22
 800c118:	6003      	str	r3, [r0, #0]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	bd08      	pop	{r3, pc}
 800c120:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c124:	e7fb      	b.n	800c11e <sysconf+0x12>

0800c126 <__sprint_r>:
 800c126:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12a:	6893      	ldr	r3, [r2, #8]
 800c12c:	4680      	mov	r8, r0
 800c12e:	460f      	mov	r7, r1
 800c130:	4614      	mov	r4, r2
 800c132:	b91b      	cbnz	r3, 800c13c <__sprint_r+0x16>
 800c134:	4618      	mov	r0, r3
 800c136:	6053      	str	r3, [r2, #4]
 800c138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c13e:	049d      	lsls	r5, r3, #18
 800c140:	d520      	bpl.n	800c184 <__sprint_r+0x5e>
 800c142:	6815      	ldr	r5, [r2, #0]
 800c144:	3508      	adds	r5, #8
 800c146:	f04f 0900 	mov.w	r9, #0
 800c14a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800c14e:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800c152:	45ca      	cmp	sl, r9
 800c154:	dc0b      	bgt.n	800c16e <__sprint_r+0x48>
 800c156:	68a0      	ldr	r0, [r4, #8]
 800c158:	f026 0603 	bic.w	r6, r6, #3
 800c15c:	1b80      	subs	r0, r0, r6
 800c15e:	60a0      	str	r0, [r4, #8]
 800c160:	3508      	adds	r5, #8
 800c162:	2800      	cmp	r0, #0
 800c164:	d1ef      	bne.n	800c146 <__sprint_r+0x20>
 800c166:	2300      	movs	r3, #0
 800c168:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800c16c:	e7e4      	b.n	800c138 <__sprint_r+0x12>
 800c16e:	463a      	mov	r2, r7
 800c170:	4640      	mov	r0, r8
 800c172:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800c176:	f000 fe6c 	bl	800ce52 <_fputwc_r>
 800c17a:	1c43      	adds	r3, r0, #1
 800c17c:	d0f3      	beq.n	800c166 <__sprint_r+0x40>
 800c17e:	f109 0901 	add.w	r9, r9, #1
 800c182:	e7e6      	b.n	800c152 <__sprint_r+0x2c>
 800c184:	f7fe fdac 	bl	800ace0 <__sfvwrite_r>
 800c188:	e7ed      	b.n	800c166 <__sprint_r+0x40>
	...

0800c18c <_vfiprintf_r>:
 800c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c190:	b0bb      	sub	sp, #236	; 0xec
 800c192:	460f      	mov	r7, r1
 800c194:	461d      	mov	r5, r3
 800c196:	461c      	mov	r4, r3
 800c198:	4681      	mov	r9, r0
 800c19a:	9202      	str	r2, [sp, #8]
 800c19c:	b118      	cbz	r0, 800c1a6 <_vfiprintf_r+0x1a>
 800c19e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c1a0:	b90b      	cbnz	r3, 800c1a6 <_vfiprintf_r+0x1a>
 800c1a2:	f7fe fc4d 	bl	800aa40 <__sinit>
 800c1a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1a8:	07d8      	lsls	r0, r3, #31
 800c1aa:	d405      	bmi.n	800c1b8 <_vfiprintf_r+0x2c>
 800c1ac:	89bb      	ldrh	r3, [r7, #12]
 800c1ae:	0599      	lsls	r1, r3, #22
 800c1b0:	d402      	bmi.n	800c1b8 <_vfiprintf_r+0x2c>
 800c1b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c1b4:	f7fe ff04 	bl	800afc0 <__retarget_lock_acquire_recursive>
 800c1b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1bc:	049a      	lsls	r2, r3, #18
 800c1be:	d406      	bmi.n	800c1ce <_vfiprintf_r+0x42>
 800c1c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c1c4:	81bb      	strh	r3, [r7, #12]
 800c1c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1cc:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ce:	89bb      	ldrh	r3, [r7, #12]
 800c1d0:	071e      	lsls	r6, r3, #28
 800c1d2:	d501      	bpl.n	800c1d8 <_vfiprintf_r+0x4c>
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	b9ab      	cbnz	r3, 800c204 <_vfiprintf_r+0x78>
 800c1d8:	4639      	mov	r1, r7
 800c1da:	4648      	mov	r0, r9
 800c1dc:	f7fd fc82 	bl	8009ae4 <__swsetup_r>
 800c1e0:	b180      	cbz	r0, 800c204 <_vfiprintf_r+0x78>
 800c1e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1e4:	07d8      	lsls	r0, r3, #31
 800c1e6:	d506      	bpl.n	800c1f6 <_vfiprintf_r+0x6a>
 800c1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ec:	9303      	str	r3, [sp, #12]
 800c1ee:	9803      	ldr	r0, [sp, #12]
 800c1f0:	b03b      	add	sp, #236	; 0xec
 800c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f6:	89bb      	ldrh	r3, [r7, #12]
 800c1f8:	0599      	lsls	r1, r3, #22
 800c1fa:	d4f5      	bmi.n	800c1e8 <_vfiprintf_r+0x5c>
 800c1fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c1fe:	f7fe fee0 	bl	800afc2 <__retarget_lock_release_recursive>
 800c202:	e7f1      	b.n	800c1e8 <_vfiprintf_r+0x5c>
 800c204:	89bb      	ldrh	r3, [r7, #12]
 800c206:	f003 021a 	and.w	r2, r3, #26
 800c20a:	2a0a      	cmp	r2, #10
 800c20c:	d113      	bne.n	800c236 <_vfiprintf_r+0xaa>
 800c20e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c212:	2a00      	cmp	r2, #0
 800c214:	db0f      	blt.n	800c236 <_vfiprintf_r+0xaa>
 800c216:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c218:	07d2      	lsls	r2, r2, #31
 800c21a:	d404      	bmi.n	800c226 <_vfiprintf_r+0x9a>
 800c21c:	059e      	lsls	r6, r3, #22
 800c21e:	d402      	bmi.n	800c226 <_vfiprintf_r+0x9a>
 800c220:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c222:	f7fe fece 	bl	800afc2 <__retarget_lock_release_recursive>
 800c226:	462b      	mov	r3, r5
 800c228:	4639      	mov	r1, r7
 800c22a:	4648      	mov	r0, r9
 800c22c:	9a02      	ldr	r2, [sp, #8]
 800c22e:	f000 fc2d 	bl	800ca8c <__sbprintf>
 800c232:	9003      	str	r0, [sp, #12]
 800c234:	e7db      	b.n	800c1ee <_vfiprintf_r+0x62>
 800c236:	2300      	movs	r3, #0
 800c238:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800c23c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800c240:	ae11      	add	r6, sp, #68	; 0x44
 800c242:	960e      	str	r6, [sp, #56]	; 0x38
 800c244:	9308      	str	r3, [sp, #32]
 800c246:	930a      	str	r3, [sp, #40]	; 0x28
 800c248:	9303      	str	r3, [sp, #12]
 800c24a:	9b02      	ldr	r3, [sp, #8]
 800c24c:	461d      	mov	r5, r3
 800c24e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c252:	b10a      	cbz	r2, 800c258 <_vfiprintf_r+0xcc>
 800c254:	2a25      	cmp	r2, #37	; 0x25
 800c256:	d1f9      	bne.n	800c24c <_vfiprintf_r+0xc0>
 800c258:	9b02      	ldr	r3, [sp, #8]
 800c25a:	ebb5 0803 	subs.w	r8, r5, r3
 800c25e:	d00d      	beq.n	800c27c <_vfiprintf_r+0xf0>
 800c260:	e9c6 3800 	strd	r3, r8, [r6]
 800c264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c266:	4443      	add	r3, r8
 800c268:	9310      	str	r3, [sp, #64]	; 0x40
 800c26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c26c:	3301      	adds	r3, #1
 800c26e:	2b07      	cmp	r3, #7
 800c270:	930f      	str	r3, [sp, #60]	; 0x3c
 800c272:	dc75      	bgt.n	800c360 <_vfiprintf_r+0x1d4>
 800c274:	3608      	adds	r6, #8
 800c276:	9b03      	ldr	r3, [sp, #12]
 800c278:	4443      	add	r3, r8
 800c27a:	9303      	str	r3, [sp, #12]
 800c27c:	782b      	ldrb	r3, [r5, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f000 83c6 	beq.w	800ca10 <_vfiprintf_r+0x884>
 800c284:	2300      	movs	r3, #0
 800c286:	f04f 31ff 	mov.w	r1, #4294967295
 800c28a:	469a      	mov	sl, r3
 800c28c:	1c6a      	adds	r2, r5, #1
 800c28e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800c292:	9101      	str	r1, [sp, #4]
 800c294:	9304      	str	r3, [sp, #16]
 800c296:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c29a:	9202      	str	r2, [sp, #8]
 800c29c:	f1a3 0220 	sub.w	r2, r3, #32
 800c2a0:	2a5a      	cmp	r2, #90	; 0x5a
 800c2a2:	f200 830e 	bhi.w	800c8c2 <_vfiprintf_r+0x736>
 800c2a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c2aa:	0098      	.short	0x0098
 800c2ac:	030c030c 	.word	0x030c030c
 800c2b0:	030c00a0 	.word	0x030c00a0
 800c2b4:	030c030c 	.word	0x030c030c
 800c2b8:	030c0080 	.word	0x030c0080
 800c2bc:	00a3030c 	.word	0x00a3030c
 800c2c0:	030c00ad 	.word	0x030c00ad
 800c2c4:	00af00aa 	.word	0x00af00aa
 800c2c8:	00ca030c 	.word	0x00ca030c
 800c2cc:	00cd00cd 	.word	0x00cd00cd
 800c2d0:	00cd00cd 	.word	0x00cd00cd
 800c2d4:	00cd00cd 	.word	0x00cd00cd
 800c2d8:	00cd00cd 	.word	0x00cd00cd
 800c2dc:	030c00cd 	.word	0x030c00cd
 800c2e0:	030c030c 	.word	0x030c030c
 800c2e4:	030c030c 	.word	0x030c030c
 800c2e8:	030c030c 	.word	0x030c030c
 800c2ec:	030c030c 	.word	0x030c030c
 800c2f0:	010500f7 	.word	0x010500f7
 800c2f4:	030c030c 	.word	0x030c030c
 800c2f8:	030c030c 	.word	0x030c030c
 800c2fc:	030c030c 	.word	0x030c030c
 800c300:	030c030c 	.word	0x030c030c
 800c304:	030c030c 	.word	0x030c030c
 800c308:	030c014b 	.word	0x030c014b
 800c30c:	030c030c 	.word	0x030c030c
 800c310:	030c0191 	.word	0x030c0191
 800c314:	030c026f 	.word	0x030c026f
 800c318:	028d030c 	.word	0x028d030c
 800c31c:	030c030c 	.word	0x030c030c
 800c320:	030c030c 	.word	0x030c030c
 800c324:	030c030c 	.word	0x030c030c
 800c328:	030c030c 	.word	0x030c030c
 800c32c:	030c030c 	.word	0x030c030c
 800c330:	010700f7 	.word	0x010700f7
 800c334:	030c030c 	.word	0x030c030c
 800c338:	00dd030c 	.word	0x00dd030c
 800c33c:	00f10107 	.word	0x00f10107
 800c340:	00ea030c 	.word	0x00ea030c
 800c344:	012e030c 	.word	0x012e030c
 800c348:	0180014d 	.word	0x0180014d
 800c34c:	030c00f1 	.word	0x030c00f1
 800c350:	00960191 	.word	0x00960191
 800c354:	030c0271 	.word	0x030c0271
 800c358:	0065030c 	.word	0x0065030c
 800c35c:	0096030c 	.word	0x0096030c
 800c360:	4639      	mov	r1, r7
 800c362:	4648      	mov	r0, r9
 800c364:	aa0e      	add	r2, sp, #56	; 0x38
 800c366:	f7ff fede 	bl	800c126 <__sprint_r>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	f040 832f 	bne.w	800c9ce <_vfiprintf_r+0x842>
 800c370:	ae11      	add	r6, sp, #68	; 0x44
 800c372:	e780      	b.n	800c276 <_vfiprintf_r+0xea>
 800c374:	4a94      	ldr	r2, [pc, #592]	; (800c5c8 <_vfiprintf_r+0x43c>)
 800c376:	f01a 0f20 	tst.w	sl, #32
 800c37a:	9206      	str	r2, [sp, #24]
 800c37c:	f000 8224 	beq.w	800c7c8 <_vfiprintf_r+0x63c>
 800c380:	3407      	adds	r4, #7
 800c382:	f024 0b07 	bic.w	fp, r4, #7
 800c386:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800c38a:	f01a 0f01 	tst.w	sl, #1
 800c38e:	d009      	beq.n	800c3a4 <_vfiprintf_r+0x218>
 800c390:	ea54 0205 	orrs.w	r2, r4, r5
 800c394:	bf1f      	itttt	ne
 800c396:	2230      	movne	r2, #48	; 0x30
 800c398:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800c39c:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800c3a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c3a4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800c3a8:	e10b      	b.n	800c5c2 <_vfiprintf_r+0x436>
 800c3aa:	4648      	mov	r0, r9
 800c3ac:	f7fe fe02 	bl	800afb4 <_localeconv_r>
 800c3b0:	6843      	ldr	r3, [r0, #4]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	930a      	str	r3, [sp, #40]	; 0x28
 800c3b6:	f7f3 fed5 	bl	8000164 <strlen>
 800c3ba:	9008      	str	r0, [sp, #32]
 800c3bc:	4648      	mov	r0, r9
 800c3be:	f7fe fdf9 	bl	800afb4 <_localeconv_r>
 800c3c2:	6883      	ldr	r3, [r0, #8]
 800c3c4:	9307      	str	r3, [sp, #28]
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	b12b      	cbz	r3, 800c3d6 <_vfiprintf_r+0x24a>
 800c3ca:	9b07      	ldr	r3, [sp, #28]
 800c3cc:	b11b      	cbz	r3, 800c3d6 <_vfiprintf_r+0x24a>
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	b10b      	cbz	r3, 800c3d6 <_vfiprintf_r+0x24a>
 800c3d2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800c3d6:	9a02      	ldr	r2, [sp, #8]
 800c3d8:	e75d      	b.n	800c296 <_vfiprintf_r+0x10a>
 800c3da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1f9      	bne.n	800c3d6 <_vfiprintf_r+0x24a>
 800c3e2:	2320      	movs	r3, #32
 800c3e4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800c3e8:	e7f5      	b.n	800c3d6 <_vfiprintf_r+0x24a>
 800c3ea:	f04a 0a01 	orr.w	sl, sl, #1
 800c3ee:	e7f2      	b.n	800c3d6 <_vfiprintf_r+0x24a>
 800c3f0:	f854 3b04 	ldr.w	r3, [r4], #4
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	9304      	str	r3, [sp, #16]
 800c3f8:	daed      	bge.n	800c3d6 <_vfiprintf_r+0x24a>
 800c3fa:	425b      	negs	r3, r3
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	f04a 0a04 	orr.w	sl, sl, #4
 800c402:	e7e8      	b.n	800c3d6 <_vfiprintf_r+0x24a>
 800c404:	232b      	movs	r3, #43	; 0x2b
 800c406:	e7ed      	b.n	800c3e4 <_vfiprintf_r+0x258>
 800c408:	9a02      	ldr	r2, [sp, #8]
 800c40a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c40e:	2b2a      	cmp	r3, #42	; 0x2a
 800c410:	d112      	bne.n	800c438 <_vfiprintf_r+0x2ac>
 800c412:	f854 0b04 	ldr.w	r0, [r4], #4
 800c416:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800c41a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c41e:	e7da      	b.n	800c3d6 <_vfiprintf_r+0x24a>
 800c420:	200a      	movs	r0, #10
 800c422:	9b01      	ldr	r3, [sp, #4]
 800c424:	fb00 1303 	mla	r3, r0, r3, r1
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c42e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c432:	2909      	cmp	r1, #9
 800c434:	d9f4      	bls.n	800c420 <_vfiprintf_r+0x294>
 800c436:	e730      	b.n	800c29a <_vfiprintf_r+0x10e>
 800c438:	2100      	movs	r1, #0
 800c43a:	9101      	str	r1, [sp, #4]
 800c43c:	e7f7      	b.n	800c42e <_vfiprintf_r+0x2a2>
 800c43e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800c442:	e7c8      	b.n	800c3d6 <_vfiprintf_r+0x24a>
 800c444:	2100      	movs	r1, #0
 800c446:	9a02      	ldr	r2, [sp, #8]
 800c448:	9104      	str	r1, [sp, #16]
 800c44a:	200a      	movs	r0, #10
 800c44c:	9904      	ldr	r1, [sp, #16]
 800c44e:	3b30      	subs	r3, #48	; 0x30
 800c450:	fb00 3301 	mla	r3, r0, r1, r3
 800c454:	9304      	str	r3, [sp, #16]
 800c456:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c45a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c45e:	2909      	cmp	r1, #9
 800c460:	d9f3      	bls.n	800c44a <_vfiprintf_r+0x2be>
 800c462:	e71a      	b.n	800c29a <_vfiprintf_r+0x10e>
 800c464:	9b02      	ldr	r3, [sp, #8]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b68      	cmp	r3, #104	; 0x68
 800c46a:	bf01      	itttt	eq
 800c46c:	9b02      	ldreq	r3, [sp, #8]
 800c46e:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800c472:	3301      	addeq	r3, #1
 800c474:	9302      	streq	r3, [sp, #8]
 800c476:	bf18      	it	ne
 800c478:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800c47c:	e7ab      	b.n	800c3d6 <_vfiprintf_r+0x24a>
 800c47e:	9b02      	ldr	r3, [sp, #8]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	2b6c      	cmp	r3, #108	; 0x6c
 800c484:	d105      	bne.n	800c492 <_vfiprintf_r+0x306>
 800c486:	9b02      	ldr	r3, [sp, #8]
 800c488:	3301      	adds	r3, #1
 800c48a:	9302      	str	r3, [sp, #8]
 800c48c:	f04a 0a20 	orr.w	sl, sl, #32
 800c490:	e7a1      	b.n	800c3d6 <_vfiprintf_r+0x24a>
 800c492:	f04a 0a10 	orr.w	sl, sl, #16
 800c496:	e79e      	b.n	800c3d6 <_vfiprintf_r+0x24a>
 800c498:	46a3      	mov	fp, r4
 800c49a:	2100      	movs	r1, #0
 800c49c:	f85b 3b04 	ldr.w	r3, [fp], #4
 800c4a0:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800c4a4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	460d      	mov	r5, r1
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 800c4b2:	e0a0      	b.n	800c5f6 <_vfiprintf_r+0x46a>
 800c4b4:	f04a 0a10 	orr.w	sl, sl, #16
 800c4b8:	f01a 0f20 	tst.w	sl, #32
 800c4bc:	d010      	beq.n	800c4e0 <_vfiprintf_r+0x354>
 800c4be:	3407      	adds	r4, #7
 800c4c0:	f024 0b07 	bic.w	fp, r4, #7
 800c4c4:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800c4c8:	2c00      	cmp	r4, #0
 800c4ca:	f175 0300 	sbcs.w	r3, r5, #0
 800c4ce:	da05      	bge.n	800c4dc <_vfiprintf_r+0x350>
 800c4d0:	232d      	movs	r3, #45	; 0x2d
 800c4d2:	4264      	negs	r4, r4
 800c4d4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800c4d8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e03f      	b.n	800c560 <_vfiprintf_r+0x3d4>
 800c4e0:	f01a 0f10 	tst.w	sl, #16
 800c4e4:	f104 0b04 	add.w	fp, r4, #4
 800c4e8:	d002      	beq.n	800c4f0 <_vfiprintf_r+0x364>
 800c4ea:	6824      	ldr	r4, [r4, #0]
 800c4ec:	17e5      	asrs	r5, r4, #31
 800c4ee:	e7eb      	b.n	800c4c8 <_vfiprintf_r+0x33c>
 800c4f0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c4f4:	6824      	ldr	r4, [r4, #0]
 800c4f6:	d001      	beq.n	800c4fc <_vfiprintf_r+0x370>
 800c4f8:	b224      	sxth	r4, r4
 800c4fa:	e7f7      	b.n	800c4ec <_vfiprintf_r+0x360>
 800c4fc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c500:	bf18      	it	ne
 800c502:	b264      	sxtbne	r4, r4
 800c504:	e7f2      	b.n	800c4ec <_vfiprintf_r+0x360>
 800c506:	f01a 0f20 	tst.w	sl, #32
 800c50a:	f854 3b04 	ldr.w	r3, [r4], #4
 800c50e:	d005      	beq.n	800c51c <_vfiprintf_r+0x390>
 800c510:	9a03      	ldr	r2, [sp, #12]
 800c512:	4610      	mov	r0, r2
 800c514:	17d1      	asrs	r1, r2, #31
 800c516:	e9c3 0100 	strd	r0, r1, [r3]
 800c51a:	e696      	b.n	800c24a <_vfiprintf_r+0xbe>
 800c51c:	f01a 0f10 	tst.w	sl, #16
 800c520:	d002      	beq.n	800c528 <_vfiprintf_r+0x39c>
 800c522:	9a03      	ldr	r2, [sp, #12]
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	e690      	b.n	800c24a <_vfiprintf_r+0xbe>
 800c528:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c52c:	d002      	beq.n	800c534 <_vfiprintf_r+0x3a8>
 800c52e:	9a03      	ldr	r2, [sp, #12]
 800c530:	801a      	strh	r2, [r3, #0]
 800c532:	e68a      	b.n	800c24a <_vfiprintf_r+0xbe>
 800c534:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c538:	d0f3      	beq.n	800c522 <_vfiprintf_r+0x396>
 800c53a:	9a03      	ldr	r2, [sp, #12]
 800c53c:	701a      	strb	r2, [r3, #0]
 800c53e:	e684      	b.n	800c24a <_vfiprintf_r+0xbe>
 800c540:	f04a 0a10 	orr.w	sl, sl, #16
 800c544:	f01a 0f20 	tst.w	sl, #32
 800c548:	d01d      	beq.n	800c586 <_vfiprintf_r+0x3fa>
 800c54a:	3407      	adds	r4, #7
 800c54c:	f024 0b07 	bic.w	fp, r4, #7
 800c550:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800c554:	2300      	movs	r3, #0
 800c556:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800c55a:	2200      	movs	r2, #0
 800c55c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800c560:	9a01      	ldr	r2, [sp, #4]
 800c562:	3201      	adds	r2, #1
 800c564:	f000 8261 	beq.w	800ca2a <_vfiprintf_r+0x89e>
 800c568:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800c56c:	9205      	str	r2, [sp, #20]
 800c56e:	ea54 0205 	orrs.w	r2, r4, r5
 800c572:	f040 8260 	bne.w	800ca36 <_vfiprintf_r+0x8aa>
 800c576:	9a01      	ldr	r2, [sp, #4]
 800c578:	2a00      	cmp	r2, #0
 800c57a:	f000 8197 	beq.w	800c8ac <_vfiprintf_r+0x720>
 800c57e:	2b01      	cmp	r3, #1
 800c580:	f040 825c 	bne.w	800ca3c <_vfiprintf_r+0x8b0>
 800c584:	e136      	b.n	800c7f4 <_vfiprintf_r+0x668>
 800c586:	f01a 0f10 	tst.w	sl, #16
 800c58a:	f104 0b04 	add.w	fp, r4, #4
 800c58e:	d001      	beq.n	800c594 <_vfiprintf_r+0x408>
 800c590:	6824      	ldr	r4, [r4, #0]
 800c592:	e003      	b.n	800c59c <_vfiprintf_r+0x410>
 800c594:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c598:	d002      	beq.n	800c5a0 <_vfiprintf_r+0x414>
 800c59a:	8824      	ldrh	r4, [r4, #0]
 800c59c:	2500      	movs	r5, #0
 800c59e:	e7d9      	b.n	800c554 <_vfiprintf_r+0x3c8>
 800c5a0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c5a4:	d0f4      	beq.n	800c590 <_vfiprintf_r+0x404>
 800c5a6:	7824      	ldrb	r4, [r4, #0]
 800c5a8:	e7f8      	b.n	800c59c <_vfiprintf_r+0x410>
 800c5aa:	f647 0330 	movw	r3, #30768	; 0x7830
 800c5ae:	46a3      	mov	fp, r4
 800c5b0:	2500      	movs	r5, #0
 800c5b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800c5b6:	4b04      	ldr	r3, [pc, #16]	; (800c5c8 <_vfiprintf_r+0x43c>)
 800c5b8:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c5bc:	f04a 0a02 	orr.w	sl, sl, #2
 800c5c0:	9306      	str	r3, [sp, #24]
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	e7c9      	b.n	800c55a <_vfiprintf_r+0x3ce>
 800c5c6:	bf00      	nop
 800c5c8:	0800d4a0 	.word	0x0800d4a0
 800c5cc:	46a3      	mov	fp, r4
 800c5ce:	2500      	movs	r5, #0
 800c5d0:	9b01      	ldr	r3, [sp, #4]
 800c5d2:	f85b 8b04 	ldr.w	r8, [fp], #4
 800c5d6:	1c5c      	adds	r4, r3, #1
 800c5d8:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800c5dc:	f000 80cf 	beq.w	800c77e <_vfiprintf_r+0x5f2>
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	4640      	mov	r0, r8
 800c5e6:	f7fe ffa3 	bl	800b530 <memchr>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	f000 8173 	beq.w	800c8d6 <_vfiprintf_r+0x74a>
 800c5f0:	eba0 0308 	sub.w	r3, r0, r8
 800c5f4:	9301      	str	r3, [sp, #4]
 800c5f6:	9b01      	ldr	r3, [sp, #4]
 800c5f8:	42ab      	cmp	r3, r5
 800c5fa:	bfb8      	it	lt
 800c5fc:	462b      	movlt	r3, r5
 800c5fe:	9305      	str	r3, [sp, #20]
 800c600:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c604:	b113      	cbz	r3, 800c60c <_vfiprintf_r+0x480>
 800c606:	9b05      	ldr	r3, [sp, #20]
 800c608:	3301      	adds	r3, #1
 800c60a:	9305      	str	r3, [sp, #20]
 800c60c:	f01a 0302 	ands.w	r3, sl, #2
 800c610:	9309      	str	r3, [sp, #36]	; 0x24
 800c612:	bf1e      	ittt	ne
 800c614:	9b05      	ldrne	r3, [sp, #20]
 800c616:	3302      	addne	r3, #2
 800c618:	9305      	strne	r3, [sp, #20]
 800c61a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800c61e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c620:	d11f      	bne.n	800c662 <_vfiprintf_r+0x4d6>
 800c622:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c626:	1a9c      	subs	r4, r3, r2
 800c628:	2c00      	cmp	r4, #0
 800c62a:	dd1a      	ble.n	800c662 <_vfiprintf_r+0x4d6>
 800c62c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800c630:	48b4      	ldr	r0, [pc, #720]	; (800c904 <_vfiprintf_r+0x778>)
 800c632:	2c10      	cmp	r4, #16
 800c634:	f103 0301 	add.w	r3, r3, #1
 800c638:	f106 0108 	add.w	r1, r6, #8
 800c63c:	6030      	str	r0, [r6, #0]
 800c63e:	f300 814c 	bgt.w	800c8da <_vfiprintf_r+0x74e>
 800c642:	6074      	str	r4, [r6, #4]
 800c644:	2b07      	cmp	r3, #7
 800c646:	4414      	add	r4, r2
 800c648:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800c64c:	f340 8157 	ble.w	800c8fe <_vfiprintf_r+0x772>
 800c650:	4639      	mov	r1, r7
 800c652:	4648      	mov	r0, r9
 800c654:	aa0e      	add	r2, sp, #56	; 0x38
 800c656:	f7ff fd66 	bl	800c126 <__sprint_r>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f040 81b7 	bne.w	800c9ce <_vfiprintf_r+0x842>
 800c660:	ae11      	add	r6, sp, #68	; 0x44
 800c662:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c666:	b173      	cbz	r3, 800c686 <_vfiprintf_r+0x4fa>
 800c668:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c66c:	6032      	str	r2, [r6, #0]
 800c66e:	2201      	movs	r2, #1
 800c670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c672:	6072      	str	r2, [r6, #4]
 800c674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c676:	3301      	adds	r3, #1
 800c678:	3201      	adds	r2, #1
 800c67a:	2b07      	cmp	r3, #7
 800c67c:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800c680:	f300 8146 	bgt.w	800c910 <_vfiprintf_r+0x784>
 800c684:	3608      	adds	r6, #8
 800c686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c688:	b16b      	cbz	r3, 800c6a6 <_vfiprintf_r+0x51a>
 800c68a:	aa0d      	add	r2, sp, #52	; 0x34
 800c68c:	6032      	str	r2, [r6, #0]
 800c68e:	2202      	movs	r2, #2
 800c690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c692:	6072      	str	r2, [r6, #4]
 800c694:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c696:	3301      	adds	r3, #1
 800c698:	3202      	adds	r2, #2
 800c69a:	2b07      	cmp	r3, #7
 800c69c:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800c6a0:	f300 813f 	bgt.w	800c922 <_vfiprintf_r+0x796>
 800c6a4:	3608      	adds	r6, #8
 800c6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6a8:	2b80      	cmp	r3, #128	; 0x80
 800c6aa:	d11f      	bne.n	800c6ec <_vfiprintf_r+0x560>
 800c6ac:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c6b0:	1a9c      	subs	r4, r3, r2
 800c6b2:	2c00      	cmp	r4, #0
 800c6b4:	dd1a      	ble.n	800c6ec <_vfiprintf_r+0x560>
 800c6b6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800c6ba:	4893      	ldr	r0, [pc, #588]	; (800c908 <_vfiprintf_r+0x77c>)
 800c6bc:	2c10      	cmp	r4, #16
 800c6be:	f103 0301 	add.w	r3, r3, #1
 800c6c2:	f106 0108 	add.w	r1, r6, #8
 800c6c6:	6030      	str	r0, [r6, #0]
 800c6c8:	f300 8134 	bgt.w	800c934 <_vfiprintf_r+0x7a8>
 800c6cc:	6074      	str	r4, [r6, #4]
 800c6ce:	2b07      	cmp	r3, #7
 800c6d0:	4414      	add	r4, r2
 800c6d2:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800c6d6:	f340 813f 	ble.w	800c958 <_vfiprintf_r+0x7cc>
 800c6da:	4639      	mov	r1, r7
 800c6dc:	4648      	mov	r0, r9
 800c6de:	aa0e      	add	r2, sp, #56	; 0x38
 800c6e0:	f7ff fd21 	bl	800c126 <__sprint_r>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	f040 8172 	bne.w	800c9ce <_vfiprintf_r+0x842>
 800c6ea:	ae11      	add	r6, sp, #68	; 0x44
 800c6ec:	9b01      	ldr	r3, [sp, #4]
 800c6ee:	1aec      	subs	r4, r5, r3
 800c6f0:	2c00      	cmp	r4, #0
 800c6f2:	dd1a      	ble.n	800c72a <_vfiprintf_r+0x59e>
 800c6f4:	4d84      	ldr	r5, [pc, #528]	; (800c908 <_vfiprintf_r+0x77c>)
 800c6f6:	2c10      	cmp	r4, #16
 800c6f8:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 800c6fc:	f106 0208 	add.w	r2, r6, #8
 800c700:	f103 0301 	add.w	r3, r3, #1
 800c704:	6035      	str	r5, [r6, #0]
 800c706:	f300 8129 	bgt.w	800c95c <_vfiprintf_r+0x7d0>
 800c70a:	6074      	str	r4, [r6, #4]
 800c70c:	2b07      	cmp	r3, #7
 800c70e:	440c      	add	r4, r1
 800c710:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800c714:	f340 8133 	ble.w	800c97e <_vfiprintf_r+0x7f2>
 800c718:	4639      	mov	r1, r7
 800c71a:	4648      	mov	r0, r9
 800c71c:	aa0e      	add	r2, sp, #56	; 0x38
 800c71e:	f7ff fd02 	bl	800c126 <__sprint_r>
 800c722:	2800      	cmp	r0, #0
 800c724:	f040 8153 	bne.w	800c9ce <_vfiprintf_r+0x842>
 800c728:	ae11      	add	r6, sp, #68	; 0x44
 800c72a:	9b01      	ldr	r3, [sp, #4]
 800c72c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c72e:	6073      	str	r3, [r6, #4]
 800c730:	4418      	add	r0, r3
 800c732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c734:	f8c6 8000 	str.w	r8, [r6]
 800c738:	3301      	adds	r3, #1
 800c73a:	2b07      	cmp	r3, #7
 800c73c:	9010      	str	r0, [sp, #64]	; 0x40
 800c73e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c740:	f300 811f 	bgt.w	800c982 <_vfiprintf_r+0x7f6>
 800c744:	f106 0308 	add.w	r3, r6, #8
 800c748:	f01a 0f04 	tst.w	sl, #4
 800c74c:	f040 8121 	bne.w	800c992 <_vfiprintf_r+0x806>
 800c750:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800c754:	9905      	ldr	r1, [sp, #20]
 800c756:	428a      	cmp	r2, r1
 800c758:	bfac      	ite	ge
 800c75a:	189b      	addge	r3, r3, r2
 800c75c:	185b      	addlt	r3, r3, r1
 800c75e:	9303      	str	r3, [sp, #12]
 800c760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c762:	b13b      	cbz	r3, 800c774 <_vfiprintf_r+0x5e8>
 800c764:	4639      	mov	r1, r7
 800c766:	4648      	mov	r0, r9
 800c768:	aa0e      	add	r2, sp, #56	; 0x38
 800c76a:	f7ff fcdc 	bl	800c126 <__sprint_r>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f040 812d 	bne.w	800c9ce <_vfiprintf_r+0x842>
 800c774:	2300      	movs	r3, #0
 800c776:	465c      	mov	r4, fp
 800c778:	930f      	str	r3, [sp, #60]	; 0x3c
 800c77a:	ae11      	add	r6, sp, #68	; 0x44
 800c77c:	e565      	b.n	800c24a <_vfiprintf_r+0xbe>
 800c77e:	4640      	mov	r0, r8
 800c780:	f7f3 fcf0 	bl	8000164 <strlen>
 800c784:	9001      	str	r0, [sp, #4]
 800c786:	e736      	b.n	800c5f6 <_vfiprintf_r+0x46a>
 800c788:	f04a 0a10 	orr.w	sl, sl, #16
 800c78c:	f01a 0f20 	tst.w	sl, #32
 800c790:	d006      	beq.n	800c7a0 <_vfiprintf_r+0x614>
 800c792:	3407      	adds	r4, #7
 800c794:	f024 0b07 	bic.w	fp, r4, #7
 800c798:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800c79c:	2301      	movs	r3, #1
 800c79e:	e6dc      	b.n	800c55a <_vfiprintf_r+0x3ce>
 800c7a0:	f01a 0f10 	tst.w	sl, #16
 800c7a4:	f104 0b04 	add.w	fp, r4, #4
 800c7a8:	d001      	beq.n	800c7ae <_vfiprintf_r+0x622>
 800c7aa:	6824      	ldr	r4, [r4, #0]
 800c7ac:	e003      	b.n	800c7b6 <_vfiprintf_r+0x62a>
 800c7ae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c7b2:	d002      	beq.n	800c7ba <_vfiprintf_r+0x62e>
 800c7b4:	8824      	ldrh	r4, [r4, #0]
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	e7f0      	b.n	800c79c <_vfiprintf_r+0x610>
 800c7ba:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c7be:	d0f4      	beq.n	800c7aa <_vfiprintf_r+0x61e>
 800c7c0:	7824      	ldrb	r4, [r4, #0]
 800c7c2:	e7f8      	b.n	800c7b6 <_vfiprintf_r+0x62a>
 800c7c4:	4a51      	ldr	r2, [pc, #324]	; (800c90c <_vfiprintf_r+0x780>)
 800c7c6:	e5d6      	b.n	800c376 <_vfiprintf_r+0x1ea>
 800c7c8:	f01a 0f10 	tst.w	sl, #16
 800c7cc:	f104 0b04 	add.w	fp, r4, #4
 800c7d0:	d001      	beq.n	800c7d6 <_vfiprintf_r+0x64a>
 800c7d2:	6824      	ldr	r4, [r4, #0]
 800c7d4:	e003      	b.n	800c7de <_vfiprintf_r+0x652>
 800c7d6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c7da:	d002      	beq.n	800c7e2 <_vfiprintf_r+0x656>
 800c7dc:	8824      	ldrh	r4, [r4, #0]
 800c7de:	2500      	movs	r5, #0
 800c7e0:	e5d3      	b.n	800c38a <_vfiprintf_r+0x1fe>
 800c7e2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c7e6:	d0f4      	beq.n	800c7d2 <_vfiprintf_r+0x646>
 800c7e8:	7824      	ldrb	r4, [r4, #0]
 800c7ea:	e7f8      	b.n	800c7de <_vfiprintf_r+0x652>
 800c7ec:	2d00      	cmp	r5, #0
 800c7ee:	bf08      	it	eq
 800c7f0:	2c0a      	cmpeq	r4, #10
 800c7f2:	d205      	bcs.n	800c800 <_vfiprintf_r+0x674>
 800c7f4:	3430      	adds	r4, #48	; 0x30
 800c7f6:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800c7fa:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 800c7fe:	e13b      	b.n	800ca78 <_vfiprintf_r+0x8ec>
 800c800:	f04f 0a00 	mov.w	sl, #0
 800c804:	ab3a      	add	r3, sp, #232	; 0xe8
 800c806:	9309      	str	r3, [sp, #36]	; 0x24
 800c808:	9b05      	ldr	r3, [sp, #20]
 800c80a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c80e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c812:	220a      	movs	r2, #10
 800c814:	4620      	mov	r0, r4
 800c816:	4629      	mov	r1, r5
 800c818:	f103 38ff 	add.w	r8, r3, #4294967295
 800c81c:	2300      	movs	r3, #0
 800c81e:	f7f4 f93d 	bl	8000a9c <__aeabi_uldivmod>
 800c822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c824:	3230      	adds	r2, #48	; 0x30
 800c826:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c82c:	f10a 0a01 	add.w	sl, sl, #1
 800c830:	b1d3      	cbz	r3, 800c868 <_vfiprintf_r+0x6dc>
 800c832:	9b07      	ldr	r3, [sp, #28]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	4553      	cmp	r3, sl
 800c838:	d116      	bne.n	800c868 <_vfiprintf_r+0x6dc>
 800c83a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800c83e:	d013      	beq.n	800c868 <_vfiprintf_r+0x6dc>
 800c840:	2d00      	cmp	r5, #0
 800c842:	bf08      	it	eq
 800c844:	2c0a      	cmpeq	r4, #10
 800c846:	d30f      	bcc.n	800c868 <_vfiprintf_r+0x6dc>
 800c848:	9b08      	ldr	r3, [sp, #32]
 800c84a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c84c:	eba8 0803 	sub.w	r8, r8, r3
 800c850:	461a      	mov	r2, r3
 800c852:	4640      	mov	r0, r8
 800c854:	f7ff fc47 	bl	800c0e6 <strncpy>
 800c858:	9b07      	ldr	r3, [sp, #28]
 800c85a:	785b      	ldrb	r3, [r3, #1]
 800c85c:	b1a3      	cbz	r3, 800c888 <_vfiprintf_r+0x6fc>
 800c85e:	f04f 0a00 	mov.w	sl, #0
 800c862:	9b07      	ldr	r3, [sp, #28]
 800c864:	3301      	adds	r3, #1
 800c866:	9307      	str	r3, [sp, #28]
 800c868:	220a      	movs	r2, #10
 800c86a:	2300      	movs	r3, #0
 800c86c:	4620      	mov	r0, r4
 800c86e:	4629      	mov	r1, r5
 800c870:	f7f4 f914 	bl	8000a9c <__aeabi_uldivmod>
 800c874:	2d00      	cmp	r5, #0
 800c876:	bf08      	it	eq
 800c878:	2c0a      	cmpeq	r4, #10
 800c87a:	f0c0 80fd 	bcc.w	800ca78 <_vfiprintf_r+0x8ec>
 800c87e:	4604      	mov	r4, r0
 800c880:	460d      	mov	r5, r1
 800c882:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800c886:	e7c3      	b.n	800c810 <_vfiprintf_r+0x684>
 800c888:	469a      	mov	sl, r3
 800c88a:	e7ed      	b.n	800c868 <_vfiprintf_r+0x6dc>
 800c88c:	9a06      	ldr	r2, [sp, #24]
 800c88e:	f004 030f 	and.w	r3, r4, #15
 800c892:	5cd3      	ldrb	r3, [r2, r3]
 800c894:	092a      	lsrs	r2, r5, #4
 800c896:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c89a:	0923      	lsrs	r3, r4, #4
 800c89c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800c8a0:	461c      	mov	r4, r3
 800c8a2:	4615      	mov	r5, r2
 800c8a4:	ea54 0305 	orrs.w	r3, r4, r5
 800c8a8:	d1f0      	bne.n	800c88c <_vfiprintf_r+0x700>
 800c8aa:	e0e5      	b.n	800ca78 <_vfiprintf_r+0x8ec>
 800c8ac:	b933      	cbnz	r3, 800c8bc <_vfiprintf_r+0x730>
 800c8ae:	f01a 0f01 	tst.w	sl, #1
 800c8b2:	d003      	beq.n	800c8bc <_vfiprintf_r+0x730>
 800c8b4:	2330      	movs	r3, #48	; 0x30
 800c8b6:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800c8ba:	e79e      	b.n	800c7fa <_vfiprintf_r+0x66e>
 800c8bc:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800c8c0:	e0da      	b.n	800ca78 <_vfiprintf_r+0x8ec>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 80a4 	beq.w	800ca10 <_vfiprintf_r+0x884>
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	46a3      	mov	fp, r4
 800c8cc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800c8d0:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800c8d4:	e5e8      	b.n	800c4a8 <_vfiprintf_r+0x31c>
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	e68d      	b.n	800c5f6 <_vfiprintf_r+0x46a>
 800c8da:	2010      	movs	r0, #16
 800c8dc:	2b07      	cmp	r3, #7
 800c8de:	4402      	add	r2, r0
 800c8e0:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800c8e4:	6070      	str	r0, [r6, #4]
 800c8e6:	dd07      	ble.n	800c8f8 <_vfiprintf_r+0x76c>
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	4648      	mov	r0, r9
 800c8ec:	aa0e      	add	r2, sp, #56	; 0x38
 800c8ee:	f7ff fc1a 	bl	800c126 <__sprint_r>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d16b      	bne.n	800c9ce <_vfiprintf_r+0x842>
 800c8f6:	a911      	add	r1, sp, #68	; 0x44
 800c8f8:	460e      	mov	r6, r1
 800c8fa:	3c10      	subs	r4, #16
 800c8fc:	e696      	b.n	800c62c <_vfiprintf_r+0x4a0>
 800c8fe:	460e      	mov	r6, r1
 800c900:	e6af      	b.n	800c662 <_vfiprintf_r+0x4d6>
 800c902:	bf00      	nop
 800c904:	0800d6c4 	.word	0x0800d6c4
 800c908:	0800d6d4 	.word	0x0800d6d4
 800c90c:	0800d4b1 	.word	0x0800d4b1
 800c910:	4639      	mov	r1, r7
 800c912:	4648      	mov	r0, r9
 800c914:	aa0e      	add	r2, sp, #56	; 0x38
 800c916:	f7ff fc06 	bl	800c126 <__sprint_r>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d157      	bne.n	800c9ce <_vfiprintf_r+0x842>
 800c91e:	ae11      	add	r6, sp, #68	; 0x44
 800c920:	e6b1      	b.n	800c686 <_vfiprintf_r+0x4fa>
 800c922:	4639      	mov	r1, r7
 800c924:	4648      	mov	r0, r9
 800c926:	aa0e      	add	r2, sp, #56	; 0x38
 800c928:	f7ff fbfd 	bl	800c126 <__sprint_r>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d14e      	bne.n	800c9ce <_vfiprintf_r+0x842>
 800c930:	ae11      	add	r6, sp, #68	; 0x44
 800c932:	e6b8      	b.n	800c6a6 <_vfiprintf_r+0x51a>
 800c934:	2010      	movs	r0, #16
 800c936:	2b07      	cmp	r3, #7
 800c938:	4402      	add	r2, r0
 800c93a:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800c93e:	6070      	str	r0, [r6, #4]
 800c940:	dd07      	ble.n	800c952 <_vfiprintf_r+0x7c6>
 800c942:	4639      	mov	r1, r7
 800c944:	4648      	mov	r0, r9
 800c946:	aa0e      	add	r2, sp, #56	; 0x38
 800c948:	f7ff fbed 	bl	800c126 <__sprint_r>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d13e      	bne.n	800c9ce <_vfiprintf_r+0x842>
 800c950:	a911      	add	r1, sp, #68	; 0x44
 800c952:	460e      	mov	r6, r1
 800c954:	3c10      	subs	r4, #16
 800c956:	e6ae      	b.n	800c6b6 <_vfiprintf_r+0x52a>
 800c958:	460e      	mov	r6, r1
 800c95a:	e6c7      	b.n	800c6ec <_vfiprintf_r+0x560>
 800c95c:	2010      	movs	r0, #16
 800c95e:	2b07      	cmp	r3, #7
 800c960:	4401      	add	r1, r0
 800c962:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 800c966:	6070      	str	r0, [r6, #4]
 800c968:	dd06      	ble.n	800c978 <_vfiprintf_r+0x7ec>
 800c96a:	4639      	mov	r1, r7
 800c96c:	4648      	mov	r0, r9
 800c96e:	aa0e      	add	r2, sp, #56	; 0x38
 800c970:	f7ff fbd9 	bl	800c126 <__sprint_r>
 800c974:	bb58      	cbnz	r0, 800c9ce <_vfiprintf_r+0x842>
 800c976:	aa11      	add	r2, sp, #68	; 0x44
 800c978:	4616      	mov	r6, r2
 800c97a:	3c10      	subs	r4, #16
 800c97c:	e6bb      	b.n	800c6f6 <_vfiprintf_r+0x56a>
 800c97e:	4616      	mov	r6, r2
 800c980:	e6d3      	b.n	800c72a <_vfiprintf_r+0x59e>
 800c982:	4639      	mov	r1, r7
 800c984:	4648      	mov	r0, r9
 800c986:	aa0e      	add	r2, sp, #56	; 0x38
 800c988:	f7ff fbcd 	bl	800c126 <__sprint_r>
 800c98c:	b9f8      	cbnz	r0, 800c9ce <_vfiprintf_r+0x842>
 800c98e:	ab11      	add	r3, sp, #68	; 0x44
 800c990:	e6da      	b.n	800c748 <_vfiprintf_r+0x5bc>
 800c992:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c996:	1a54      	subs	r4, r2, r1
 800c998:	2c00      	cmp	r4, #0
 800c99a:	f77f aed9 	ble.w	800c750 <_vfiprintf_r+0x5c4>
 800c99e:	2610      	movs	r6, #16
 800c9a0:	4d39      	ldr	r5, [pc, #228]	; (800ca88 <_vfiprintf_r+0x8fc>)
 800c9a2:	2c10      	cmp	r4, #16
 800c9a4:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800c9a8:	601d      	str	r5, [r3, #0]
 800c9aa:	f102 0201 	add.w	r2, r2, #1
 800c9ae:	dc1d      	bgt.n	800c9ec <_vfiprintf_r+0x860>
 800c9b0:	605c      	str	r4, [r3, #4]
 800c9b2:	2a07      	cmp	r2, #7
 800c9b4:	440c      	add	r4, r1
 800c9b6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800c9ba:	f77f aec9 	ble.w	800c750 <_vfiprintf_r+0x5c4>
 800c9be:	4639      	mov	r1, r7
 800c9c0:	4648      	mov	r0, r9
 800c9c2:	aa0e      	add	r2, sp, #56	; 0x38
 800c9c4:	f7ff fbaf 	bl	800c126 <__sprint_r>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	f43f aec1 	beq.w	800c750 <_vfiprintf_r+0x5c4>
 800c9ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9d0:	07d9      	lsls	r1, r3, #31
 800c9d2:	d405      	bmi.n	800c9e0 <_vfiprintf_r+0x854>
 800c9d4:	89bb      	ldrh	r3, [r7, #12]
 800c9d6:	059a      	lsls	r2, r3, #22
 800c9d8:	d402      	bmi.n	800c9e0 <_vfiprintf_r+0x854>
 800c9da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c9dc:	f7fe faf1 	bl	800afc2 <__retarget_lock_release_recursive>
 800c9e0:	89bb      	ldrh	r3, [r7, #12]
 800c9e2:	065b      	lsls	r3, r3, #25
 800c9e4:	f57f ac03 	bpl.w	800c1ee <_vfiprintf_r+0x62>
 800c9e8:	f7ff bbfe 	b.w	800c1e8 <_vfiprintf_r+0x5c>
 800c9ec:	3110      	adds	r1, #16
 800c9ee:	2a07      	cmp	r2, #7
 800c9f0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800c9f4:	605e      	str	r6, [r3, #4]
 800c9f6:	dc02      	bgt.n	800c9fe <_vfiprintf_r+0x872>
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	3c10      	subs	r4, #16
 800c9fc:	e7d1      	b.n	800c9a2 <_vfiprintf_r+0x816>
 800c9fe:	4639      	mov	r1, r7
 800ca00:	4648      	mov	r0, r9
 800ca02:	aa0e      	add	r2, sp, #56	; 0x38
 800ca04:	f7ff fb8f 	bl	800c126 <__sprint_r>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d1e0      	bne.n	800c9ce <_vfiprintf_r+0x842>
 800ca0c:	ab11      	add	r3, sp, #68	; 0x44
 800ca0e:	e7f4      	b.n	800c9fa <_vfiprintf_r+0x86e>
 800ca10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca12:	b913      	cbnz	r3, 800ca1a <_vfiprintf_r+0x88e>
 800ca14:	2300      	movs	r3, #0
 800ca16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca18:	e7d9      	b.n	800c9ce <_vfiprintf_r+0x842>
 800ca1a:	4639      	mov	r1, r7
 800ca1c:	4648      	mov	r0, r9
 800ca1e:	aa0e      	add	r2, sp, #56	; 0x38
 800ca20:	f7ff fb81 	bl	800c126 <__sprint_r>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d0f5      	beq.n	800ca14 <_vfiprintf_r+0x888>
 800ca28:	e7d1      	b.n	800c9ce <_vfiprintf_r+0x842>
 800ca2a:	ea54 0205 	orrs.w	r2, r4, r5
 800ca2e:	f8cd a014 	str.w	sl, [sp, #20]
 800ca32:	f43f ada4 	beq.w	800c57e <_vfiprintf_r+0x3f2>
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	f43f aed8 	beq.w	800c7ec <_vfiprintf_r+0x660>
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800ca42:	f43f af23 	beq.w	800c88c <_vfiprintf_r+0x700>
 800ca46:	08e2      	lsrs	r2, r4, #3
 800ca48:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800ca4c:	08e8      	lsrs	r0, r5, #3
 800ca4e:	f004 0307 	and.w	r3, r4, #7
 800ca52:	4605      	mov	r5, r0
 800ca54:	4614      	mov	r4, r2
 800ca56:	3330      	adds	r3, #48	; 0x30
 800ca58:	ea54 0205 	orrs.w	r2, r4, r5
 800ca5c:	4641      	mov	r1, r8
 800ca5e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800ca62:	d1f0      	bne.n	800ca46 <_vfiprintf_r+0x8ba>
 800ca64:	9a05      	ldr	r2, [sp, #20]
 800ca66:	07d0      	lsls	r0, r2, #31
 800ca68:	d506      	bpl.n	800ca78 <_vfiprintf_r+0x8ec>
 800ca6a:	2b30      	cmp	r3, #48	; 0x30
 800ca6c:	d004      	beq.n	800ca78 <_vfiprintf_r+0x8ec>
 800ca6e:	2330      	movs	r3, #48	; 0x30
 800ca70:	f808 3c01 	strb.w	r3, [r8, #-1]
 800ca74:	f1a1 0802 	sub.w	r8, r1, #2
 800ca78:	ab3a      	add	r3, sp, #232	; 0xe8
 800ca7a:	eba3 0308 	sub.w	r3, r3, r8
 800ca7e:	9d01      	ldr	r5, [sp, #4]
 800ca80:	f8dd a014 	ldr.w	sl, [sp, #20]
 800ca84:	9301      	str	r3, [sp, #4]
 800ca86:	e5b6      	b.n	800c5f6 <_vfiprintf_r+0x46a>
 800ca88:	0800d6c4 	.word	0x0800d6c4

0800ca8c <__sbprintf>:
 800ca8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca8e:	461f      	mov	r7, r3
 800ca90:	898b      	ldrh	r3, [r1, #12]
 800ca92:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800ca96:	f023 0302 	bic.w	r3, r3, #2
 800ca9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ca9e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800caa0:	4615      	mov	r5, r2
 800caa2:	9319      	str	r3, [sp, #100]	; 0x64
 800caa4:	89cb      	ldrh	r3, [r1, #14]
 800caa6:	4606      	mov	r6, r0
 800caa8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800caac:	69cb      	ldr	r3, [r1, #28]
 800caae:	a816      	add	r0, sp, #88	; 0x58
 800cab0:	9307      	str	r3, [sp, #28]
 800cab2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800cab4:	460c      	mov	r4, r1
 800cab6:	9309      	str	r3, [sp, #36]	; 0x24
 800cab8:	ab1a      	add	r3, sp, #104	; 0x68
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	9304      	str	r3, [sp, #16]
 800cabe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cac2:	9302      	str	r3, [sp, #8]
 800cac4:	9305      	str	r3, [sp, #20]
 800cac6:	2300      	movs	r3, #0
 800cac8:	9306      	str	r3, [sp, #24]
 800caca:	f7fe fa77 	bl	800afbc <__retarget_lock_init_recursive>
 800cace:	462a      	mov	r2, r5
 800cad0:	463b      	mov	r3, r7
 800cad2:	4669      	mov	r1, sp
 800cad4:	4630      	mov	r0, r6
 800cad6:	f7ff fb59 	bl	800c18c <_vfiprintf_r>
 800cada:	1e05      	subs	r5, r0, #0
 800cadc:	db07      	blt.n	800caee <__sbprintf+0x62>
 800cade:	4669      	mov	r1, sp
 800cae0:	4630      	mov	r0, r6
 800cae2:	f7fd ff41 	bl	800a968 <_fflush_r>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	bf18      	it	ne
 800caea:	f04f 35ff 	movne.w	r5, #4294967295
 800caee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800caf2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800caf4:	065b      	lsls	r3, r3, #25
 800caf6:	bf42      	ittt	mi
 800caf8:	89a3      	ldrhmi	r3, [r4, #12]
 800cafa:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800cafe:	81a3      	strhmi	r3, [r4, #12]
 800cb00:	f7fe fa5d 	bl	800afbe <__retarget_lock_close_recursive>
 800cb04:	4628      	mov	r0, r5
 800cb06:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb0c <__swbuf_r>:
 800cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0e:	460e      	mov	r6, r1
 800cb10:	4614      	mov	r4, r2
 800cb12:	4605      	mov	r5, r0
 800cb14:	b118      	cbz	r0, 800cb1e <__swbuf_r+0x12>
 800cb16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cb18:	b90b      	cbnz	r3, 800cb1e <__swbuf_r+0x12>
 800cb1a:	f7fd ff91 	bl	800aa40 <__sinit>
 800cb1e:	69a3      	ldr	r3, [r4, #24]
 800cb20:	60a3      	str	r3, [r4, #8]
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	0719      	lsls	r1, r3, #28
 800cb26:	d529      	bpl.n	800cb7c <__swbuf_r+0x70>
 800cb28:	6923      	ldr	r3, [r4, #16]
 800cb2a:	b33b      	cbz	r3, 800cb7c <__swbuf_r+0x70>
 800cb2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb30:	b2f6      	uxtb	r6, r6
 800cb32:	049a      	lsls	r2, r3, #18
 800cb34:	4637      	mov	r7, r6
 800cb36:	d52a      	bpl.n	800cb8e <__swbuf_r+0x82>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	6920      	ldr	r0, [r4, #16]
 800cb3c:	1a18      	subs	r0, r3, r0
 800cb3e:	6963      	ldr	r3, [r4, #20]
 800cb40:	4283      	cmp	r3, r0
 800cb42:	dc04      	bgt.n	800cb4e <__swbuf_r+0x42>
 800cb44:	4621      	mov	r1, r4
 800cb46:	4628      	mov	r0, r5
 800cb48:	f7fd ff0e 	bl	800a968 <_fflush_r>
 800cb4c:	b9e0      	cbnz	r0, 800cb88 <__swbuf_r+0x7c>
 800cb4e:	68a3      	ldr	r3, [r4, #8]
 800cb50:	3001      	adds	r0, #1
 800cb52:	3b01      	subs	r3, #1
 800cb54:	60a3      	str	r3, [r4, #8]
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	6022      	str	r2, [r4, #0]
 800cb5c:	701e      	strb	r6, [r3, #0]
 800cb5e:	6963      	ldr	r3, [r4, #20]
 800cb60:	4283      	cmp	r3, r0
 800cb62:	d004      	beq.n	800cb6e <__swbuf_r+0x62>
 800cb64:	89a3      	ldrh	r3, [r4, #12]
 800cb66:	07db      	lsls	r3, r3, #31
 800cb68:	d506      	bpl.n	800cb78 <__swbuf_r+0x6c>
 800cb6a:	2e0a      	cmp	r6, #10
 800cb6c:	d104      	bne.n	800cb78 <__swbuf_r+0x6c>
 800cb6e:	4621      	mov	r1, r4
 800cb70:	4628      	mov	r0, r5
 800cb72:	f7fd fef9 	bl	800a968 <_fflush_r>
 800cb76:	b938      	cbnz	r0, 800cb88 <__swbuf_r+0x7c>
 800cb78:	4638      	mov	r0, r7
 800cb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	4628      	mov	r0, r5
 800cb80:	f7fc ffb0 	bl	8009ae4 <__swsetup_r>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d0d1      	beq.n	800cb2c <__swbuf_r+0x20>
 800cb88:	f04f 37ff 	mov.w	r7, #4294967295
 800cb8c:	e7f4      	b.n	800cb78 <__swbuf_r+0x6c>
 800cb8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cb92:	81a3      	strh	r3, [r4, #12]
 800cb94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb9a:	6663      	str	r3, [r4, #100]	; 0x64
 800cb9c:	e7cc      	b.n	800cb38 <__swbuf_r+0x2c>
	...

0800cba0 <_write_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4604      	mov	r4, r0
 800cba4:	4608      	mov	r0, r1
 800cba6:	4611      	mov	r1, r2
 800cba8:	2200      	movs	r2, #0
 800cbaa:	4d05      	ldr	r5, [pc, #20]	; (800cbc0 <_write_r+0x20>)
 800cbac:	602a      	str	r2, [r5, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	f7f4 fcf6 	bl	80015a0 <_write>
 800cbb4:	1c43      	adds	r3, r0, #1
 800cbb6:	d102      	bne.n	800cbbe <_write_r+0x1e>
 800cbb8:	682b      	ldr	r3, [r5, #0]
 800cbba:	b103      	cbz	r3, 800cbbe <_write_r+0x1e>
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	bd38      	pop	{r3, r4, r5, pc}
 800cbc0:	200015e8 	.word	0x200015e8

0800cbc4 <__register_exitproc>:
 800cbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc8:	4d1c      	ldr	r5, [pc, #112]	; (800cc3c <__register_exitproc+0x78>)
 800cbca:	4606      	mov	r6, r0
 800cbcc:	6828      	ldr	r0, [r5, #0]
 800cbce:	4698      	mov	r8, r3
 800cbd0:	460f      	mov	r7, r1
 800cbd2:	4691      	mov	r9, r2
 800cbd4:	f7fe f9f4 	bl	800afc0 <__retarget_lock_acquire_recursive>
 800cbd8:	4b19      	ldr	r3, [pc, #100]	; (800cc40 <__register_exitproc+0x7c>)
 800cbda:	4628      	mov	r0, r5
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800cbe2:	b91c      	cbnz	r4, 800cbec <__register_exitproc+0x28>
 800cbe4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800cbe8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800cbec:	6865      	ldr	r5, [r4, #4]
 800cbee:	6800      	ldr	r0, [r0, #0]
 800cbf0:	2d1f      	cmp	r5, #31
 800cbf2:	dd05      	ble.n	800cc00 <__register_exitproc+0x3c>
 800cbf4:	f7fe f9e5 	bl	800afc2 <__retarget_lock_release_recursive>
 800cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc00:	b19e      	cbz	r6, 800cc2a <__register_exitproc+0x66>
 800cc02:	2201      	movs	r2, #1
 800cc04:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800cc08:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800cc0c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800cc10:	40aa      	lsls	r2, r5
 800cc12:	4313      	orrs	r3, r2
 800cc14:	2e02      	cmp	r6, #2
 800cc16:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800cc1a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800cc1e:	bf02      	ittt	eq
 800cc20:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800cc24:	431a      	orreq	r2, r3
 800cc26:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800cc2a:	1c6b      	adds	r3, r5, #1
 800cc2c:	3502      	adds	r5, #2
 800cc2e:	6063      	str	r3, [r4, #4]
 800cc30:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800cc34:	f7fe f9c5 	bl	800afc2 <__retarget_lock_release_recursive>
 800cc38:	2000      	movs	r0, #0
 800cc3a:	e7df      	b.n	800cbfc <__register_exitproc+0x38>
 800cc3c:	20000b18 	.word	0x20000b18
 800cc40:	0800d48c 	.word	0x0800d48c

0800cc44 <__assert_func>:
 800cc44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc46:	4614      	mov	r4, r2
 800cc48:	461a      	mov	r2, r3
 800cc4a:	4b09      	ldr	r3, [pc, #36]	; (800cc70 <__assert_func+0x2c>)
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68d8      	ldr	r0, [r3, #12]
 800cc52:	b14c      	cbz	r4, 800cc68 <__assert_func+0x24>
 800cc54:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <__assert_func+0x30>)
 800cc56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc5a:	9100      	str	r1, [sp, #0]
 800cc5c:	462b      	mov	r3, r5
 800cc5e:	4906      	ldr	r1, [pc, #24]	; (800cc78 <__assert_func+0x34>)
 800cc60:	f000 f8a4 	bl	800cdac <fiprintf>
 800cc64:	f000 f99f 	bl	800cfa6 <abort>
 800cc68:	4b04      	ldr	r3, [pc, #16]	; (800cc7c <__assert_func+0x38>)
 800cc6a:	461c      	mov	r4, r3
 800cc6c:	e7f3      	b.n	800cc56 <__assert_func+0x12>
 800cc6e:	bf00      	nop
 800cc70:	200006ec 	.word	0x200006ec
 800cc74:	0800d6e4 	.word	0x0800d6e4
 800cc78:	0800d6f1 	.word	0x0800d6f1
 800cc7c:	0800d71f 	.word	0x0800d71f

0800cc80 <_calloc_r>:
 800cc80:	b510      	push	{r4, lr}
 800cc82:	4351      	muls	r1, r2
 800cc84:	f7fe fa12 	bl	800b0ac <_malloc_r>
 800cc88:	4604      	mov	r4, r0
 800cc8a:	b198      	cbz	r0, 800ccb4 <_calloc_r+0x34>
 800cc8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800cc90:	f022 0203 	bic.w	r2, r2, #3
 800cc94:	3a04      	subs	r2, #4
 800cc96:	2a24      	cmp	r2, #36	; 0x24
 800cc98:	d81b      	bhi.n	800ccd2 <_calloc_r+0x52>
 800cc9a:	2a13      	cmp	r2, #19
 800cc9c:	d917      	bls.n	800ccce <_calloc_r+0x4e>
 800cc9e:	2100      	movs	r1, #0
 800cca0:	2a1b      	cmp	r2, #27
 800cca2:	e9c0 1100 	strd	r1, r1, [r0]
 800cca6:	d807      	bhi.n	800ccb8 <_calloc_r+0x38>
 800cca8:	f100 0308 	add.w	r3, r0, #8
 800ccac:	2200      	movs	r2, #0
 800ccae:	e9c3 2200 	strd	r2, r2, [r3]
 800ccb2:	609a      	str	r2, [r3, #8]
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	bd10      	pop	{r4, pc}
 800ccb8:	2a24      	cmp	r2, #36	; 0x24
 800ccba:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800ccbe:	bf11      	iteee	ne
 800ccc0:	f100 0310 	addne.w	r3, r0, #16
 800ccc4:	6101      	streq	r1, [r0, #16]
 800ccc6:	f100 0318 	addeq.w	r3, r0, #24
 800ccca:	6141      	streq	r1, [r0, #20]
 800cccc:	e7ee      	b.n	800ccac <_calloc_r+0x2c>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	e7ec      	b.n	800ccac <_calloc_r+0x2c>
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	f7fb fb66 	bl	80083a4 <memset>
 800ccd8:	e7ec      	b.n	800ccb4 <_calloc_r+0x34>
	...

0800ccdc <_close_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	2300      	movs	r3, #0
 800cce0:	4d05      	ldr	r5, [pc, #20]	; (800ccf8 <_close_r+0x1c>)
 800cce2:	4604      	mov	r4, r0
 800cce4:	4608      	mov	r0, r1
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	f7f4 fc76 	bl	80015d8 <_close>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_close_r+0x1a>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_close_r+0x1a>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	200015e8 	.word	0x200015e8

0800ccfc <_fclose_r>:
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	4606      	mov	r6, r0
 800cd00:	460c      	mov	r4, r1
 800cd02:	b911      	cbnz	r1, 800cd0a <_fclose_r+0xe>
 800cd04:	2500      	movs	r5, #0
 800cd06:	4628      	mov	r0, r5
 800cd08:	bd70      	pop	{r4, r5, r6, pc}
 800cd0a:	b118      	cbz	r0, 800cd14 <_fclose_r+0x18>
 800cd0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cd0e:	b90b      	cbnz	r3, 800cd14 <_fclose_r+0x18>
 800cd10:	f7fd fe96 	bl	800aa40 <__sinit>
 800cd14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd16:	07d8      	lsls	r0, r3, #31
 800cd18:	d405      	bmi.n	800cd26 <_fclose_r+0x2a>
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	0599      	lsls	r1, r3, #22
 800cd1e:	d402      	bmi.n	800cd26 <_fclose_r+0x2a>
 800cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd22:	f7fe f94d 	bl	800afc0 <__retarget_lock_acquire_recursive>
 800cd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd2a:	b93b      	cbnz	r3, 800cd3c <_fclose_r+0x40>
 800cd2c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800cd2e:	f015 0501 	ands.w	r5, r5, #1
 800cd32:	d1e7      	bne.n	800cd04 <_fclose_r+0x8>
 800cd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd36:	f7fe f944 	bl	800afc2 <__retarget_lock_release_recursive>
 800cd3a:	e7e4      	b.n	800cd06 <_fclose_r+0xa>
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	4630      	mov	r0, r6
 800cd40:	f7fd fd84 	bl	800a84c <__sflush_r>
 800cd44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cd46:	4605      	mov	r5, r0
 800cd48:	b133      	cbz	r3, 800cd58 <_fclose_r+0x5c>
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	69e1      	ldr	r1, [r4, #28]
 800cd4e:	4798      	blx	r3
 800cd50:	2800      	cmp	r0, #0
 800cd52:	bfb8      	it	lt
 800cd54:	f04f 35ff 	movlt.w	r5, #4294967295
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	061a      	lsls	r2, r3, #24
 800cd5c:	d503      	bpl.n	800cd66 <_fclose_r+0x6a>
 800cd5e:	4630      	mov	r0, r6
 800cd60:	6921      	ldr	r1, [r4, #16]
 800cd62:	f7fd fefd 	bl	800ab60 <_free_r>
 800cd66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cd68:	b141      	cbz	r1, 800cd7c <_fclose_r+0x80>
 800cd6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cd6e:	4299      	cmp	r1, r3
 800cd70:	d002      	beq.n	800cd78 <_fclose_r+0x7c>
 800cd72:	4630      	mov	r0, r6
 800cd74:	f7fd fef4 	bl	800ab60 <_free_r>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	6323      	str	r3, [r4, #48]	; 0x30
 800cd7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cd7e:	b121      	cbz	r1, 800cd8a <_fclose_r+0x8e>
 800cd80:	4630      	mov	r0, r6
 800cd82:	f7fd feed 	bl	800ab60 <_free_r>
 800cd86:	2300      	movs	r3, #0
 800cd88:	6463      	str	r3, [r4, #68]	; 0x44
 800cd8a:	f7fd fe41 	bl	800aa10 <__sfp_lock_acquire>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	81a3      	strh	r3, [r4, #12]
 800cd92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd94:	07db      	lsls	r3, r3, #31
 800cd96:	d402      	bmi.n	800cd9e <_fclose_r+0xa2>
 800cd98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd9a:	f7fe f912 	bl	800afc2 <__retarget_lock_release_recursive>
 800cd9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cda0:	f7fe f90d 	bl	800afbe <__retarget_lock_close_recursive>
 800cda4:	f7fd fe3a 	bl	800aa1c <__sfp_lock_release>
 800cda8:	e7ad      	b.n	800cd06 <_fclose_r+0xa>
	...

0800cdac <fiprintf>:
 800cdac:	b40e      	push	{r1, r2, r3}
 800cdae:	b503      	push	{r0, r1, lr}
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	ab03      	add	r3, sp, #12
 800cdb4:	4805      	ldr	r0, [pc, #20]	; (800cdcc <fiprintf+0x20>)
 800cdb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdba:	6800      	ldr	r0, [r0, #0]
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	f7ff f9e5 	bl	800c18c <_vfiprintf_r>
 800cdc2:	b002      	add	sp, #8
 800cdc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdc8:	b003      	add	sp, #12
 800cdca:	4770      	bx	lr
 800cdcc:	200006ec 	.word	0x200006ec

0800cdd0 <__fputwc>:
 800cdd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	460e      	mov	r6, r1
 800cdd8:	4615      	mov	r5, r2
 800cdda:	f000 f885 	bl	800cee8 <__locale_mb_cur_max>
 800cdde:	2801      	cmp	r0, #1
 800cde0:	4604      	mov	r4, r0
 800cde2:	d11b      	bne.n	800ce1c <__fputwc+0x4c>
 800cde4:	1e73      	subs	r3, r6, #1
 800cde6:	2bfe      	cmp	r3, #254	; 0xfe
 800cde8:	d818      	bhi.n	800ce1c <__fputwc+0x4c>
 800cdea:	f88d 6004 	strb.w	r6, [sp, #4]
 800cdee:	2700      	movs	r7, #0
 800cdf0:	f10d 0904 	add.w	r9, sp, #4
 800cdf4:	42a7      	cmp	r7, r4
 800cdf6:	d020      	beq.n	800ce3a <__fputwc+0x6a>
 800cdf8:	68ab      	ldr	r3, [r5, #8]
 800cdfa:	f817 1009 	ldrb.w	r1, [r7, r9]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	60ab      	str	r3, [r5, #8]
 800ce04:	da04      	bge.n	800ce10 <__fputwc+0x40>
 800ce06:	69aa      	ldr	r2, [r5, #24]
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	db1a      	blt.n	800ce42 <__fputwc+0x72>
 800ce0c:	290a      	cmp	r1, #10
 800ce0e:	d018      	beq.n	800ce42 <__fputwc+0x72>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	1c5a      	adds	r2, r3, #1
 800ce14:	602a      	str	r2, [r5, #0]
 800ce16:	7019      	strb	r1, [r3, #0]
 800ce18:	3701      	adds	r7, #1
 800ce1a:	e7eb      	b.n	800cdf4 <__fputwc+0x24>
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4640      	mov	r0, r8
 800ce20:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800ce24:	a901      	add	r1, sp, #4
 800ce26:	f000 f89b 	bl	800cf60 <_wcrtomb_r>
 800ce2a:	1c42      	adds	r2, r0, #1
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	d1de      	bne.n	800cdee <__fputwc+0x1e>
 800ce30:	4606      	mov	r6, r0
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce38:	81ab      	strh	r3, [r5, #12]
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	b003      	add	sp, #12
 800ce3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce42:	462a      	mov	r2, r5
 800ce44:	4640      	mov	r0, r8
 800ce46:	f7ff fe61 	bl	800cb0c <__swbuf_r>
 800ce4a:	1c43      	adds	r3, r0, #1
 800ce4c:	d1e4      	bne.n	800ce18 <__fputwc+0x48>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	e7f3      	b.n	800ce3a <__fputwc+0x6a>

0800ce52 <_fputwc_r>:
 800ce52:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ce54:	b570      	push	{r4, r5, r6, lr}
 800ce56:	07db      	lsls	r3, r3, #31
 800ce58:	4605      	mov	r5, r0
 800ce5a:	460e      	mov	r6, r1
 800ce5c:	4614      	mov	r4, r2
 800ce5e:	d405      	bmi.n	800ce6c <_fputwc_r+0x1a>
 800ce60:	8993      	ldrh	r3, [r2, #12]
 800ce62:	0598      	lsls	r0, r3, #22
 800ce64:	d402      	bmi.n	800ce6c <_fputwc_r+0x1a>
 800ce66:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800ce68:	f7fe f8aa 	bl	800afc0 <__retarget_lock_acquire_recursive>
 800ce6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce70:	0499      	lsls	r1, r3, #18
 800ce72:	d406      	bmi.n	800ce82 <_fputwc_r+0x30>
 800ce74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ce80:	6663      	str	r3, [r4, #100]	; 0x64
 800ce82:	4622      	mov	r2, r4
 800ce84:	4628      	mov	r0, r5
 800ce86:	4631      	mov	r1, r6
 800ce88:	f7ff ffa2 	bl	800cdd0 <__fputwc>
 800ce8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce8e:	4605      	mov	r5, r0
 800ce90:	07da      	lsls	r2, r3, #31
 800ce92:	d405      	bmi.n	800cea0 <_fputwc_r+0x4e>
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	059b      	lsls	r3, r3, #22
 800ce98:	d402      	bmi.n	800cea0 <_fputwc_r+0x4e>
 800ce9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce9c:	f7fe f891 	bl	800afc2 <__retarget_lock_release_recursive>
 800cea0:	4628      	mov	r0, r5
 800cea2:	bd70      	pop	{r4, r5, r6, pc}

0800cea4 <_fstat_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	2300      	movs	r3, #0
 800cea8:	4d06      	ldr	r5, [pc, #24]	; (800cec4 <_fstat_r+0x20>)
 800ceaa:	4604      	mov	r4, r0
 800ceac:	4608      	mov	r0, r1
 800ceae:	4611      	mov	r1, r2
 800ceb0:	602b      	str	r3, [r5, #0]
 800ceb2:	f7f4 fb9c 	bl	80015ee <_fstat>
 800ceb6:	1c43      	adds	r3, r0, #1
 800ceb8:	d102      	bne.n	800cec0 <_fstat_r+0x1c>
 800ceba:	682b      	ldr	r3, [r5, #0]
 800cebc:	b103      	cbz	r3, 800cec0 <_fstat_r+0x1c>
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	bd38      	pop	{r3, r4, r5, pc}
 800cec2:	bf00      	nop
 800cec4:	200015e8 	.word	0x200015e8

0800cec8 <_isatty_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	2300      	movs	r3, #0
 800cecc:	4d05      	ldr	r5, [pc, #20]	; (800cee4 <_isatty_r+0x1c>)
 800cece:	4604      	mov	r4, r0
 800ced0:	4608      	mov	r0, r1
 800ced2:	602b      	str	r3, [r5, #0]
 800ced4:	f7f4 fb9a 	bl	800160c <_isatty>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_isatty_r+0x1a>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_isatty_r+0x1a>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	200015e8 	.word	0x200015e8

0800cee8 <__locale_mb_cur_max>:
 800cee8:	4b01      	ldr	r3, [pc, #4]	; (800cef0 <__locale_mb_cur_max+0x8>)
 800ceea:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800ceee:	4770      	bx	lr
 800cef0:	20000f2c 	.word	0x20000f2c

0800cef4 <_lseek_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4604      	mov	r4, r0
 800cef8:	4608      	mov	r0, r1
 800cefa:	4611      	mov	r1, r2
 800cefc:	2200      	movs	r2, #0
 800cefe:	4d05      	ldr	r5, [pc, #20]	; (800cf14 <_lseek_r+0x20>)
 800cf00:	602a      	str	r2, [r5, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f7f4 fb8c 	bl	8001620 <_lseek>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_lseek_r+0x1e>
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_lseek_r+0x1e>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	200015e8 	.word	0x200015e8

0800cf18 <__ascii_mbtowc>:
 800cf18:	b082      	sub	sp, #8
 800cf1a:	b901      	cbnz	r1, 800cf1e <__ascii_mbtowc+0x6>
 800cf1c:	a901      	add	r1, sp, #4
 800cf1e:	b142      	cbz	r2, 800cf32 <__ascii_mbtowc+0x1a>
 800cf20:	b14b      	cbz	r3, 800cf36 <__ascii_mbtowc+0x1e>
 800cf22:	7813      	ldrb	r3, [r2, #0]
 800cf24:	600b      	str	r3, [r1, #0]
 800cf26:	7812      	ldrb	r2, [r2, #0]
 800cf28:	1e10      	subs	r0, r2, #0
 800cf2a:	bf18      	it	ne
 800cf2c:	2001      	movne	r0, #1
 800cf2e:	b002      	add	sp, #8
 800cf30:	4770      	bx	lr
 800cf32:	4610      	mov	r0, r2
 800cf34:	e7fb      	b.n	800cf2e <__ascii_mbtowc+0x16>
 800cf36:	f06f 0001 	mvn.w	r0, #1
 800cf3a:	e7f8      	b.n	800cf2e <__ascii_mbtowc+0x16>

0800cf3c <_read_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4604      	mov	r4, r0
 800cf40:	4608      	mov	r0, r1
 800cf42:	4611      	mov	r1, r2
 800cf44:	2200      	movs	r2, #0
 800cf46:	4d05      	ldr	r5, [pc, #20]	; (800cf5c <_read_r+0x20>)
 800cf48:	602a      	str	r2, [r5, #0]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	f7f4 fb0b 	bl	8001566 <_read>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d102      	bne.n	800cf5a <_read_r+0x1e>
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	b103      	cbz	r3, 800cf5a <_read_r+0x1e>
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	bd38      	pop	{r3, r4, r5, pc}
 800cf5c:	200015e8 	.word	0x200015e8

0800cf60 <_wcrtomb_r>:
 800cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf62:	4c09      	ldr	r4, [pc, #36]	; (800cf88 <_wcrtomb_r+0x28>)
 800cf64:	4605      	mov	r5, r0
 800cf66:	461e      	mov	r6, r3
 800cf68:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800cf6c:	b085      	sub	sp, #20
 800cf6e:	b909      	cbnz	r1, 800cf74 <_wcrtomb_r+0x14>
 800cf70:	460a      	mov	r2, r1
 800cf72:	a901      	add	r1, sp, #4
 800cf74:	47b8      	blx	r7
 800cf76:	1c43      	adds	r3, r0, #1
 800cf78:	bf01      	itttt	eq
 800cf7a:	2300      	moveq	r3, #0
 800cf7c:	6033      	streq	r3, [r6, #0]
 800cf7e:	238a      	moveq	r3, #138	; 0x8a
 800cf80:	602b      	streq	r3, [r5, #0]
 800cf82:	b005      	add	sp, #20
 800cf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf86:	bf00      	nop
 800cf88:	20000f2c 	.word	0x20000f2c

0800cf8c <__ascii_wctomb>:
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	4608      	mov	r0, r1
 800cf90:	b141      	cbz	r1, 800cfa4 <__ascii_wctomb+0x18>
 800cf92:	2aff      	cmp	r2, #255	; 0xff
 800cf94:	d904      	bls.n	800cfa0 <__ascii_wctomb+0x14>
 800cf96:	228a      	movs	r2, #138	; 0x8a
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	4770      	bx	lr
 800cfa0:	2001      	movs	r0, #1
 800cfa2:	700a      	strb	r2, [r1, #0]
 800cfa4:	4770      	bx	lr

0800cfa6 <abort>:
 800cfa6:	2006      	movs	r0, #6
 800cfa8:	b508      	push	{r3, lr}
 800cfaa:	f000 f82d 	bl	800d008 <raise>
 800cfae:	2001      	movs	r0, #1
 800cfb0:	f7f4 facf 	bl	8001552 <_exit>

0800cfb4 <_raise_r>:
 800cfb4:	291f      	cmp	r1, #31
 800cfb6:	b538      	push	{r3, r4, r5, lr}
 800cfb8:	4604      	mov	r4, r0
 800cfba:	460d      	mov	r5, r1
 800cfbc:	d904      	bls.n	800cfc8 <_raise_r+0x14>
 800cfbe:	2316      	movs	r3, #22
 800cfc0:	6003      	str	r3, [r0, #0]
 800cfc2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800cfcc:	b112      	cbz	r2, 800cfd4 <_raise_r+0x20>
 800cfce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfd2:	b94b      	cbnz	r3, 800cfe8 <_raise_r+0x34>
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 f831 	bl	800d03c <_getpid_r>
 800cfda:	462a      	mov	r2, r5
 800cfdc:	4601      	mov	r1, r0
 800cfde:	4620      	mov	r0, r4
 800cfe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfe4:	f000 b818 	b.w	800d018 <_kill_r>
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d00a      	beq.n	800d002 <_raise_r+0x4e>
 800cfec:	1c59      	adds	r1, r3, #1
 800cfee:	d103      	bne.n	800cff8 <_raise_r+0x44>
 800cff0:	2316      	movs	r3, #22
 800cff2:	6003      	str	r3, [r0, #0]
 800cff4:	2001      	movs	r0, #1
 800cff6:	e7e6      	b.n	800cfc6 <_raise_r+0x12>
 800cff8:	2400      	movs	r4, #0
 800cffa:	4628      	mov	r0, r5
 800cffc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d000:	4798      	blx	r3
 800d002:	2000      	movs	r0, #0
 800d004:	e7df      	b.n	800cfc6 <_raise_r+0x12>
	...

0800d008 <raise>:
 800d008:	4b02      	ldr	r3, [pc, #8]	; (800d014 <raise+0xc>)
 800d00a:	4601      	mov	r1, r0
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	f7ff bfd1 	b.w	800cfb4 <_raise_r>
 800d012:	bf00      	nop
 800d014:	200006ec 	.word	0x200006ec

0800d018 <_kill_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	2300      	movs	r3, #0
 800d01c:	4d06      	ldr	r5, [pc, #24]	; (800d038 <_kill_r+0x20>)
 800d01e:	4604      	mov	r4, r0
 800d020:	4608      	mov	r0, r1
 800d022:	4611      	mov	r1, r2
 800d024:	602b      	str	r3, [r5, #0]
 800d026:	f7f4 fa84 	bl	8001532 <_kill>
 800d02a:	1c43      	adds	r3, r0, #1
 800d02c:	d102      	bne.n	800d034 <_kill_r+0x1c>
 800d02e:	682b      	ldr	r3, [r5, #0]
 800d030:	b103      	cbz	r3, 800d034 <_kill_r+0x1c>
 800d032:	6023      	str	r3, [r4, #0]
 800d034:	bd38      	pop	{r3, r4, r5, pc}
 800d036:	bf00      	nop
 800d038:	200015e8 	.word	0x200015e8

0800d03c <_getpid_r>:
 800d03c:	f7f4 ba72 	b.w	8001524 <_getpid>

0800d040 <_init>:
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	bf00      	nop
 800d044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d046:	bc08      	pop	{r3}
 800d048:	469e      	mov	lr, r3
 800d04a:	4770      	bx	lr

0800d04c <_fini>:
 800d04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04e:	bf00      	nop
 800d050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d052:	bc08      	pop	{r3}
 800d054:	469e      	mov	lr, r3
 800d056:	4770      	bx	lr
