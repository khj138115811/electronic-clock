
electronic_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000ab4  00800100  000043f6  0000448a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000036e  00800bb4  00800bb4  00004f3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004f3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008718  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018c3  00000000  00000000  0000dd08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003751  00000000  00000000  0000f5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017f4  00000000  00000000  00012d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bd6  00000000  00000000  00014510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005aa0  00000000  00000000  000160e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000608  00000000  00000000  0001bb86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	1d c7       	rjmp	.+3642   	; 0xe50 <__vector_5>
      16:	00 00       	nop
      18:	80 c7       	rjmp	.+3840   	; 0xf1a <__vector_6>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c6       	rjmp	.+3242   	; 0xcd0 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	a1 c4       	rjmp	.+2370   	; 0x98c <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	1b e0       	ldi	r17, 0x0B	; 11
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ef       	ldi	r30, 0xF6	; 246
      a0:	f3 e4       	ldi	r31, 0x43	; 67
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3b       	cpi	r26, 0xB4	; 180
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	2f e0       	ldi	r18, 0x0F	; 15
      b4:	a4 eb       	ldi	r26, 0xB4	; 180
      b6:	bb e0       	ldi	r27, 0x0B	; 11
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 32       	cpi	r26, 0x22	; 34
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
#include "ILI9341_LCD_input_data.h"
#include "uart1.h"

int main(void)
{
	sei();
      ca:	78 94       	sei
	uart1_init();
      cc:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <uart1_init>
	ILI9341_LCD_input_data_init();
      d0:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <ILI9341_LCD_input_data_init>
	while(1)
	{
		ILI9341_LCD_input_data_update();
      d4:	0e 94 ae 14 	call	0x295c	; 0x295c <ILI9341_LCD_input_data_update>
      d8:	fd cf       	rjmp	.-6      	; 0xd4 <main+0xa>

000000da <CCS811_start_address_write>:
void CCS811_bootloader_verify()
{
	volatile uint8_t verify_data[1] = {0x20};
	CCS811_start_address_write(CCS811_address);
	CCS811_send_command_and_data(CCS811_app_verify,verify_data,1);
}
      da:	cf 93       	push	r28
      dc:	c8 2f       	mov	r28, r24
      de:	2d d5       	rcall	.+2650   	; 0xb3a <i2c_start>
      e0:	8c 2f       	mov	r24, r28
      e2:	53 d5       	rcall	.+2726   	; 0xb8a <i2c_send_address_write>
      e4:	cf 91       	pop	r28
      e6:	08 95       	ret

000000e8 <CCS811_start_address_read>:
      e8:	cf 93       	push	r28
      ea:	c8 2f       	mov	r28, r24
      ec:	26 d5       	rcall	.+2636   	; 0xb3a <i2c_start>
      ee:	8c 2f       	mov	r24, r28
      f0:	65 d5       	rcall	.+2762   	; 0xbbc <i2c_send_address_read>
      f2:	cf 91       	pop	r28
      f4:	08 95       	ret

000000f6 <CCS811_send_command_and_data>:
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	8b 01       	movw	r16, r22
     100:	d4 2f       	mov	r29, r20
     102:	76 d5       	rcall	.+2796   	; 0xbf0 <i2c_send_data_ACK>
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	06 c0       	rjmp	.+12     	; 0x114 <CCS811_send_command_and_data+0x1e>
     108:	f8 01       	movw	r30, r16
     10a:	ec 0f       	add	r30, r28
     10c:	f1 1d       	adc	r31, r1
     10e:	80 81       	ld	r24, Z
     110:	6f d5       	rcall	.+2782   	; 0xbf0 <i2c_send_data_ACK>
     112:	cf 5f       	subi	r28, 0xFF	; 255
     114:	cd 17       	cp	r28, r29
     116:	c0 f3       	brcs	.-16     	; 0x108 <CCS811_send_command_and_data+0x12>
     118:	cf d5       	rcall	.+2974   	; 0xcb8 <i2c_stop>
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	1f 91       	pop	r17
     120:	0f 91       	pop	r16
     122:	08 95       	ret

00000124 <CCS811_receive_1bytes_data>:
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ec 01       	movw	r28, r24
     12a:	a6 d5       	rcall	.+2892   	; 0xc78 <i2c_receive_NACK>
     12c:	88 83       	st	Y, r24
     12e:	c4 d5       	rcall	.+2952   	; 0xcb8 <i2c_stop>
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <CCS811_set_Measure_mode>:
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	1f 92       	push	r1
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	80 e1       	ldi	r24, 0x10	; 16
     142:	89 83       	std	Y+1, r24	; 0x01
     144:	8a e5       	ldi	r24, 0x5A	; 90
     146:	c9 df       	rcall	.-110    	; 0xda <CCS811_start_address_write>
     148:	41 e0       	ldi	r20, 0x01	; 1
     14a:	be 01       	movw	r22, r28
     14c:	6f 5f       	subi	r22, 0xFF	; 255
     14e:	7f 4f       	sbci	r23, 0xFF	; 255
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	d1 df       	rcall	.-94     	; 0xf6 <CCS811_send_command_and_data>
     154:	0f 90       	pop	r0
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <CCS811_read_CO2_TVOC>:
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	00 d0       	rcall	.+0      	; 0x162 <CCS811_read_CO2_TVOC+0x6>
     162:	00 d0       	rcall	.+0      	; 0x164 <CCS811_read_CO2_TVOC+0x8>
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	8a e5       	ldi	r24, 0x5A	; 90
     16a:	b7 df       	rcall	.-146    	; 0xda <CCS811_start_address_write>
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	c0 df       	rcall	.-128    	; 0xf6 <CCS811_send_command_and_data>
     176:	8a e5       	ldi	r24, 0x5A	; 90
     178:	b7 df       	rcall	.-146    	; 0xe8 <CCS811_start_address_read>
     17a:	5e d5       	rcall	.+2748   	; 0xc38 <i2c_receive_ACK>
     17c:	89 83       	std	Y+1, r24	; 0x01
     17e:	5c d5       	rcall	.+2744   	; 0xc38 <i2c_receive_ACK>
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	5a d5       	rcall	.+2740   	; 0xc38 <i2c_receive_ACK>
     184:	8b 83       	std	Y+3, r24	; 0x03
     186:	78 d5       	rcall	.+2800   	; 0xc78 <i2c_receive_NACK>
     188:	8c 83       	std	Y+4, r24	; 0x04
     18a:	96 d5       	rcall	.+2860   	; 0xcb8 <i2c_stop>
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	98 2f       	mov	r25, r24
     192:	88 27       	eor	r24, r24
     194:	2a 81       	ldd	r18, Y+2	; 0x02
     196:	82 2b       	or	r24, r18
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	80 93 b8 0b 	sts	0x0BB8, r24	; 0x800bb8 <CO2>
     1a0:	90 93 b9 0b 	sts	0x0BB9, r25	; 0x800bb9 <CO2+0x1>
     1a4:	a0 93 ba 0b 	sts	0x0BBA, r26	; 0x800bba <CO2+0x2>
     1a8:	b0 93 bb 0b 	sts	0x0BBB, r27	; 0x800bbb <CO2+0x3>
     1ac:	8b 81       	ldd	r24, Y+3	; 0x03
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	98 2f       	mov	r25, r24
     1b2:	88 27       	eor	r24, r24
     1b4:	2c 81       	ldd	r18, Y+4	; 0x04
     1b6:	82 2b       	or	r24, r18
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <__data_end>
     1c0:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <__data_end+0x1>
     1c4:	a0 93 b6 0b 	sts	0x0BB6, r26	; 0x800bb6 <__data_end+0x2>
     1c8:	b0 93 b7 0b 	sts	0x0BB7, r27	; 0x800bb7 <__data_end+0x3>
     1cc:	40 91 b4 0b 	lds	r20, 0x0BB4	; 0x800bb4 <__data_end>
     1d0:	50 91 b5 0b 	lds	r21, 0x0BB5	; 0x800bb5 <__data_end+0x1>
     1d4:	60 91 b6 0b 	lds	r22, 0x0BB6	; 0x800bb6 <__data_end+0x2>
     1d8:	70 91 b7 0b 	lds	r23, 0x0BB7	; 0x800bb7 <__data_end+0x3>
     1dc:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <CO2>
     1e0:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <CO2+0x1>
     1e4:	a0 91 ba 0b 	lds	r26, 0x0BBA	; 0x800bba <CO2+0x2>
     1e8:	b0 91 bb 0b 	lds	r27, 0x0BBB	; 0x800bbb <CO2+0x3>
     1ec:	7f 93       	push	r23
     1ee:	6f 93       	push	r22
     1f0:	5f 93       	push	r21
     1f2:	4f 93       	push	r20
     1f4:	bf 93       	push	r27
     1f6:	af 93       	push	r26
     1f8:	9f 93       	push	r25
     1fa:	8f 93       	push	r24
     1fc:	8b e2       	ldi	r24, 0x2B	; 43
     1fe:	98 e0       	ldi	r25, 0x08	; 8
     200:	9f 93       	push	r25
     202:	8f 93       	push	r24
     204:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
     212:	0f 90       	pop	r0
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <CCS811_read_Status>:
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	1f 92       	push	r1
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	19 82       	std	Y+1, r1	; 0x01
     22c:	8a e5       	ldi	r24, 0x5A	; 90
     22e:	55 df       	rcall	.-342    	; 0xda <CCS811_start_address_write>
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	5e df       	rcall	.-324    	; 0xf6 <CCS811_send_command_and_data>
     23a:	8a e5       	ldi	r24, 0x5A	; 90
     23c:	55 df       	rcall	.-342    	; 0xe8 <CCS811_start_address_read>
     23e:	ce 01       	movw	r24, r28
     240:	01 96       	adiw	r24, 0x01	; 1
     242:	70 df       	rcall	.-288    	; 0x124 <CCS811_receive_1bytes_data>
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	1f 92       	push	r1
     248:	8f 93       	push	r24
     24a:	83 e4       	ldi	r24, 0x43	; 67
     24c:	98 e0       	ldi	r25, 0x08	; 8
     24e:	9f 93       	push	r25
     250:	8f 93       	push	r24
     252:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <CCS811_soft_reset>:
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	00 d0       	rcall	.+0      	; 0x26e <CCS811_soft_reset+0x6>
     26e:	00 d0       	rcall	.+0      	; 0x270 <CCS811_soft_reset+0x8>
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	81 e1       	ldi	r24, 0x11	; 17
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	95 ee       	ldi	r25, 0xE5	; 229
     27e:	a2 e7       	ldi	r26, 0x72	; 114
     280:	ba e8       	ldi	r27, 0x8A	; 138
     282:	89 83       	std	Y+1, r24	; 0x01
     284:	9a 83       	std	Y+2, r25	; 0x02
     286:	ab 83       	std	Y+3, r26	; 0x03
     288:	bc 83       	std	Y+4, r27	; 0x04
     28a:	8a e5       	ldi	r24, 0x5A	; 90
     28c:	26 df       	rcall	.-436    	; 0xda <CCS811_start_address_write>
     28e:	44 e0       	ldi	r20, 0x04	; 4
     290:	be 01       	movw	r22, r28
     292:	6f 5f       	subi	r22, 0xFF	; 255
     294:	7f 4f       	sbci	r23, 0xFF	; 255
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	2e df       	rcall	.-420    	; 0xf6 <CCS811_send_command_and_data>
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <CCS811_bootloader_start>:
     2a8:	8a e5       	ldi	r24, 0x5A	; 90
     2aa:	17 df       	rcall	.-466    	; 0xda <CCS811_start_address_write>
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	84 ef       	ldi	r24, 0xF4	; 244
     2b4:	20 cf       	rjmp	.-448    	; 0xf6 <CCS811_send_command_and_data>
     2b6:	08 95       	ret

000002b8 <CCS811_read_hardware_ID>:

uint8_t CCS811_read_hardware_ID()
{
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	1f 92       	push	r1
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t _Hardware_id = 0;
     2c2:	19 82       	std	Y+1, r1	; 0x01
	CCS811_start_address_write(CCS811_address);
     2c4:	8a e5       	ldi	r24, 0x5A	; 90
     2c6:	09 df       	rcall	.-494    	; 0xda <CCS811_start_address_write>
	CCS811_send_command_and_data(HW_ID,NULL,0);
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	80 e2       	ldi	r24, 0x20	; 32
     2d0:	12 df       	rcall	.-476    	; 0xf6 <CCS811_send_command_and_data>
	CCS811_start_address_read(CCS811_address);
     2d2:	8a e5       	ldi	r24, 0x5A	; 90
     2d4:	09 df       	rcall	.-494    	; 0xe8 <CCS811_start_address_read>
	CCS811_receive_1bytes_data(&_Hardware_id);
     2d6:	ce 01       	movw	r24, r28
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	24 df       	rcall	.-440    	; 0x124 <CCS811_receive_1bytes_data>
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
	return _Hardware_id;
     2de:	0f 90       	pop	r0
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <CCS811_init>:
     2e6:	84 e6       	ldi	r24, 0x64	; 100
volatile uint32_t CO2 = 0;
volatile uint32_t TVOC = 0;

void CCS811_init()
{
	i2c_init(100);
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	f2 d3       	rcall	.+2020   	; 0xad0 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ec:	2f ef       	ldi	r18, 0xFF	; 255
     2ee:	89 ef       	ldi	r24, 0xF9	; 249
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	80 40       	sbci	r24, 0x00	; 0
     2f6:	90 40       	sbci	r25, 0x00	; 0
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <CCS811_init+0xc>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <CCS811_init+0x16>
	_delay_ms(20);
	CCS811_soft_reset();
     2fc:	00 00       	nop
     2fe:	b4 df       	rcall	.-152    	; 0x268 <CCS811_soft_reset>
     300:	2f ef       	ldi	r18, 0xFF	; 255
     302:	81 ee       	ldi	r24, 0xE1	; 225
     304:	94 e0       	ldi	r25, 0x04	; 4
     306:	21 50       	subi	r18, 0x01	; 1
     308:	80 40       	sbci	r24, 0x00	; 0
     30a:	90 40       	sbci	r25, 0x00	; 0
     30c:	e1 f7       	brne	.-8      	; 0x306 <CCS811_init+0x20>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <CCS811_init+0x2a>
	_delay_ms(100);
	if(CCS811_read_hardware_ID() == 0x81)
     310:	00 00       	nop
     312:	d2 df       	rcall	.-92     	; 0x2b8 <CCS811_read_hardware_ID>
     314:	81 38       	cpi	r24, 0x81	; 129
     316:	09 f0       	breq	.+2      	; 0x31a <CCS811_init+0x34>
     318:	3b c0       	rjmp	.+118    	; 0x390 <CCS811_init+0xaa>
     31a:	2f ef       	ldi	r18, 0xFF	; 255
     31c:	80 e7       	ldi	r24, 0x70	; 112
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	21 50       	subi	r18, 0x01	; 1
     322:	80 40       	sbci	r24, 0x00	; 0
     324:	90 40       	sbci	r25, 0x00	; 0
     326:	e1 f7       	brne	.-8      	; 0x320 <CCS811_init+0x3a>
     328:	00 c0       	rjmp	.+0      	; 0x32a <CCS811_init+0x44>
     32a:	00 00       	nop
	{
		_delay_ms(50);
		printf("HW ID OK\n\r");
     32c:	85 e6       	ldi	r24, 0x65	; 101
     32e:	98 e0       	ldi	r25, 0x08	; 8
     330:	9f 93       	push	r25
     332:	8f 93       	push	r24
     334:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
		if((CCS811_read_Status() & 0x10) == 0x10)
     338:	73 df       	rcall	.-282    	; 0x220 <CCS811_read_Status>
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	84 ff       	sbrs	r24, 4
     340:	27 c0       	rjmp	.+78     	; 0x390 <CCS811_init+0xaa>
		{
			printf("APP vaild OK\n\r");
     342:	80 e7       	ldi	r24, 0x70	; 112
     344:	98 e0       	ldi	r25, 0x08	; 8
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
			CCS811_bootloader_start();
     34e:	ac df       	rcall	.-168    	; 0x2a8 <CCS811_bootloader_start>
     350:	2f ef       	ldi	r18, 0xFF	; 255
     352:	80 e7       	ldi	r24, 0x70	; 112
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	21 50       	subi	r18, 0x01	; 1
     358:	80 40       	sbci	r24, 0x00	; 0
     35a:	90 40       	sbci	r25, 0x00	; 0
     35c:	e1 f7       	brne	.-8      	; 0x356 <CCS811_init+0x70>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <CCS811_init+0x7a>
			_delay_ms(50);
			if((CCS811_read_Status() & 0x80) == 0x80)
     360:	00 00       	nop
     362:	5e df       	rcall	.-324    	; 0x220 <CCS811_read_Status>
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	88 23       	and	r24, r24
     36a:	94 f4       	brge	.+36     	; 0x390 <CCS811_init+0xaa>
			{
				printf("FW OK\n\r");
     36c:	8f e7       	ldi	r24, 0x7F	; 127
     36e:	98 e0       	ldi	r25, 0x08	; 8
     370:	9f 93       	push	r25
     372:	8f 93       	push	r24
     374:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
				CCS811_set_Measure_mode();
     378:	de de       	rcall	.-580    	; 0x136 <CCS811_set_Measure_mode>
     37a:	2f ef       	ldi	r18, 0xFF	; 255
     37c:	80 e7       	ldi	r24, 0x70	; 112
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	21 50       	subi	r18, 0x01	; 1
     382:	80 40       	sbci	r24, 0x00	; 0
     384:	90 40       	sbci	r25, 0x00	; 0
     386:	e1 f7       	brne	.-8      	; 0x380 <CCS811_init+0x9a>
     388:	00 c0       	rjmp	.+0      	; 0x38a <CCS811_init+0xa4>
     38a:	00 00       	nop
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	08 95       	ret

00000392 <ESP8266_send_AT_command>:
	ESP8266_enter_modem_sleep_mode();
	return Success;
}

void ESP8266_send_AT_command(char* command)
{
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; command[i]; i++)
     39a:	c0 e0       	ldi	r28, 0x00	; 0
     39c:	03 c0       	rjmp	.+6      	; 0x3a4 <ESP8266_send_AT_command+0x12>
	{
		uart0_transmit(command[i]);
     39e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <uart0_transmit>
	return Success;
}

void ESP8266_send_AT_command(char* command)
{
	for(uint8_t i = 0; command[i]; i++)
     3a2:	cf 5f       	subi	r28, 0xFF	; 255
     3a4:	f8 01       	movw	r30, r16
     3a6:	ec 0f       	add	r30, r28
     3a8:	f1 1d       	adc	r31, r1
     3aa:	80 81       	ld	r24, Z
     3ac:	81 11       	cpse	r24, r1
     3ae:	f7 cf       	rjmp	.-18     	; 0x39e <ESP8266_send_AT_command+0xc>
	{
		uart0_transmit(command[i]);
	}
	uart0_transmit(0x0D);
     3b0:	8d e0       	ldi	r24, 0x0D	; 13
     3b2:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <uart0_transmit>
	uart0_transmit(0x0A);
     3b6:	8a e0       	ldi	r24, 0x0A	; 10
     3b8:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <uart0_transmit>
	printf("transmit : %s\n\r", command);
     3bc:	1f 93       	push	r17
     3be:	0f 93       	push	r16
     3c0:	87 e8       	ldi	r24, 0x87	; 135
     3c2:	98 e0       	ldi	r25, 0x08	; 8
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
}
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <ESP8266_receive_time>:

uint8_t ESP8266_receive_time()
{
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
	printf("Receive time start\n\r");
     3ea:	87 e9       	ldi	r24, 0x97	; 151
     3ec:	98 e0       	ldi	r25, 0x08	; 8
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	uint8_t count = 0;
	uint32_t get_timeout = 0xFFFFF*3;
	esp8266_user_status = Ready_to_receive_time_data;
     3f6:	8f e0       	ldi	r24, 0x0F	; 15
     3f8:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <esp8266_user_status>
	memset((void*)received_time_string[0],0,100);
     3fc:	84 e6       	ldi	r24, 0x64	; 100
     3fe:	e2 ed       	ldi	r30, 0xD2	; 210
     400:	fd e0       	ldi	r31, 0x0D	; 13
     402:	df 01       	movw	r26, r30
     404:	1d 92       	st	X+, r1
     406:	8a 95       	dec	r24
     408:	e9 f7       	brne	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	receive_time_first_index = 0;
     40a:	10 92 c6 0b 	sts	0x0BC6, r1	; 0x800bc6 <receive_time_first_index>
	seconds = 0;
     40e:	10 92 ce 0b 	sts	0x0BCE, r1	; 0x800bce <seconds>
	mili_sec = 0;
     412:	10 92 cd 0b 	sts	0x0BCD, r1	; 0x800bcd <mili_sec+0x1>
     416:	10 92 cc 0b 	sts	0x0BCC, r1	; 0x800bcc <mili_sec>
	while(count != 10)
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
}

uint8_t ESP8266_receive_time()
{
	printf("Receive time start\n\r");
	uint8_t count = 0;
     41e:	10 e0       	ldi	r17, 0x00	; 0
	esp8266_user_status = Ready_to_receive_time_data;
	memset((void*)received_time_string[0],0,100);
	receive_time_first_index = 0;
	seconds = 0;
	mili_sec = 0;
	while(count != 10)
     420:	41 c0       	rjmp	.+130    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	{
		get_timeout = 0xFFFFF*3;
		receive_time_index = 0;
     422:	10 92 c5 0b 	sts	0x0BC5, r1	; 0x800bc5 <receive_time_index>
		ESP8266_send_AT_command(send_string[4].str);
     426:	88 ec       	ldi	r24, 0xC8	; 200
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	b3 df       	rcall	.-154    	; 0x392 <ESP8266_send_AT_command>
	receive_time_first_index = 0;
	seconds = 0;
	mili_sec = 0;
	while(count != 10)
	{
		get_timeout = 0xFFFFF*3;
     42c:	0f 2e       	mov	r0, r31
     42e:	fd ef       	ldi	r31, 0xFD	; 253
     430:	cf 2e       	mov	r12, r31
     432:	dd 24       	eor	r13, r13
     434:	da 94       	dec	r13
     436:	ff e2       	ldi	r31, 0x2F	; 47
     438:	ef 2e       	mov	r14, r31
     43a:	f1 2c       	mov	r15, r1
     43c:	f0 2d       	mov	r31, r0
		receive_time_index = 0;
		ESP8266_send_AT_command(send_string[4].str);
		while(strstr((const char*)received_time_string[0],"OK") == NULL || strstr((const char*)received_time_string[0],"1970") || strlen((const char*)received_time_string[0]) != 60)
     43e:	06 c0       	rjmp	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		{
			get_timeout--;
     440:	b1 e0       	ldi	r27, 0x01	; 1
     442:	cb 1a       	sub	r12, r27
     444:	d1 08       	sbc	r13, r1
     446:	e1 08       	sbc	r14, r1
     448:	f1 08       	sbc	r15, r1
			if(get_timeout == 0)
     44a:	c9 f0       	breq	.+50     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	while(count != 10)
	{
		get_timeout = 0xFFFFF*3;
		receive_time_index = 0;
		ESP8266_send_AT_command(send_string[4].str);
		while(strstr((const char*)received_time_string[0],"OK") == NULL || strstr((const char*)received_time_string[0],"1970") || strlen((const char*)received_time_string[0]) != 60)
     44c:	6c ea       	ldi	r22, 0xAC	; 172
     44e:	78 e0       	ldi	r23, 0x08	; 8
     450:	82 ed       	ldi	r24, 0xD2	; 210
     452:	9d e0       	ldi	r25, 0x0D	; 13
     454:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     458:	ec 01       	movw	r28, r24
     45a:	89 2b       	or	r24, r25
     45c:	89 f3       	breq	.-30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     45e:	6f ea       	ldi	r22, 0xAF	; 175
     460:	78 e0       	ldi	r23, 0x08	; 8
     462:	82 ed       	ldi	r24, 0xD2	; 210
     464:	9d e0       	ldi	r25, 0x0D	; 13
     466:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     46a:	89 2b       	or	r24, r25
     46c:	49 f7       	brne	.-46     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     46e:	e2 ed       	ldi	r30, 0xD2	; 210
     470:	fd e0       	ldi	r31, 0x0D	; 13
     472:	01 90       	ld	r0, Z+
     474:	00 20       	and	r0, r0
     476:	e9 f7       	brne	.-6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     478:	ef 50       	subi	r30, 0x0F	; 15
     47a:	fe 40       	sbci	r31, 0x0E	; 14
     47c:	09 f7       	brne	.-62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			if(get_timeout == 0)
			{
				break;
			}
		}
		if(strstr((const char*)received_time_string[0],"OK") != NULL && strstr((const char*)received_time_string[0],"1970") == NULL && strlen((const char*)received_time_string[0]) == 60)
     47e:	cd 2b       	or	r28, r29
     480:	81 f0       	breq	.+32     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     482:	6f ea       	ldi	r22, 0xAF	; 175
     484:	78 e0       	ldi	r23, 0x08	; 8
     486:	82 ed       	ldi	r24, 0xD2	; 210
     488:	9d e0       	ldi	r25, 0x0D	; 13
     48a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     48e:	89 2b       	or	r24, r25
     490:	41 f4       	brne	.+16     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     492:	e2 ed       	ldi	r30, 0xD2	; 210
     494:	fd e0       	ldi	r31, 0x0D	; 13
     496:	01 90       	ld	r0, Z+
     498:	00 20       	and	r0, r0
     49a:	e9 f7       	brne	.-6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     49c:	ef 50       	subi	r30, 0x0F	; 15
     49e:	fe 40       	sbci	r31, 0x0E	; 14
     4a0:	21 f0       	breq	.+8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
		{
			break;
		}
		count++;
     4a2:	1f 5f       	subi	r17, 0xFF	; 255
	esp8266_user_status = Ready_to_receive_time_data;
	memset((void*)received_time_string[0],0,100);
	receive_time_first_index = 0;
	seconds = 0;
	mili_sec = 0;
	while(count != 10)
     4a4:	1a 30       	cpi	r17, 0x0A	; 10
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4a8:	bc cf       	rjmp	.-136    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			break;
		}
		count++;
	}
	first_receive_time_sec = seconds;
     4aa:	80 91 ce 0b 	lds	r24, 0x0BCE	; 0x800bce <seconds>
     4ae:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <first_receive_time_sec>
	first_receive_time_mili_sec = mili_sec;
     4b2:	80 91 cc 0b 	lds	r24, 0x0BCC	; 0x800bcc <mili_sec>
     4b6:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <mili_sec+0x1>
     4ba:	90 93 c3 0b 	sts	0x0BC3, r25	; 0x800bc3 <first_receive_time_mili_sec+0x1>
     4be:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <first_receive_time_mili_sec>
	receive_time_first_index++;
     4c2:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <receive_time_first_index>
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <receive_time_first_index>
	count = 0;
     4cc:	10 e0       	ldi	r17, 0x00	; 0
	while(count != 10)
     4ce:	51 c0       	rjmp	.+162    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
	{
		get_timeout = 0xFFFFF*3;
		memset((void*)received_time_string[1],0,100);
     4d0:	84 e6       	ldi	r24, 0x64	; 100
     4d2:	e7 e3       	ldi	r30, 0x37	; 55
     4d4:	fe e0       	ldi	r31, 0x0E	; 14
     4d6:	df 01       	movw	r26, r30
     4d8:	1d 92       	st	X+, r1
     4da:	8a 95       	dec	r24
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		receive_time_index = 0;
     4de:	10 92 c5 0b 	sts	0x0BC5, r1	; 0x800bc5 <receive_time_index>
		ESP8266_send_AT_command(send_string[4].str);
     4e2:	88 ec       	ldi	r24, 0xC8	; 200
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	55 df       	rcall	.-342    	; 0x392 <ESP8266_send_AT_command>
	first_receive_time_mili_sec = mili_sec;
	receive_time_first_index++;
	count = 0;
	while(count != 10)
	{
		get_timeout = 0xFFFFF*3;
     4e8:	0f 2e       	mov	r0, r31
     4ea:	fd ef       	ldi	r31, 0xFD	; 253
     4ec:	cf 2e       	mov	r12, r31
     4ee:	dd 24       	eor	r13, r13
     4f0:	da 94       	dec	r13
     4f2:	ff e2       	ldi	r31, 0x2F	; 47
     4f4:	ef 2e       	mov	r14, r31
     4f6:	f1 2c       	mov	r15, r1
     4f8:	f0 2d       	mov	r31, r0
		memset((void*)received_time_string[1],0,100);
		receive_time_index = 0;
		ESP8266_send_AT_command(send_string[4].str);
		while(strstr((const char*)received_time_string[1],"OK") == NULL || strstr((const char*)received_time_string[1],"1970") || strlen((const char*)received_time_string[1]) != 60)
     4fa:	06 c0       	rjmp	.+12     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
		{
			get_timeout--;
     4fc:	b1 e0       	ldi	r27, 0x01	; 1
     4fe:	cb 1a       	sub	r12, r27
     500:	d1 08       	sbc	r13, r1
     502:	e1 08       	sbc	r14, r1
     504:	f1 08       	sbc	r15, r1
			if(get_timeout == 0)
     506:	c9 f0       	breq	.+50     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
	{
		get_timeout = 0xFFFFF*3;
		memset((void*)received_time_string[1],0,100);
		receive_time_index = 0;
		ESP8266_send_AT_command(send_string[4].str);
		while(strstr((const char*)received_time_string[1],"OK") == NULL || strstr((const char*)received_time_string[1],"1970") || strlen((const char*)received_time_string[1]) != 60)
     508:	6c ea       	ldi	r22, 0xAC	; 172
     50a:	78 e0       	ldi	r23, 0x08	; 8
     50c:	87 e3       	ldi	r24, 0x37	; 55
     50e:	9e e0       	ldi	r25, 0x0E	; 14
     510:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     514:	ec 01       	movw	r28, r24
     516:	89 2b       	or	r24, r25
     518:	89 f3       	breq	.-30     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     51a:	6f ea       	ldi	r22, 0xAF	; 175
     51c:	78 e0       	ldi	r23, 0x08	; 8
     51e:	87 e3       	ldi	r24, 0x37	; 55
     520:	9e e0       	ldi	r25, 0x0E	; 14
     522:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     526:	89 2b       	or	r24, r25
     528:	49 f7       	brne	.-46     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     52a:	e7 e3       	ldi	r30, 0x37	; 55
     52c:	fe e0       	ldi	r31, 0x0E	; 14
     52e:	01 90       	ld	r0, Z+
     530:	00 20       	and	r0, r0
     532:	e9 f7       	brne	.-6      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     534:	e4 57       	subi	r30, 0x74	; 116
     536:	fe 40       	sbci	r31, 0x0E	; 14
     538:	09 f7       	brne	.-62     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			if(get_timeout == 0)
			{
				break;
			}
		}
		if(strstr((const char*)received_time_string[1],"OK") != NULL && strstr((const char*)received_time_string[1],"1970") == NULL && strlen((const char*)received_time_string[1]) == 60)
     53a:	cd 2b       	or	r28, r29
     53c:	c9 f0       	breq	.+50     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     53e:	6f ea       	ldi	r22, 0xAF	; 175
     540:	78 e0       	ldi	r23, 0x08	; 8
     542:	87 e3       	ldi	r24, 0x37	; 55
     544:	9e e0       	ldi	r25, 0x0E	; 14
     546:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     54a:	89 2b       	or	r24, r25
     54c:	89 f4       	brne	.+34     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     54e:	e7 e3       	ldi	r30, 0x37	; 55
     550:	fe e0       	ldi	r31, 0x0E	; 14
     552:	01 90       	ld	r0, Z+
     554:	00 20       	and	r0, r0
     556:	e9 f7       	brne	.-6      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     558:	e4 57       	subi	r30, 0x74	; 116
     55a:	fe 40       	sbci	r31, 0x0E	; 14
     55c:	49 f4       	brne	.+18     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
		{
			if(strcmp((const char*)received_time_string[0],(const char*)received_time_string[1]) == 0)
     55e:	67 e3       	ldi	r22, 0x37	; 55
     560:	7e e0       	ldi	r23, 0x0E	; 14
     562:	82 ed       	ldi	r24, 0xD2	; 210
     564:	9d e0       	ldi	r25, 0x0D	; 13
     566:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <strcmp>
     56a:	89 2b       	or	r24, r25
     56c:	11 f0       	breq	.+4      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     56e:	04 c0       	rjmp	.+8      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
				break;
			}
		}
		else
		{
			count++;
     570:	1f 5f       	subi	r17, 0xFF	; 255
	}
	first_receive_time_sec = seconds;
	first_receive_time_mili_sec = mili_sec;
	receive_time_first_index++;
	count = 0;
	while(count != 10)
     572:	1a 30       	cpi	r17, 0x0A	; 10
     574:	09 f0       	breq	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     576:	ac cf       	rjmp	.-168    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		else
		{
			count++;
		}
	}
	second_receive_time_sec = seconds;
     578:	80 91 ce 0b 	lds	r24, 0x0BCE	; 0x800bce <seconds>
     57c:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <second_receive_time_sec>
	second_receive_time_mili_sec = mili_sec;
     580:	80 91 cc 0b 	lds	r24, 0x0BCC	; 0x800bcc <mili_sec>
     584:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <mili_sec+0x1>
     588:	90 93 c0 0b 	sts	0x0BC0, r25	; 0x800bc0 <second_receive_time_mili_sec+0x1>
     58c:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <second_receive_time_mili_sec>
	if(count == 10)
     590:	1a 30       	cpi	r17, 0x0A	; 10
     592:	11 f4       	brne	.+4      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
	{
		esp8266_user_status = Fail;
     594:	10 92 01 0f 	sts	0x0F01, r1	; 0x800f01 <esp8266_user_status>
	}
	if(esp8266_user_status != Fail)
     598:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
     59c:	88 23       	and	r24, r24
     59e:	79 f1       	breq	.+94     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
	{
		receive_time_diff = (((uint16_t)second_receive_time_sec * 1000) + second_receive_time_mili_sec) - (((uint16_t)first_receive_time_sec * 1000) + first_receive_time_mili_sec);
     5a0:	80 91 be 0b 	lds	r24, 0x0BBE	; 0x800bbe <second_receive_time_sec>
     5a4:	48 ee       	ldi	r20, 0xE8	; 232
     5a6:	53 e0       	ldi	r21, 0x03	; 3
     5a8:	84 9f       	mul	r24, r20
     5aa:	90 01       	movw	r18, r0
     5ac:	85 9f       	mul	r24, r21
     5ae:	30 0d       	add	r19, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	80 91 bf 0b 	lds	r24, 0x0BBF	; 0x800bbf <second_receive_time_mili_sec>
     5b6:	90 91 c0 0b 	lds	r25, 0x0BC0	; 0x800bc0 <second_receive_time_mili_sec+0x1>
     5ba:	82 0f       	add	r24, r18
     5bc:	93 1f       	adc	r25, r19
     5be:	20 91 c1 0b 	lds	r18, 0x0BC1	; 0x800bc1 <first_receive_time_sec>
     5c2:	24 9f       	mul	r18, r20
     5c4:	b0 01       	movw	r22, r0
     5c6:	25 9f       	mul	r18, r21
     5c8:	70 0d       	add	r23, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	20 91 c2 0b 	lds	r18, 0x0BC2	; 0x800bc2 <first_receive_time_mili_sec>
     5d0:	30 91 c3 0b 	lds	r19, 0x0BC3	; 0x800bc3 <first_receive_time_mili_sec+0x1>
     5d4:	26 0f       	add	r18, r22
     5d6:	37 1f       	adc	r19, r23
     5d8:	82 1b       	sub	r24, r18
     5da:	93 0b       	sbc	r25, r19
     5dc:	90 93 bd 0b 	sts	0x0BBD, r25	; 0x800bbd <receive_time_diff+0x1>
     5e0:	80 93 bc 0b 	sts	0x0BBC, r24	; 0x800bbc <receive_time_diff>
		mili_sec = receive_time_diff;
     5e4:	80 91 bc 0b 	lds	r24, 0x0BBC	; 0x800bbc <receive_time_diff>
     5e8:	90 91 bd 0b 	lds	r25, 0x0BBD	; 0x800bbd <receive_time_diff+0x1>
     5ec:	90 93 cd 0b 	sts	0x0BCD, r25	; 0x800bcd <mili_sec+0x1>
     5f0:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <mili_sec>
		seconds = 0;
     5f4:	10 92 ce 0b 	sts	0x0BCE, r1	; 0x800bce <seconds>
		esp8266_user_status = Success;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <esp8266_user_status>
	}
	printf("%s", received_time_string[0]);
     5fe:	82 ed       	ldi	r24, 0xD2	; 210
     600:	9d e0       	ldi	r25, 0x0D	; 13
     602:	9f 93       	push	r25
     604:	8f 93       	push	r24
     606:	c4 eb       	ldi	r28, 0xB4	; 180
     608:	d8 e0       	ldi	r29, 0x08	; 8
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	printf("%s", received_time_string[1]);
     612:	87 e3       	ldi	r24, 0x37	; 55
     614:	9e e0       	ldi	r25, 0x0E	; 14
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	df 93       	push	r29
     61c:	cf 93       	push	r28
     61e:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	printf("difftime : %d\n\r", receive_time_diff);
     622:	80 91 bc 0b 	lds	r24, 0x0BBC	; 0x800bbc <receive_time_diff>
     626:	90 91 bd 0b 	lds	r25, 0x0BBD	; 0x800bbd <receive_time_diff+0x1>
     62a:	9f 93       	push	r25
     62c:	8f 93       	push	r24
     62e:	87 eb       	ldi	r24, 0xB7	; 183
     630:	98 e0       	ldi	r25, 0x08	; 8
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	return esp8266_user_status;
     63a:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
     63e:	ad b7       	in	r26, 0x3d	; 61
     640:	be b7       	in	r27, 0x3e	; 62
     642:	1c 96       	adiw	r26, 0x0c	; 12
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	be bf       	out	0x3e, r27	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	ad bf       	out	0x3d, r26	; 61
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	df 90       	pop	r13
     65a:	cf 90       	pop	r12
     65c:	08 95       	ret

0000065e <ESP8266_check_receive_data>:

uint8_t ESP8266_check_receive_data(volatile char* data)
{
	if(strstr((const char*)data,"OK"))
     65e:	6c ea       	ldi	r22, 0xAC	; 172
     660:	78 e0       	ldi	r23, 0x08	; 8
     662:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     666:	89 2b       	or	r24, r25
     668:	11 f0       	breq	.+4      	; 0x66e <ESP8266_check_receive_data+0x10>
	{
		return Success;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	08 95       	ret
	}
	else
	{
		return Fail;
     66e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     670:	08 95       	ret

00000672 <ESP8266_get_time_init>:

uint8_t ESP8266_get_time_init()
{
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	cf 93       	push	r28
	uint32_t get_timeout;
	uint8_t count = 0;
     67c:	c0 e0       	ldi	r28, 0x00	; 0
	while(command_transmit_index < 5)
     67e:	44 c0       	rjmp	.+136    	; 0x708 <ESP8266_get_time_init+0x96>
	{
		get_timeout = 0xFFFFF*3; // about 3sec
		command_receive_index = 0;
     680:	10 92 c7 0b 	sts	0x0BC7, r1	; 0x800bc7 <command_receive_index>
		ESP8266_send_AT_command(send_string[command_transmit_index].str);
     684:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <command_transmit_index>
     688:	22 e3       	ldi	r18, 0x32	; 50
     68a:	82 9f       	mul	r24, r18
     68c:	c0 01       	movw	r24, r0
     68e:	11 24       	eor	r1, r1
     690:	80 50       	subi	r24, 0x00	; 0
     692:	9f 4f       	sbci	r25, 0xFF	; 255
     694:	7e de       	rcall	.-772    	; 0x392 <ESP8266_send_AT_command>
{
	uint32_t get_timeout;
	uint8_t count = 0;
	while(command_transmit_index < 5)
	{
		get_timeout = 0xFFFFF*3; // about 3sec
     696:	0f 2e       	mov	r0, r31
     698:	fd ef       	ldi	r31, 0xFD	; 253
     69a:	cf 2e       	mov	r12, r31
     69c:	dd 24       	eor	r13, r13
     69e:	da 94       	dec	r13
     6a0:	ff e2       	ldi	r31, 0x2F	; 47
     6a2:	ef 2e       	mov	r14, r31
     6a4:	f1 2c       	mov	r15, r1
     6a6:	f0 2d       	mov	r31, r0
		command_receive_index = 0;
		ESP8266_send_AT_command(send_string[command_transmit_index].str);
		while(ESP8266_check_receive_data(result_receive_string[command_transmit_index]) == Fail)
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <ESP8266_get_time_init+0x48>
		{
			get_timeout--;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	c8 1a       	sub	r12, r24
     6ae:	d1 08       	sbc	r13, r1
     6b0:	e1 08       	sbc	r14, r1
     6b2:	f1 08       	sbc	r15, r1
			if(get_timeout == 0)
     6b4:	11 f4       	brne	.+4      	; 0x6ba <ESP8266_get_time_init+0x48>
			{
				count++;
     6b6:	cf 5f       	subi	r28, 0xFF	; 255
				break;
     6b8:	0b c0       	rjmp	.+22     	; 0x6d0 <ESP8266_get_time_init+0x5e>
	while(command_transmit_index < 5)
	{
		get_timeout = 0xFFFFF*3; // about 3sec
		command_receive_index = 0;
		ESP8266_send_AT_command(send_string[command_transmit_index].str);
		while(ESP8266_check_receive_data(result_receive_string[command_transmit_index]) == Fail)
     6ba:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <command_transmit_index>
     6be:	25 e6       	ldi	r18, 0x65	; 101
     6c0:	82 9f       	mul	r24, r18
     6c2:	c0 01       	movw	r24, r0
     6c4:	11 24       	eor	r1, r1
     6c6:	87 52       	subi	r24, 0x27	; 39
     6c8:	94 4f       	sbci	r25, 0xF4	; 244
     6ca:	c9 df       	rcall	.-110    	; 0x65e <ESP8266_check_receive_data>
     6cc:	88 23       	and	r24, r24
     6ce:	69 f3       	breq	.-38     	; 0x6aa <ESP8266_get_time_init+0x38>
			{
				count++;
				break;
			}
		}
		if(ESP8266_check_receive_data(result_receive_string[command_transmit_index]) == Success)
     6d0:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <command_transmit_index>
     6d4:	25 e6       	ldi	r18, 0x65	; 101
     6d6:	82 9f       	mul	r24, r18
     6d8:	c0 01       	movw	r24, r0
     6da:	11 24       	eor	r1, r1
     6dc:	87 52       	subi	r24, 0x27	; 39
     6de:	94 4f       	sbci	r25, 0xF4	; 244
     6e0:	be df       	rcall	.-132    	; 0x65e <ESP8266_check_receive_data>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	29 f4       	brne	.+10     	; 0x6f0 <ESP8266_get_time_init+0x7e>
		{
			command_transmit_index++;
     6e6:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <command_transmit_index>
     6ea:	8f 5f       	subi	r24, 0xFF	; 255
     6ec:	80 93 c8 0b 	sts	0x0BC8, r24	; 0x800bc8 <command_transmit_index>
		}
		if(count == 20)
     6f0:	c4 31       	cpi	r28, 0x14	; 20
     6f2:	51 f4       	brne	.+20     	; 0x708 <ESP8266_get_time_init+0x96>
		{
			printf("ESP8266 init Fail\n\r");
     6f4:	87 ec       	ldi	r24, 0xC7	; 199
     6f6:	98 e0       	ldi	r25, 0x08	; 8
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
			return Fail;
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	06 c0       	rjmp	.+12     	; 0x714 <ESP8266_get_time_init+0xa2>

uint8_t ESP8266_get_time_init()
{
	uint32_t get_timeout;
	uint8_t count = 0;
	while(command_transmit_index < 5)
     708:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <command_transmit_index>
     70c:	85 30       	cpi	r24, 0x05	; 5
     70e:	08 f4       	brcc	.+2      	; 0x712 <ESP8266_get_time_init+0xa0>
     710:	b7 cf       	rjmp	.-146    	; 0x680 <ESP8266_get_time_init+0xe>
		{
			printf("ESP8266 init Fail\n\r");
			return Fail;
		}
	}
	return Success;
     712:	81 e0       	ldi	r24, 0x01	; 1
}
     714:	cf 91       	pop	r28
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	08 95       	ret

00000720 <ESP8266_enter_modem_sleep_mode>:

uint8_t ESP8266_enter_modem_sleep_mode()
{
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
	uint32_t get_timeout;
	uint8_t count = 0;
	esp8266_user_status = Change_sleep_mode;
     72c:	8e e0       	ldi	r24, 0x0E	; 14
     72e:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <esp8266_user_status>
	memset((void*)receive_sleep_mode_string[0],0,100);
     732:	84 e6       	ldi	r24, 0x64	; 100
     734:	ec e9       	ldi	r30, 0x9C	; 156
     736:	fe e0       	ldi	r31, 0x0E	; 14
     738:	df 01       	movw	r26, r30
     73a:	1d 92       	st	X+, r1
     73c:	8a 95       	dec	r24
     73e:	e9 f7       	brne	.-6      	; 0x73a <ESP8266_enter_modem_sleep_mode+0x1a>
}

uint8_t ESP8266_enter_modem_sleep_mode()
{
	uint32_t get_timeout;
	uint8_t count = 0;
     740:	d0 e0       	ldi	r29, 0x00	; 0
	esp8266_user_status = Change_sleep_mode;
	memset((void*)receive_sleep_mode_string[0],0,100);
	while(count != 10)
     742:	38 c0       	rjmp	.+112    	; 0x7b4 <ESP8266_enter_modem_sleep_mode+0x94>
	{
		get_timeout = 0xFFFFF*2;
		sleep_mode_index = 0;
     744:	10 92 c4 0b 	sts	0x0BC4, r1	; 0x800bc4 <sleep_mode_index>
		ESP8266_send_AT_command("AT+SLEEP=2");
     748:	8b ed       	ldi	r24, 0xDB	; 219
     74a:	98 e0       	ldi	r25, 0x08	; 8
     74c:	22 de       	rcall	.-956    	; 0x392 <ESP8266_send_AT_command>
	uint8_t count = 0;
	esp8266_user_status = Change_sleep_mode;
	memset((void*)receive_sleep_mode_string[0],0,100);
	while(count != 10)
	{
		get_timeout = 0xFFFFF*2;
     74e:	0f 2e       	mov	r0, r31
     750:	fe ef       	ldi	r31, 0xFE	; 254
     752:	cf 2e       	mov	r12, r31
     754:	dd 24       	eor	r13, r13
     756:	da 94       	dec	r13
     758:	ff e1       	ldi	r31, 0x1F	; 31
     75a:	ef 2e       	mov	r14, r31
     75c:	f1 2c       	mov	r15, r1
     75e:	f0 2d       	mov	r31, r0
		sleep_mode_index = 0;
		ESP8266_send_AT_command("AT+SLEEP=2");
		while(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Fail || strstr((const char*)receive_sleep_mode_string[0],"AT+SLEEP=2") == NULL)
     760:	08 c0       	rjmp	.+16     	; 0x772 <ESP8266_enter_modem_sleep_mode+0x52>
		{
			get_timeout--;
     762:	b1 e0       	ldi	r27, 0x01	; 1
     764:	cb 1a       	sub	r12, r27
     766:	d1 08       	sbc	r13, r1
     768:	e1 08       	sbc	r14, r1
     76a:	f1 08       	sbc	r15, r1
			if(get_timeout == 0)
     76c:	11 f4       	brne	.+4      	; 0x772 <ESP8266_enter_modem_sleep_mode+0x52>
			{
				count++;
     76e:	df 5f       	subi	r29, 0xFF	; 255
				break;
     770:	0e c0       	rjmp	.+28     	; 0x78e <ESP8266_enter_modem_sleep_mode+0x6e>
	while(count != 10)
	{
		get_timeout = 0xFFFFF*2;
		sleep_mode_index = 0;
		ESP8266_send_AT_command("AT+SLEEP=2");
		while(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Fail || strstr((const char*)receive_sleep_mode_string[0],"AT+SLEEP=2") == NULL)
     772:	8c e9       	ldi	r24, 0x9C	; 156
     774:	9e e0       	ldi	r25, 0x0E	; 14
     776:	73 df       	rcall	.-282    	; 0x65e <ESP8266_check_receive_data>
     778:	c8 2f       	mov	r28, r24
     77a:	88 23       	and	r24, r24
     77c:	91 f3       	breq	.-28     	; 0x762 <ESP8266_enter_modem_sleep_mode+0x42>
     77e:	6b ed       	ldi	r22, 0xDB	; 219
     780:	78 e0       	ldi	r23, 0x08	; 8
     782:	8c e9       	ldi	r24, 0x9C	; 156
     784:	9e e0       	ldi	r25, 0x0E	; 14
     786:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     78a:	89 2b       	or	r24, r25
     78c:	51 f3       	breq	.-44     	; 0x762 <ESP8266_enter_modem_sleep_mode+0x42>
			{
				count++;
				break;
			}
		}
		if(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Success && strstr((const char*)receive_sleep_mode_string[0],"AT+SLEEP=2"))
     78e:	c1 30       	cpi	r28, 0x01	; 1
     790:	61 f4       	brne	.+24     	; 0x7aa <ESP8266_enter_modem_sleep_mode+0x8a>
     792:	6b ed       	ldi	r22, 0xDB	; 219
     794:	78 e0       	ldi	r23, 0x08	; 8
     796:	8c e9       	ldi	r24, 0x9C	; 156
     798:	9e e0       	ldi	r25, 0x0E	; 14
     79a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     79e:	89 2b       	or	r24, r25
     7a0:	21 f0       	breq	.+8      	; 0x7aa <ESP8266_enter_modem_sleep_mode+0x8a>
		{
			esp8266_user_status = Success;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <esp8266_user_status>
			break;
     7a8:	08 c0       	rjmp	.+16     	; 0x7ba <ESP8266_enter_modem_sleep_mode+0x9a>
		}
		if(count == 10)
     7aa:	da 30       	cpi	r29, 0x0A	; 10
     7ac:	19 f4       	brne	.+6      	; 0x7b4 <ESP8266_enter_modem_sleep_mode+0x94>
		{
			esp8266_user_status = Fail;
     7ae:	10 92 01 0f 	sts	0x0F01, r1	; 0x800f01 <esp8266_user_status>
			break;
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <ESP8266_enter_modem_sleep_mode+0x9a>
{
	uint32_t get_timeout;
	uint8_t count = 0;
	esp8266_user_status = Change_sleep_mode;
	memset((void*)receive_sleep_mode_string[0],0,100);
	while(count != 10)
     7b4:	da 30       	cpi	r29, 0x0A	; 10
     7b6:	09 f0       	breq	.+2      	; 0x7ba <ESP8266_enter_modem_sleep_mode+0x9a>
     7b8:	c5 cf       	rjmp	.-118    	; 0x744 <ESP8266_enter_modem_sleep_mode+0x24>
		{
			esp8266_user_status = Fail;
			break;
		}
	}
	printf("sleep mode status : ");
     7ba:	86 ee       	ldi	r24, 0xE6	; 230
     7bc:	98 e0       	ldi	r25, 0x08	; 8
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	printf("%s", receive_sleep_mode_string[0]);
     7c6:	8c e9       	ldi	r24, 0x9C	; 156
     7c8:	9e e0       	ldi	r25, 0x0E	; 14
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	84 eb       	ldi	r24, 0xB4	; 180
     7d0:	98 e0       	ldi	r25, 0x08	; 8
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	return esp8266_user_status;
     7da:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	08 95       	ret

000007f8 <ESP8266_init>:

extern volatile uint16_t mili_sec;
extern volatile uint8_t seconds;

uint8_t ESP8266_init()
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
	uint32_t get_timeout = 0xFFFFF*2;
	command_transmit_index = 0;
     7fc:	10 92 c8 0b 	sts	0x0BC8, r1	; 0x800bc8 <command_transmit_index>
	command_receive_index = 0;
     800:	10 92 c7 0b 	sts	0x0BC7, r1	; 0x800bc7 <command_receive_index>
	uart0_init();
     804:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <uart0_init>
	if(ESP8266_get_time_init() == Success)
     808:	34 df       	rcall	.-408    	; 0x672 <ESP8266_get_time_init>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	09 f0       	breq	.+2      	; 0x810 <ESP8266_init+0x18>
     80e:	4d c0       	rjmp	.+154    	; 0x8aa <ESP8266_init+0xb2>
	{
		esp8266_user_status = Ready_to_receive_time_data;
     810:	8f e0       	ldi	r24, 0x0F	; 15
     812:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <esp8266_user_status>
		for(int i = 0; i < 7; i++)
     816:	c0 e0       	ldi	r28, 0x00	; 0
     818:	d0 e0       	ldi	r29, 0x00	; 0
     81a:	15 c0       	rjmp	.+42     	; 0x846 <ESP8266_init+0x4e>
		{
			printf("%s", result_receive_string[i]);
     81c:	25 e6       	ldi	r18, 0x65	; 101
     81e:	2c 9f       	mul	r18, r28
     820:	c0 01       	movw	r24, r0
     822:	2d 9f       	mul	r18, r29
     824:	90 0d       	add	r25, r0
     826:	11 24       	eor	r1, r1
     828:	87 52       	subi	r24, 0x27	; 39
     82a:	94 4f       	sbci	r25, 0xF4	; 244
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	84 eb       	ldi	r24, 0xB4	; 180
     832:	98 e0       	ldi	r25, 0x08	; 8
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	command_receive_index = 0;
	uart0_init();
	if(ESP8266_get_time_init() == Success)
	{
		esp8266_user_status = Ready_to_receive_time_data;
		for(int i = 0; i < 7; i++)
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	c7 30       	cpi	r28, 0x07	; 7
     848:	d1 05       	cpc	r29, r1
     84a:	44 f3       	brlt	.-48     	; 0x81c <ESP8266_init+0x24>
     84c:	8e ef       	ldi	r24, 0xFE	; 254
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	af e1       	ldi	r26, 0x1F	; 31
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <ESP8266_init+0x62>
	}
	else
	{
		return Fail;
	}
	while(get_timeout--);
     856:	db 01       	movw	r26, r22
     858:	ca 01       	movw	r24, r20
     85a:	ac 01       	movw	r20, r24
     85c:	bd 01       	movw	r22, r26
     85e:	41 50       	subi	r20, 0x01	; 1
     860:	51 09       	sbc	r21, r1
     862:	61 09       	sbc	r22, r1
     864:	71 09       	sbc	r23, r1
     866:	89 2b       	or	r24, r25
     868:	8a 2b       	or	r24, r26
     86a:	8b 2b       	or	r24, r27
	if(ESP8266_receive_time() == Success)
     86c:	a1 f7       	brne	.-24     	; 0x856 <ESP8266_init+0x5e>
     86e:	b6 dd       	rcall	.-1172   	; 0x3dc <ESP8266_receive_time>
     870:	c8 2f       	mov	r28, r24
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	81 f4       	brne	.+32     	; 0x896 <ESP8266_init+0x9e>
	{
		printf("%s", received_time_string[1]);
     876:	87 e3       	ldi	r24, 0x37	; 55
     878:	9e e0       	ldi	r25, 0x0E	; 14
     87a:	9f 93       	push	r25
     87c:	8f 93       	push	r24
     87e:	84 eb       	ldi	r24, 0xB4	; 180
     880:	98 e0       	ldi	r25, 0x08	; 8
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	else
	{
		printf("Fail to receive time\n\r");
		return Fail;
	}
	ESP8266_enter_modem_sleep_mode();
     88a:	4a df       	rcall	.-364    	; 0x720 <ESP8266_enter_modem_sleep_mode>
	return Success;
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0b c0       	rjmp	.+22     	; 0x8ac <ESP8266_init+0xb4>
	{
		printf("%s", received_time_string[1]);
	}
	else
	{
		printf("Fail to receive time\n\r");
     896:	8b ef       	ldi	r24, 0xFB	; 251
     898:	98 e0       	ldi	r25, 0x08	; 8
     89a:	9f 93       	push	r25
     89c:	8f 93       	push	r24
     89e:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
		return Fail;
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	c0 e0       	ldi	r28, 0x00	; 0
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <ESP8266_init+0xb4>
			printf("%s", result_receive_string[i]);
		}
	}
	else
	{
		return Fail;
     8aa:	c0 e0       	ldi	r28, 0x00	; 0
		printf("Fail to receive time\n\r");
		return Fail;
	}
	ESP8266_enter_modem_sleep_mode();
	return Success;
}
     8ac:	8c 2f       	mov	r24, r28
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <ESP8266_leave_modem_sleep_mode>:
	printf("sleep mode status : ");
	printf("%s", receive_sleep_mode_string[0]);
	return esp8266_user_status;
}
uint8_t ESP8266_leave_modem_sleep_mode()
{
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
	uint32_t get_timeout;
	uint8_t count = 0;
	esp8266_user_status = Change_sleep_mode;
     8c0:	8e e0       	ldi	r24, 0x0E	; 14
     8c2:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <esp8266_user_status>
	memset((void*)receive_sleep_mode_string[0],0,100);
     8c6:	84 e6       	ldi	r24, 0x64	; 100
     8c8:	ec e9       	ldi	r30, 0x9C	; 156
     8ca:	fe e0       	ldi	r31, 0x0E	; 14
     8cc:	df 01       	movw	r26, r30
     8ce:	1d 92       	st	X+, r1
     8d0:	8a 95       	dec	r24
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <ESP8266_leave_modem_sleep_mode+0x1a>
	return esp8266_user_status;
}
uint8_t ESP8266_leave_modem_sleep_mode()
{
	uint32_t get_timeout;
	uint8_t count = 0;
     8d4:	d0 e0       	ldi	r29, 0x00	; 0
	esp8266_user_status = Change_sleep_mode;
	memset((void*)receive_sleep_mode_string[0],0,100);
	while(count != 10)
     8d6:	38 c0       	rjmp	.+112    	; 0x948 <ESP8266_leave_modem_sleep_mode+0x94>
	{
		get_timeout = 0xFFFFF*2;
		sleep_mode_index = 0;
     8d8:	10 92 c4 0b 	sts	0x0BC4, r1	; 0x800bc4 <sleep_mode_index>
		ESP8266_send_AT_command("AT+SLEEP=0");
     8dc:	82 e1       	ldi	r24, 0x12	; 18
     8de:	99 e0       	ldi	r25, 0x09	; 9
     8e0:	58 dd       	rcall	.-1360   	; 0x392 <ESP8266_send_AT_command>
	uint8_t count = 0;
	esp8266_user_status = Change_sleep_mode;
	memset((void*)receive_sleep_mode_string[0],0,100);
	while(count != 10)
	{
		get_timeout = 0xFFFFF*2;
     8e2:	0f 2e       	mov	r0, r31
     8e4:	fe ef       	ldi	r31, 0xFE	; 254
     8e6:	cf 2e       	mov	r12, r31
     8e8:	dd 24       	eor	r13, r13
     8ea:	da 94       	dec	r13
     8ec:	ff e1       	ldi	r31, 0x1F	; 31
     8ee:	ef 2e       	mov	r14, r31
     8f0:	f1 2c       	mov	r15, r1
     8f2:	f0 2d       	mov	r31, r0
		sleep_mode_index = 0;
		ESP8266_send_AT_command("AT+SLEEP=0");
		while(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Fail || strstr((const char*)receive_sleep_mode_string[0],"AT+SLEEP=0") == NULL)
     8f4:	08 c0       	rjmp	.+16     	; 0x906 <ESP8266_leave_modem_sleep_mode+0x52>
		{
			get_timeout--;
     8f6:	b1 e0       	ldi	r27, 0x01	; 1
     8f8:	cb 1a       	sub	r12, r27
     8fa:	d1 08       	sbc	r13, r1
     8fc:	e1 08       	sbc	r14, r1
     8fe:	f1 08       	sbc	r15, r1
			if(get_timeout == 0)
     900:	11 f4       	brne	.+4      	; 0x906 <ESP8266_leave_modem_sleep_mode+0x52>
			{
				count++;
     902:	df 5f       	subi	r29, 0xFF	; 255
				break;
     904:	0e c0       	rjmp	.+28     	; 0x922 <ESP8266_leave_modem_sleep_mode+0x6e>
	while(count != 10)
	{
		get_timeout = 0xFFFFF*2;
		sleep_mode_index = 0;
		ESP8266_send_AT_command("AT+SLEEP=0");
		while(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Fail || strstr((const char*)receive_sleep_mode_string[0],"AT+SLEEP=0") == NULL)
     906:	8c e9       	ldi	r24, 0x9C	; 156
     908:	9e e0       	ldi	r25, 0x0E	; 14
     90a:	a9 de       	rcall	.-686    	; 0x65e <ESP8266_check_receive_data>
     90c:	c8 2f       	mov	r28, r24
     90e:	88 23       	and	r24, r24
     910:	91 f3       	breq	.-28     	; 0x8f6 <ESP8266_leave_modem_sleep_mode+0x42>
     912:	62 e1       	ldi	r22, 0x12	; 18
     914:	79 e0       	ldi	r23, 0x09	; 9
     916:	8c e9       	ldi	r24, 0x9C	; 156
     918:	9e e0       	ldi	r25, 0x0E	; 14
     91a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     91e:	89 2b       	or	r24, r25
     920:	51 f3       	breq	.-44     	; 0x8f6 <ESP8266_leave_modem_sleep_mode+0x42>
			{
				count++;
				break;
			}
		}
		if(ESP8266_check_receive_data(receive_sleep_mode_string[0]) == Success && strstr((const char*)receive_sleep_mode_string[0],"AT+SLEEP=0"))
     922:	c1 30       	cpi	r28, 0x01	; 1
     924:	61 f4       	brne	.+24     	; 0x93e <ESP8266_leave_modem_sleep_mode+0x8a>
     926:	62 e1       	ldi	r22, 0x12	; 18
     928:	79 e0       	ldi	r23, 0x09	; 9
     92a:	8c e9       	ldi	r24, 0x9C	; 156
     92c:	9e e0       	ldi	r25, 0x0E	; 14
     92e:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     932:	89 2b       	or	r24, r25
     934:	21 f0       	breq	.+8      	; 0x93e <ESP8266_leave_modem_sleep_mode+0x8a>
		{
			esp8266_user_status = Success;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <esp8266_user_status>
			break;
     93c:	08 c0       	rjmp	.+16     	; 0x94e <ESP8266_leave_modem_sleep_mode+0x9a>
		}
		if(count == 10)
     93e:	da 30       	cpi	r29, 0x0A	; 10
     940:	19 f4       	brne	.+6      	; 0x948 <ESP8266_leave_modem_sleep_mode+0x94>
		{
			esp8266_user_status = Fail;
     942:	10 92 01 0f 	sts	0x0F01, r1	; 0x800f01 <esp8266_user_status>
			break;
     946:	03 c0       	rjmp	.+6      	; 0x94e <ESP8266_leave_modem_sleep_mode+0x9a>
{
	uint32_t get_timeout;
	uint8_t count = 0;
	esp8266_user_status = Change_sleep_mode;
	memset((void*)receive_sleep_mode_string[0],0,100);
	while(count != 10)
     948:	da 30       	cpi	r29, 0x0A	; 10
     94a:	09 f0       	breq	.+2      	; 0x94e <ESP8266_leave_modem_sleep_mode+0x9a>
     94c:	c5 cf       	rjmp	.-118    	; 0x8d8 <ESP8266_leave_modem_sleep_mode+0x24>
		{
			esp8266_user_status = Fail;
			break;
		}
	}
	printf("sleep mode status : ");
     94e:	86 ee       	ldi	r24, 0xE6	; 230
     950:	98 e0       	ldi	r25, 0x08	; 8
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	printf("%s", receive_sleep_mode_string[0]);
     95a:	8c e9       	ldi	r24, 0x9C	; 156
     95c:	9e e0       	ldi	r25, 0x0E	; 14
     95e:	9f 93       	push	r25
     960:	8f 93       	push	r24
     962:	84 eb       	ldi	r24, 0xB4	; 180
     964:	98 e0       	ldi	r25, 0x08	; 8
     966:	9f 93       	push	r25
     968:	8f 93       	push	r24
     96a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	return esp8266_user_status;
     96e:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <__vector_18>:

ISR(USART0_RX_vect)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	0b b6       	in	r0, 0x3b	; 59
     998:	0f 92       	push	r0
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	2f 93       	push	r18
     9a0:	3f 93       	push	r19
     9a2:	4f 93       	push	r20
     9a4:	5f 93       	push	r21
     9a6:	6f 93       	push	r22
     9a8:	7f 93       	push	r23
     9aa:	8f 93       	push	r24
     9ac:	9f 93       	push	r25
     9ae:	af 93       	push	r26
     9b0:	bf 93       	push	r27
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
	if(command_transmit_index >= 0 && command_transmit_index < 5)
     9ba:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <command_transmit_index>
     9be:	80 91 c8 0b 	lds	r24, 0x0BC8	; 0x800bc8 <command_transmit_index>
     9c2:	85 30       	cpi	r24, 0x05	; 5
     9c4:	20 f5       	brcc	.+72     	; 0xa0e <__vector_18+0x82>
	{
		result_receive_string[command_transmit_index][command_receive_index++] = uart0_receive();
     9c6:	00 91 c8 0b 	lds	r16, 0x0BC8	; 0x800bc8 <command_transmit_index>
     9ca:	10 e0       	ldi	r17, 0x00	; 0
     9cc:	c0 91 c7 0b 	lds	r28, 0x0BC7	; 0x800bc7 <command_receive_index>
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	8c 0f       	add	r24, r28
     9d4:	80 93 c7 0b 	sts	0x0BC7, r24	; 0x800bc7 <command_receive_index>
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
     9da:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <uart0_receive>
     9de:	95 e6       	ldi	r25, 0x65	; 101
     9e0:	90 9f       	mul	r25, r16
     9e2:	90 01       	movw	r18, r0
     9e4:	91 9f       	mul	r25, r17
     9e6:	30 0d       	add	r19, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	27 52       	subi	r18, 0x27	; 39
     9ec:	34 4f       	sbci	r19, 0xF4	; 244
     9ee:	c2 0f       	add	r28, r18
     9f0:	d3 1f       	adc	r29, r19
     9f2:	88 83       	st	Y, r24
		result_receive_string[command_transmit_index][command_receive_index] = '\0';
     9f4:	e0 91 c8 0b 	lds	r30, 0x0BC8	; 0x800bc8 <command_transmit_index>
     9f8:	80 91 c7 0b 	lds	r24, 0x0BC7	; 0x800bc7 <command_receive_index>
     9fc:	9e 9f       	mul	r25, r30
     9fe:	f0 01       	movw	r30, r0
     a00:	11 24       	eor	r1, r1
     a02:	e7 52       	subi	r30, 0x27	; 39
     a04:	f4 4f       	sbci	r31, 0xF4	; 244
     a06:	e8 0f       	add	r30, r24
     a08:	f1 1d       	adc	r31, r1
     a0a:	10 82       	st	Z, r1
     a0c:	43 c0       	rjmp	.+134    	; 0xa94 <__vector_18+0x108>
	}
	else if(esp8266_user_status == Ready_to_receive_time_data)
     a0e:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
     a12:	8f 30       	cpi	r24, 0x0F	; 15
     a14:	21 f5       	brne	.+72     	; 0xa5e <__vector_18+0xd2>
	{
		received_time_string[receive_time_first_index][receive_time_index++] = uart0_receive();
     a16:	00 91 c6 0b 	lds	r16, 0x0BC6	; 0x800bc6 <receive_time_first_index>
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	c0 91 c5 0b 	lds	r28, 0x0BC5	; 0x800bc5 <receive_time_index>
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	8c 0f       	add	r24, r28
     a24:	80 93 c5 0b 	sts	0x0BC5, r24	; 0x800bc5 <receive_time_index>
     a28:	d0 e0       	ldi	r29, 0x00	; 0
     a2a:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <uart0_receive>
     a2e:	95 e6       	ldi	r25, 0x65	; 101
     a30:	90 9f       	mul	r25, r16
     a32:	90 01       	movw	r18, r0
     a34:	91 9f       	mul	r25, r17
     a36:	30 0d       	add	r19, r0
     a38:	11 24       	eor	r1, r1
     a3a:	2e 52       	subi	r18, 0x2E	; 46
     a3c:	32 4f       	sbci	r19, 0xF2	; 242
     a3e:	c2 0f       	add	r28, r18
     a40:	d3 1f       	adc	r29, r19
     a42:	88 83       	st	Y, r24
		received_time_string[receive_time_first_index][receive_time_index] = '\0';
     a44:	e0 91 c6 0b 	lds	r30, 0x0BC6	; 0x800bc6 <receive_time_first_index>
     a48:	80 91 c5 0b 	lds	r24, 0x0BC5	; 0x800bc5 <receive_time_index>
     a4c:	9e 9f       	mul	r25, r30
     a4e:	f0 01       	movw	r30, r0
     a50:	11 24       	eor	r1, r1
     a52:	ee 52       	subi	r30, 0x2E	; 46
     a54:	f2 4f       	sbci	r31, 0xF2	; 242
     a56:	e8 0f       	add	r30, r24
     a58:	f1 1d       	adc	r31, r1
     a5a:	10 82       	st	Z, r1
     a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__vector_18+0x108>
	}
	else if(esp8266_user_status == Change_sleep_mode)
     a5e:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
     a62:	8e 30       	cpi	r24, 0x0E	; 14
     a64:	99 f4       	brne	.+38     	; 0xa8c <__vector_18+0x100>
	{
		receive_sleep_mode_string[0][sleep_mode_index++] = uart0_receive();
     a66:	c0 91 c4 0b 	lds	r28, 0x0BC4	; 0x800bc4 <sleep_mode_index>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	8c 0f       	add	r24, r28
     a6e:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <sleep_mode_index>
     a72:	d0 e0       	ldi	r29, 0x00	; 0
     a74:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <uart0_receive>
     a78:	c4 56       	subi	r28, 0x64	; 100
     a7a:	d1 4f       	sbci	r29, 0xF1	; 241
     a7c:	88 83       	st	Y, r24
		receive_sleep_mode_string[0][sleep_mode_index] = '\0';
     a7e:	e0 91 c4 0b 	lds	r30, 0x0BC4	; 0x800bc4 <sleep_mode_index>
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	e4 56       	subi	r30, 0x64	; 100
     a86:	f1 4f       	sbci	r31, 0xF1	; 241
     a88:	10 82       	st	Z, r1
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__vector_18+0x108>
	}
	else
	{
		printf("%c",uart0_receive());
     a8c:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <uart0_receive>
     a90:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <putchar>
	}
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	bf 91       	pop	r27
     a9e:	af 91       	pop	r26
     aa0:	9f 91       	pop	r25
     aa2:	8f 91       	pop	r24
     aa4:	7f 91       	pop	r23
     aa6:	6f 91       	pop	r22
     aa8:	5f 91       	pop	r21
     aaa:	4f 91       	pop	r20
     aac:	3f 91       	pop	r19
     aae:	2f 91       	pop	r18
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	0f 90       	pop	r0
     ab6:	0b be       	out	0x3b, r0	; 59
     ab8:	0f 90       	pop	r0
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	0f 90       	pop	r0
     abe:	1f 90       	pop	r1
     ac0:	18 95       	reti

00000ac2 <exinterrupt_init>:
 */ 
#include "Exinterrupt.h"

void exinterrupt_init()
{
	DDRE = 0x00;
     ac2:	12 b8       	out	0x02, r1	; 2
	PORTE = 0x30;
     ac4:	80 e3       	ldi	r24, 0x30	; 48
     ac6:	83 b9       	out	0x03, r24	; 3
	EICRB = 0x0A;
     ac8:	9a e0       	ldi	r25, 0x0A	; 10
     aca:	9a bf       	out	0x3a, r25	; 58
	EIMSK = 0x30;
     acc:	89 bf       	out	0x39, r24	; 57
     ace:	08 95       	ret

00000ad0 <i2c_init>:
 *  Author: khs94
 */ 
#include "i2c.h"

uint8_t i2c_init(uint16_t clock_khz)
{
     ad0:	bc 01       	movw	r22, r24
	if(clock_khz > 400)
     ad2:	61 39       	cpi	r22, 0x91	; 145
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	78 07       	cpc	r23, r24
     ad8:	70 f5       	brcc	.+92     	; 0xb36 <i2c_init+0x66>
	{
		return i2c_init_Fail;
	}
	else
	{
		uint16_t base_value = (((F_CPU/1000) / clock_khz) - 16)/2;
     ada:	80 e8       	ldi	r24, 0x80	; 128
     adc:	9e e3       	ldi	r25, 0x3E	; 62
     ade:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__udivmodhi4>
     ae2:	cb 01       	movw	r24, r22
     ae4:	a0 e0       	ldi	r26, 0x00	; 0
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	40 97       	sbiw	r24, 0x10	; 16
     aea:	a1 09       	sbc	r26, r1
     aec:	b1 09       	sbc	r27, r1
     aee:	b6 95       	lsr	r27
     af0:	a7 95       	ror	r26
     af2:	97 95       	ror	r25
     af4:	87 95       	ror	r24
		if(base_value / 4 <= 255 && base_value / 4 != 0)
     af6:	9c 01       	movw	r18, r24
     af8:	24 50       	subi	r18, 0x04	; 4
     afa:	31 09       	sbc	r19, r1
     afc:	2c 3f       	cpi	r18, 0xFC	; 252
     afe:	33 40       	sbci	r19, 0x03	; 3
     b00:	58 f4       	brcc	.+22     	; 0xb18 <i2c_init+0x48>
		{
			TWSR |= 0x00;
     b02:	e1 e7       	ldi	r30, 0x71	; 113
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	20 81       	ld	r18, Z
     b08:	20 83       	st	Z, r18
			TWBR = base_value / 4;
     b0a:	96 95       	lsr	r25
     b0c:	87 95       	ror	r24
     b0e:	96 95       	lsr	r25
     b10:	87 95       	ror	r24
     b12:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     b16:	0b c0       	rjmp	.+22     	; 0xb2e <i2c_init+0x5e>
		}
		else if(base_value / 256 <= 255 && base_value / 256 != 0)
     b18:	8f 3f       	cpi	r24, 0xFF	; 255
     b1a:	91 05       	cpc	r25, r1
     b1c:	41 f0       	breq	.+16     	; 0xb2e <i2c_init+0x5e>
     b1e:	38 f0       	brcs	.+14     	; 0xb2e <i2c_init+0x5e>
		{
			TWSR |= 0x01;
     b20:	e1 e7       	ldi	r30, 0x71	; 113
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	20 81       	ld	r18, Z
     b26:	21 60       	ori	r18, 0x01	; 1
     b28:	20 83       	st	Z, r18
			TWBR = base_value / 256;
     b2a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		}
	}
	DDRD = 0x03;
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	81 bb       	out	0x11, r24	; 17
	return i2c_init_Success;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	08 95       	ret

uint8_t i2c_init(uint16_t clock_khz)
{
	if(clock_khz > 400)
	{
		return i2c_init_Fail;
     b36:	80 e0       	ldi	r24, 0x00	; 0
			TWBR = base_value / 256;
		}
	}
	DDRD = 0x03;
	return i2c_init_Success;
}
     b38:	08 95       	ret

00000b3a <i2c_start>:

void i2c_start()
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     b3a:	84 ea       	ldi	r24, 0xA4	; 164
     b3c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & _BV(TWINT)));
     b40:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     b44:	88 23       	and	r24, r24
     b46:	e4 f7       	brge	.-8      	; 0xb40 <i2c_start+0x6>
	if((TW_STATUS == TW_START))
     b48:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     b4c:	88 7f       	andi	r24, 0xF8	; 248
     b4e:	88 30       	cpi	r24, 0x08	; 8
     b50:	49 f4       	brne	.+18     	; 0xb64 <i2c_start+0x2a>
	{
		printf("Start condition Success\n\r");
     b52:	8d e1       	ldi	r24, 0x1D	; 29
     b54:	99 e0       	ldi	r25, 0x09	; 9
     b56:	9f 93       	push	r25
     b58:	8f 93       	push	r24
     b5a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	08 95       	ret
	}
	else
	{
		printf("Start condition Fail\n\r");
     b64:	87 e3       	ldi	r24, 0x37	; 55
     b66:	99 e0       	ldi	r25, 0x09	; 9
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	08 95       	ret

00000b76 <i2c_transmit>:
	}
}

void i2c_transmit(uint8_t data)
{
	TWDR = data;
     b76:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     b7a:	84 ec       	ldi	r24, 0xC4	; 196
     b7c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & _BV(TWINT)));
     b80:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     b84:	88 23       	and	r24, r24
     b86:	e4 f7       	brge	.-8      	; 0xb80 <i2c_transmit+0xa>
}
     b88:	08 95       	ret

00000b8a <i2c_send_address_write>:

void i2c_send_address_write(uint8_t address)
{
	i2c_transmit((address << 1) + TW_WRITE);
     b8a:	88 0f       	add	r24, r24
     b8c:	f4 df       	rcall	.-24     	; 0xb76 <i2c_transmit>
	if((TW_STATUS == TW_MT_SLA_ACK))
     b8e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     b92:	88 7f       	andi	r24, 0xF8	; 248
     b94:	88 31       	cpi	r24, 0x18	; 24
     b96:	49 f4       	brne	.+18     	; 0xbaa <i2c_send_address_write+0x20>
	{
		printf("SLA+W transmitted, ACK received Success\n\r");
     b98:	8e e4       	ldi	r24, 0x4E	; 78
     b9a:	99 e0       	ldi	r25, 0x09	; 9
     b9c:	9f 93       	push	r25
     b9e:	8f 93       	push	r24
     ba0:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	08 95       	ret
	}
	else
	{
		printf("SLA+W transmitted, ACK received Fail\n\r");
     baa:	88 e7       	ldi	r24, 0x78	; 120
     bac:	99 e0       	ldi	r25, 0x09	; 9
     bae:	9f 93       	push	r25
     bb0:	8f 93       	push	r24
     bb2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	08 95       	ret

00000bbc <i2c_send_address_read>:
	}
}

void i2c_send_address_read(uint8_t address)
{
	i2c_transmit((address << 1) + TW_READ);
     bbc:	88 0f       	add	r24, r24
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	da df       	rcall	.-76     	; 0xb76 <i2c_transmit>
	if((TW_STATUS == TW_MR_SLA_ACK))
     bc2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     bc6:	88 7f       	andi	r24, 0xF8	; 248
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	49 f4       	brne	.+18     	; 0xbde <i2c_send_address_read+0x22>
	{
		printf("SLA+R transmitted, ACK received Success\n\r");
     bcc:	8f e9       	ldi	r24, 0x9F	; 159
     bce:	99 e0       	ldi	r25, 0x09	; 9
     bd0:	9f 93       	push	r25
     bd2:	8f 93       	push	r24
     bd4:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	08 95       	ret
	}
	else
	{
		printf("SLA+R transmitted, ACK received Fail\n\r");
     bde:	89 ec       	ldi	r24, 0xC9	; 201
     be0:	99 e0       	ldi	r25, 0x09	; 9
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	08 95       	ret

00000bf0 <i2c_send_data_ACK>:
	}
}

void i2c_send_data_ACK(uint8_t data)
{
	i2c_transmit(data);
     bf0:	c2 df       	rcall	.-124    	; 0xb76 <i2c_transmit>
	if((TW_STATUS == TW_MT_DATA_ACK))
     bf2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     bf6:	88 7f       	andi	r24, 0xF8	; 248
     bf8:	88 32       	cpi	r24, 0x28	; 40
     bfa:	79 f4       	brne	.+30     	; 0xc1a <i2c_send_data_ACK+0x2a>
	{
		printf("data transmitted, ACK received Success : 0x%X\n\r", TWSR);
     bfc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     c00:	1f 92       	push	r1
     c02:	8f 93       	push	r24
     c04:	80 ef       	ldi	r24, 0xF0	; 240
     c06:	99 e0       	ldi	r25, 0x09	; 9
     c08:	9f 93       	push	r25
     c0a:	8f 93       	push	r24
     c0c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	08 95       	ret
	}
	else
	{
		printf("data transmitted, ACK received Fail : 0x%X\n\r", TWSR);
     c1a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     c1e:	1f 92       	push	r1
     c20:	8f 93       	push	r24
     c22:	80 e2       	ldi	r24, 0x20	; 32
     c24:	9a e0       	ldi	r25, 0x0A	; 10
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	08 95       	ret

00000c38 <i2c_receive_ACK>:
	}
}

uint8_t i2c_receive_ACK()
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     c38:	84 ec       	ldi	r24, 0xC4	; 196
     c3a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR &  _BV(TWINT)));
     c3e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c42:	88 23       	and	r24, r24
     c44:	e4 f7       	brge	.-8      	; 0xc3e <i2c_receive_ACK+0x6>
	if(TW_STATUS == TW_MR_DATA_ACK)
     c46:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     c4a:	88 7f       	andi	r24, 0xF8	; 248
     c4c:	80 35       	cpi	r24, 0x50	; 80
     c4e:	49 f4       	brne	.+18     	; 0xc62 <i2c_receive_ACK+0x2a>
	{
		printf("data received, ACK returned Success\n\r");
     c50:	8d e4       	ldi	r24, 0x4D	; 77
     c52:	9a e0       	ldi	r25, 0x0A	; 10
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <i2c_receive_ACK+0x3a>
	}
	else
	{
		printf("data received, ACK returned Fail\n\r");
     c62:	83 e7       	ldi	r24, 0x73	; 115
     c64:	9a e0       	ldi	r25, 0x0A	; 10
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
	}
	return TWDR;
     c72:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     c76:	08 95       	ret

00000c78 <i2c_receive_NACK>:

uint8_t i2c_receive_NACK()
{
	TWCR = _BV(TWINT) | _BV(TWEN);
     c78:	84 e8       	ldi	r24, 0x84	; 132
     c7a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR &  _BV(TWINT)));
     c7e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c82:	88 23       	and	r24, r24
     c84:	e4 f7       	brge	.-8      	; 0xc7e <i2c_receive_NACK+0x6>
	if(TW_STATUS == TW_MR_DATA_NACK)
     c86:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     c8a:	88 7f       	andi	r24, 0xF8	; 248
     c8c:	88 35       	cpi	r24, 0x58	; 88
     c8e:	49 f4       	brne	.+18     	; 0xca2 <i2c_receive_NACK+0x2a>
	{
		printf("data received, NACK returned Success\n\r");
     c90:	86 e9       	ldi	r24, 0x96	; 150
     c92:	9a e0       	ldi	r25, 0x0A	; 10
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	08 c0       	rjmp	.+16     	; 0xcb2 <i2c_receive_NACK+0x3a>
	}
	else
	{
		printf("data received, NACK returned Fail\n\r");
     ca2:	8d eb       	ldi	r24, 0xBD	; 189
     ca4:	9a e0       	ldi	r25, 0x0A	; 10
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
	}
	return TWDR;
     cb2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     cb6:	08 95       	ret

00000cb8 <i2c_stop>:

void i2c_stop()
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
     cb8:	84 e9       	ldi	r24, 0x94	; 148
     cba:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	printf("i2c Stop\n\r");
     cbe:	81 ee       	ldi	r24, 0xE1	; 225
     cc0:	9a e0       	ldi	r25, 0x0A	; 10
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	08 95       	ret

00000cd0 <__vector_9>:

extern volatile uint32_t temperature;
extern volatile uint32_t humidity;

ISR(TIMER2_COMP_vect)
{
     cd0:	1f 92       	push	r1
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	0b b6       	in	r0, 0x3b	; 59
     cdc:	0f 92       	push	r0
     cde:	2f 93       	push	r18
     ce0:	3f 93       	push	r19
     ce2:	4f 93       	push	r20
     ce4:	5f 93       	push	r21
     ce6:	6f 93       	push	r22
     ce8:	7f 93       	push	r23
     cea:	8f 93       	push	r24
     cec:	9f 93       	push	r25
     cee:	af 93       	push	r26
     cf0:	bf 93       	push	r27
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
	mili_sec++;
     cf6:	80 91 cc 0b 	lds	r24, 0x0BCC	; 0x800bcc <mili_sec>
     cfa:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <mili_sec+0x1>
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	90 93 cd 0b 	sts	0x0BCD, r25	; 0x800bcd <mili_sec+0x1>
     d04:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <mili_sec>
	if(mili_sec >= 1000)
     d08:	80 91 cc 0b 	lds	r24, 0x0BCC	; 0x800bcc <mili_sec>
     d0c:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <mili_sec+0x1>
     d10:	88 3e       	cpi	r24, 0xE8	; 232
     d12:	93 40       	sbci	r25, 0x03	; 3
     d14:	50 f1       	brcs	.+84     	; 0xd6a <__vector_9+0x9a>
	{
		seconds++;
     d16:	80 91 ce 0b 	lds	r24, 0x0BCE	; 0x800bce <seconds>
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <seconds>
		mili_sec %= 1000;
     d20:	40 91 cc 0b 	lds	r20, 0x0BCC	; 0x800bcc <mili_sec>
     d24:	50 91 cd 0b 	lds	r21, 0x0BCD	; 0x800bcd <mili_sec+0x1>
     d28:	9a 01       	movw	r18, r20
     d2a:	36 95       	lsr	r19
     d2c:	27 95       	ror	r18
     d2e:	36 95       	lsr	r19
     d30:	27 95       	ror	r18
     d32:	36 95       	lsr	r19
     d34:	27 95       	ror	r18
     d36:	a5 ec       	ldi	r26, 0xC5	; 197
     d38:	b0 e2       	ldi	r27, 0x20	; 32
     d3a:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__umulhisi3>
     d3e:	92 95       	swap	r25
     d40:	82 95       	swap	r24
     d42:	8f 70       	andi	r24, 0x0F	; 15
     d44:	89 27       	eor	r24, r25
     d46:	9f 70       	andi	r25, 0x0F	; 15
     d48:	89 27       	eor	r24, r25
     d4a:	68 ee       	ldi	r22, 0xE8	; 232
     d4c:	73 e0       	ldi	r23, 0x03	; 3
     d4e:	86 9f       	mul	r24, r22
     d50:	90 01       	movw	r18, r0
     d52:	87 9f       	mul	r24, r23
     d54:	30 0d       	add	r19, r0
     d56:	96 9f       	mul	r25, r22
     d58:	30 0d       	add	r19, r0
     d5a:	11 24       	eor	r1, r1
     d5c:	ca 01       	movw	r24, r20
     d5e:	82 1b       	sub	r24, r18
     d60:	93 0b       	sbc	r25, r19
     d62:	90 93 cd 0b 	sts	0x0BCD, r25	; 0x800bcd <mili_sec+0x1>
     d66:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <mili_sec>
	}
	if(seconds == 60)
     d6a:	80 91 ce 0b 	lds	r24, 0x0BCE	; 0x800bce <seconds>
     d6e:	8c 33       	cpi	r24, 0x3C	; 60
     d70:	09 f0       	breq	.+2      	; 0xd74 <__vector_9+0xa4>
     d72:	5b c0       	rjmp	.+182    	; 0xe2a <__vector_9+0x15a>
	{
		minute++;
     d74:	80 91 cf 0b 	lds	r24, 0x0BCF	; 0x800bcf <minute>
     d78:	8f 5f       	subi	r24, 0xFF	; 255
     d7a:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <minute>
		seconds = 0;
     d7e:	10 92 ce 0b 	sts	0x0BCE, r1	; 0x800bce <seconds>
		if(minute == 60)
     d82:	80 91 cf 0b 	lds	r24, 0x0BCF	; 0x800bcf <minute>
     d86:	8c 33       	cpi	r24, 0x3C	; 60
     d88:	d1 f4       	brne	.+52     	; 0xdbe <__vector_9+0xee>
		{
			hour++;
     d8a:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <hour>
			minute %= 60;
     d94:	90 91 cf 0b 	lds	r25, 0x0BCF	; 0x800bcf <minute>
     d98:	89 e8       	ldi	r24, 0x89	; 137
     d9a:	98 9f       	mul	r25, r24
     d9c:	81 2d       	mov	r24, r1
     d9e:	11 24       	eor	r1, r1
     da0:	82 95       	swap	r24
     da2:	86 95       	lsr	r24
     da4:	87 70       	andi	r24, 0x07	; 7
     da6:	2c e3       	ldi	r18, 0x3C	; 60
     da8:	82 9f       	mul	r24, r18
     daa:	90 19       	sub	r25, r0
     dac:	11 24       	eor	r1, r1
     dae:	90 93 cf 0b 	sts	0x0BCF, r25	; 0x800bcf <minute>
			if(hour == 24)
     db2:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
     db6:	88 31       	cpi	r24, 0x18	; 24
     db8:	11 f4       	brne	.+4      	; 0xdbe <__vector_9+0xee>
			{
				hour = 0;
     dba:	10 92 d0 0b 	sts	0x0BD0, r1	; 0x800bd0 <hour>
			}
		}
		current_time.minute_index[0] = minute / 10;
     dbe:	90 91 cf 0b 	lds	r25, 0x0BCF	; 0x800bcf <minute>
     dc2:	8d ec       	ldi	r24, 0xCD	; 205
     dc4:	98 9f       	mul	r25, r24
     dc6:	91 2d       	mov	r25, r1
     dc8:	11 24       	eor	r1, r1
     dca:	96 95       	lsr	r25
     dcc:	96 95       	lsr	r25
     dce:	96 95       	lsr	r25
     dd0:	e2 e0       	ldi	r30, 0x02	; 2
     dd2:	ff e0       	ldi	r31, 0x0F	; 15
     dd4:	92 83       	std	Z+2, r25	; 0x02
		current_time.minute_index[1] = minute % 10;
     dd6:	30 91 cf 0b 	lds	r19, 0x0BCF	; 0x800bcf <minute>
     dda:	38 9f       	mul	r19, r24
     ddc:	91 2d       	mov	r25, r1
     dde:	11 24       	eor	r1, r1
     de0:	96 95       	lsr	r25
     de2:	96 95       	lsr	r25
     de4:	96 95       	lsr	r25
     de6:	99 0f       	add	r25, r25
     de8:	29 2f       	mov	r18, r25
     dea:	22 0f       	add	r18, r18
     dec:	22 0f       	add	r18, r18
     dee:	92 0f       	add	r25, r18
     df0:	39 1b       	sub	r19, r25
     df2:	33 83       	std	Z+3, r19	; 0x03
		current_time.hour_index[0] = hour / 10;
     df4:	90 91 d0 0b 	lds	r25, 0x0BD0	; 0x800bd0 <hour>
     df8:	98 9f       	mul	r25, r24
     dfa:	91 2d       	mov	r25, r1
     dfc:	11 24       	eor	r1, r1
     dfe:	96 95       	lsr	r25
     e00:	96 95       	lsr	r25
     e02:	96 95       	lsr	r25
     e04:	94 83       	std	Z+4, r25	; 0x04
		current_time.hour_index[1] = hour % 10;
     e06:	20 91 d0 0b 	lds	r18, 0x0BD0	; 0x800bd0 <hour>
     e0a:	28 9f       	mul	r18, r24
     e0c:	81 2d       	mov	r24, r1
     e0e:	11 24       	eor	r1, r1
     e10:	86 95       	lsr	r24
     e12:	86 95       	lsr	r24
     e14:	86 95       	lsr	r24
     e16:	88 0f       	add	r24, r24
     e18:	98 2f       	mov	r25, r24
     e1a:	99 0f       	add	r25, r25
     e1c:	99 0f       	add	r25, r25
     e1e:	89 0f       	add	r24, r25
     e20:	28 1b       	sub	r18, r24
     e22:	25 83       	std	Z+5, r18	; 0x05
		is_time_update = need_Update;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <is_time_update>
	}
}
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	0f 90       	pop	r0
     e44:	0b be       	out	0x3b, r0	; 59
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_5>:

ISR(INT4_vect)
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	0b b6       	in	r0, 0x3b	; 59
     e5c:	0f 92       	push	r0
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
	if((PINE & 0x10) == 0x00)
     e76:	0c 99       	sbic	0x01, 4	; 1
     e78:	3d c0       	rjmp	.+122    	; 0xef4 <__vector_5+0xa4>
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	81 ee       	ldi	r24, 0xE1	; 225
     e7e:	94 e0       	ldi	r25, 0x04	; 4
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	80 40       	sbci	r24, 0x00	; 0
     e84:	90 40       	sbci	r25, 0x00	; 0
     e86:	e1 f7       	brne	.-8      	; 0xe80 <__vector_5+0x30>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <__vector_5+0x3a>
     e8a:	00 00       	nop
	{
		_delay_ms(100);
		if((PINE & 0x10) == 0x00)
     e8c:	0c 99       	sbic	0x01, 4	; 1
     e8e:	32 c0       	rjmp	.+100    	; 0xef4 <__vector_5+0xa4>
		{
			mili_sec += 100;
     e90:	80 91 cc 0b 	lds	r24, 0x0BCC	; 0x800bcc <mili_sec>
     e94:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <mili_sec+0x1>
     e98:	8c 59       	subi	r24, 0x9C	; 156
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	90 93 cd 0b 	sts	0x0BCD, r25	; 0x800bcd <mili_sec+0x1>
     ea0:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <mili_sec>
			Display_mode_count++;
     ea4:	80 91 ca 0b 	lds	r24, 0x0BCA	; 0x800bca <Display_mode_count>
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <Display_mode_count>
			Display_mode_count %= 3;
     eae:	90 91 ca 0b 	lds	r25, 0x0BCA	; 0x800bca <Display_mode_count>
     eb2:	8b ea       	ldi	r24, 0xAB	; 171
     eb4:	98 9f       	mul	r25, r24
     eb6:	81 2d       	mov	r24, r1
     eb8:	11 24       	eor	r1, r1
     eba:	86 95       	lsr	r24
     ebc:	28 2f       	mov	r18, r24
     ebe:	22 0f       	add	r18, r18
     ec0:	82 0f       	add	r24, r18
     ec2:	98 1b       	sub	r25, r24
     ec4:	90 93 ca 0b 	sts	0x0BCA, r25	; 0x800bca <Display_mode_count>
			Display_mode = Display_mode_count;
     ec8:	80 91 ca 0b 	lds	r24, 0x0BCA	; 0x800bca <Display_mode_count>
     ecc:	80 93 cb 0b 	sts	0x0BCB, r24	; 0x800bcb <Display_mode>
			isdisplay_changed = display_true;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 c9 0b 	sts	0x0BC9, r24	; 0x800bc9 <isdisplay_changed>
			if(Display_mode == Time_display_mode)
     ed6:	80 91 cb 0b 	lds	r24, 0x0BCB	; 0x800bcb <Display_mode>
     eda:	81 11       	cpse	r24, r1
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <__vector_5+0x94>
			{
				is_time_update = need_Update;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <is_time_update>
			}
			printf("INT4 interrupt\n\r");
     ee4:	83 e1       	ldi	r24, 0x13	; 19
     ee6:	9b e0       	ldi	r25, 0x0B	; 11
     ee8:	9f 93       	push	r25
     eea:	8f 93       	push	r24
     eec:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
		}
	}
}
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0b be       	out	0x3b, r0	; 59
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <__vector_6>:

ISR(INT5_vect)
{
     f1a:	1f 92       	push	r1
     f1c:	0f 92       	push	r0
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	0f 92       	push	r0
     f22:	11 24       	eor	r1, r1
     f24:	0b b6       	in	r0, 0x3b	; 59
     f26:	0f 92       	push	r0
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
	if((PINE & 0x20) == 0x00)
     f40:	0d 99       	sbic	0x01, 5	; 1
     f42:	23 c0       	rjmp	.+70     	; 0xf8a <__vector_6+0x70>
     f44:	2f ef       	ldi	r18, 0xFF	; 255
     f46:	81 ee       	ldi	r24, 0xE1	; 225
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	21 50       	subi	r18, 0x01	; 1
     f4c:	80 40       	sbci	r24, 0x00	; 0
     f4e:	90 40       	sbci	r25, 0x00	; 0
     f50:	e1 f7       	brne	.-8      	; 0xf4a <__vector_6+0x30>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <__vector_6+0x3a>
     f54:	00 00       	nop
	{
		_delay_ms(100);
		if((PINE & 0x20) == 0x00)
     f56:	0d 99       	sbic	0x01, 5	; 1
     f58:	18 c0       	rjmp	.+48     	; 0xf8a <__vector_6+0x70>
		{
			hour = 0;
     f5a:	10 92 d0 0b 	sts	0x0BD0, r1	; 0x800bd0 <hour>
			minute = 0;
     f5e:	10 92 cf 0b 	sts	0x0BCF, r1	; 0x800bcf <minute>
			seconds = 0;
     f62:	10 92 ce 0b 	sts	0x0BCE, r1	; 0x800bce <seconds>
			mili_sec = 0;
     f66:	10 92 cd 0b 	sts	0x0BCD, r1	; 0x800bcd <mili_sec+0x1>
     f6a:	10 92 cc 0b 	sts	0x0BCC, r1	; 0x800bcc <mili_sec>
			esp8266_user_status = Ready_to_receive_time_data;
     f6e:	8f e0       	ldi	r24, 0x0F	; 15
     f70:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <esp8266_user_status>
			is_time_update = need_Update;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <is_time_update>
			printf("INT5 interrupt\n\r");
     f7a:	84 e2       	ldi	r24, 0x24	; 36
     f7c:	9b e0       	ldi	r25, 0x0B	; 11
     f7e:	9f 93       	push	r25
     f80:	8f 93       	push	r24
     f82:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
		}
	}
}
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0b be       	out	0x3b, r0	; 59
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <ILI9341_current_time_data_init>:
	ILI9341_LCD_input_data_update();
	exinterrupt_init();
}

void ILI9341_current_time_data_init(volatile struct current_time_data* user_define)
{
     fb0:	fc 01       	movw	r30, r24
	user_define->seconds_index[0] = 0;
     fb2:	10 82       	st	Z, r1
	user_define->seconds_index[1] = 0;
     fb4:	11 82       	std	Z+1, r1	; 0x01
	user_define->minute_index[0] = 0;
     fb6:	12 82       	std	Z+2, r1	; 0x02
	user_define->minute_index[1] = 0;
     fb8:	13 82       	std	Z+3, r1	; 0x03
	user_define->hour_index[0] = 0;
     fba:	14 82       	std	Z+4, r1	; 0x04
	user_define->hour_index[1] = 0;
     fbc:	15 82       	std	Z+5, r1	; 0x05
	user_define->day_index = 0;
     fbe:	16 82       	std	Z+6, r1	; 0x06
	user_define->day_index_num[0] = 0;
     fc0:	17 82       	std	Z+7, r1	; 0x07
	user_define->day_index_num[1] = 0;
     fc2:	10 86       	std	Z+8, r1	; 0x08
	user_define->month_index = 0;
     fc4:	11 86       	std	Z+9, r1	; 0x09
	user_define->year_index[0] = 0;
     fc6:	12 86       	std	Z+10, r1	; 0x0a
	user_define->year_index[1] = 0;
     fc8:	13 86       	std	Z+11, r1	; 0x0b
	user_define->year_index[2] = 0;
     fca:	14 86       	std	Z+12, r1	; 0x0c
	user_define->year_index[3] = 0;
     fcc:	15 86       	std	Z+13, r1	; 0x0d
     fce:	08 95       	ret

00000fd0 <ILI9341_convert_received_time_string>:
}

void ILI9341_convert_received_time_string(volatile char* str)
{
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
	uint8_t index = 0;
	for(uint8_t i = 0; i < 12; i++)
     fd8:	10 e0       	ldi	r17, 0x00	; 0
     fda:	11 c0       	rjmp	.+34     	; 0xffe <ILI9341_convert_received_time_string+0x2e>
	{
		if(strstr((const char*)str,month_string[i]))
     fdc:	61 2f       	mov	r22, r17
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	66 0f       	add	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	69 5e       	subi	r22, 0xE9	; 233
     fea:	7d 4f       	sbci	r23, 0xFD	; 253
     fec:	ce 01       	movw	r24, r28
     fee:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
     ff2:	89 2b       	or	r24, r25
     ff4:	19 f0       	breq	.+6      	; 0xffc <ILI9341_convert_received_time_string+0x2c>
		{
			current_time.month_index = i;
     ff6:	10 93 0b 0f 	sts	0x0F0B, r17	; 0x800f0b <current_time+0x9>
			break;
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
}

void ILI9341_convert_received_time_string(volatile char* str)
{
	uint8_t index = 0;
	for(uint8_t i = 0; i < 12; i++)
     ffc:	1f 5f       	subi	r17, 0xFF	; 255
     ffe:	1c 30       	cpi	r17, 0x0C	; 12
    1000:	68 f3       	brcs	.-38     	; 0xfdc <ILI9341_convert_received_time_string+0xc>
		{
			current_time.month_index = i;
			break;
		}
	}
	for(uint8_t i = 0; i < 7; i++)
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	13 c0       	rjmp	.+38     	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
	{
		if(strstr((const char*)str,day_string[i]))
    1006:	61 2f       	mov	r22, r17
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	66 0f       	add	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	66 0f       	add	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	65 50       	subi	r22, 0x05	; 5
    1014:	7e 4f       	sbci	r23, 0xFE	; 254
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strstr>
    101c:	89 2b       	or	r24, r25
    101e:	29 f0       	breq	.+10     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
		{
			current_time.day_index = i;
    1020:	10 93 08 0f 	sts	0x0F08, r17	; 0x800f08 <current_time+0x6>
	}
	for(uint8_t i = 0; i < strlen((const char*)str); i++)
	{
		if(isdigit(str[i]))
		{
			time_index[index++] = (str[i] - '0');
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	18 c0       	rjmp	.+48     	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
		{
			current_time.month_index = i;
			break;
		}
	}
	for(uint8_t i = 0; i < 7; i++)
    102a:	1f 5f       	subi	r17, 0xFF	; 255
    102c:	17 30       	cpi	r17, 0x07	; 7
    102e:	58 f3       	brcs	.-42     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
    1030:	f9 cf       	rjmp	.-14     	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
			break;
		}
	}
	for(uint8_t i = 0; i < strlen((const char*)str); i++)
	{
		if(isdigit(str[i]))
    1032:	fe 01       	movw	r30, r28
    1034:	e8 0f       	add	r30, r24
    1036:	f9 1f       	adc	r31, r25
    1038:	80 81       	ld	r24, Z
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	c0 97       	sbiw	r24, 0x30	; 48
    103e:	0a 97       	sbiw	r24, 0x0a	; 10
    1040:	48 f4       	brcc	.+18     	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
		{
			time_index[index++] = (str[i] - '0');
    1042:	83 2f       	mov	r24, r19
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	40 81       	ld	r20, Z
    1048:	40 53       	subi	r20, 0x30	; 48
    104a:	fc 01       	movw	r30, r24
    104c:	e0 5f       	subi	r30, 0xF0	; 240
    104e:	f0 4f       	sbci	r31, 0xF0	; 240
    1050:	40 83       	st	Z, r20
    1052:	3f 5f       	subi	r19, 0xFF	; 255
		}
		if(index == 12)
    1054:	3c 30       	cpi	r19, 0x0C	; 12
    1056:	69 f0       	breq	.+26     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
		{
			current_time.day_index = i;
			break;
		}
	}
	for(uint8_t i = 0; i < strlen((const char*)str); i++)
    1058:	2f 5f       	subi	r18, 0xFF	; 255
    105a:	82 2f       	mov	r24, r18
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	fe 01       	movw	r30, r28
    1060:	01 90       	ld	r0, Z+
    1062:	00 20       	and	r0, r0
    1064:	e9 f7       	brne	.-6      	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	ec 1b       	sub	r30, r28
    106a:	fd 0b       	sbc	r31, r29
    106c:	8e 17       	cp	r24, r30
    106e:	9f 07       	cpc	r25, r31
    1070:	00 f3       	brcs	.-64     	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
		if(index == 12)
		{
			break;
		}
	}
	seconds += (time_index[6] * 10) + time_index[7];
    1072:	a0 e1       	ldi	r26, 0x10	; 16
    1074:	bf e0       	ldi	r27, 0x0F	; 15
    1076:	16 96       	adiw	r26, 0x06	; 6
    1078:	8c 91       	ld	r24, X
    107a:	16 97       	sbiw	r26, 0x06	; 6
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9c 01       	movw	r18, r24
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	82 0f       	add	r24, r18
    1092:	93 1f       	adc	r25, r19
    1094:	17 96       	adiw	r26, 0x07	; 7
    1096:	2c 91       	ld	r18, X
    1098:	17 97       	sbiw	r26, 0x07	; 7
    109a:	82 0f       	add	r24, r18
    109c:	91 1d       	adc	r25, r1
    109e:	90 91 ce 0b 	lds	r25, 0x0BCE	; 0x800bce <seconds>
    10a2:	89 0f       	add	r24, r25
    10a4:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <seconds>
	minute += (time_index[4] * 10) + time_index[5];
    10a8:	14 96       	adiw	r26, 0x04	; 4
    10aa:	8c 91       	ld	r24, X
    10ac:	14 97       	sbiw	r26, 0x04	; 4
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9c 01       	movw	r18, r24
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	82 0f       	add	r24, r18
    10c4:	93 1f       	adc	r25, r19
    10c6:	15 96       	adiw	r26, 0x05	; 5
    10c8:	2c 91       	ld	r18, X
    10ca:	15 97       	sbiw	r26, 0x05	; 5
    10cc:	82 0f       	add	r24, r18
    10ce:	91 1d       	adc	r25, r1
    10d0:	90 91 cf 0b 	lds	r25, 0x0BCF	; 0x800bcf <minute>
    10d4:	89 0f       	add	r24, r25
    10d6:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <minute>
	hour += (time_index[2] * 10) + time_index[3];
    10da:	12 96       	adiw	r26, 0x02	; 2
    10dc:	8c 91       	ld	r24, X
    10de:	12 97       	sbiw	r26, 0x02	; 2
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9c 01       	movw	r18, r24
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	82 0f       	add	r24, r18
    10f6:	93 1f       	adc	r25, r19
    10f8:	13 96       	adiw	r26, 0x03	; 3
    10fa:	2c 91       	ld	r18, X
    10fc:	13 97       	sbiw	r26, 0x03	; 3
    10fe:	82 0f       	add	r24, r18
    1100:	91 1d       	adc	r25, r1
    1102:	90 91 d0 0b 	lds	r25, 0x0BD0	; 0x800bd0 <hour>
    1106:	89 0f       	add	r24, r25
    1108:	80 93 d0 0b 	sts	0x0BD0, r24	; 0x800bd0 <hour>
	current_time.day_index_num[0] = time_index[0];
    110c:	8c 91       	ld	r24, X
    110e:	e2 e0       	ldi	r30, 0x02	; 2
    1110:	ff e0       	ldi	r31, 0x0F	; 15
    1112:	87 83       	std	Z+7, r24	; 0x07
	current_time.day_index_num[1] = time_index[1];
    1114:	11 96       	adiw	r26, 0x01	; 1
    1116:	8c 91       	ld	r24, X
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	80 87       	std	Z+8, r24	; 0x08
	current_time.hour_index[0] = hour / 10;
    111c:	90 91 d0 0b 	lds	r25, 0x0BD0	; 0x800bd0 <hour>
    1120:	8d ec       	ldi	r24, 0xCD	; 205
    1122:	98 9f       	mul	r25, r24
    1124:	91 2d       	mov	r25, r1
    1126:	11 24       	eor	r1, r1
    1128:	96 95       	lsr	r25
    112a:	96 95       	lsr	r25
    112c:	96 95       	lsr	r25
    112e:	94 83       	std	Z+4, r25	; 0x04
	current_time.hour_index[1] = hour % 10;
    1130:	30 91 d0 0b 	lds	r19, 0x0BD0	; 0x800bd0 <hour>
    1134:	38 9f       	mul	r19, r24
    1136:	91 2d       	mov	r25, r1
    1138:	11 24       	eor	r1, r1
    113a:	96 95       	lsr	r25
    113c:	96 95       	lsr	r25
    113e:	96 95       	lsr	r25
    1140:	99 0f       	add	r25, r25
    1142:	29 2f       	mov	r18, r25
    1144:	22 0f       	add	r18, r18
    1146:	22 0f       	add	r18, r18
    1148:	92 0f       	add	r25, r18
    114a:	39 1b       	sub	r19, r25
    114c:	35 83       	std	Z+5, r19	; 0x05
	current_time.minute_index[0] = minute / 10;
    114e:	90 91 cf 0b 	lds	r25, 0x0BCF	; 0x800bcf <minute>
    1152:	98 9f       	mul	r25, r24
    1154:	91 2d       	mov	r25, r1
    1156:	11 24       	eor	r1, r1
    1158:	96 95       	lsr	r25
    115a:	96 95       	lsr	r25
    115c:	96 95       	lsr	r25
    115e:	92 83       	std	Z+2, r25	; 0x02
	current_time.minute_index[1] = minute % 10;
    1160:	30 91 cf 0b 	lds	r19, 0x0BCF	; 0x800bcf <minute>
    1164:	38 9f       	mul	r19, r24
    1166:	91 2d       	mov	r25, r1
    1168:	11 24       	eor	r1, r1
    116a:	96 95       	lsr	r25
    116c:	96 95       	lsr	r25
    116e:	96 95       	lsr	r25
    1170:	99 0f       	add	r25, r25
    1172:	29 2f       	mov	r18, r25
    1174:	22 0f       	add	r18, r18
    1176:	22 0f       	add	r18, r18
    1178:	92 0f       	add	r25, r18
    117a:	39 1b       	sub	r19, r25
    117c:	33 83       	std	Z+3, r19	; 0x03
	current_time.seconds_index[0] = seconds / 10;
    117e:	90 91 ce 0b 	lds	r25, 0x0BCE	; 0x800bce <seconds>
    1182:	98 9f       	mul	r25, r24
    1184:	91 2d       	mov	r25, r1
    1186:	11 24       	eor	r1, r1
    1188:	96 95       	lsr	r25
    118a:	96 95       	lsr	r25
    118c:	96 95       	lsr	r25
    118e:	90 83       	st	Z, r25
	current_time.seconds_index[1] = seconds % 10;
    1190:	20 91 ce 0b 	lds	r18, 0x0BCE	; 0x800bce <seconds>
    1194:	28 9f       	mul	r18, r24
    1196:	81 2d       	mov	r24, r1
    1198:	11 24       	eor	r1, r1
    119a:	86 95       	lsr	r24
    119c:	86 95       	lsr	r24
    119e:	86 95       	lsr	r24
    11a0:	88 0f       	add	r24, r24
    11a2:	98 2f       	mov	r25, r24
    11a4:	99 0f       	add	r25, r25
    11a6:	99 0f       	add	r25, r25
    11a8:	89 0f       	add	r24, r25
    11aa:	28 1b       	sub	r18, r24
    11ac:	21 83       	std	Z+1, r18	; 0x01
	current_time.year_index[0] = time_index[8];
    11ae:	18 96       	adiw	r26, 0x08	; 8
    11b0:	8c 91       	ld	r24, X
    11b2:	18 97       	sbiw	r26, 0x08	; 8
    11b4:	82 87       	std	Z+10, r24	; 0x0a
	current_time.year_index[1] = time_index[9];
    11b6:	19 96       	adiw	r26, 0x09	; 9
    11b8:	8c 91       	ld	r24, X
    11ba:	19 97       	sbiw	r26, 0x09	; 9
    11bc:	83 87       	std	Z+11, r24	; 0x0b
	current_time.year_index[2] = time_index[10];
    11be:	1a 96       	adiw	r26, 0x0a	; 10
    11c0:	8c 91       	ld	r24, X
    11c2:	1a 97       	sbiw	r26, 0x0a	; 10
    11c4:	84 87       	std	Z+12, r24	; 0x0c
	current_time.year_index[3] = time_index[11];
    11c6:	1b 96       	adiw	r26, 0x0b	; 11
    11c8:	8c 91       	ld	r24, X
    11ca:	85 87       	std	Z+13, r24	; 0x0d
}
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	08 95       	ret

000011d4 <ILI9341_check_0h_11h_or_12h_23h>:

void ILI9341_check_0h_11h_or_12h_23h(uint16_t col, uint16_t row, uint16_t width)
{
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	3c 01       	movw	r6, r24
    11f0:	ea 01       	movw	r28, r20
	if(hour >= 12)
    11f2:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    11f6:	8c 30       	cpi	r24, 0x0C	; 12
    11f8:	20 f1       	brcs	.+72     	; 0x1242 <ILI9341_check_0h_11h_or_12h_23h+0x6e>
	{
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_12h_23h_1_mv,col,row);
    11fa:	5b 01       	movw	r10, r22
    11fc:	63 01       	movw	r12, r6
    11fe:	0f 2e       	mov	r0, r31
    1200:	f9 e6       	ldi	r31, 0x69	; 105
    1202:	ef 2e       	mov	r14, r31
    1204:	f6 e0       	ldi	r31, 0x06	; 6
    1206:	ff 2e       	mov	r15, r31
    1208:	f0 2d       	mov	r31, r0
    120a:	02 e0       	ldi	r16, 0x02	; 2
    120c:	2f ef       	ldi	r18, 0xFF	; 255
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	43 e0       	ldi	r20, 0x03	; 3
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	cb 01       	movw	r24, r22
    121a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_12h_23h_2_mv,col+width,row);
    121e:	cc 0e       	add	r12, r28
    1220:	dd 1e       	adc	r13, r29
    1222:	0f 2e       	mov	r0, r31
    1224:	f5 e4       	ldi	r31, 0x45	; 69
    1226:	ef 2e       	mov	r14, r31
    1228:	f6 e0       	ldi	r31, 0x06	; 6
    122a:	ff 2e       	mov	r15, r31
    122c:	f0 2d       	mov	r31, r0
    122e:	2f ef       	ldi	r18, 0xFF	; 255
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	43 e0       	ldi	r20, 0x03	; 3
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	cb 01       	movw	r24, r22
    123c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
    1240:	27 c0       	rjmp	.+78     	; 0x1290 <ILI9341_check_0h_11h_or_12h_23h+0xbc>
	}
	else if(hour <= 11)
    1242:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    1246:	8c 30       	cpi	r24, 0x0C	; 12
    1248:	18 f5       	brcc	.+70     	; 0x1290 <ILI9341_check_0h_11h_or_12h_23h+0xbc>
	{
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_0h_11h_1_mv,col,row);
    124a:	5b 01       	movw	r10, r22
    124c:	63 01       	movw	r12, r6
    124e:	0f 2e       	mov	r0, r31
    1250:	f1 eb       	ldi	r31, 0xB1	; 177
    1252:	ef 2e       	mov	r14, r31
    1254:	f6 e0       	ldi	r31, 0x06	; 6
    1256:	ff 2e       	mov	r15, r31
    1258:	f0 2d       	mov	r31, r0
    125a:	02 e0       	ldi	r16, 0x02	; 2
    125c:	2f ef       	ldi	r18, 0xFF	; 255
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	43 e0       	ldi	r20, 0x03	; 3
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	cb 01       	movw	r24, r22
    126a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_0h_11h_2_mv,col+width,row);
    126e:	cc 0e       	add	r12, r28
    1270:	dd 1e       	adc	r13, r29
    1272:	0f 2e       	mov	r0, r31
    1274:	fd e8       	ldi	r31, 0x8D	; 141
    1276:	ef 2e       	mov	r14, r31
    1278:	f6 e0       	ldi	r31, 0x06	; 6
    127a:	ff 2e       	mov	r15, r31
    127c:	f0 2d       	mov	r31, r0
    127e:	2f ef       	ldi	r18, 0xFF	; 255
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	43 e0       	ldi	r20, 0x03	; 3
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	cb 01       	movw	r24, r22
    128c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
	}
}
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	9f 90       	pop	r9
    12a4:	8f 90       	pop	r8
    12a6:	7f 90       	pop	r7
    12a8:	6f 90       	pop	r6
    12aa:	08 95       	ret

000012ac <ILI9341_check_hour>:
void ILI9341_check_hour(uint16_t col, uint16_t row, uint16_t width)
{
    12ac:	2f 92       	push	r2
    12ae:	3f 92       	push	r3
    12b0:	4f 92       	push	r4
    12b2:	5f 92       	push	r5
    12b4:	6f 92       	push	r6
    12b6:	7f 92       	push	r7
    12b8:	8f 92       	push	r8
    12ba:	9f 92       	push	r9
    12bc:	af 92       	push	r10
    12be:	bf 92       	push	r11
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	2c 01       	movw	r4, r24
    12d0:	3b 01       	movw	r6, r22
    12d2:	ea 01       	movw	r28, r20
	if(hour < 10)
    12d4:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    12d8:	8a 30       	cpi	r24, 0x0A	; 10
    12da:	40 f5       	brcc	.+80     	; 0x132c <ILI9341_check_hour+0x80>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,10,0x00,col,row);
    12dc:	4b 01       	movw	r8, r22
    12de:	52 01       	movw	r10, r4
    12e0:	c1 2c       	mov	r12, r1
    12e2:	d1 2c       	mov	r13, r1
    12e4:	76 01       	movw	r14, r12
    12e6:	0a e0       	ldi	r16, 0x0A	; 10
    12e8:	2f ef       	ldi	r18, 0xFF	; 255
    12ea:	3f ef       	ldi	r19, 0xFF	; 255
    12ec:	43 e0       	ldi	r20, 0x03	; 3
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	cb 01       	movw	r24, r22
    12f6:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1]],col+width,row);
    12fa:	e0 91 07 0f 	lds	r30, 0x0F07	; 0x800f07 <current_time+0x5>
    12fe:	ac 0e       	add	r10, r28
    1300:	bd 1e       	adc	r11, r29
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	ee 0f       	add	r30, r30
    1306:	ff 1f       	adc	r31, r31
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	e3 5c       	subi	r30, 0xC3	; 195
    130e:	f8 4f       	sbci	r31, 0xF8	; 248
    1310:	c0 80       	ld	r12, Z
    1312:	d1 80       	ldd	r13, Z+1	; 0x01
    1314:	e2 80       	ldd	r14, Z+2	; 0x02
    1316:	f3 80       	ldd	r15, Z+3	; 0x03
    1318:	2f ef       	ldi	r18, 0xFF	; 255
    131a:	3f ef       	ldi	r19, 0xFF	; 255
    131c:	43 e0       	ldi	r20, 0x03	; 3
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	cb 01       	movw	r24, r22
    1326:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
    132a:	e8 c0       	rjmp	.+464    	; 0x14fc <ILI9341_check_hour+0x250>
	}
	else if(hour > 9 && hour < 13)
    132c:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    1330:	8a 30       	cpi	r24, 0x0A	; 10
    1332:	f0 f1       	brcs	.+124    	; 0x13b0 <ILI9341_check_hour+0x104>
    1334:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    1338:	8d 30       	cpi	r24, 0x0D	; 13
    133a:	d0 f5       	brcc	.+116    	; 0x13b0 <ILI9341_check_hour+0x104>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[0]],col,row);
    133c:	0f 2e       	mov	r0, r31
    133e:	f2 e0       	ldi	r31, 0x02	; 2
    1340:	2f 2e       	mov	r2, r31
    1342:	ff e0       	ldi	r31, 0x0F	; 15
    1344:	3f 2e       	mov	r3, r31
    1346:	f0 2d       	mov	r31, r0
    1348:	d1 01       	movw	r26, r2
    134a:	14 96       	adiw	r26, 0x04	; 4
    134c:	ec 91       	ld	r30, X
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	e3 5c       	subi	r30, 0xC3	; 195
    135a:	f8 4f       	sbci	r31, 0xF8	; 248
    135c:	c0 80       	ld	r12, Z
    135e:	d1 80       	ldd	r13, Z+1	; 0x01
    1360:	e2 80       	ldd	r14, Z+2	; 0x02
    1362:	f3 80       	ldd	r15, Z+3	; 0x03
    1364:	4b 01       	movw	r8, r22
    1366:	52 01       	movw	r10, r4
    1368:	0a e0       	ldi	r16, 0x0A	; 10
    136a:	2f ef       	ldi	r18, 0xFF	; 255
    136c:	3f ef       	ldi	r19, 0xFF	; 255
    136e:	43 e0       	ldi	r20, 0x03	; 3
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	cb 01       	movw	r24, r22
    1378:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1]],col+width,row);
    137c:	d1 01       	movw	r26, r2
    137e:	15 96       	adiw	r26, 0x05	; 5
    1380:	ec 91       	ld	r30, X
    1382:	ac 0e       	add	r10, r28
    1384:	bd 1e       	adc	r11, r29
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	e3 5c       	subi	r30, 0xC3	; 195
    1392:	f8 4f       	sbci	r31, 0xF8	; 248
    1394:	c0 80       	ld	r12, Z
    1396:	d1 80       	ldd	r13, Z+1	; 0x01
    1398:	e2 80       	ldd	r14, Z+2	; 0x02
    139a:	f3 80       	ldd	r15, Z+3	; 0x03
    139c:	2f ef       	ldi	r18, 0xFF	; 255
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	43 e0       	ldi	r20, 0x03	; 3
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	cb 01       	movw	r24, r22
    13aa:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
    13ae:	a6 c0       	rjmp	.+332    	; 0x14fc <ILI9341_check_hour+0x250>
	}
	else if(hour > 12 && hour < 20) 
    13b0:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    13b4:	8d 30       	cpi	r24, 0x0D	; 13
    13b6:	68 f1       	brcs	.+90     	; 0x1412 <ILI9341_check_hour+0x166>
    13b8:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    13bc:	84 31       	cpi	r24, 0x14	; 20
    13be:	48 f5       	brcc	.+82     	; 0x1412 <ILI9341_check_hour+0x166>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,10,0x00,col,row);
    13c0:	43 01       	movw	r8, r6
    13c2:	52 01       	movw	r10, r4
    13c4:	c1 2c       	mov	r12, r1
    13c6:	d1 2c       	mov	r13, r1
    13c8:	76 01       	movw	r14, r12
    13ca:	0a e0       	ldi	r16, 0x0A	; 10
    13cc:	2f ef       	ldi	r18, 0xFF	; 255
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	43 e0       	ldi	r20, 0x03	; 3
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	cb 01       	movw	r24, r22
    13da:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1] - 2],col+width,row);
    13de:	e0 91 07 0f 	lds	r30, 0x0F07	; 0x800f07 <current_time+0x5>
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	32 97       	sbiw	r30, 0x02	; 2
    13e6:	ac 0e       	add	r10, r28
    13e8:	bd 1e       	adc	r11, r29
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	e3 5c       	subi	r30, 0xC3	; 195
    13f4:	f8 4f       	sbci	r31, 0xF8	; 248
    13f6:	c0 80       	ld	r12, Z
    13f8:	d1 80       	ldd	r13, Z+1	; 0x01
    13fa:	e2 80       	ldd	r14, Z+2	; 0x02
    13fc:	f3 80       	ldd	r15, Z+3	; 0x03
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	43 e0       	ldi	r20, 0x03	; 3
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	cb 01       	movw	r24, r22
    140c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
    1410:	75 c0       	rjmp	.+234    	; 0x14fc <ILI9341_check_hour+0x250>
	}
	else if(hour > 19 && hour < 22) 
    1412:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    1416:	84 31       	cpi	r24, 0x14	; 20
    1418:	68 f1       	brcs	.+90     	; 0x1474 <ILI9341_check_hour+0x1c8>
    141a:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    141e:	86 31       	cpi	r24, 0x16	; 22
    1420:	48 f5       	brcc	.+82     	; 0x1474 <ILI9341_check_hour+0x1c8>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,10,0x00,col,row);
    1422:	43 01       	movw	r8, r6
    1424:	52 01       	movw	r10, r4
    1426:	c1 2c       	mov	r12, r1
    1428:	d1 2c       	mov	r13, r1
    142a:	76 01       	movw	r14, r12
    142c:	0a e0       	ldi	r16, 0x0A	; 10
    142e:	2f ef       	ldi	r18, 0xFF	; 255
    1430:	3f ef       	ldi	r19, 0xFF	; 255
    1432:	43 e0       	ldi	r20, 0x03	; 3
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	cb 01       	movw	r24, r22
    143c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1] + 8],col+width,row);
    1440:	e0 91 07 0f 	lds	r30, 0x0F07	; 0x800f07 <current_time+0x5>
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	38 96       	adiw	r30, 0x08	; 8
    1448:	ac 0e       	add	r10, r28
    144a:	bd 1e       	adc	r11, r29
    144c:	ee 0f       	add	r30, r30
    144e:	ff 1f       	adc	r31, r31
    1450:	ee 0f       	add	r30, r30
    1452:	ff 1f       	adc	r31, r31
    1454:	e3 5c       	subi	r30, 0xC3	; 195
    1456:	f8 4f       	sbci	r31, 0xF8	; 248
    1458:	c0 80       	ld	r12, Z
    145a:	d1 80       	ldd	r13, Z+1	; 0x01
    145c:	e2 80       	ldd	r14, Z+2	; 0x02
    145e:	f3 80       	ldd	r15, Z+3	; 0x03
    1460:	2f ef       	ldi	r18, 0xFF	; 255
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	43 e0       	ldi	r20, 0x03	; 3
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	cb 01       	movw	r24, r22
    146e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
    1472:	44 c0       	rjmp	.+136    	; 0x14fc <ILI9341_check_hour+0x250>
	}
	else if(hour > 21 && hour < 24)
    1474:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    1478:	86 31       	cpi	r24, 0x16	; 22
    147a:	08 f4       	brcc	.+2      	; 0x147e <ILI9341_check_hour+0x1d2>
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <ILI9341_check_hour+0x250>
    147e:	80 91 d0 0b 	lds	r24, 0x0BD0	; 0x800bd0 <hour>
    1482:	88 31       	cpi	r24, 0x18	; 24
    1484:	d8 f5       	brcc	.+118    	; 0x14fc <ILI9341_check_hour+0x250>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[0] - 1],col,row);
    1486:	0f 2e       	mov	r0, r31
    1488:	f2 e0       	ldi	r31, 0x02	; 2
    148a:	2f 2e       	mov	r2, r31
    148c:	ff e0       	ldi	r31, 0x0F	; 15
    148e:	3f 2e       	mov	r3, r31
    1490:	f0 2d       	mov	r31, r0
    1492:	d1 01       	movw	r26, r2
    1494:	14 96       	adiw	r26, 0x04	; 4
    1496:	ec 91       	ld	r30, X
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	31 97       	sbiw	r30, 0x01	; 1
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	e3 5c       	subi	r30, 0xC3	; 195
    14a6:	f8 4f       	sbci	r31, 0xF8	; 248
    14a8:	c0 80       	ld	r12, Z
    14aa:	d1 80       	ldd	r13, Z+1	; 0x01
    14ac:	e2 80       	ldd	r14, Z+2	; 0x02
    14ae:	f3 80       	ldd	r15, Z+3	; 0x03
    14b0:	43 01       	movw	r8, r6
    14b2:	52 01       	movw	r10, r4
    14b4:	0a e0       	ldi	r16, 0x0A	; 10
    14b6:	2f ef       	ldi	r18, 0xFF	; 255
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	43 e0       	ldi	r20, 0x03	; 3
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	cb 01       	movw	r24, r22
    14c4:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.hour_index[1] - 2],col+width,row);
    14c8:	d1 01       	movw	r26, r2
    14ca:	15 96       	adiw	r26, 0x05	; 5
    14cc:	ec 91       	ld	r30, X
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	32 97       	sbiw	r30, 0x02	; 2
    14d2:	ac 0e       	add	r10, r28
    14d4:	bd 1e       	adc	r11, r29
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	e3 5c       	subi	r30, 0xC3	; 195
    14e0:	f8 4f       	sbci	r31, 0xF8	; 248
    14e2:	c0 80       	ld	r12, Z
    14e4:	d1 80       	ldd	r13, Z+1	; 0x01
    14e6:	e2 80       	ldd	r14, Z+2	; 0x02
    14e8:	f3 80       	ldd	r15, Z+3	; 0x03
    14ea:	2f ef       	ldi	r18, 0xFF	; 255
    14ec:	3f ef       	ldi	r19, 0xFF	; 255
    14ee:	43 e0       	ldi	r20, 0x03	; 3
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	cb 01       	movw	r24, r22
    14f8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
	}
}
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	9f 90       	pop	r9
    1510:	8f 90       	pop	r8
    1512:	7f 90       	pop	r7
    1514:	6f 90       	pop	r6
    1516:	5f 90       	pop	r5
    1518:	4f 90       	pop	r4
    151a:	3f 90       	pop	r3
    151c:	2f 90       	pop	r2
    151e:	08 95       	ret

00001520 <ILI9341_check_minutes>:
void ILI9341_check_minutes(uint16_t col, uint16_t row, uint16_t width)
{
    1520:	2f 92       	push	r2
    1522:	3f 92       	push	r3
    1524:	4f 92       	push	r4
    1526:	5f 92       	push	r5
    1528:	6f 92       	push	r6
    152a:	7f 92       	push	r7
    152c:	8f 92       	push	r8
    152e:	9f 92       	push	r9
    1530:	af 92       	push	r10
    1532:	bf 92       	push	r11
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	2a 01       	movw	r4, r20
	ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.minute_index[0]],col,row);
    1544:	c2 e0       	ldi	r28, 0x02	; 2
    1546:	df e0       	ldi	r29, 0x0F	; 15
    1548:	ea 81       	ldd	r30, Y+2	; 0x02
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	e3 5c       	subi	r30, 0xC3	; 195
    1556:	f8 4f       	sbci	r31, 0xF8	; 248
    1558:	c0 80       	ld	r12, Z
    155a:	d1 80       	ldd	r13, Z+1	; 0x01
    155c:	e2 80       	ldd	r14, Z+2	; 0x02
    155e:	f3 80       	ldd	r15, Z+3	; 0x03
    1560:	4b 01       	movw	r8, r22
    1562:	5c 01       	movw	r10, r24
    1564:	0a e0       	ldi	r16, 0x0A	; 10
    1566:	2f ef       	ldi	r18, 0xFF	; 255
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	43 e0       	ldi	r20, 0x03	; 3
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	cb 01       	movw	r24, r22
    1574:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,10,numbers_mv[current_time.minute_index[1]],col+width,row);
    1578:	eb 81       	ldd	r30, Y+3	; 0x03
    157a:	a4 0c       	add	r10, r4
    157c:	b5 1c       	adc	r11, r5
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	ee 0f       	add	r30, r30
    1586:	ff 1f       	adc	r31, r31
    1588:	e3 5c       	subi	r30, 0xC3	; 195
    158a:	f8 4f       	sbci	r31, 0xF8	; 248
    158c:	c0 80       	ld	r12, Z
    158e:	d1 80       	ldd	r13, Z+1	; 0x01
    1590:	e2 80       	ldd	r14, Z+2	; 0x02
    1592:	f3 80       	ldd	r15, Z+3	; 0x03
    1594:	2f ef       	ldi	r18, 0xFF	; 255
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	43 e0       	ldi	r20, 0x03	; 3
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	cb 01       	movw	r24, r22
    15a2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	bf 90       	pop	r11
    15b6:	af 90       	pop	r10
    15b8:	9f 90       	pop	r9
    15ba:	8f 90       	pop	r8
    15bc:	7f 90       	pop	r7
    15be:	6f 90       	pop	r6
    15c0:	5f 90       	pop	r5
    15c2:	4f 90       	pop	r4
    15c4:	3f 90       	pop	r3
    15c6:	2f 90       	pop	r2
    15c8:	08 95       	ret

000015ca <ILI9341_check_day_num>:

void ILI9341_check_day_num(uint16_t col, uint16_t row, uint16_t width)
{
    15ca:	2f 92       	push	r2
    15cc:	3f 92       	push	r3
    15ce:	4f 92       	push	r4
    15d0:	5f 92       	push	r5
    15d2:	6f 92       	push	r6
    15d4:	7f 92       	push	r7
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ec 01       	movw	r28, r24
    15ee:	3b 01       	movw	r6, r22
    15f0:	2a 01       	movw	r4, r20
	if(current_time.day_index_num[0] > 0)
    15f2:	80 91 09 0f 	lds	r24, 0x0F09	; 0x800f09 <current_time+0x7>
    15f6:	88 23       	and	r24, r24
    15f8:	09 f4       	brne	.+2      	; 0x15fc <ILI9341_check_day_num+0x32>
    15fa:	4f c0       	rjmp	.+158    	; 0x169a <ILI9341_check_day_num+0xd0>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.day_index_num[0]],col,row);
    15fc:	0f 2e       	mov	r0, r31
    15fe:	f2 e0       	ldi	r31, 0x02	; 2
    1600:	2f 2e       	mov	r2, r31
    1602:	ff e0       	ldi	r31, 0x0F	; 15
    1604:	3f 2e       	mov	r3, r31
    1606:	f0 2d       	mov	r31, r0
    1608:	d1 01       	movw	r26, r2
    160a:	17 96       	adiw	r26, 0x07	; 7
    160c:	ec 91       	ld	r30, X
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	e3 5c       	subi	r30, 0xC3	; 195
    161a:	f8 4f       	sbci	r31, 0xF8	; 248
    161c:	c0 80       	ld	r12, Z
    161e:	d1 80       	ldd	r13, Z+1	; 0x01
    1620:	e2 80       	ldd	r14, Z+2	; 0x02
    1622:	f3 80       	ldd	r15, Z+3	; 0x03
    1624:	4b 01       	movw	r8, r22
    1626:	5e 01       	movw	r10, r28
    1628:	05 e0       	ldi	r16, 0x05	; 5
    162a:	2f ef       	ldi	r18, 0xFF	; 255
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	43 e0       	ldi	r20, 0x03	; 3
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	cb 01       	movw	r24, r22
    1638:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.day_index_num[1]],col+width,row);
    163c:	c4 0d       	add	r28, r4
    163e:	d5 1d       	adc	r29, r5
    1640:	d1 01       	movw	r26, r2
    1642:	18 96       	adiw	r26, 0x08	; 8
    1644:	ec 91       	ld	r30, X
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	e3 5c       	subi	r30, 0xC3	; 195
    1652:	f8 4f       	sbci	r31, 0xF8	; 248
    1654:	c0 80       	ld	r12, Z
    1656:	d1 80       	ldd	r13, Z+1	; 0x01
    1658:	e2 80       	ldd	r14, Z+2	; 0x02
    165a:	f3 80       	ldd	r15, Z+3	; 0x03
    165c:	5e 01       	movw	r10, r28
    165e:	2f ef       	ldi	r18, 0xFF	; 255
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	43 e0       	ldi	r20, 0x03	; 3
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	cb 01       	movw	r24, r22
    166c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_mv,col+width+width,row);
    1670:	62 01       	movw	r12, r4
    1672:	cc 0e       	add	r12, r28
    1674:	dd 1e       	adc	r13, r29
    1676:	53 01       	movw	r10, r6
    1678:	0f 2e       	mov	r0, r31
    167a:	fd ed       	ldi	r31, 0xDD	; 221
    167c:	ef 2e       	mov	r14, r31
    167e:	f4 e0       	ldi	r31, 0x04	; 4
    1680:	ff 2e       	mov	r15, r31
    1682:	f0 2d       	mov	r31, r0
    1684:	02 e0       	ldi	r16, 0x02	; 2
    1686:	2f ef       	ldi	r18, 0xFF	; 255
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	43 e0       	ldi	r20, 0x03	; 3
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	cb 01       	movw	r24, r22
    1694:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
    1698:	40 c0       	rjmp	.+128    	; 0x171a <ILI9341_check_day_num+0x150>
	}
	else if(current_time.day_index_num[0] == 0)
    169a:	80 91 09 0f 	lds	r24, 0x0F09	; 0x800f09 <current_time+0x7>
    169e:	81 11       	cpse	r24, r1
    16a0:	3c c0       	rjmp	.+120    	; 0x171a <ILI9341_check_day_num+0x150>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,5,0x00,col,row);
    16a2:	4b 01       	movw	r8, r22
    16a4:	5e 01       	movw	r10, r28
    16a6:	c1 2c       	mov	r12, r1
    16a8:	d1 2c       	mov	r13, r1
    16aa:	76 01       	movw	r14, r12
    16ac:	05 e0       	ldi	r16, 0x05	; 5
    16ae:	2f ef       	ldi	r18, 0xFF	; 255
    16b0:	3f ef       	ldi	r19, 0xFF	; 255
    16b2:	43 e0       	ldi	r20, 0x03	; 3
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	cb 01       	movw	r24, r22
    16bc:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.day_index_num[1]],col+width,row);
    16c0:	c4 0d       	add	r28, r4
    16c2:	d5 1d       	adc	r29, r5
    16c4:	e0 91 0a 0f 	lds	r30, 0x0F0A	; 0x800f0a <current_time+0x8>
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	ee 0f       	add	r30, r30
    16cc:	ff 1f       	adc	r31, r31
    16ce:	ee 0f       	add	r30, r30
    16d0:	ff 1f       	adc	r31, r31
    16d2:	e3 5c       	subi	r30, 0xC3	; 195
    16d4:	f8 4f       	sbci	r31, 0xF8	; 248
    16d6:	c0 80       	ld	r12, Z
    16d8:	d1 80       	ldd	r13, Z+1	; 0x01
    16da:	e2 80       	ldd	r14, Z+2	; 0x02
    16dc:	f3 80       	ldd	r15, Z+3	; 0x03
    16de:	5e 01       	movw	r10, r28
    16e0:	2f ef       	ldi	r18, 0xFF	; 255
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	43 e0       	ldi	r20, 0x03	; 3
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	cb 01       	movw	r24, r22
    16ee:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_day_mv,col+width+width,row);
    16f2:	62 01       	movw	r12, r4
    16f4:	cc 0e       	add	r12, r28
    16f6:	dd 1e       	adc	r13, r29
    16f8:	53 01       	movw	r10, r6
    16fa:	0f 2e       	mov	r0, r31
    16fc:	fd ed       	ldi	r31, 0xDD	; 221
    16fe:	ef 2e       	mov	r14, r31
    1700:	f4 e0       	ldi	r31, 0x04	; 4
    1702:	ff 2e       	mov	r15, r31
    1704:	f0 2d       	mov	r31, r0
    1706:	02 e0       	ldi	r16, 0x02	; 2
    1708:	2f ef       	ldi	r18, 0xFF	; 255
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	43 e0       	ldi	r20, 0x03	; 3
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	cb 01       	movw	r24, r22
    1716:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
	}
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	7f 90       	pop	r7
    1732:	6f 90       	pop	r6
    1734:	5f 90       	pop	r5
    1736:	4f 90       	pop	r4
    1738:	3f 90       	pop	r3
    173a:	2f 90       	pop	r2
    173c:	08 95       	ret

0000173e <ILI9341_check_date>:
void ILI9341_check_date(uint16_t col, uint16_t row, uint16_t width)
{
    173e:	6f 92       	push	r6
    1740:	7f 92       	push	r7
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
    175a:	3a 01       	movw	r6, r20
	if(current_time.day_index == 5)
    175c:	80 91 08 0f 	lds	r24, 0x0F08	; 0x800f08 <current_time+0x6>
    1760:	85 30       	cpi	r24, 0x05	; 5
    1762:	d1 f5       	brne	.+116    	; 0x17d8 <ILI9341_check_date+0x9a>
	{
		ILI9341_write_char_15x15(BLACK,BLUE,2,kor_date_mv[current_time.day_index],col,row);
    1764:	e0 91 08 0f 	lds	r30, 0x0F08	; 0x800f08 <current_time+0x6>
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	e9 57       	subi	r30, 0x79	; 121
    1770:	fb 4f       	sbci	r31, 0xFB	; 251
    1772:	e0 80       	ld	r14, Z
    1774:	f1 80       	ldd	r15, Z+1	; 0x01
    1776:	5b 01       	movw	r10, r22
    1778:	6e 01       	movw	r12, r28
    177a:	02 e0       	ldi	r16, 0x02	; 2
    177c:	2f e3       	ldi	r18, 0x3F	; 63
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	cb 01       	movw	r24, r22
    178a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,BLUE,2,kor_date_1_mv,col+width,row);
    178e:	c6 0d       	add	r28, r6
    1790:	d7 1d       	adc	r29, r7
    1792:	6e 01       	movw	r12, r28
    1794:	0f 2e       	mov	r0, r31
    1796:	f9 eb       	ldi	r31, 0xB9	; 185
    1798:	ef 2e       	mov	r14, r31
    179a:	f4 e0       	ldi	r31, 0x04	; 4
    179c:	ff 2e       	mov	r15, r31
    179e:	f0 2d       	mov	r31, r0
    17a0:	2f e3       	ldi	r18, 0x3F	; 63
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	cb 01       	movw	r24, r22
    17ae:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,BLUE,2,kor_date_2_mv,col+width+width,row);
    17b2:	63 01       	movw	r12, r6
    17b4:	cc 0e       	add	r12, r28
    17b6:	dd 1e       	adc	r13, r29
    17b8:	0f 2e       	mov	r0, r31
    17ba:	f5 e9       	ldi	r31, 0x95	; 149
    17bc:	ef 2e       	mov	r14, r31
    17be:	f4 e0       	ldi	r31, 0x04	; 4
    17c0:	ff 2e       	mov	r15, r31
    17c2:	f0 2d       	mov	r31, r0
    17c4:	2f e3       	ldi	r18, 0x3F	; 63
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	cb 01       	movw	r24, r22
    17d2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
    17d6:	77 c0       	rjmp	.+238    	; 0x18c6 <ILI9341_check_date+0x188>
	}
	else if(current_time.day_index == 6)
    17d8:	80 91 08 0f 	lds	r24, 0x0F08	; 0x800f08 <current_time+0x6>
    17dc:	86 30       	cpi	r24, 0x06	; 6
    17de:	d1 f5       	brne	.+116    	; 0x1854 <ILI9341_check_date+0x116>
	{
		ILI9341_write_char_15x15(BLACK,RED,2,kor_date_mv[current_time.day_index],col,row);
    17e0:	e0 91 08 0f 	lds	r30, 0x0F08	; 0x800f08 <current_time+0x6>
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	e9 57       	subi	r30, 0x79	; 121
    17ec:	fb 4f       	sbci	r31, 0xFB	; 251
    17ee:	e0 80       	ld	r14, Z
    17f0:	f1 80       	ldd	r15, Z+1	; 0x01
    17f2:	5b 01       	movw	r10, r22
    17f4:	6e 01       	movw	r12, r28
    17f6:	02 e0       	ldi	r16, 0x02	; 2
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 ef       	ldi	r19, 0xF0	; 240
    17fc:	43 e0       	ldi	r20, 0x03	; 3
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	cb 01       	movw	r24, r22
    1806:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,RED,2,kor_date_1_mv,col+width,row);
    180a:	c6 0d       	add	r28, r6
    180c:	d7 1d       	adc	r29, r7
    180e:	6e 01       	movw	r12, r28
    1810:	0f 2e       	mov	r0, r31
    1812:	f9 eb       	ldi	r31, 0xB9	; 185
    1814:	ef 2e       	mov	r14, r31
    1816:	f4 e0       	ldi	r31, 0x04	; 4
    1818:	ff 2e       	mov	r15, r31
    181a:	f0 2d       	mov	r31, r0
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 ef       	ldi	r19, 0xF0	; 240
    1820:	43 e0       	ldi	r20, 0x03	; 3
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	cb 01       	movw	r24, r22
    182a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,RED,2,kor_date_2_mv,col+width+width,row);
    182e:	63 01       	movw	r12, r6
    1830:	cc 0e       	add	r12, r28
    1832:	dd 1e       	adc	r13, r29
    1834:	0f 2e       	mov	r0, r31
    1836:	f5 e9       	ldi	r31, 0x95	; 149
    1838:	ef 2e       	mov	r14, r31
    183a:	f4 e0       	ldi	r31, 0x04	; 4
    183c:	ff 2e       	mov	r15, r31
    183e:	f0 2d       	mov	r31, r0
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 ef       	ldi	r19, 0xF0	; 240
    1844:	43 e0       	ldi	r20, 0x03	; 3
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	cb 01       	movw	r24, r22
    184e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
    1852:	39 c0       	rjmp	.+114    	; 0x18c6 <ILI9341_check_date+0x188>
	}
	else
	{
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_mv[current_time.day_index],col,row);
    1854:	e0 91 08 0f 	lds	r30, 0x0F08	; 0x800f08 <current_time+0x6>
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	e9 57       	subi	r30, 0x79	; 121
    1860:	fb 4f       	sbci	r31, 0xFB	; 251
    1862:	e0 80       	ld	r14, Z
    1864:	f1 80       	ldd	r15, Z+1	; 0x01
    1866:	5b 01       	movw	r10, r22
    1868:	6e 01       	movw	r12, r28
    186a:	02 e0       	ldi	r16, 0x02	; 2
    186c:	20 ec       	ldi	r18, 0xC0	; 192
    186e:	3f e0       	ldi	r19, 0x0F	; 15
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	cb 01       	movw	r24, r22
    187a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_1_mv,col+width,row);
    187e:	c6 0d       	add	r28, r6
    1880:	d7 1d       	adc	r29, r7
    1882:	6e 01       	movw	r12, r28
    1884:	0f 2e       	mov	r0, r31
    1886:	f9 eb       	ldi	r31, 0xB9	; 185
    1888:	ef 2e       	mov	r14, r31
    188a:	f4 e0       	ldi	r31, 0x04	; 4
    188c:	ff 2e       	mov	r15, r31
    188e:	f0 2d       	mov	r31, r0
    1890:	20 ec       	ldi	r18, 0xC0	; 192
    1892:	3f e0       	ldi	r19, 0x0F	; 15
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	cb 01       	movw	r24, r22
    189e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,GREEN,2,kor_date_2_mv,col+width+width,row);
    18a2:	63 01       	movw	r12, r6
    18a4:	cc 0e       	add	r12, r28
    18a6:	dd 1e       	adc	r13, r29
    18a8:	0f 2e       	mov	r0, r31
    18aa:	f5 e9       	ldi	r31, 0x95	; 149
    18ac:	ef 2e       	mov	r14, r31
    18ae:	f4 e0       	ldi	r31, 0x04	; 4
    18b0:	ff 2e       	mov	r15, r31
    18b2:	f0 2d       	mov	r31, r0
    18b4:	20 ec       	ldi	r18, 0xC0	; 192
    18b6:	3f e0       	ldi	r19, 0x0F	; 15
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	cb 01       	movw	r24, r22
    18c2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
	}	
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	9f 90       	pop	r9
    18da:	8f 90       	pop	r8
    18dc:	7f 90       	pop	r7
    18de:	6f 90       	pop	r6
    18e0:	08 95       	ret

000018e2 <ILI9341_check_month>:

void ILI9341_check_month(uint16_t col, uint16_t row, uint16_t width)
{
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	ec 01       	movw	r28, r24
    1908:	3b 01       	movw	r6, r22
    190a:	2a 01       	movw	r4, r20
	if(current_time.month_index < 10)
    190c:	80 91 0b 0f 	lds	r24, 0x0F0B	; 0x800f0b <current_time+0x9>
    1910:	8a 30       	cpi	r24, 0x0A	; 10
    1912:	f0 f5       	brcc	.+124    	; 0x1990 <ILI9341_check_month+0xae>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,5,0x00,col,row);
    1914:	4b 01       	movw	r8, r22
    1916:	5e 01       	movw	r10, r28
    1918:	c1 2c       	mov	r12, r1
    191a:	d1 2c       	mov	r13, r1
    191c:	76 01       	movw	r14, r12
    191e:	05 e0       	ldi	r16, 0x05	; 5
    1920:	2f ef       	ldi	r18, 0xFF	; 255
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	43 e0       	ldi	r20, 0x03	; 3
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	cb 01       	movw	r24, r22
    192e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.month_index + 1],col+width,row);
    1932:	c4 0d       	add	r28, r4
    1934:	d5 1d       	adc	r29, r5
    1936:	e0 91 0b 0f 	lds	r30, 0x0F0B	; 0x800f0b <current_time+0x9>
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	31 96       	adiw	r30, 0x01	; 1
    193e:	ee 0f       	add	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	e3 5c       	subi	r30, 0xC3	; 195
    1948:	f8 4f       	sbci	r31, 0xF8	; 248
    194a:	c0 80       	ld	r12, Z
    194c:	d1 80       	ldd	r13, Z+1	; 0x01
    194e:	e2 80       	ldd	r14, Z+2	; 0x02
    1950:	f3 80       	ldd	r15, Z+3	; 0x03
    1952:	5e 01       	movw	r10, r28
    1954:	2f ef       	ldi	r18, 0xFF	; 255
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	43 e0       	ldi	r20, 0x03	; 3
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	cb 01       	movw	r24, r22
    1962:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_month_mv,col+width+width,row);
    1966:	62 01       	movw	r12, r4
    1968:	cc 0e       	add	r12, r28
    196a:	dd 1e       	adc	r13, r29
    196c:	53 01       	movw	r10, r6
    196e:	0f 2e       	mov	r0, r31
    1970:	f1 e0       	ldi	r31, 0x01	; 1
    1972:	ef 2e       	mov	r14, r31
    1974:	f5 e0       	ldi	r31, 0x05	; 5
    1976:	ff 2e       	mov	r15, r31
    1978:	f0 2d       	mov	r31, r0
    197a:	02 e0       	ldi	r16, 0x02	; 2
    197c:	2f ef       	ldi	r18, 0xFF	; 255
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	43 e0       	ldi	r20, 0x03	; 3
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	cb 01       	movw	r24, r22
    198a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
    198e:	68 c0       	rjmp	.+208    	; 0x1a60 <ILI9341_check_month+0x17e>
	}
	else if(current_time.month_index >= 10)
    1990:	80 91 0b 0f 	lds	r24, 0x0F0B	; 0x800f0b <current_time+0x9>
    1994:	8a 30       	cpi	r24, 0x0A	; 10
    1996:	08 f4       	brcc	.+2      	; 0x199a <ILI9341_check_month+0xb8>
    1998:	63 c0       	rjmp	.+198    	; 0x1a60 <ILI9341_check_month+0x17e>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[(current_time.month_index / 10) + 1],col,row);
    199a:	0f 2e       	mov	r0, r31
    199c:	f2 e0       	ldi	r31, 0x02	; 2
    199e:	2f 2e       	mov	r2, r31
    19a0:	ff e0       	ldi	r31, 0x0F	; 15
    19a2:	3f 2e       	mov	r3, r31
    19a4:	f0 2d       	mov	r31, r0
    19a6:	d1 01       	movw	r26, r2
    19a8:	19 96       	adiw	r26, 0x09	; 9
    19aa:	ec 91       	ld	r30, X
    19ac:	1d ec       	ldi	r17, 0xCD	; 205
    19ae:	e1 9f       	mul	r30, r17
    19b0:	e1 2d       	mov	r30, r1
    19b2:	11 24       	eor	r1, r1
    19b4:	e6 95       	lsr	r30
    19b6:	e6 95       	lsr	r30
    19b8:	e6 95       	lsr	r30
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	31 96       	adiw	r30, 0x01	; 1
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	ee 0f       	add	r30, r30
    19c4:	ff 1f       	adc	r31, r31
    19c6:	e3 5c       	subi	r30, 0xC3	; 195
    19c8:	f8 4f       	sbci	r31, 0xF8	; 248
    19ca:	c0 80       	ld	r12, Z
    19cc:	d1 80       	ldd	r13, Z+1	; 0x01
    19ce:	e2 80       	ldd	r14, Z+2	; 0x02
    19d0:	f3 80       	ldd	r15, Z+3	; 0x03
    19d2:	4b 01       	movw	r8, r22
    19d4:	5e 01       	movw	r10, r28
    19d6:	05 e0       	ldi	r16, 0x05	; 5
    19d8:	2f ef       	ldi	r18, 0xFF	; 255
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	43 e0       	ldi	r20, 0x03	; 3
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	cb 01       	movw	r24, r22
    19e6:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[(current_time.month_index % 10) + 1],col+width,row);
    19ea:	c4 0d       	add	r28, r4
    19ec:	d5 1d       	adc	r29, r5
    19ee:	d1 01       	movw	r26, r2
    19f0:	19 96       	adiw	r26, 0x09	; 9
    19f2:	ec 91       	ld	r30, X
    19f4:	e1 9f       	mul	r30, r17
    19f6:	11 2d       	mov	r17, r1
    19f8:	11 24       	eor	r1, r1
    19fa:	16 95       	lsr	r17
    19fc:	16 95       	lsr	r17
    19fe:	16 95       	lsr	r17
    1a00:	11 0f       	add	r17, r17
    1a02:	81 2f       	mov	r24, r17
    1a04:	88 0f       	add	r24, r24
    1a06:	88 0f       	add	r24, r24
    1a08:	18 0f       	add	r17, r24
    1a0a:	e1 1b       	sub	r30, r17
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	31 96       	adiw	r30, 0x01	; 1
    1a10:	ee 0f       	add	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	ee 0f       	add	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	e3 5c       	subi	r30, 0xC3	; 195
    1a1a:	f8 4f       	sbci	r31, 0xF8	; 248
    1a1c:	c0 80       	ld	r12, Z
    1a1e:	d1 80       	ldd	r13, Z+1	; 0x01
    1a20:	e2 80       	ldd	r14, Z+2	; 0x02
    1a22:	f3 80       	ldd	r15, Z+3	; 0x03
    1a24:	5e 01       	movw	r10, r28
    1a26:	2f ef       	ldi	r18, 0xFF	; 255
    1a28:	3f ef       	ldi	r19, 0xFF	; 255
    1a2a:	43 e0       	ldi	r20, 0x03	; 3
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	cb 01       	movw	r24, r22
    1a34:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,2,kor_month_mv,col+width+width,row);
    1a38:	62 01       	movw	r12, r4
    1a3a:	cc 0e       	add	r12, r28
    1a3c:	dd 1e       	adc	r13, r29
    1a3e:	53 01       	movw	r10, r6
    1a40:	0f 2e       	mov	r0, r31
    1a42:	f1 e0       	ldi	r31, 0x01	; 1
    1a44:	ef 2e       	mov	r14, r31
    1a46:	f5 e0       	ldi	r31, 0x05	; 5
    1a48:	ff 2e       	mov	r15, r31
    1a4a:	f0 2d       	mov	r31, r0
    1a4c:	02 e0       	ldi	r16, 0x02	; 2
    1a4e:	2f ef       	ldi	r18, 0xFF	; 255
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	43 e0       	ldi	r20, 0x03	; 3
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
	}
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	1f 91       	pop	r17
    1a66:	0f 91       	pop	r16
    1a68:	ff 90       	pop	r15
    1a6a:	ef 90       	pop	r14
    1a6c:	df 90       	pop	r13
    1a6e:	cf 90       	pop	r12
    1a70:	bf 90       	pop	r11
    1a72:	af 90       	pop	r10
    1a74:	9f 90       	pop	r9
    1a76:	8f 90       	pop	r8
    1a78:	7f 90       	pop	r7
    1a7a:	6f 90       	pop	r6
    1a7c:	5f 90       	pop	r5
    1a7e:	4f 90       	pop	r4
    1a80:	3f 90       	pop	r3
    1a82:	2f 90       	pop	r2
    1a84:	08 95       	ret

00001a86 <ILI9341_check_year>:
void ILI9341_check_year(uint16_t col, uint16_t row, uint16_t width)
{
    1a86:	2f 92       	push	r2
    1a88:	3f 92       	push	r3
    1a8a:	4f 92       	push	r4
    1a8c:	5f 92       	push	r5
    1a8e:	6f 92       	push	r6
    1a90:	7f 92       	push	r7
    1a92:	8f 92       	push	r8
    1a94:	9f 92       	push	r9
    1a96:	af 92       	push	r10
    1a98:	bf 92       	push	r11
    1a9a:	cf 92       	push	r12
    1a9c:	df 92       	push	r13
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	2c 01       	movw	r4, r24
    1aaa:	1b 01       	movw	r2, r22
    1aac:	ea 01       	movw	r28, r20
	ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.year_index[0]],col,row);
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	f2 e0       	ldi	r31, 0x02	; 2
    1ab2:	6f 2e       	mov	r6, r31
    1ab4:	ff e0       	ldi	r31, 0x0F	; 15
    1ab6:	7f 2e       	mov	r7, r31
    1ab8:	f0 2d       	mov	r31, r0
    1aba:	d3 01       	movw	r26, r6
    1abc:	1a 96       	adiw	r26, 0x0a	; 10
    1abe:	ec 91       	ld	r30, X
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	ee 0f       	add	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	ee 0f       	add	r30, r30
    1ac8:	ff 1f       	adc	r31, r31
    1aca:	e3 5c       	subi	r30, 0xC3	; 195
    1acc:	f8 4f       	sbci	r31, 0xF8	; 248
    1ace:	c0 80       	ld	r12, Z
    1ad0:	d1 80       	ldd	r13, Z+1	; 0x01
    1ad2:	e2 80       	ldd	r14, Z+2	; 0x02
    1ad4:	f3 80       	ldd	r15, Z+3	; 0x03
    1ad6:	4b 01       	movw	r8, r22
    1ad8:	5c 01       	movw	r10, r24
    1ada:	05 e0       	ldi	r16, 0x05	; 5
    1adc:	2f ef       	ldi	r18, 0xFF	; 255
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	43 e0       	ldi	r20, 0x03	; 3
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	cb 01       	movw	r24, r22
    1aea:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.year_index[1]],col+width,row);
    1aee:	4c 0e       	add	r4, r28
    1af0:	5d 1e       	adc	r5, r29
    1af2:	d3 01       	movw	r26, r6
    1af4:	1b 96       	adiw	r26, 0x0b	; 11
    1af6:	ec 91       	ld	r30, X
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	e3 5c       	subi	r30, 0xC3	; 195
    1b04:	f8 4f       	sbci	r31, 0xF8	; 248
    1b06:	c0 80       	ld	r12, Z
    1b08:	d1 80       	ldd	r13, Z+1	; 0x01
    1b0a:	e2 80       	ldd	r14, Z+2	; 0x02
    1b0c:	f3 80       	ldd	r15, Z+3	; 0x03
    1b0e:	52 01       	movw	r10, r4
    1b10:	2f ef       	ldi	r18, 0xFF	; 255
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	43 e0       	ldi	r20, 0x03	; 3
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.year_index[2]],col+width+width,row);
    1b22:	4c 0e       	add	r4, r28
    1b24:	5d 1e       	adc	r5, r29
    1b26:	d3 01       	movw	r26, r6
    1b28:	1c 96       	adiw	r26, 0x0c	; 12
    1b2a:	ec 91       	ld	r30, X
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	e3 5c       	subi	r30, 0xC3	; 195
    1b38:	f8 4f       	sbci	r31, 0xF8	; 248
    1b3a:	c0 80       	ld	r12, Z
    1b3c:	d1 80       	ldd	r13, Z+1	; 0x01
    1b3e:	e2 80       	ldd	r14, Z+2	; 0x02
    1b40:	f3 80       	ldd	r15, Z+3	; 0x03
    1b42:	52 01       	movw	r10, r4
    1b44:	2f ef       	ldi	r18, 0xFF	; 255
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	43 e0       	ldi	r20, 0x03	; 3
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	cb 01       	movw	r24, r22
    1b52:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,numbers_mv[current_time.year_index[3]],col+width+width+width,row);
    1b56:	4c 0e       	add	r4, r28
    1b58:	5d 1e       	adc	r5, r29
    1b5a:	d3 01       	movw	r26, r6
    1b5c:	1d 96       	adiw	r26, 0x0d	; 13
    1b5e:	ec 91       	ld	r30, X
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	ee 0f       	add	r30, r30
    1b64:	ff 1f       	adc	r31, r31
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	e3 5c       	subi	r30, 0xC3	; 195
    1b6c:	f8 4f       	sbci	r31, 0xF8	; 248
    1b6e:	c0 80       	ld	r12, Z
    1b70:	d1 80       	ldd	r13, Z+1	; 0x01
    1b72:	e2 80       	ldd	r14, Z+2	; 0x02
    1b74:	f3 80       	ldd	r15, Z+3	; 0x03
    1b76:	52 01       	movw	r10, r4
    1b78:	2f ef       	ldi	r18, 0xFF	; 255
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    1b7c:	43 e0       	ldi	r20, 0x03	; 3
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	cb 01       	movw	r24, r22
    1b86:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_15x15(BLACK,WHITE,2,kor_year_mv,col+width+width+width+width,row);
    1b8a:	6e 01       	movw	r12, r28
    1b8c:	c4 0c       	add	r12, r4
    1b8e:	d5 1c       	adc	r13, r5
    1b90:	51 01       	movw	r10, r2
    1b92:	0f 2e       	mov	r0, r31
    1b94:	f5 e2       	ldi	r31, 0x25	; 37
    1b96:	ef 2e       	mov	r14, r31
    1b98:	f5 e0       	ldi	r31, 0x05	; 5
    1b9a:	ff 2e       	mov	r15, r31
    1b9c:	f0 2d       	mov	r31, r0
    1b9e:	02 e0       	ldi	r16, 0x02	; 2
    1ba0:	2f ef       	ldi	r18, 0xFF	; 255
    1ba2:	3f ef       	ldi	r19, 0xFF	; 255
    1ba4:	43 e0       	ldi	r20, 0x03	; 3
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	cb 01       	movw	r24, r22
    1bae:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
}
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	bf 90       	pop	r11
    1bc2:	af 90       	pop	r10
    1bc4:	9f 90       	pop	r9
    1bc6:	8f 90       	pop	r8
    1bc8:	7f 90       	pop	r7
    1bca:	6f 90       	pop	r6
    1bcc:	5f 90       	pop	r5
    1bce:	4f 90       	pop	r4
    1bd0:	3f 90       	pop	r3
    1bd2:	2f 90       	pop	r2
    1bd4:	08 95       	ret

00001bd6 <ILI9341_LCD_input_data_time>:

void ILI9341_LCD_input_data_time()
{
    1bd6:	8f 92       	push	r8
    1bd8:	9f 92       	push	r9
    1bda:	af 92       	push	r10
    1bdc:	bf 92       	push	r11
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
	ILI9341_check_0h_11h_or_12h_23h(250,15,30);
    1be8:	4e e1       	ldi	r20, 0x1E	; 30
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	6f e0       	ldi	r22, 0x0F	; 15
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	8a ef       	ldi	r24, 0xFA	; 250
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	ef da       	rcall	.-2594   	; 0x11d4 <ILI9341_check_0h_11h_or_12h_23h>
	ILI9341_check_hour(30,60,60);
    1bf6:	4c e3       	ldi	r20, 0x3C	; 60
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	6c e3       	ldi	r22, 0x3C	; 60
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	8e e1       	ldi	r24, 0x1E	; 30
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	54 db       	rcall	.-2392   	; 0x12ac <ILI9341_check_hour>
	ILI9341_write_char_5x5(BLACK,WHITE,10,colon_mv,140,60);
    1c04:	c0 90 65 07 	lds	r12, 0x0765	; 0x800765 <colon_mv>
    1c08:	d0 90 66 07 	lds	r13, 0x0766	; 0x800766 <colon_mv+0x1>
    1c0c:	e0 90 67 07 	lds	r14, 0x0767	; 0x800767 <colon_mv+0x2>
    1c10:	f0 90 68 07 	lds	r15, 0x0768	; 0x800768 <colon_mv+0x3>
    1c14:	0f 2e       	mov	r0, r31
    1c16:	fc e3       	ldi	r31, 0x3C	; 60
    1c18:	8f 2e       	mov	r8, r31
    1c1a:	91 2c       	mov	r9, r1
    1c1c:	f0 2d       	mov	r31, r0
    1c1e:	0f 2e       	mov	r0, r31
    1c20:	fc e8       	ldi	r31, 0x8C	; 140
    1c22:	af 2e       	mov	r10, r31
    1c24:	b1 2c       	mov	r11, r1
    1c26:	f0 2d       	mov	r31, r0
    1c28:	0a e0       	ldi	r16, 0x0A	; 10
    1c2a:	2f ef       	ldi	r18, 0xFF	; 255
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	43 e0       	ldi	r20, 0x03	; 3
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	cb 01       	movw	r24, r22
    1c38:	0e 94 ed 16 	call	0x2dda	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_check_minutes(190,60,60);
    1c3c:	4c e3       	ldi	r20, 0x3C	; 60
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	6c e3       	ldi	r22, 0x3C	; 60
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	8e eb       	ldi	r24, 0xBE	; 190
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	6b dc       	rcall	.-1834   	; 0x1520 <ILI9341_check_minutes>
	ILI9341_check_year(160,150,30);
    1c4a:	4e e1       	ldi	r20, 0x1E	; 30
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	66 e9       	ldi	r22, 0x96	; 150
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	80 ea       	ldi	r24, 0xA0	; 160
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	17 df       	rcall	.-466    	; 0x1a86 <ILI9341_check_year>
	ILI9341_check_month(20,200,30);
    1c58:	4e e1       	ldi	r20, 0x1E	; 30
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	68 ec       	ldi	r22, 0xC8	; 200
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	84 e1       	ldi	r24, 0x14	; 20
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	3e de       	rcall	.-900    	; 0x18e2 <ILI9341_check_month>
	ILI9341_check_day_num(120,200,30);
    1c66:	4e e1       	ldi	r20, 0x1E	; 30
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	68 ec       	ldi	r22, 0xC8	; 200
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	88 e7       	ldi	r24, 0x78	; 120
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	ab dc       	rcall	.-1706   	; 0x15ca <ILI9341_check_day_num>
	ILI9341_check_date(220,200,30);
    1c74:	4e e1       	ldi	r20, 0x1E	; 30
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	68 ec       	ldi	r22, 0xC8	; 200
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	8c ed       	ldi	r24, 0xDC	; 220
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	5e dd       	rcall	.-1348   	; 0x173e <ILI9341_check_date>
}
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	df 90       	pop	r13
    1c8a:	cf 90       	pop	r12
    1c8c:	bf 90       	pop	r11
    1c8e:	af 90       	pop	r10
    1c90:	9f 90       	pop	r9
    1c92:	8f 90       	pop	r8
    1c94:	08 95       	ret

00001c96 <ILI9341_LCD_input_data_temperature_humidity>:



void ILI9341_LCD_input_data_temperature_humidity()
{
    1c96:	7f 92       	push	r7
    1c98:	8f 92       	push	r8
    1c9a:	9f 92       	push	r9
    1c9c:	af 92       	push	r10
    1c9e:	bf 92       	push	r11
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
	if(temperature < 100 && humidity < 100)
    1cb0:	80 91 d5 0b 	lds	r24, 0x0BD5	; 0x800bd5 <temperature>
    1cb4:	90 91 d6 0b 	lds	r25, 0x0BD6	; 0x800bd6 <temperature+0x1>
    1cb8:	a0 91 d7 0b 	lds	r26, 0x0BD7	; 0x800bd7 <temperature+0x2>
    1cbc:	b0 91 d8 0b 	lds	r27, 0x0BD8	; 0x800bd8 <temperature+0x3>
    1cc0:	84 36       	cpi	r24, 0x64	; 100
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	a1 05       	cpc	r26, r1
    1cc6:	b1 05       	cpc	r27, r1
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <ILI9341_LCD_input_data_temperature_humidity+0x36>
    1cca:	71 c1       	rjmp	.+738    	; 0x1fae <ILI9341_LCD_input_data_temperature_humidity+0x318>
    1ccc:	80 91 d1 0b 	lds	r24, 0x0BD1	; 0x800bd1 <humidity>
    1cd0:	90 91 d2 0b 	lds	r25, 0x0BD2	; 0x800bd2 <humidity+0x1>
    1cd4:	a0 91 d3 0b 	lds	r26, 0x0BD3	; 0x800bd3 <humidity+0x2>
    1cd8:	b0 91 d4 0b 	lds	r27, 0x0BD4	; 0x800bd4 <humidity+0x3>
    1cdc:	84 36       	cpi	r24, 0x64	; 100
    1cde:	91 05       	cpc	r25, r1
    1ce0:	a1 05       	cpc	r26, r1
    1ce2:	b1 05       	cpc	r27, r1
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <ILI9341_LCD_input_data_temperature_humidity+0x52>
    1ce6:	63 c1       	rjmp	.+710    	; 0x1fae <ILI9341_LCD_input_data_temperature_humidity+0x318>
	{
		uint8_t temp_index[2];
		temp_index[0] = temperature / 10;
    1ce8:	60 91 d5 0b 	lds	r22, 0x0BD5	; 0x800bd5 <temperature>
    1cec:	70 91 d6 0b 	lds	r23, 0x0BD6	; 0x800bd6 <temperature+0x1>
    1cf0:	80 91 d7 0b 	lds	r24, 0x0BD7	; 0x800bd7 <temperature+0x2>
    1cf4:	90 91 d8 0b 	lds	r25, 0x0BD8	; 0x800bd8 <temperature+0x3>
    1cf8:	0f 2e       	mov	r0, r31
    1cfa:	fa e0       	ldi	r31, 0x0A	; 10
    1cfc:	cf 2e       	mov	r12, r31
    1cfe:	d1 2c       	mov	r13, r1
    1d00:	e1 2c       	mov	r14, r1
    1d02:	f1 2c       	mov	r15, r1
    1d04:	f0 2d       	mov	r31, r0
    1d06:	a7 01       	movw	r20, r14
    1d08:	96 01       	movw	r18, r12
    1d0a:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    1d0e:	72 2e       	mov	r7, r18
		temp_index[1] = temperature % 10;
    1d10:	60 91 d5 0b 	lds	r22, 0x0BD5	; 0x800bd5 <temperature>
    1d14:	70 91 d6 0b 	lds	r23, 0x0BD6	; 0x800bd6 <temperature+0x1>
    1d18:	80 91 d7 0b 	lds	r24, 0x0BD7	; 0x800bd7 <temperature+0x2>
    1d1c:	90 91 d8 0b 	lds	r25, 0x0BD8	; 0x800bd8 <temperature+0x3>
    1d20:	a7 01       	movw	r20, r14
    1d22:	96 01       	movw	r18, r12
    1d24:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    1d28:	16 2f       	mov	r17, r22
		uint8_t humi_index[2];
		humi_index[0] = humidity / 10;
    1d2a:	60 91 d1 0b 	lds	r22, 0x0BD1	; 0x800bd1 <humidity>
    1d2e:	70 91 d2 0b 	lds	r23, 0x0BD2	; 0x800bd2 <humidity+0x1>
    1d32:	80 91 d3 0b 	lds	r24, 0x0BD3	; 0x800bd3 <humidity+0x2>
    1d36:	90 91 d4 0b 	lds	r25, 0x0BD4	; 0x800bd4 <humidity+0x3>
    1d3a:	a7 01       	movw	r20, r14
    1d3c:	96 01       	movw	r18, r12
    1d3e:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    1d42:	d2 2f       	mov	r29, r18
		humi_index[1] = humidity % 10;
    1d44:	60 91 d1 0b 	lds	r22, 0x0BD1	; 0x800bd1 <humidity>
    1d48:	70 91 d2 0b 	lds	r23, 0x0BD2	; 0x800bd2 <humidity+0x1>
    1d4c:	80 91 d3 0b 	lds	r24, 0x0BD3	; 0x800bd3 <humidity+0x2>
    1d50:	90 91 d4 0b 	lds	r25, 0x0BD4	; 0x800bd4 <humidity+0x3>
    1d54:	a7 01       	movw	r20, r14
    1d56:	96 01       	movw	r18, r12
    1d58:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    1d5c:	c6 2f       	mov	r28, r22
		ILI9341_write_char_15x15(BLACK,WHITE,3,kor_temperature_1_mv,20,50);
    1d5e:	0f 2e       	mov	r0, r31
    1d60:	f2 e3       	ldi	r31, 0x32	; 50
    1d62:	af 2e       	mov	r10, r31
    1d64:	b1 2c       	mov	r11, r1
    1d66:	f0 2d       	mov	r31, r0
    1d68:	0f 2e       	mov	r0, r31
    1d6a:	f4 e1       	ldi	r31, 0x14	; 20
    1d6c:	cf 2e       	mov	r12, r31
    1d6e:	d1 2c       	mov	r13, r1
    1d70:	f0 2d       	mov	r31, r0
    1d72:	0f 2e       	mov	r0, r31
    1d74:	f3 e4       	ldi	r31, 0x43	; 67
    1d76:	ef 2e       	mov	r14, r31
    1d78:	f3 e0       	ldi	r31, 0x03	; 3
    1d7a:	ff 2e       	mov	r15, r31
    1d7c:	f0 2d       	mov	r31, r0
    1d7e:	03 e0       	ldi	r16, 0x03	; 3
    1d80:	2f ef       	ldi	r18, 0xFF	; 255
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	43 e0       	ldi	r20, 0x03	; 3
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,WHITE,3,kor_temperature_2_mv,60,50);
    1d92:	0f 2e       	mov	r0, r31
    1d94:	fc e3       	ldi	r31, 0x3C	; 60
    1d96:	cf 2e       	mov	r12, r31
    1d98:	d1 2c       	mov	r13, r1
    1d9a:	f0 2d       	mov	r31, r0
    1d9c:	0f 2e       	mov	r0, r31
    1d9e:	ff e1       	ldi	r31, 0x1F	; 31
    1da0:	ef 2e       	mov	r14, r31
    1da2:	f3 e0       	ldi	r31, 0x03	; 3
    1da4:	ff 2e       	mov	r15, r31
    1da6:	f0 2d       	mov	r31, r0
    1da8:	2f ef       	ldi	r18, 0xFF	; 255
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	43 e0       	ldi	r20, 0x03	; 3
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	cb 01       	movw	r24, r22
    1db6:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_5x5(BLACK,WHITE,9,colon_mv,110,50);
    1dba:	c0 90 65 07 	lds	r12, 0x0765	; 0x800765 <colon_mv>
    1dbe:	d0 90 66 07 	lds	r13, 0x0766	; 0x800766 <colon_mv+0x1>
    1dc2:	e0 90 67 07 	lds	r14, 0x0767	; 0x800767 <colon_mv+0x2>
    1dc6:	f0 90 68 07 	lds	r15, 0x0768	; 0x800768 <colon_mv+0x3>
    1dca:	0f 2e       	mov	r0, r31
    1dcc:	f2 e3       	ldi	r31, 0x32	; 50
    1dce:	8f 2e       	mov	r8, r31
    1dd0:	91 2c       	mov	r9, r1
    1dd2:	f0 2d       	mov	r31, r0
    1dd4:	0f 2e       	mov	r0, r31
    1dd6:	fe e6       	ldi	r31, 0x6E	; 110
    1dd8:	af 2e       	mov	r10, r31
    1dda:	b1 2c       	mov	r11, r1
    1ddc:	f0 2d       	mov	r31, r0
    1dde:	09 e0       	ldi	r16, 0x09	; 9
    1de0:	2f ef       	ldi	r18, 0xFF	; 255
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	43 e0       	ldi	r20, 0x03	; 3
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	cb 01       	movw	r24, r22
    1dee:	f5 d7       	rcall	.+4074   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,9,numbers_mv[temp_index[0]],160,50);
    1df0:	e7 2d       	mov	r30, r7
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	e3 5c       	subi	r30, 0xC3	; 195
    1dfe:	f8 4f       	sbci	r31, 0xF8	; 248
    1e00:	c0 80       	ld	r12, Z
    1e02:	d1 80       	ldd	r13, Z+1	; 0x01
    1e04:	e2 80       	ldd	r14, Z+2	; 0x02
    1e06:	f3 80       	ldd	r15, Z+3	; 0x03
    1e08:	0f 2e       	mov	r0, r31
    1e0a:	f0 ea       	ldi	r31, 0xA0	; 160
    1e0c:	af 2e       	mov	r10, r31
    1e0e:	b1 2c       	mov	r11, r1
    1e10:	f0 2d       	mov	r31, r0
    1e12:	2f ef       	ldi	r18, 0xFF	; 255
    1e14:	3f ef       	ldi	r19, 0xFF	; 255
    1e16:	43 e0       	ldi	r20, 0x03	; 3
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	cb 01       	movw	r24, r22
    1e20:	dc d7       	rcall	.+4024   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,9,numbers_mv[temp_index[1]],210,50);
    1e22:	e1 2f       	mov	r30, r17
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	e3 5c       	subi	r30, 0xC3	; 195
    1e30:	f8 4f       	sbci	r31, 0xF8	; 248
    1e32:	c0 80       	ld	r12, Z
    1e34:	d1 80       	ldd	r13, Z+1	; 0x01
    1e36:	e2 80       	ldd	r14, Z+2	; 0x02
    1e38:	f3 80       	ldd	r15, Z+3	; 0x03
    1e3a:	0f 2e       	mov	r0, r31
    1e3c:	f2 ed       	ldi	r31, 0xD2	; 210
    1e3e:	af 2e       	mov	r10, r31
    1e40:	b1 2c       	mov	r11, r1
    1e42:	f0 2d       	mov	r31, r0
    1e44:	2f ef       	ldi	r18, 0xFF	; 255
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	43 e0       	ldi	r20, 0x03	; 3
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	cb 01       	movw	r24, r22
    1e52:	c3 d7       	rcall	.+3974   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,3,celsius_symbol_mv,260,50);
    1e54:	0f 2e       	mov	r0, r31
    1e56:	f2 e3       	ldi	r31, 0x32	; 50
    1e58:	af 2e       	mov	r10, r31
    1e5a:	b1 2c       	mov	r11, r1
    1e5c:	f0 2d       	mov	r31, r0
    1e5e:	68 94       	set
    1e60:	cc 24       	eor	r12, r12
    1e62:	c2 f8       	bld	r12, 2
    1e64:	dd 24       	eor	r13, r13
    1e66:	d3 94       	inc	r13
    1e68:	0f 2e       	mov	r0, r31
    1e6a:	f3 eb       	ldi	r31, 0xB3	; 179
    1e6c:	ef 2e       	mov	r14, r31
    1e6e:	f2 e0       	ldi	r31, 0x02	; 2
    1e70:	ff 2e       	mov	r15, r31
    1e72:	f0 2d       	mov	r31, r0
    1e74:	03 e0       	ldi	r16, 0x03	; 3
    1e76:	2f ef       	ldi	r18, 0xFF	; 255
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	43 e0       	ldi	r20, 0x03	; 3
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	cb 01       	movw	r24, r22
    1e84:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
	
		ILI9341_write_char_15x15(BLACK,WHITE,3,kor_humidity_1_mv,20,150);
    1e88:	0f 2e       	mov	r0, r31
    1e8a:	f6 e9       	ldi	r31, 0x96	; 150
    1e8c:	af 2e       	mov	r10, r31
    1e8e:	b1 2c       	mov	r11, r1
    1e90:	f0 2d       	mov	r31, r0
    1e92:	0f 2e       	mov	r0, r31
    1e94:	f4 e1       	ldi	r31, 0x14	; 20
    1e96:	cf 2e       	mov	r12, r31
    1e98:	d1 2c       	mov	r13, r1
    1e9a:	f0 2d       	mov	r31, r0
    1e9c:	0f 2e       	mov	r0, r31
    1e9e:	fb ef       	ldi	r31, 0xFB	; 251
    1ea0:	ef 2e       	mov	r14, r31
    1ea2:	f2 e0       	ldi	r31, 0x02	; 2
    1ea4:	ff 2e       	mov	r15, r31
    1ea6:	f0 2d       	mov	r31, r0
    1ea8:	2f ef       	ldi	r18, 0xFF	; 255
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	43 e0       	ldi	r20, 0x03	; 3
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,WHITE,3,kor_humidity_2_mv,60,150);
    1eba:	0f 2e       	mov	r0, r31
    1ebc:	fc e3       	ldi	r31, 0x3C	; 60
    1ebe:	cf 2e       	mov	r12, r31
    1ec0:	d1 2c       	mov	r13, r1
    1ec2:	f0 2d       	mov	r31, r0
    1ec4:	0f 2e       	mov	r0, r31
    1ec6:	f7 ed       	ldi	r31, 0xD7	; 215
    1ec8:	ef 2e       	mov	r14, r31
    1eca:	f2 e0       	ldi	r31, 0x02	; 2
    1ecc:	ff 2e       	mov	r15, r31
    1ece:	f0 2d       	mov	r31, r0
    1ed0:	2f ef       	ldi	r18, 0xFF	; 255
    1ed2:	3f ef       	ldi	r19, 0xFF	; 255
    1ed4:	43 e0       	ldi	r20, 0x03	; 3
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	cb 01       	movw	r24, r22
    1ede:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_5x5(BLACK,WHITE,9,colon_mv,110,150);
    1ee2:	c0 90 65 07 	lds	r12, 0x0765	; 0x800765 <colon_mv>
    1ee6:	d0 90 66 07 	lds	r13, 0x0766	; 0x800766 <colon_mv+0x1>
    1eea:	e0 90 67 07 	lds	r14, 0x0767	; 0x800767 <colon_mv+0x2>
    1eee:	f0 90 68 07 	lds	r15, 0x0768	; 0x800768 <colon_mv+0x3>
    1ef2:	0f 2e       	mov	r0, r31
    1ef4:	f6 e9       	ldi	r31, 0x96	; 150
    1ef6:	8f 2e       	mov	r8, r31
    1ef8:	91 2c       	mov	r9, r1
    1efa:	f0 2d       	mov	r31, r0
    1efc:	0f 2e       	mov	r0, r31
    1efe:	fe e6       	ldi	r31, 0x6E	; 110
    1f00:	af 2e       	mov	r10, r31
    1f02:	b1 2c       	mov	r11, r1
    1f04:	f0 2d       	mov	r31, r0
    1f06:	09 e0       	ldi	r16, 0x09	; 9
    1f08:	2f ef       	ldi	r18, 0xFF	; 255
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	43 e0       	ldi	r20, 0x03	; 3
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	cb 01       	movw	r24, r22
    1f16:	61 d7       	rcall	.+3778   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,9,numbers_mv[humi_index[0]],160,150);
    1f18:	ed 2f       	mov	r30, r29
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	ee 0f       	add	r30, r30
    1f22:	ff 1f       	adc	r31, r31
    1f24:	e3 5c       	subi	r30, 0xC3	; 195
    1f26:	f8 4f       	sbci	r31, 0xF8	; 248
    1f28:	c0 80       	ld	r12, Z
    1f2a:	d1 80       	ldd	r13, Z+1	; 0x01
    1f2c:	e2 80       	ldd	r14, Z+2	; 0x02
    1f2e:	f3 80       	ldd	r15, Z+3	; 0x03
    1f30:	0f 2e       	mov	r0, r31
    1f32:	f0 ea       	ldi	r31, 0xA0	; 160
    1f34:	af 2e       	mov	r10, r31
    1f36:	b1 2c       	mov	r11, r1
    1f38:	f0 2d       	mov	r31, r0
    1f3a:	2f ef       	ldi	r18, 0xFF	; 255
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	43 e0       	ldi	r20, 0x03	; 3
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	cb 01       	movw	r24, r22
    1f48:	48 d7       	rcall	.+3728   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,9,numbers_mv[humi_index[1]],210,150);
    1f4a:	ec 2f       	mov	r30, r28
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	e3 5c       	subi	r30, 0xC3	; 195
    1f58:	f8 4f       	sbci	r31, 0xF8	; 248
    1f5a:	c0 80       	ld	r12, Z
    1f5c:	d1 80       	ldd	r13, Z+1	; 0x01
    1f5e:	e2 80       	ldd	r14, Z+2	; 0x02
    1f60:	f3 80       	ldd	r15, Z+3	; 0x03
    1f62:	0f 2e       	mov	r0, r31
    1f64:	f2 ed       	ldi	r31, 0xD2	; 210
    1f66:	af 2e       	mov	r10, r31
    1f68:	b1 2c       	mov	r11, r1
    1f6a:	f0 2d       	mov	r31, r0
    1f6c:	2f ef       	ldi	r18, 0xFF	; 255
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	43 e0       	ldi	r20, 0x03	; 3
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	cb 01       	movw	r24, r22
    1f7a:	2f d7       	rcall	.+3678   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_15x15(BLACK,WHITE,3,percent_symbol_mv,260,150);
    1f7c:	0f 2e       	mov	r0, r31
    1f7e:	f6 e9       	ldi	r31, 0x96	; 150
    1f80:	af 2e       	mov	r10, r31
    1f82:	b1 2c       	mov	r11, r1
    1f84:	f0 2d       	mov	r31, r0
    1f86:	68 94       	set
    1f88:	cc 24       	eor	r12, r12
    1f8a:	c2 f8       	bld	r12, 2
    1f8c:	dd 24       	eor	r13, r13
    1f8e:	d3 94       	inc	r13
    1f90:	0f 2e       	mov	r0, r31
    1f92:	f7 e4       	ldi	r31, 0x47	; 71
    1f94:	ef 2e       	mov	r14, r31
    1f96:	f2 e0       	ldi	r31, 0x02	; 2
    1f98:	ff 2e       	mov	r15, r31
    1f9a:	f0 2d       	mov	r31, r0
    1f9c:	03 e0       	ldi	r16, 0x03	; 3
    1f9e:	2f ef       	ldi	r18, 0xFF	; 255
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	43 e0       	ldi	r20, 0x03	; 3
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	cb 01       	movw	r24, r22
    1fac:	b6 d7       	rcall	.+3948   	; 0x2f1a <ILI9341_write_char_15x15>
	}
}
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	9f 90       	pop	r9
    1fc4:	8f 90       	pop	r8
    1fc6:	7f 90       	pop	r7
    1fc8:	08 95       	ret

00001fca <ILI9341_LCD_input_data_air_quality>:

void ILI9341_LCD_input_data_air_quality()
{
    1fca:	2f 92       	push	r2
    1fcc:	3f 92       	push	r3
    1fce:	4f 92       	push	r4
    1fd0:	5f 92       	push	r5
    1fd2:	6f 92       	push	r6
    1fd4:	7f 92       	push	r7
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <ILI9341_LCD_input_data_air_quality+0x26>
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <ILI9341_LCD_input_data_air_quality+0x28>
    1ff2:	1f 92       	push	r1
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
	uint8_t CO2_index[4];
	uint8_t TVOC_index[4];
	
	uint32_t CO2_temp = CO2;
    1ff8:	60 91 b8 0b 	lds	r22, 0x0BB8	; 0x800bb8 <CO2>
    1ffc:	70 91 b9 0b 	lds	r23, 0x0BB9	; 0x800bb9 <CO2+0x1>
    2000:	80 91 ba 0b 	lds	r24, 0x0BBA	; 0x800bba <CO2+0x2>
    2004:	90 91 bb 0b 	lds	r25, 0x0BBB	; 0x800bbb <CO2+0x3>
	uint32_t TVOC_temp = TVOC;
    2008:	c0 90 b4 0b 	lds	r12, 0x0BB4	; 0x800bb4 <__data_end>
    200c:	d0 90 b5 0b 	lds	r13, 0x0BB5	; 0x800bb5 <__data_end+0x1>
    2010:	e0 90 b6 0b 	lds	r14, 0x0BB6	; 0x800bb6 <__data_end+0x2>
    2014:	f0 90 b7 0b 	lds	r15, 0x0BB7	; 0x800bb7 <__data_end+0x3>
	
	CO2_index[0] = CO2_temp / 1000;
    2018:	0f 2e       	mov	r0, r31
    201a:	f8 ee       	ldi	r31, 0xE8	; 232
    201c:	4f 2e       	mov	r4, r31
    201e:	f3 e0       	ldi	r31, 0x03	; 3
    2020:	5f 2e       	mov	r5, r31
    2022:	61 2c       	mov	r6, r1
    2024:	71 2c       	mov	r7, r1
    2026:	f0 2d       	mov	r31, r0
    2028:	a3 01       	movw	r20, r6
    202a:	92 01       	movw	r18, r4
    202c:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    2030:	32 2e       	mov	r3, r18
	CO2_temp %= 1000;
	CO2_index[1] = CO2_temp / 100;
    2032:	0f 2e       	mov	r0, r31
    2034:	f4 e6       	ldi	r31, 0x64	; 100
    2036:	8f 2e       	mov	r8, r31
    2038:	91 2c       	mov	r9, r1
    203a:	a1 2c       	mov	r10, r1
    203c:	b1 2c       	mov	r11, r1
    203e:	f0 2d       	mov	r31, r0
    2040:	a5 01       	movw	r20, r10
    2042:	94 01       	movw	r18, r8
    2044:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    2048:	29 83       	std	Y+1, r18	; 0x01
	CO2_temp %= 100;
	CO2_index[2] = CO2_temp / 10;
    204a:	2a e0       	ldi	r18, 0x0A	; 10
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    2056:	2a 83       	std	Y+2, r18	; 0x02
    2058:	16 2f       	mov	r17, r22
	CO2_temp %= 10;
	CO2_index[3] = CO2_temp;
	
	TVOC_index[0] = TVOC_temp / 1000;
    205a:	c7 01       	movw	r24, r14
    205c:	b6 01       	movw	r22, r12
    205e:	a3 01       	movw	r20, r6
    2060:	92 01       	movw	r18, r4
    2062:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    2066:	2b 83       	std	Y+3, r18	; 0x03
	TVOC_temp %= 1000;
	TVOC_index[1] = TVOC_temp / 100;
    2068:	a5 01       	movw	r20, r10
    206a:	94 01       	movw	r18, r8
    206c:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    2070:	72 2e       	mov	r7, r18
	TVOC_temp %= 100;
	TVOC_index[2] = TVOC_temp / 10;
    2072:	2a e0       	ldi	r18, 0x0A	; 10
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__udivmodsi4>
    207e:	22 2e       	mov	r2, r18
    2080:	66 2e       	mov	r6, r22
	TVOC_temp %= 10;
	TVOC_index[3] = TVOC_temp;
	ILI9341_write_char_15x15(BLACK,WHITE,4,kor_air_1_mv,10,40);
    2082:	0f 2e       	mov	r0, r31
    2084:	f8 e2       	ldi	r31, 0x28	; 40
    2086:	af 2e       	mov	r10, r31
    2088:	b1 2c       	mov	r11, r1
    208a:	f0 2d       	mov	r31, r0
    208c:	0f 2e       	mov	r0, r31
    208e:	fa e0       	ldi	r31, 0x0A	; 10
    2090:	cf 2e       	mov	r12, r31
    2092:	d1 2c       	mov	r13, r1
    2094:	f0 2d       	mov	r31, r0
    2096:	0f 2e       	mov	r0, r31
    2098:	f3 e6       	ldi	r31, 0x63	; 99
    209a:	ef 2e       	mov	r14, r31
    209c:	f4 e0       	ldi	r31, 0x04	; 4
    209e:	ff 2e       	mov	r15, r31
    20a0:	f0 2d       	mov	r31, r0
    20a2:	04 e0       	ldi	r16, 0x04	; 4
    20a4:	2f ef       	ldi	r18, 0xFF	; 255
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	43 e0       	ldi	r20, 0x03	; 3
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	cb 01       	movw	r24, r22
    20b2:	33 d7       	rcall	.+3686   	; 0x2f1a <ILI9341_write_char_15x15>
	ILI9341_write_char_15x15(BLACK,WHITE,4,kor_air_2_mv,75,40);
    20b4:	0f 2e       	mov	r0, r31
    20b6:	fb e4       	ldi	r31, 0x4B	; 75
    20b8:	cf 2e       	mov	r12, r31
    20ba:	d1 2c       	mov	r13, r1
    20bc:	f0 2d       	mov	r31, r0
    20be:	0f 2e       	mov	r0, r31
    20c0:	ff e3       	ldi	r31, 0x3F	; 63
    20c2:	ef 2e       	mov	r14, r31
    20c4:	f4 e0       	ldi	r31, 0x04	; 4
    20c6:	ff 2e       	mov	r15, r31
    20c8:	f0 2d       	mov	r31, r0
    20ca:	2f ef       	ldi	r18, 0xFF	; 255
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	43 e0       	ldi	r20, 0x03	; 3
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	cb 01       	movw	r24, r22
    20d8:	20 d7       	rcall	.+3648   	; 0x2f1a <ILI9341_write_char_15x15>
	ILI9341_write_char_5x5(BLACK,WHITE,9,colon_mv,140,45);
    20da:	c0 90 65 07 	lds	r12, 0x0765	; 0x800765 <colon_mv>
    20de:	d0 90 66 07 	lds	r13, 0x0766	; 0x800766 <colon_mv+0x1>
    20e2:	e0 90 67 07 	lds	r14, 0x0767	; 0x800767 <colon_mv+0x2>
    20e6:	f0 90 68 07 	lds	r15, 0x0768	; 0x800768 <colon_mv+0x3>
    20ea:	0f 2e       	mov	r0, r31
    20ec:	fd e2       	ldi	r31, 0x2D	; 45
    20ee:	8f 2e       	mov	r8, r31
    20f0:	91 2c       	mov	r9, r1
    20f2:	f0 2d       	mov	r31, r0
    20f4:	0f 2e       	mov	r0, r31
    20f6:	fc e8       	ldi	r31, 0x8C	; 140
    20f8:	af 2e       	mov	r10, r31
    20fa:	b1 2c       	mov	r11, r1
    20fc:	f0 2d       	mov	r31, r0
    20fe:	09 e0       	ldi	r16, 0x09	; 9
    2100:	2f ef       	ldi	r18, 0xFF	; 255
    2102:	3f ef       	ldi	r19, 0xFF	; 255
    2104:	43 e0       	ldi	r20, 0x03	; 3
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	cb 01       	movw	r24, r22
    210e:	65 d6       	rcall	.+3274   	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,6,upper_alphabet_mv[2],20,150);
    2110:	c0 90 dd 06 	lds	r12, 0x06DD	; 0x8006dd <upper_alphabet_mv+0x8>
    2114:	d0 90 de 06 	lds	r13, 0x06DE	; 0x8006de <upper_alphabet_mv+0x9>
    2118:	e0 90 df 06 	lds	r14, 0x06DF	; 0x8006df <upper_alphabet_mv+0xa>
    211c:	f0 90 e0 06 	lds	r15, 0x06E0	; 0x8006e0 <upper_alphabet_mv+0xb>
    2120:	0f 2e       	mov	r0, r31
    2122:	f6 e9       	ldi	r31, 0x96	; 150
    2124:	8f 2e       	mov	r8, r31
    2126:	91 2c       	mov	r9, r1
    2128:	f0 2d       	mov	r31, r0
    212a:	0f 2e       	mov	r0, r31
    212c:	f4 e1       	ldi	r31, 0x14	; 20
    212e:	af 2e       	mov	r10, r31
    2130:	b1 2c       	mov	r11, r1
    2132:	f0 2d       	mov	r31, r0
    2134:	06 e0       	ldi	r16, 0x06	; 6
    2136:	2f ef       	ldi	r18, 0xFF	; 255
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	43 e0       	ldi	r20, 0x03	; 3
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	cb 01       	movw	r24, r22
    2144:	4a d6       	rcall	.+3220   	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,6,upper_alphabet_mv['O'-'A'],60,150);
    2146:	c0 90 0d 07 	lds	r12, 0x070D	; 0x80070d <upper_alphabet_mv+0x38>
    214a:	d0 90 0e 07 	lds	r13, 0x070E	; 0x80070e <upper_alphabet_mv+0x39>
    214e:	e0 90 0f 07 	lds	r14, 0x070F	; 0x80070f <upper_alphabet_mv+0x3a>
    2152:	f0 90 10 07 	lds	r15, 0x0710	; 0x800710 <upper_alphabet_mv+0x3b>
    2156:	0f 2e       	mov	r0, r31
    2158:	fc e3       	ldi	r31, 0x3C	; 60
    215a:	af 2e       	mov	r10, r31
    215c:	b1 2c       	mov	r11, r1
    215e:	f0 2d       	mov	r31, r0
    2160:	2f ef       	ldi	r18, 0xFF	; 255
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	43 e0       	ldi	r20, 0x03	; 3
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	cb 01       	movw	r24, r22
    216e:	35 d6       	rcall	.+3178   	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,3,numbers_mv[2],100,170);
    2170:	c0 90 45 07 	lds	r12, 0x0745	; 0x800745 <numbers_mv+0x8>
    2174:	d0 90 46 07 	lds	r13, 0x0746	; 0x800746 <numbers_mv+0x9>
    2178:	e0 90 47 07 	lds	r14, 0x0747	; 0x800747 <numbers_mv+0xa>
    217c:	f0 90 48 07 	lds	r15, 0x0748	; 0x800748 <numbers_mv+0xb>
    2180:	0f 2e       	mov	r0, r31
    2182:	fa ea       	ldi	r31, 0xAA	; 170
    2184:	8f 2e       	mov	r8, r31
    2186:	91 2c       	mov	r9, r1
    2188:	f0 2d       	mov	r31, r0
    218a:	0f 2e       	mov	r0, r31
    218c:	f4 e6       	ldi	r31, 0x64	; 100
    218e:	af 2e       	mov	r10, r31
    2190:	b1 2c       	mov	r11, r1
    2192:	f0 2d       	mov	r31, r0
    2194:	03 e0       	ldi	r16, 0x03	; 3
    2196:	2f ef       	ldi	r18, 0xFF	; 255
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	43 e0       	ldi	r20, 0x03	; 3
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	cb 01       	movw	r24, r22
    21a4:	1a d6       	rcall	.+3124   	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,upper_alphabet_mv['t'-'a'],0,200);
    21a6:	c0 90 21 07 	lds	r12, 0x0721	; 0x800721 <upper_alphabet_mv+0x4c>
    21aa:	d0 90 22 07 	lds	r13, 0x0722	; 0x800722 <upper_alphabet_mv+0x4d>
    21ae:	e0 90 23 07 	lds	r14, 0x0723	; 0x800723 <upper_alphabet_mv+0x4e>
    21b2:	f0 90 24 07 	lds	r15, 0x0724	; 0x800724 <upper_alphabet_mv+0x4f>
    21b6:	0f 2e       	mov	r0, r31
    21b8:	f8 ec       	ldi	r31, 0xC8	; 200
    21ba:	8f 2e       	mov	r8, r31
    21bc:	91 2c       	mov	r9, r1
    21be:	f0 2d       	mov	r31, r0
    21c0:	a1 2c       	mov	r10, r1
    21c2:	b1 2c       	mov	r11, r1
    21c4:	05 e0       	ldi	r16, 0x05	; 5
    21c6:	2f ef       	ldi	r18, 0xFF	; 255
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	43 e0       	ldi	r20, 0x03	; 3
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	cb 01       	movw	r24, r22
    21d4:	02 d6       	rcall	.+3076   	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,upper_alphabet_mv['v'-'a'],30,200);
    21d6:	c0 90 29 07 	lds	r12, 0x0729	; 0x800729 <upper_alphabet_mv+0x54>
    21da:	d0 90 2a 07 	lds	r13, 0x072A	; 0x80072a <upper_alphabet_mv+0x55>
    21de:	e0 90 2b 07 	lds	r14, 0x072B	; 0x80072b <upper_alphabet_mv+0x56>
    21e2:	f0 90 2c 07 	lds	r15, 0x072C	; 0x80072c <upper_alphabet_mv+0x57>
    21e6:	0f 2e       	mov	r0, r31
    21e8:	fe e1       	ldi	r31, 0x1E	; 30
    21ea:	af 2e       	mov	r10, r31
    21ec:	b1 2c       	mov	r11, r1
    21ee:	f0 2d       	mov	r31, r0
    21f0:	2f ef       	ldi	r18, 0xFF	; 255
    21f2:	3f ef       	ldi	r19, 0xFF	; 255
    21f4:	43 e0       	ldi	r20, 0x03	; 3
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	cb 01       	movw	r24, r22
    21fe:	ed d5       	rcall	.+3034   	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,upper_alphabet_mv['o'-'a'],60,200);
    2200:	c0 90 0d 07 	lds	r12, 0x070D	; 0x80070d <upper_alphabet_mv+0x38>
    2204:	d0 90 0e 07 	lds	r13, 0x070E	; 0x80070e <upper_alphabet_mv+0x39>
    2208:	e0 90 0f 07 	lds	r14, 0x070F	; 0x80070f <upper_alphabet_mv+0x3a>
    220c:	f0 90 10 07 	lds	r15, 0x0710	; 0x800710 <upper_alphabet_mv+0x3b>
    2210:	0f 2e       	mov	r0, r31
    2212:	fc e3       	ldi	r31, 0x3C	; 60
    2214:	af 2e       	mov	r10, r31
    2216:	b1 2c       	mov	r11, r1
    2218:	f0 2d       	mov	r31, r0
    221a:	2f ef       	ldi	r18, 0xFF	; 255
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	43 e0       	ldi	r20, 0x03	; 3
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	cb 01       	movw	r24, r22
    2228:	d8 d5       	rcall	.+2992   	; 0x2dda <ILI9341_write_char_5x5>
	ILI9341_write_char_5x5(BLACK,WHITE,5,upper_alphabet_mv['c'-'a'],90,200);
    222a:	c0 90 dd 06 	lds	r12, 0x06DD	; 0x8006dd <upper_alphabet_mv+0x8>
    222e:	d0 90 de 06 	lds	r13, 0x06DE	; 0x8006de <upper_alphabet_mv+0x9>
    2232:	e0 90 df 06 	lds	r14, 0x06DF	; 0x8006df <upper_alphabet_mv+0xa>
    2236:	f0 90 e0 06 	lds	r15, 0x06E0	; 0x8006e0 <upper_alphabet_mv+0xb>
    223a:	0f 2e       	mov	r0, r31
    223c:	fa e5       	ldi	r31, 0x5A	; 90
    223e:	af 2e       	mov	r10, r31
    2240:	b1 2c       	mov	r11, r1
    2242:	f0 2d       	mov	r31, r0
    2244:	2f ef       	ldi	r18, 0xFF	; 255
    2246:	3f ef       	ldi	r19, 0xFF	; 255
    2248:	43 e0       	ldi	r20, 0x03	; 3
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	cb 01       	movw	r24, r22
    2252:	c3 d5       	rcall	.+2950   	; 0x2dda <ILI9341_write_char_5x5>
	if(CO2 >= 2000 || TVOC >= 500)
    2254:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <CO2>
    2258:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <CO2+0x1>
    225c:	a0 91 ba 0b 	lds	r26, 0x0BBA	; 0x800bba <CO2+0x2>
    2260:	b0 91 bb 0b 	lds	r27, 0x0BBB	; 0x800bbb <CO2+0x3>
    2264:	80 3d       	cpi	r24, 0xD0	; 208
    2266:	97 40       	sbci	r25, 0x07	; 7
    2268:	a1 05       	cpc	r26, r1
    226a:	b1 05       	cpc	r27, r1
    226c:	68 f4       	brcc	.+26     	; 0x2288 <ILI9341_LCD_input_data_air_quality+0x2be>
    226e:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <__data_end>
    2272:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <__data_end+0x1>
    2276:	a0 91 b6 0b 	lds	r26, 0x0BB6	; 0x800bb6 <__data_end+0x2>
    227a:	b0 91 b7 0b 	lds	r27, 0x0BB7	; 0x800bb7 <__data_end+0x3>
    227e:	84 3f       	cpi	r24, 0xF4	; 244
    2280:	91 40       	sbci	r25, 0x01	; 1
    2282:	a1 05       	cpc	r26, r1
    2284:	b1 05       	cpc	r27, r1
    2286:	58 f1       	brcs	.+86     	; 0x22de <ILI9341_LCD_input_data_air_quality+0x314>
	{
		ILI9341_write_char_15x15(BLACK,RED,4,kor_bad_1_mv,190,40);
    2288:	0f 2e       	mov	r0, r31
    228a:	f8 e2       	ldi	r31, 0x28	; 40
    228c:	af 2e       	mov	r10, r31
    228e:	b1 2c       	mov	r11, r1
    2290:	f0 2d       	mov	r31, r0
    2292:	0f 2e       	mov	r0, r31
    2294:	fe eb       	ldi	r31, 0xBE	; 190
    2296:	cf 2e       	mov	r12, r31
    2298:	d1 2c       	mov	r13, r1
    229a:	f0 2d       	mov	r31, r0
    229c:	0f 2e       	mov	r0, r31
    229e:	fb e1       	ldi	r31, 0x1B	; 27
    22a0:	ef 2e       	mov	r14, r31
    22a2:	f4 e0       	ldi	r31, 0x04	; 4
    22a4:	ff 2e       	mov	r15, r31
    22a6:	f0 2d       	mov	r31, r0
    22a8:	04 e0       	ldi	r16, 0x04	; 4
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 ef       	ldi	r19, 0xF0	; 240
    22ae:	43 e0       	ldi	r20, 0x03	; 3
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	cb 01       	movw	r24, r22
    22b8:	30 d6       	rcall	.+3168   	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,RED,4,kor_bad_2_mv,255,40);
    22ba:	cc 24       	eor	r12, r12
    22bc:	ca 94       	dec	r12
    22be:	d1 2c       	mov	r13, r1
    22c0:	0f 2e       	mov	r0, r31
    22c2:	f7 ef       	ldi	r31, 0xF7	; 247
    22c4:	ef 2e       	mov	r14, r31
    22c6:	f3 e0       	ldi	r31, 0x03	; 3
    22c8:	ff 2e       	mov	r15, r31
    22ca:	f0 2d       	mov	r31, r0
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 ef       	ldi	r19, 0xF0	; 240
    22d0:	43 e0       	ldi	r20, 0x03	; 3
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	cb 01       	movw	r24, r22
    22da:	1f d6       	rcall	.+3134   	; 0x2f1a <ILI9341_write_char_15x15>
    22dc:	6f c0       	rjmp	.+222    	; 0x23bc <ILI9341_LCD_input_data_air_quality+0x3f2>
	}
	else if(CO2 >= 1000)
    22de:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <CO2>
    22e2:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <CO2+0x1>
    22e6:	a0 91 ba 0b 	lds	r26, 0x0BBA	; 0x800bba <CO2+0x2>
    22ea:	b0 91 bb 0b 	lds	r27, 0x0BBB	; 0x800bbb <CO2+0x3>
    22ee:	88 3e       	cpi	r24, 0xE8	; 232
    22f0:	93 40       	sbci	r25, 0x03	; 3
    22f2:	a1 05       	cpc	r26, r1
    22f4:	b1 05       	cpc	r27, r1
    22f6:	58 f1       	brcs	.+86     	; 0x234e <ILI9341_LCD_input_data_air_quality+0x384>
	{
		ILI9341_write_char_15x15(BLACK,SKYBLUE,4,kor_normal_1_mv,190,40);
    22f8:	0f 2e       	mov	r0, r31
    22fa:	f8 e2       	ldi	r31, 0x28	; 40
    22fc:	af 2e       	mov	r10, r31
    22fe:	b1 2c       	mov	r11, r1
    2300:	f0 2d       	mov	r31, r0
    2302:	0f 2e       	mov	r0, r31
    2304:	fe eb       	ldi	r31, 0xBE	; 190
    2306:	cf 2e       	mov	r12, r31
    2308:	d1 2c       	mov	r13, r1
    230a:	f0 2d       	mov	r31, r0
    230c:	0f 2e       	mov	r0, r31
    230e:	f3 ed       	ldi	r31, 0xD3	; 211
    2310:	ef 2e       	mov	r14, r31
    2312:	f3 e0       	ldi	r31, 0x03	; 3
    2314:	ff 2e       	mov	r15, r31
    2316:	f0 2d       	mov	r31, r0
    2318:	04 e0       	ldi	r16, 0x04	; 4
    231a:	2f ef       	ldi	r18, 0xFF	; 255
    231c:	3f e0       	ldi	r19, 0x0F	; 15
    231e:	42 e0       	ldi	r20, 0x02	; 2
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	cb 01       	movw	r24, r22
    2328:	f8 d5       	rcall	.+3056   	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,SKYBLUE,4,kor_normal_2_mv,255,40);
    232a:	cc 24       	eor	r12, r12
    232c:	ca 94       	dec	r12
    232e:	d1 2c       	mov	r13, r1
    2330:	0f 2e       	mov	r0, r31
    2332:	ff ea       	ldi	r31, 0xAF	; 175
    2334:	ef 2e       	mov	r14, r31
    2336:	f3 e0       	ldi	r31, 0x03	; 3
    2338:	ff 2e       	mov	r15, r31
    233a:	f0 2d       	mov	r31, r0
    233c:	2f ef       	ldi	r18, 0xFF	; 255
    233e:	3f e0       	ldi	r19, 0x0F	; 15
    2340:	42 e0       	ldi	r20, 0x02	; 2
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	cb 01       	movw	r24, r22
    234a:	e7 d5       	rcall	.+3022   	; 0x2f1a <ILI9341_write_char_15x15>
    234c:	37 c0       	rjmp	.+110    	; 0x23bc <ILI9341_LCD_input_data_air_quality+0x3f2>
	}
	else if(CO2 < 1000)
    234e:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <CO2>
    2352:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <CO2+0x1>
    2356:	a0 91 ba 0b 	lds	r26, 0x0BBA	; 0x800bba <CO2+0x2>
    235a:	b0 91 bb 0b 	lds	r27, 0x0BBB	; 0x800bbb <CO2+0x3>
    235e:	88 3e       	cpi	r24, 0xE8	; 232
    2360:	93 40       	sbci	r25, 0x03	; 3
    2362:	a1 05       	cpc	r26, r1
    2364:	b1 05       	cpc	r27, r1
    2366:	50 f5       	brcc	.+84     	; 0x23bc <ILI9341_LCD_input_data_air_quality+0x3f2>
	{
		ILI9341_write_char_15x15(BLACK,GREEN,4,kor_good_1_mv,190,40);
    2368:	0f 2e       	mov	r0, r31
    236a:	f8 e2       	ldi	r31, 0x28	; 40
    236c:	af 2e       	mov	r10, r31
    236e:	b1 2c       	mov	r11, r1
    2370:	f0 2d       	mov	r31, r0
    2372:	0f 2e       	mov	r0, r31
    2374:	fe eb       	ldi	r31, 0xBE	; 190
    2376:	cf 2e       	mov	r12, r31
    2378:	d1 2c       	mov	r13, r1
    237a:	f0 2d       	mov	r31, r0
    237c:	0f 2e       	mov	r0, r31
    237e:	fb e8       	ldi	r31, 0x8B	; 139
    2380:	ef 2e       	mov	r14, r31
    2382:	f3 e0       	ldi	r31, 0x03	; 3
    2384:	ff 2e       	mov	r15, r31
    2386:	f0 2d       	mov	r31, r0
    2388:	04 e0       	ldi	r16, 0x04	; 4
    238a:	20 ec       	ldi	r18, 0xC0	; 192
    238c:	3f e0       	ldi	r19, 0x0F	; 15
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	cb 01       	movw	r24, r22
    2398:	c0 d5       	rcall	.+2944   	; 0x2f1a <ILI9341_write_char_15x15>
		ILI9341_write_char_15x15(BLACK,GREEN,4,kor_good_2_mv,255,40);
    239a:	cc 24       	eor	r12, r12
    239c:	ca 94       	dec	r12
    239e:	d1 2c       	mov	r13, r1
    23a0:	0f 2e       	mov	r0, r31
    23a2:	f7 e6       	ldi	r31, 0x67	; 103
    23a4:	ef 2e       	mov	r14, r31
    23a6:	f3 e0       	ldi	r31, 0x03	; 3
    23a8:	ff 2e       	mov	r15, r31
    23aa:	f0 2d       	mov	r31, r0
    23ac:	20 ec       	ldi	r18, 0xC0	; 192
    23ae:	3f e0       	ldi	r19, 0x0F	; 15
    23b0:	40 e0       	ldi	r20, 0x00	; 0
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	cb 01       	movw	r24, r22
    23ba:	af d5       	rcall	.+2910   	; 0x2f1a <ILI9341_write_char_15x15>
	}
	if(CO2 >= 1000)
    23bc:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <CO2>
    23c0:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <CO2+0x1>
    23c4:	a0 91 ba 0b 	lds	r26, 0x0BBA	; 0x800bba <CO2+0x2>
    23c8:	b0 91 bb 0b 	lds	r27, 0x0BBB	; 0x800bbb <CO2+0x3>
    23cc:	88 3e       	cpi	r24, 0xE8	; 232
    23ce:	93 40       	sbci	r25, 0x03	; 3
    23d0:	a1 05       	cpc	r26, r1
    23d2:	b1 05       	cpc	r27, r1
    23d4:	08 f4       	brcc	.+2      	; 0x23d8 <ILI9341_LCD_input_data_air_quality+0x40e>
    23d6:	6e c0       	rjmp	.+220    	; 0x24b4 <ILI9341_LCD_input_data_air_quality+0x4ea>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[0]],120,150);
    23d8:	e3 2d       	mov	r30, r3
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	e3 5c       	subi	r30, 0xC3	; 195
    23e6:	f8 4f       	sbci	r31, 0xF8	; 248
    23e8:	c0 80       	ld	r12, Z
    23ea:	d1 80       	ldd	r13, Z+1	; 0x01
    23ec:	e2 80       	ldd	r14, Z+2	; 0x02
    23ee:	f3 80       	ldd	r15, Z+3	; 0x03
    23f0:	0f 2e       	mov	r0, r31
    23f2:	f6 e9       	ldi	r31, 0x96	; 150
    23f4:	8f 2e       	mov	r8, r31
    23f6:	91 2c       	mov	r9, r1
    23f8:	f0 2d       	mov	r31, r0
    23fa:	0f 2e       	mov	r0, r31
    23fc:	f8 e7       	ldi	r31, 0x78	; 120
    23fe:	af 2e       	mov	r10, r31
    2400:	b1 2c       	mov	r11, r1
    2402:	f0 2d       	mov	r31, r0
    2404:	06 e0       	ldi	r16, 0x06	; 6
    2406:	2f ef       	ldi	r18, 0xFF	; 255
    2408:	3f ef       	ldi	r19, 0xFF	; 255
    240a:	43 e0       	ldi	r20, 0x03	; 3
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	70 e0       	ldi	r23, 0x00	; 0
    2412:	cb 01       	movw	r24, r22
    2414:	e2 d4       	rcall	.+2500   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[1]],160,150);
    2416:	29 81       	ldd	r18, Y+1	; 0x01
    2418:	e2 2f       	mov	r30, r18
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	ee 0f       	add	r30, r30
    2422:	ff 1f       	adc	r31, r31
    2424:	e3 5c       	subi	r30, 0xC3	; 195
    2426:	f8 4f       	sbci	r31, 0xF8	; 248
    2428:	c0 80       	ld	r12, Z
    242a:	d1 80       	ldd	r13, Z+1	; 0x01
    242c:	e2 80       	ldd	r14, Z+2	; 0x02
    242e:	f3 80       	ldd	r15, Z+3	; 0x03
    2430:	0f 2e       	mov	r0, r31
    2432:	f0 ea       	ldi	r31, 0xA0	; 160
    2434:	af 2e       	mov	r10, r31
    2436:	b1 2c       	mov	r11, r1
    2438:	f0 2d       	mov	r31, r0
    243a:	2f ef       	ldi	r18, 0xFF	; 255
    243c:	3f ef       	ldi	r19, 0xFF	; 255
    243e:	43 e0       	ldi	r20, 0x03	; 3
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	70 e0       	ldi	r23, 0x00	; 0
    2446:	cb 01       	movw	r24, r22
    2448:	c8 d4       	rcall	.+2448   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[2]],200,150);
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	89 2f       	mov	r24, r25
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	83 5c       	subi	r24, 0xC3	; 195
    245a:	98 4f       	sbci	r25, 0xF8	; 248
    245c:	fc 01       	movw	r30, r24
    245e:	c0 80       	ld	r12, Z
    2460:	d1 80       	ldd	r13, Z+1	; 0x01
    2462:	e2 80       	ldd	r14, Z+2	; 0x02
    2464:	f3 80       	ldd	r15, Z+3	; 0x03
    2466:	0f 2e       	mov	r0, r31
    2468:	f8 ec       	ldi	r31, 0xC8	; 200
    246a:	af 2e       	mov	r10, r31
    246c:	b1 2c       	mov	r11, r1
    246e:	f0 2d       	mov	r31, r0
    2470:	2f ef       	ldi	r18, 0xFF	; 255
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	43 e0       	ldi	r20, 0x03	; 3
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	cb 01       	movw	r24, r22
    247e:	ad d4       	rcall	.+2394   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[3]],240,150);
    2480:	e1 2f       	mov	r30, r17
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	ee 0f       	add	r30, r30
    248a:	ff 1f       	adc	r31, r31
    248c:	e3 5c       	subi	r30, 0xC3	; 195
    248e:	f8 4f       	sbci	r31, 0xF8	; 248
    2490:	c0 80       	ld	r12, Z
    2492:	d1 80       	ldd	r13, Z+1	; 0x01
    2494:	e2 80       	ldd	r14, Z+2	; 0x02
    2496:	f3 80       	ldd	r15, Z+3	; 0x03
    2498:	0f 2e       	mov	r0, r31
    249a:	f0 ef       	ldi	r31, 0xF0	; 240
    249c:	af 2e       	mov	r10, r31
    249e:	b1 2c       	mov	r11, r1
    24a0:	f0 2d       	mov	r31, r0
    24a2:	2f ef       	ldi	r18, 0xFF	; 255
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	43 e0       	ldi	r20, 0x03	; 3
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	70 e0       	ldi	r23, 0x00	; 0
    24ae:	cb 01       	movw	r24, r22
    24b0:	94 d4       	rcall	.+2344   	; 0x2dda <ILI9341_write_char_5x5>
    24b2:	62 c0       	rjmp	.+196    	; 0x2578 <ILI9341_LCD_input_data_air_quality+0x5ae>
	}
	else if(CO2 < 1000)
    24b4:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <CO2>
    24b8:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <CO2+0x1>
    24bc:	a0 91 ba 0b 	lds	r26, 0x0BBA	; 0x800bba <CO2+0x2>
    24c0:	b0 91 bb 0b 	lds	r27, 0x0BBB	; 0x800bbb <CO2+0x3>
    24c4:	88 3e       	cpi	r24, 0xE8	; 232
    24c6:	93 40       	sbci	r25, 0x03	; 3
    24c8:	a1 05       	cpc	r26, r1
    24ca:	b1 05       	cpc	r27, r1
    24cc:	08 f0       	brcs	.+2      	; 0x24d0 <ILI9341_LCD_input_data_air_quality+0x506>
    24ce:	54 c0       	rjmp	.+168    	; 0x2578 <ILI9341_LCD_input_data_air_quality+0x5ae>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[1]],160,150);
    24d0:	29 81       	ldd	r18, Y+1	; 0x01
    24d2:	e2 2f       	mov	r30, r18
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	e3 5c       	subi	r30, 0xC3	; 195
    24e0:	f8 4f       	sbci	r31, 0xF8	; 248
    24e2:	c0 80       	ld	r12, Z
    24e4:	d1 80       	ldd	r13, Z+1	; 0x01
    24e6:	e2 80       	ldd	r14, Z+2	; 0x02
    24e8:	f3 80       	ldd	r15, Z+3	; 0x03
    24ea:	0f 2e       	mov	r0, r31
    24ec:	f6 e9       	ldi	r31, 0x96	; 150
    24ee:	8f 2e       	mov	r8, r31
    24f0:	91 2c       	mov	r9, r1
    24f2:	f0 2d       	mov	r31, r0
    24f4:	0f 2e       	mov	r0, r31
    24f6:	f0 ea       	ldi	r31, 0xA0	; 160
    24f8:	af 2e       	mov	r10, r31
    24fa:	b1 2c       	mov	r11, r1
    24fc:	f0 2d       	mov	r31, r0
    24fe:	06 e0       	ldi	r16, 0x06	; 6
    2500:	2f ef       	ldi	r18, 0xFF	; 255
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	43 e0       	ldi	r20, 0x03	; 3
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	cb 01       	movw	r24, r22
    250e:	65 d4       	rcall	.+2250   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[2]],200,150);
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	89 2f       	mov	r24, r25
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	83 5c       	subi	r24, 0xC3	; 195
    2520:	98 4f       	sbci	r25, 0xF8	; 248
    2522:	fc 01       	movw	r30, r24
    2524:	c0 80       	ld	r12, Z
    2526:	d1 80       	ldd	r13, Z+1	; 0x01
    2528:	e2 80       	ldd	r14, Z+2	; 0x02
    252a:	f3 80       	ldd	r15, Z+3	; 0x03
    252c:	0f 2e       	mov	r0, r31
    252e:	f8 ec       	ldi	r31, 0xC8	; 200
    2530:	af 2e       	mov	r10, r31
    2532:	b1 2c       	mov	r11, r1
    2534:	f0 2d       	mov	r31, r0
    2536:	2f ef       	ldi	r18, 0xFF	; 255
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	43 e0       	ldi	r20, 0x03	; 3
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	cb 01       	movw	r24, r22
    2544:	4a d4       	rcall	.+2196   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[CO2_index[3]],240,150);
    2546:	e1 2f       	mov	r30, r17
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	ee 0f       	add	r30, r30
    2550:	ff 1f       	adc	r31, r31
    2552:	e3 5c       	subi	r30, 0xC3	; 195
    2554:	f8 4f       	sbci	r31, 0xF8	; 248
    2556:	c0 80       	ld	r12, Z
    2558:	d1 80       	ldd	r13, Z+1	; 0x01
    255a:	e2 80       	ldd	r14, Z+2	; 0x02
    255c:	f3 80       	ldd	r15, Z+3	; 0x03
    255e:	0f 2e       	mov	r0, r31
    2560:	f0 ef       	ldi	r31, 0xF0	; 240
    2562:	af 2e       	mov	r10, r31
    2564:	b1 2c       	mov	r11, r1
    2566:	f0 2d       	mov	r31, r0
    2568:	2f ef       	ldi	r18, 0xFF	; 255
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	43 e0       	ldi	r20, 0x03	; 3
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	cb 01       	movw	r24, r22
    2576:	31 d4       	rcall	.+2146   	; 0x2dda <ILI9341_write_char_5x5>
	}
	ILI9341_write_char_15x15(BLACK,WHITE,2,parts_per_million_symbol_mv,280,150);
    2578:	0f 2e       	mov	r0, r31
    257a:	f6 e9       	ldi	r31, 0x96	; 150
    257c:	af 2e       	mov	r10, r31
    257e:	b1 2c       	mov	r11, r1
    2580:	f0 2d       	mov	r31, r0
    2582:	0f 2e       	mov	r0, r31
    2584:	f8 e1       	ldi	r31, 0x18	; 24
    2586:	cf 2e       	mov	r12, r31
    2588:	dd 24       	eor	r13, r13
    258a:	d3 94       	inc	r13
    258c:	f0 2d       	mov	r31, r0
    258e:	0f 2e       	mov	r0, r31
    2590:	ff e8       	ldi	r31, 0x8F	; 143
    2592:	ef 2e       	mov	r14, r31
    2594:	f2 e0       	ldi	r31, 0x02	; 2
    2596:	ff 2e       	mov	r15, r31
    2598:	f0 2d       	mov	r31, r0
    259a:	02 e0       	ldi	r16, 0x02	; 2
    259c:	2f ef       	ldi	r18, 0xFF	; 255
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	43 e0       	ldi	r20, 0x03	; 3
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	cb 01       	movw	r24, r22
    25aa:	b7 d4       	rcall	.+2414   	; 0x2f1a <ILI9341_write_char_15x15>
	if(TVOC >= 1000)
    25ac:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <__data_end>
    25b0:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <__data_end+0x1>
    25b4:	a0 91 b6 0b 	lds	r26, 0x0BB6	; 0x800bb6 <__data_end+0x2>
    25b8:	b0 91 b7 0b 	lds	r27, 0x0BB7	; 0x800bb7 <__data_end+0x3>
    25bc:	88 3e       	cpi	r24, 0xE8	; 232
    25be:	93 40       	sbci	r25, 0x03	; 3
    25c0:	a1 05       	cpc	r26, r1
    25c2:	b1 05       	cpc	r27, r1
    25c4:	08 f4       	brcc	.+2      	; 0x25c8 <ILI9341_LCD_input_data_air_quality+0x5fe>
    25c6:	6c c0       	rjmp	.+216    	; 0x26a0 <ILI9341_LCD_input_data_air_quality+0x6d6>
	{
		ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[0]],120,200);
    25c8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ca:	e2 2f       	mov	r30, r18
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	ee 0f       	add	r30, r30
    25d4:	ff 1f       	adc	r31, r31
    25d6:	e3 5c       	subi	r30, 0xC3	; 195
    25d8:	f8 4f       	sbci	r31, 0xF8	; 248
    25da:	c0 80       	ld	r12, Z
    25dc:	d1 80       	ldd	r13, Z+1	; 0x01
    25de:	e2 80       	ldd	r14, Z+2	; 0x02
    25e0:	f3 80       	ldd	r15, Z+3	; 0x03
    25e2:	0f 2e       	mov	r0, r31
    25e4:	f8 ec       	ldi	r31, 0xC8	; 200
    25e6:	8f 2e       	mov	r8, r31
    25e8:	91 2c       	mov	r9, r1
    25ea:	f0 2d       	mov	r31, r0
    25ec:	0f 2e       	mov	r0, r31
    25ee:	f8 e7       	ldi	r31, 0x78	; 120
    25f0:	af 2e       	mov	r10, r31
    25f2:	b1 2c       	mov	r11, r1
    25f4:	f0 2d       	mov	r31, r0
    25f6:	06 e0       	ldi	r16, 0x06	; 6
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 ef       	ldi	r19, 0xF0	; 240
    25fc:	43 e0       	ldi	r20, 0x03	; 3
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	cb 01       	movw	r24, r22
    2606:	e9 d3       	rcall	.+2002   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[1]],160,200);
    2608:	e7 2d       	mov	r30, r7
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	ee 0f       	add	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	ee 0f       	add	r30, r30
    2612:	ff 1f       	adc	r31, r31
    2614:	e3 5c       	subi	r30, 0xC3	; 195
    2616:	f8 4f       	sbci	r31, 0xF8	; 248
    2618:	c0 80       	ld	r12, Z
    261a:	d1 80       	ldd	r13, Z+1	; 0x01
    261c:	e2 80       	ldd	r14, Z+2	; 0x02
    261e:	f3 80       	ldd	r15, Z+3	; 0x03
    2620:	0f 2e       	mov	r0, r31
    2622:	f0 ea       	ldi	r31, 0xA0	; 160
    2624:	af 2e       	mov	r10, r31
    2626:	b1 2c       	mov	r11, r1
    2628:	f0 2d       	mov	r31, r0
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 ef       	ldi	r19, 0xF0	; 240
    262e:	43 e0       	ldi	r20, 0x03	; 3
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	cb 01       	movw	r24, r22
    2638:	d0 d3       	rcall	.+1952   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[2]],200,200);
    263a:	e2 2d       	mov	r30, r2
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	e3 5c       	subi	r30, 0xC3	; 195
    2648:	f8 4f       	sbci	r31, 0xF8	; 248
    264a:	c0 80       	ld	r12, Z
    264c:	d1 80       	ldd	r13, Z+1	; 0x01
    264e:	e2 80       	ldd	r14, Z+2	; 0x02
    2650:	f3 80       	ldd	r15, Z+3	; 0x03
    2652:	0f 2e       	mov	r0, r31
    2654:	f8 ec       	ldi	r31, 0xC8	; 200
    2656:	af 2e       	mov	r10, r31
    2658:	b1 2c       	mov	r11, r1
    265a:	f0 2d       	mov	r31, r0
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 ef       	ldi	r19, 0xF0	; 240
    2660:	43 e0       	ldi	r20, 0x03	; 3
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	cb 01       	movw	r24, r22
    266a:	b7 d3       	rcall	.+1902   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[3]],240,200);
    266c:	e6 2d       	mov	r30, r6
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	ee 0f       	add	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	e3 5c       	subi	r30, 0xC3	; 195
    267a:	f8 4f       	sbci	r31, 0xF8	; 248
    267c:	c0 80       	ld	r12, Z
    267e:	d1 80       	ldd	r13, Z+1	; 0x01
    2680:	e2 80       	ldd	r14, Z+2	; 0x02
    2682:	f3 80       	ldd	r15, Z+3	; 0x03
    2684:	0f 2e       	mov	r0, r31
    2686:	f0 ef       	ldi	r31, 0xF0	; 240
    2688:	af 2e       	mov	r10, r31
    268a:	b1 2c       	mov	r11, r1
    268c:	f0 2d       	mov	r31, r0
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 ef       	ldi	r19, 0xF0	; 240
    2692:	43 e0       	ldi	r20, 0x03	; 3
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	cb 01       	movw	r24, r22
    269c:	9e d3       	rcall	.+1852   	; 0x2dda <ILI9341_write_char_5x5>
    269e:	2c c1       	rjmp	.+600    	; 0x28f8 <ILI9341_LCD_input_data_air_quality+0x92e>
    26a0:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <__data_end>
	}
	else if(TVOC >= 100)
    26a4:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <__data_end+0x1>
    26a8:	a0 91 b6 0b 	lds	r26, 0x0BB6	; 0x800bb6 <__data_end+0x2>
    26ac:	b0 91 b7 0b 	lds	r27, 0x0BB7	; 0x800bb7 <__data_end+0x3>
    26b0:	84 36       	cpi	r24, 0x64	; 100
    26b2:	91 05       	cpc	r25, r1
    26b4:	a1 05       	cpc	r26, r1
    26b6:	b1 05       	cpc	r27, r1
    26b8:	08 f4       	brcc	.+2      	; 0x26bc <ILI9341_LCD_input_data_air_quality+0x6f2>
    26ba:	b2 c0       	rjmp	.+356    	; 0x2820 <ILI9341_LCD_input_data_air_quality+0x856>
    26bc:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <__data_end>
	{
		if(TVOC >= 500)
    26c0:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <__data_end+0x1>
    26c4:	a0 91 b6 0b 	lds	r26, 0x0BB6	; 0x800bb6 <__data_end+0x2>
    26c8:	b0 91 b7 0b 	lds	r27, 0x0BB7	; 0x800bb7 <__data_end+0x3>
    26cc:	84 3f       	cpi	r24, 0xF4	; 244
    26ce:	91 40       	sbci	r25, 0x01	; 1
    26d0:	a1 05       	cpc	r26, r1
    26d2:	b1 05       	cpc	r27, r1
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <ILI9341_LCD_input_data_air_quality+0x70e>
    26d6:	52 c0       	rjmp	.+164    	; 0x277c <ILI9341_LCD_input_data_air_quality+0x7b2>
    26d8:	e7 2d       	mov	r30, r7
		{
			ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[1]],160,200);
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	ee 0f       	add	r30, r30
    26de:	ff 1f       	adc	r31, r31
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	e3 5c       	subi	r30, 0xC3	; 195
    26e6:	f8 4f       	sbci	r31, 0xF8	; 248
    26e8:	c0 80       	ld	r12, Z
    26ea:	d1 80       	ldd	r13, Z+1	; 0x01
    26ec:	e2 80       	ldd	r14, Z+2	; 0x02
    26ee:	f3 80       	ldd	r15, Z+3	; 0x03
    26f0:	0f 2e       	mov	r0, r31
    26f2:	f8 ec       	ldi	r31, 0xC8	; 200
    26f4:	8f 2e       	mov	r8, r31
    26f6:	91 2c       	mov	r9, r1
    26f8:	f0 2d       	mov	r31, r0
    26fa:	0f 2e       	mov	r0, r31
    26fc:	f0 ea       	ldi	r31, 0xA0	; 160
    26fe:	af 2e       	mov	r10, r31
    2700:	b1 2c       	mov	r11, r1
    2702:	f0 2d       	mov	r31, r0
    2704:	06 e0       	ldi	r16, 0x06	; 6
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 ef       	ldi	r19, 0xF0	; 240
    270a:	43 e0       	ldi	r20, 0x03	; 3
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	70 e0       	ldi	r23, 0x00	; 0
    2712:	cb 01       	movw	r24, r22
    2714:	62 d3       	rcall	.+1732   	; 0x2dda <ILI9341_write_char_5x5>
			ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[2]],200,200);
    2716:	e2 2d       	mov	r30, r2
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	ee 0f       	add	r30, r30
    2720:	ff 1f       	adc	r31, r31
    2722:	e3 5c       	subi	r30, 0xC3	; 195
    2724:	f8 4f       	sbci	r31, 0xF8	; 248
    2726:	c0 80       	ld	r12, Z
    2728:	d1 80       	ldd	r13, Z+1	; 0x01
    272a:	e2 80       	ldd	r14, Z+2	; 0x02
    272c:	f3 80       	ldd	r15, Z+3	; 0x03
    272e:	0f 2e       	mov	r0, r31
    2730:	f8 ec       	ldi	r31, 0xC8	; 200
    2732:	af 2e       	mov	r10, r31
    2734:	b1 2c       	mov	r11, r1
    2736:	f0 2d       	mov	r31, r0
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 ef       	ldi	r19, 0xF0	; 240
    273c:	43 e0       	ldi	r20, 0x03	; 3
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	cb 01       	movw	r24, r22
    2746:	49 d3       	rcall	.+1682   	; 0x2dda <ILI9341_write_char_5x5>
			ILI9341_write_char_5x5(BLACK,RED,6,numbers_mv[TVOC_index[3]],240,200);
    2748:	e6 2d       	mov	r30, r6
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	e3 5c       	subi	r30, 0xC3	; 195
    2756:	f8 4f       	sbci	r31, 0xF8	; 248
    2758:	c0 80       	ld	r12, Z
    275a:	d1 80       	ldd	r13, Z+1	; 0x01
    275c:	e2 80       	ldd	r14, Z+2	; 0x02
    275e:	f3 80       	ldd	r15, Z+3	; 0x03
    2760:	0f 2e       	mov	r0, r31
    2762:	f0 ef       	ldi	r31, 0xF0	; 240
    2764:	af 2e       	mov	r10, r31
    2766:	b1 2c       	mov	r11, r1
    2768:	f0 2d       	mov	r31, r0
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 ef       	ldi	r19, 0xF0	; 240
    276e:	43 e0       	ldi	r20, 0x03	; 3
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	cb 01       	movw	r24, r22
    2778:	30 d3       	rcall	.+1632   	; 0x2dda <ILI9341_write_char_5x5>
    277a:	be c0       	rjmp	.+380    	; 0x28f8 <ILI9341_LCD_input_data_air_quality+0x92e>
		}
		else
		{
			ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[1]],160,200);
    277c:	e7 2d       	mov	r30, r7
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	ee 0f       	add	r30, r30
    2786:	ff 1f       	adc	r31, r31
    2788:	e3 5c       	subi	r30, 0xC3	; 195
    278a:	f8 4f       	sbci	r31, 0xF8	; 248
    278c:	c0 80       	ld	r12, Z
    278e:	d1 80       	ldd	r13, Z+1	; 0x01
    2790:	e2 80       	ldd	r14, Z+2	; 0x02
    2792:	f3 80       	ldd	r15, Z+3	; 0x03
    2794:	0f 2e       	mov	r0, r31
    2796:	f8 ec       	ldi	r31, 0xC8	; 200
    2798:	8f 2e       	mov	r8, r31
    279a:	91 2c       	mov	r9, r1
    279c:	f0 2d       	mov	r31, r0
    279e:	0f 2e       	mov	r0, r31
    27a0:	f0 ea       	ldi	r31, 0xA0	; 160
    27a2:	af 2e       	mov	r10, r31
    27a4:	b1 2c       	mov	r11, r1
    27a6:	f0 2d       	mov	r31, r0
    27a8:	06 e0       	ldi	r16, 0x06	; 6
    27aa:	2f ef       	ldi	r18, 0xFF	; 255
    27ac:	3f ef       	ldi	r19, 0xFF	; 255
    27ae:	43 e0       	ldi	r20, 0x03	; 3
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	cb 01       	movw	r24, r22
    27b8:	10 d3       	rcall	.+1568   	; 0x2dda <ILI9341_write_char_5x5>
			ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[2]],200,200);
    27ba:	e2 2d       	mov	r30, r2
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	ee 0f       	add	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	ee 0f       	add	r30, r30
    27c4:	ff 1f       	adc	r31, r31
    27c6:	e3 5c       	subi	r30, 0xC3	; 195
    27c8:	f8 4f       	sbci	r31, 0xF8	; 248
    27ca:	c0 80       	ld	r12, Z
    27cc:	d1 80       	ldd	r13, Z+1	; 0x01
    27ce:	e2 80       	ldd	r14, Z+2	; 0x02
    27d0:	f3 80       	ldd	r15, Z+3	; 0x03
    27d2:	0f 2e       	mov	r0, r31
    27d4:	f8 ec       	ldi	r31, 0xC8	; 200
    27d6:	af 2e       	mov	r10, r31
    27d8:	b1 2c       	mov	r11, r1
    27da:	f0 2d       	mov	r31, r0
    27dc:	2f ef       	ldi	r18, 0xFF	; 255
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	43 e0       	ldi	r20, 0x03	; 3
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	cb 01       	movw	r24, r22
    27ea:	f7 d2       	rcall	.+1518   	; 0x2dda <ILI9341_write_char_5x5>
			ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[3]],240,200);
    27ec:	e6 2d       	mov	r30, r6
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	ee 0f       	add	r30, r30
    27f2:	ff 1f       	adc	r31, r31
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	e3 5c       	subi	r30, 0xC3	; 195
    27fa:	f8 4f       	sbci	r31, 0xF8	; 248
    27fc:	c0 80       	ld	r12, Z
    27fe:	d1 80       	ldd	r13, Z+1	; 0x01
    2800:	e2 80       	ldd	r14, Z+2	; 0x02
    2802:	f3 80       	ldd	r15, Z+3	; 0x03
    2804:	0f 2e       	mov	r0, r31
    2806:	f0 ef       	ldi	r31, 0xF0	; 240
    2808:	af 2e       	mov	r10, r31
    280a:	b1 2c       	mov	r11, r1
    280c:	f0 2d       	mov	r31, r0
    280e:	2f ef       	ldi	r18, 0xFF	; 255
    2810:	3f ef       	ldi	r19, 0xFF	; 255
    2812:	43 e0       	ldi	r20, 0x03	; 3
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	60 e0       	ldi	r22, 0x00	; 0
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	cb 01       	movw	r24, r22
    281c:	de d2       	rcall	.+1468   	; 0x2dda <ILI9341_write_char_5x5>
    281e:	6c c0       	rjmp	.+216    	; 0x28f8 <ILI9341_LCD_input_data_air_quality+0x92e>
    2820:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <__data_end>
		}
	}
	else if(TVOC >= 10)
    2824:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <__data_end+0x1>
    2828:	a0 91 b6 0b 	lds	r26, 0x0BB6	; 0x800bb6 <__data_end+0x2>
    282c:	b0 91 b7 0b 	lds	r27, 0x0BB7	; 0x800bb7 <__data_end+0x3>
    2830:	0a 97       	sbiw	r24, 0x0a	; 10
    2832:	a1 05       	cpc	r26, r1
    2834:	b1 05       	cpc	r27, r1
    2836:	c8 f1       	brcs	.+114    	; 0x28aa <ILI9341_LCD_input_data_air_quality+0x8e0>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[2]],200,200);
    2838:	e2 2d       	mov	r30, r2
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	ee 0f       	add	r30, r30
    283e:	ff 1f       	adc	r31, r31
    2840:	ee 0f       	add	r30, r30
    2842:	ff 1f       	adc	r31, r31
    2844:	e3 5c       	subi	r30, 0xC3	; 195
    2846:	f8 4f       	sbci	r31, 0xF8	; 248
    2848:	c0 80       	ld	r12, Z
    284a:	d1 80       	ldd	r13, Z+1	; 0x01
    284c:	e2 80       	ldd	r14, Z+2	; 0x02
    284e:	f3 80       	ldd	r15, Z+3	; 0x03
    2850:	0f 2e       	mov	r0, r31
    2852:	f8 ec       	ldi	r31, 0xC8	; 200
    2854:	8f 2e       	mov	r8, r31
    2856:	91 2c       	mov	r9, r1
    2858:	f0 2d       	mov	r31, r0
    285a:	0f 2e       	mov	r0, r31
    285c:	f8 ec       	ldi	r31, 0xC8	; 200
    285e:	af 2e       	mov	r10, r31
    2860:	b1 2c       	mov	r11, r1
    2862:	f0 2d       	mov	r31, r0
    2864:	06 e0       	ldi	r16, 0x06	; 6
    2866:	2f ef       	ldi	r18, 0xFF	; 255
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	43 e0       	ldi	r20, 0x03	; 3
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	cb 01       	movw	r24, r22
    2874:	b2 d2       	rcall	.+1380   	; 0x2dda <ILI9341_write_char_5x5>
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[3]],240,200);
    2876:	e6 2d       	mov	r30, r6
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	ee 0f       	add	r30, r30
    287c:	ff 1f       	adc	r31, r31
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	e3 5c       	subi	r30, 0xC3	; 195
    2884:	f8 4f       	sbci	r31, 0xF8	; 248
    2886:	c0 80       	ld	r12, Z
    2888:	d1 80       	ldd	r13, Z+1	; 0x01
    288a:	e2 80       	ldd	r14, Z+2	; 0x02
    288c:	f3 80       	ldd	r15, Z+3	; 0x03
    288e:	0f 2e       	mov	r0, r31
    2890:	f0 ef       	ldi	r31, 0xF0	; 240
    2892:	af 2e       	mov	r10, r31
    2894:	b1 2c       	mov	r11, r1
    2896:	f0 2d       	mov	r31, r0
    2898:	2f ef       	ldi	r18, 0xFF	; 255
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	43 e0       	ldi	r20, 0x03	; 3
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	cb 01       	movw	r24, r22
    28a6:	99 d2       	rcall	.+1330   	; 0x2dda <ILI9341_write_char_5x5>
    28a8:	27 c0       	rjmp	.+78     	; 0x28f8 <ILI9341_LCD_input_data_air_quality+0x92e>
    28aa:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <__data_end>
	}
	else if(TVOC >= 0)
    28ae:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <__data_end+0x1>
    28b2:	a0 91 b6 0b 	lds	r26, 0x0BB6	; 0x800bb6 <__data_end+0x2>
    28b6:	b0 91 b7 0b 	lds	r27, 0x0BB7	; 0x800bb7 <__data_end+0x3>
	{
		ILI9341_write_char_5x5(BLACK,WHITE,6,numbers_mv[TVOC_index[3]],240,200);
    28ba:	e6 2d       	mov	r30, r6
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	ee 0f       	add	r30, r30
    28c0:	ff 1f       	adc	r31, r31
    28c2:	ee 0f       	add	r30, r30
    28c4:	ff 1f       	adc	r31, r31
    28c6:	e3 5c       	subi	r30, 0xC3	; 195
    28c8:	f8 4f       	sbci	r31, 0xF8	; 248
    28ca:	c0 80       	ld	r12, Z
    28cc:	d1 80       	ldd	r13, Z+1	; 0x01
    28ce:	e2 80       	ldd	r14, Z+2	; 0x02
    28d0:	f3 80       	ldd	r15, Z+3	; 0x03
    28d2:	0f 2e       	mov	r0, r31
    28d4:	f8 ec       	ldi	r31, 0xC8	; 200
    28d6:	8f 2e       	mov	r8, r31
    28d8:	91 2c       	mov	r9, r1
    28da:	f0 2d       	mov	r31, r0
    28dc:	0f 2e       	mov	r0, r31
    28de:	f0 ef       	ldi	r31, 0xF0	; 240
    28e0:	af 2e       	mov	r10, r31
    28e2:	b1 2c       	mov	r11, r1
    28e4:	f0 2d       	mov	r31, r0
    28e6:	06 e0       	ldi	r16, 0x06	; 6
    28e8:	2f ef       	ldi	r18, 0xFF	; 255
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	43 e0       	ldi	r20, 0x03	; 3
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	70 e0       	ldi	r23, 0x00	; 0
    28f4:	cb 01       	movw	r24, r22
    28f6:	71 d2       	rcall	.+1250   	; 0x2dda <ILI9341_write_char_5x5>
	}
	ILI9341_write_char_15x15(BLACK,WHITE,2,parts_per_billion_symbol_mv,280,200);
    28f8:	0f 2e       	mov	r0, r31
    28fa:	f8 ec       	ldi	r31, 0xC8	; 200
    28fc:	af 2e       	mov	r10, r31
    28fe:	b1 2c       	mov	r11, r1
    2900:	f0 2d       	mov	r31, r0
    2902:	0f 2e       	mov	r0, r31
    2904:	f8 e1       	ldi	r31, 0x18	; 24
    2906:	cf 2e       	mov	r12, r31
    2908:	dd 24       	eor	r13, r13
    290a:	d3 94       	inc	r13
    290c:	f0 2d       	mov	r31, r0
    290e:	0f 2e       	mov	r0, r31
    2910:	fb e6       	ldi	r31, 0x6B	; 107
    2912:	ef 2e       	mov	r14, r31
    2914:	f2 e0       	ldi	r31, 0x02	; 2
    2916:	ff 2e       	mov	r15, r31
    2918:	f0 2d       	mov	r31, r0
    291a:	02 e0       	ldi	r16, 0x02	; 2
    291c:	2f ef       	ldi	r18, 0xFF	; 255
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	43 e0       	ldi	r20, 0x03	; 3
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	60 e0       	ldi	r22, 0x00	; 0
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	cb 01       	movw	r24, r22
    292a:	f7 d2       	rcall	.+1518   	; 0x2f1a <ILI9341_write_char_15x15>
    292c:	0f 90       	pop	r0
}
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	df 90       	pop	r13
    2944:	cf 90       	pop	r12
    2946:	bf 90       	pop	r11
    2948:	af 90       	pop	r10
    294a:	9f 90       	pop	r9
    294c:	8f 90       	pop	r8
    294e:	7f 90       	pop	r7
    2950:	6f 90       	pop	r6
    2952:	5f 90       	pop	r5
    2954:	4f 90       	pop	r4
    2956:	3f 90       	pop	r3
    2958:	2f 90       	pop	r2
    295a:	08 95       	ret

0000295c <ILI9341_LCD_input_data_update>:
    295c:	80 91 c9 0b 	lds	r24, 0x0BC9	; 0x800bc9 <isdisplay_changed>

void ILI9341_LCD_input_data_update()
{
	uint32_t timewait = 0xFFFFF*2;
	if(isdisplay_changed == display_true)
    2960:	81 30       	cpi	r24, 0x01	; 1
    2962:	31 f4       	brne	.+12     	; 0x2970 <ILI9341_LCD_input_data_update+0x14>
	{
		ILI9341_fill_screen(BLACK);
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	cb 01       	movw	r24, r22
    296a:	fc d1       	rcall	.+1016   	; 0x2d64 <ILI9341_fill_screen>
		isdisplay_changed = display_false;
    296c:	10 92 c9 0b 	sts	0x0BC9, r1	; 0x800bc9 <isdisplay_changed>
	}
	if(esp8266_user_status == Ready_to_receive_time_data)
    2970:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
    2974:	8f 30       	cpi	r24, 0x0F	; 15
    2976:	71 f4       	brne	.+28     	; 0x2994 <ILI9341_LCD_input_data_update+0x38>
	{
		ESP8266_leave_modem_sleep_mode();
    2978:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <ESP8266_leave_modem_sleep_mode>
		ESP8266_receive_time();
    297c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ESP8266_receive_time>
		if(esp8266_user_status == Success)
    2980:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	21 f4       	brne	.+8      	; 0x2990 <ILI9341_LCD_input_data_update+0x34>
		{
			ILI9341_convert_received_time_string(received_time_string[1]);
    2988:	87 e3       	ldi	r24, 0x37	; 55
    298a:	9e e0       	ldi	r25, 0x0E	; 14
    298c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <ILI9341_convert_received_time_string>
		}
		ESP8266_enter_modem_sleep_mode();
    2990:	0e 94 90 03 	call	0x720	; 0x720 <ESP8266_enter_modem_sleep_mode>
	}
	if(Display_mode == Time_display_mode)
    2994:	80 91 cb 0b 	lds	r24, 0x0BCB	; 0x800bcb <Display_mode>
    2998:	81 11       	cpse	r24, r1
    299a:	09 c0       	rjmp	.+18     	; 0x29ae <ILI9341_LCD_input_data_update+0x52>
	{
		if(is_time_update == need_Update)
    299c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <is_time_update>
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	09 f0       	breq	.+2      	; 0x29a6 <ILI9341_LCD_input_data_update+0x4a>
		{
			ILI9341_LCD_input_data_time();
    29a4:	57 c0       	rjmp	.+174    	; 0x2a54 <ILI9341_LCD_input_data_update+0xf8>
    29a6:	17 d9       	rcall	.-3538   	; 0x1bd6 <ILI9341_LCD_input_data_time>
			is_time_update = Updated;
    29a8:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <is_time_update>
    29ac:	08 95       	ret
		}
	}
	else if(Display_mode == Temp_Humi_display_mode)
    29ae:	80 91 cb 0b 	lds	r24, 0x0BCB	; 0x800bcb <Display_mode>
    29b2:	81 30       	cpi	r24, 0x01	; 1
    29b4:	31 f5       	brne	.+76     	; 0x2a02 <ILI9341_LCD_input_data_update+0xa6>
	{
		SHT31_read_period();
    29b6:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <SHT31_read_period>
	ILI9341_write_char_15x15(BLACK,WHITE,2,parts_per_billion_symbol_mv,280,200);
}

void ILI9341_LCD_input_data_update()
{
	uint32_t timewait = 0xFFFFF*2;
    29ba:	8e ef       	ldi	r24, 0xFE	; 254
    29bc:	9f ef       	ldi	r25, 0xFF	; 255
    29be:	af e1       	ldi	r26, 0x1F	; 31
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
		}
	}
	else if(Display_mode == Temp_Humi_display_mode)
	{
		SHT31_read_period();
		while(timewait--);
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <ILI9341_LCD_input_data_update+0x6c>
    29c4:	db 01       	movw	r26, r22
    29c6:	ca 01       	movw	r24, r20
    29c8:	ac 01       	movw	r20, r24
    29ca:	bd 01       	movw	r22, r26
    29cc:	41 50       	subi	r20, 0x01	; 1
    29ce:	51 09       	sbc	r21, r1
    29d0:	61 09       	sbc	r22, r1
    29d2:	71 09       	sbc	r23, r1
    29d4:	89 2b       	or	r24, r25
    29d6:	8a 2b       	or	r24, r26
    29d8:	8b 2b       	or	r24, r27
		timewait = 0xFFFFF*2;
		ILI9341_LCD_input_data_temperature_humidity();
    29da:	a1 f7       	brne	.-24     	; 0x29c4 <ILI9341_LCD_input_data_update+0x68>
    29dc:	5c d9       	rcall	.-3400   	; 0x1c96 <ILI9341_LCD_input_data_temperature_humidity>
	}
	else if(Display_mode == Temp_Humi_display_mode)
	{
		SHT31_read_period();
		while(timewait--);
		timewait = 0xFFFFF*2;
    29de:	8e ef       	ldi	r24, 0xFE	; 254
    29e0:	9f ef       	ldi	r25, 0xFF	; 255
    29e2:	af e1       	ldi	r26, 0x1F	; 31
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
		ILI9341_LCD_input_data_temperature_humidity();
		while(timewait--);
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <ILI9341_LCD_input_data_update+0x90>
    29e8:	db 01       	movw	r26, r22
    29ea:	ca 01       	movw	r24, r20
    29ec:	ac 01       	movw	r20, r24
    29ee:	bd 01       	movw	r22, r26
    29f0:	41 50       	subi	r20, 0x01	; 1
    29f2:	51 09       	sbc	r21, r1
    29f4:	61 09       	sbc	r22, r1
    29f6:	71 09       	sbc	r23, r1
    29f8:	89 2b       	or	r24, r25
    29fa:	8a 2b       	or	r24, r26
    29fc:	8b 2b       	or	r24, r27
    29fe:	a1 f7       	brne	.-24     	; 0x29e8 <ILI9341_LCD_input_data_update+0x8c>
    2a00:	08 95       	ret
	}
	else if(Display_mode == Air_quality_display_mode)
    2a02:	80 91 cb 0b 	lds	r24, 0x0BCB	; 0x800bcb <Display_mode>
    2a06:	82 30       	cpi	r24, 0x02	; 2
    2a08:	29 f5       	brne	.+74     	; 0x2a54 <ILI9341_LCD_input_data_update+0xf8>
	{
		CCS811_read_CO2_TVOC();
    2a0a:	0e 94 ae 00 	call	0x15c	; 0x15c <CCS811_read_CO2_TVOC>
	ILI9341_write_char_15x15(BLACK,WHITE,2,parts_per_billion_symbol_mv,280,200);
}

void ILI9341_LCD_input_data_update()
{
	uint32_t timewait = 0xFFFFF*2;
    2a0e:	8e ef       	ldi	r24, 0xFE	; 254
    2a10:	9f ef       	ldi	r25, 0xFF	; 255
    2a12:	af e1       	ldi	r26, 0x1F	; 31
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
		while(timewait--);
	}
	else if(Display_mode == Air_quality_display_mode)
	{
		CCS811_read_CO2_TVOC();
		while(timewait--);
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <ILI9341_LCD_input_data_update+0xc0>
    2a18:	db 01       	movw	r26, r22
    2a1a:	ca 01       	movw	r24, r20
    2a1c:	ac 01       	movw	r20, r24
    2a1e:	bd 01       	movw	r22, r26
    2a20:	41 50       	subi	r20, 0x01	; 1
    2a22:	51 09       	sbc	r21, r1
    2a24:	61 09       	sbc	r22, r1
    2a26:	71 09       	sbc	r23, r1
    2a28:	89 2b       	or	r24, r25
    2a2a:	8a 2b       	or	r24, r26
    2a2c:	8b 2b       	or	r24, r27
		timewait = 0xFFFFF*2;
		ILI9341_LCD_input_data_air_quality();
    2a2e:	a1 f7       	brne	.-24     	; 0x2a18 <ILI9341_LCD_input_data_update+0xbc>
    2a30:	cc da       	rcall	.-2664   	; 0x1fca <ILI9341_LCD_input_data_air_quality>
	}
	else if(Display_mode == Air_quality_display_mode)
	{
		CCS811_read_CO2_TVOC();
		while(timewait--);
		timewait = 0xFFFFF*2;
    2a32:	8e ef       	ldi	r24, 0xFE	; 254
    2a34:	9f ef       	ldi	r25, 0xFF	; 255
    2a36:	af e1       	ldi	r26, 0x1F	; 31
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
		ILI9341_LCD_input_data_air_quality();
		while(timewait--);
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <ILI9341_LCD_input_data_update+0xe4>
    2a3c:	db 01       	movw	r26, r22
    2a3e:	ca 01       	movw	r24, r20
    2a40:	ac 01       	movw	r20, r24
    2a42:	bd 01       	movw	r22, r26
    2a44:	41 50       	subi	r20, 0x01	; 1
    2a46:	51 09       	sbc	r21, r1
    2a48:	61 09       	sbc	r22, r1
    2a4a:	71 09       	sbc	r23, r1
    2a4c:	89 2b       	or	r24, r25
    2a4e:	8a 2b       	or	r24, r26
    2a50:	8b 2b       	or	r24, r27
    2a52:	a1 f7       	brne	.-24     	; 0x2a3c <ILI9341_LCD_input_data_update+0xe0>
    2a54:	08 95       	ret

00002a56 <ILI9341_LCD_input_data_init>:
	}
}


void ILI9341_LCD_input_data_init()
{
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
	SHT31_init();
    2a5a:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <SHT31_init>
	CCS811_init();
    2a5e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CCS811_init>
	ILI9341_current_time_data_init(&current_time);
    2a62:	82 e0       	ldi	r24, 0x02	; 2
    2a64:	9f e0       	ldi	r25, 0x0F	; 15
    2a66:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <ILI9341_current_time_data_init>
	ILI9341_init();
    2a6a:	6c d1       	rcall	.+728    	; 0x2d44 <ILI9341_init>
	Timer8_use2_init(enable,64);
    2a6c:	60 e4       	ldi	r22, 0x40	; 64
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <Timer8_use2_init>
	printf("\n\r%d, %d\n\r", seconds, mili_sec);
    2a76:	80 91 cc 0b 	lds	r24, 0x0BCC	; 0x800bcc <mili_sec>
    2a7a:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <mili_sec+0x1>
    2a7e:	20 91 ce 0b 	lds	r18, 0x0BCE	; 0x800bce <seconds>
    2a82:	9f 93       	push	r25
    2a84:	8f 93       	push	r24
    2a86:	1f 92       	push	r1
    2a88:	2f 93       	push	r18
    2a8a:	c5 e3       	ldi	r28, 0x35	; 53
    2a8c:	db e0       	ldi	r29, 0x0B	; 11
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	ESP8266_init();
    2a96:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ESP8266_init>
	printf("\n\r%d, %d\n\r", seconds, mili_sec);
    2a9a:	80 91 cc 0b 	lds	r24, 0x0BCC	; 0x800bcc <mili_sec>
    2a9e:	90 91 cd 0b 	lds	r25, 0x0BCD	; 0x800bcd <mili_sec+0x1>
    2aa2:	20 91 ce 0b 	lds	r18, 0x0BCE	; 0x800bce <seconds>
    2aa6:	9f 93       	push	r25
    2aa8:	8f 93       	push	r24
    2aaa:	1f 92       	push	r1
    2aac:	2f 93       	push	r18
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <printf>
	if(esp8266_user_status == Success)
    2ab6:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <esp8266_user_status>
    2aba:	2d b7       	in	r18, 0x3d	; 61
    2abc:	3e b7       	in	r19, 0x3e	; 62
    2abe:	24 5f       	subi	r18, 0xF4	; 244
    2ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	3e bf       	out	0x3e, r19	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	2d bf       	out	0x3d, r18	; 61
    2acc:	81 30       	cpi	r24, 0x01	; 1
    2ace:	21 f4       	brne	.+8      	; 0x2ad8 <ILI9341_LCD_input_data_init+0x82>
	{
		ILI9341_convert_received_time_string(received_time_string[1]);
    2ad0:	87 e3       	ldi	r24, 0x37	; 55
    2ad2:	9e e0       	ldi	r25, 0x0E	; 14
    2ad4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <ILI9341_convert_received_time_string>
	}
	Display_mode = Time_display_mode;
    2ad8:	10 92 cb 0b 	sts	0x0BCB, r1	; 0x800bcb <Display_mode>
	ILI9341_fill_screen(BLACK);
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	40 d1       	rcall	.+640    	; 0x2d64 <ILI9341_fill_screen>
	SHT31_read_period();
    2ae4:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <SHT31_read_period>
	CCS811_read_CO2_TVOC();
    2ae8:	0e 94 ae 00 	call	0x15c	; 0x15c <CCS811_read_CO2_TVOC>
	ILI9341_LCD_input_data_update();
    2aec:	37 df       	rcall	.-402    	; 0x295c <ILI9341_LCD_input_data_update>
	exinterrupt_init();
    2aee:	0e 94 61 05 	call	0xac2	; 0xac2 <exinterrupt_init>
}
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <ILI9341_chip_select>:
				ILI9341_write_char_5x5(bg_color,font_color,font_size,colon_mv,start_x,start_y);
			}
		}
		start_x = start_x + (init_addr[font_size] + 2);
	}
}
    2af8:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <spi_chip_select>
    2afc:	85 e0       	ldi	r24, 0x05	; 5
    2afe:	8a 95       	dec	r24
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <ILI9341_chip_select+0x6>
    2b02:	00 00       	nop
    2b04:	08 95       	ret

00002b06 <ILI9341_chip_deselect>:
    2b06:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <spi_chip_deselect>
    2b0a:	85 e0       	ldi	r24, 0x05	; 5
    2b0c:	8a 95       	dec	r24
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <ILI9341_chip_deselect+0x6>
    2b10:	00 00       	nop
    2b12:	08 95       	ret

00002b14 <ILI9341_select_send_command>:
    2b14:	c4 9b       	sbis	0x18, 4	; 24
    2b16:	03 c0       	rjmp	.+6      	; 0x2b1e <ILI9341_select_send_command+0xa>
    2b18:	88 b3       	in	r24, 0x18	; 24
    2b1a:	8f 7e       	andi	r24, 0xEF	; 239
    2b1c:	88 bb       	out	0x18, r24	; 24
    2b1e:	08 95       	ret

00002b20 <ILI9341_select_send_data>:
    2b20:	c4 99       	sbic	0x18, 4	; 24
    2b22:	03 c0       	rjmp	.+6      	; 0x2b2a <ILI9341_select_send_data+0xa>
    2b24:	88 b3       	in	r24, 0x18	; 24
    2b26:	80 61       	ori	r24, 0x10	; 16
    2b28:	88 bb       	out	0x18, r24	; 24
    2b2a:	08 95       	ret

00002b2c <ILI9341_write_data>:
    2b2c:	ef 92       	push	r14
    2b2e:	ff 92       	push	r15
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	c8 2f       	mov	r28, r24
    2b38:	16 2f       	mov	r17, r22
    2b3a:	7a 01       	movw	r14, r20
    2b3c:	dd df       	rcall	.-70     	; 0x2af8 <ILI9341_chip_select>
    2b3e:	ea df       	rcall	.-44     	; 0x2b14 <ILI9341_select_send_command>
    2b40:	8c 2f       	mov	r24, r28
    2b42:	0e 94 57 1e 	call	0x3cae	; 0x3cae <spi_write_data>
    2b46:	ec df       	rcall	.-40     	; 0x2b20 <ILI9341_select_send_data>
    2b48:	c0 e0       	ldi	r28, 0x00	; 0
    2b4a:	d0 e0       	ldi	r29, 0x00	; 0
    2b4c:	07 c0       	rjmp	.+14     	; 0x2b5c <ILI9341_write_data+0x30>
    2b4e:	f7 01       	movw	r30, r14
    2b50:	ec 0f       	add	r30, r28
    2b52:	fd 1f       	adc	r31, r29
    2b54:	80 81       	ld	r24, Z
    2b56:	0e 94 57 1e 	call	0x3cae	; 0x3cae <spi_write_data>
    2b5a:	21 96       	adiw	r28, 0x01	; 1
    2b5c:	81 2f       	mov	r24, r17
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	c8 17       	cp	r28, r24
    2b62:	d9 07       	cpc	r29, r25
    2b64:	a4 f3       	brlt	.-24     	; 0x2b4e <ILI9341_write_data+0x22>
    2b66:	cf df       	rcall	.-98     	; 0x2b06 <ILI9341_chip_deselect>
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	1f 91       	pop	r17
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	08 95       	ret

00002b74 <ILI9341_write_pixel>:
    2b74:	cf 92       	push	r12
    2b76:	df 92       	push	r13
    2b78:	ef 92       	push	r14
    2b7a:	ff 92       	push	r15
    2b7c:	0f 93       	push	r16
    2b7e:	1f 93       	push	r17
    2b80:	cf 93       	push	r28
    2b82:	8b 01       	movw	r16, r22
    2b84:	9c 01       	movw	r18, r24
    2b86:	00 27       	eor	r16, r16
    2b88:	10 7f       	andi	r17, 0xF0	; 240
    2b8a:	23 70       	andi	r18, 0x03	; 3
    2b8c:	33 27       	eor	r19, r19
    2b8e:	0f 2e       	mov	r0, r31
    2b90:	fa e0       	ldi	r31, 0x0A	; 10
    2b92:	36 95       	lsr	r19
    2b94:	27 95       	ror	r18
    2b96:	17 95       	ror	r17
    2b98:	07 95       	ror	r16
    2b9a:	fa 95       	dec	r31
    2b9c:	d1 f7       	brne	.-12     	; 0x2b92 <ILI9341_write_pixel+0x1e>
    2b9e:	f0 2d       	mov	r31, r0
    2ba0:	6b 01       	movw	r12, r22
    2ba2:	7c 01       	movw	r14, r24
    2ba4:	40 ec       	ldi	r20, 0xC0	; 192
    2ba6:	c4 22       	and	r12, r20
    2ba8:	4f e0       	ldi	r20, 0x0F	; 15
    2baa:	d4 22       	and	r13, r20
    2bac:	ee 24       	eor	r14, r14
    2bae:	ff 24       	eor	r15, r15
    2bb0:	68 94       	set
    2bb2:	13 f8       	bld	r1, 3
    2bb4:	f6 94       	lsr	r15
    2bb6:	e7 94       	ror	r14
    2bb8:	d7 94       	ror	r13
    2bba:	c7 94       	ror	r12
    2bbc:	16 94       	lsr	r1
    2bbe:	d1 f7       	brne	.-12     	; 0x2bb4 <ILI9341_write_pixel+0x40>
    2bc0:	c6 2f       	mov	r28, r22
    2bc2:	cc 0f       	add	r28, r28
    2bc4:	cc 0f       	add	r28, r28
    2bc6:	80 2f       	mov	r24, r16
    2bc8:	0e 94 57 1e 	call	0x3cae	; 0x3cae <spi_write_data>
    2bcc:	8c 2d       	mov	r24, r12
    2bce:	0e 94 57 1e 	call	0x3cae	; 0x3cae <spi_write_data>
    2bd2:	8c 2f       	mov	r24, r28
    2bd4:	0e 94 57 1e 	call	0x3cae	; 0x3cae <spi_write_data>
    2bd8:	cf 91       	pop	r28
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	df 90       	pop	r13
    2be4:	cf 90       	pop	r12
    2be6:	08 95       	ret

00002be8 <ILI9341_software_reset>:
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	9d df       	rcall	.-198    	; 0x2b2c <ILI9341_write_data>
    2bf2:	2f ef       	ldi	r18, 0xFF	; 255
    2bf4:	8b ed       	ldi	r24, 0xDB	; 219
    2bf6:	95 e0       	ldi	r25, 0x05	; 5
    2bf8:	21 50       	subi	r18, 0x01	; 1
    2bfa:	80 40       	sbci	r24, 0x00	; 0
    2bfc:	90 40       	sbci	r25, 0x00	; 0
    2bfe:	e1 f7       	brne	.-8      	; 0x2bf8 <ILI9341_software_reset+0x10>
    2c00:	00 c0       	rjmp	.+0      	; 0x2c02 <ILI9341_software_reset+0x1a>
    2c02:	00 00       	nop
    2c04:	08 95       	ret

00002c06 <ILI9341_after_reset_init>:
    2c06:	98 c6       	rjmp	.+3376   	; 0x3938 <setting_all>
    2c08:	08 95       	ret

00002c0a <ILI9341_display_on>:
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
    2c0e:	60 e0       	ldi	r22, 0x00	; 0
    2c10:	89 e2       	ldi	r24, 0x29	; 41
    2c12:	8c df       	rcall	.-232    	; 0x2b2c <ILI9341_write_data>
    2c14:	2f ef       	ldi	r18, 0xFF	; 255
    2c16:	82 e5       	ldi	r24, 0x52	; 82
    2c18:	97 e0       	ldi	r25, 0x07	; 7
    2c1a:	21 50       	subi	r18, 0x01	; 1
    2c1c:	80 40       	sbci	r24, 0x00	; 0
    2c1e:	90 40       	sbci	r25, 0x00	; 0
    2c20:	e1 f7       	brne	.-8      	; 0x2c1a <ILI9341_display_on+0x10>
    2c22:	00 c0       	rjmp	.+0      	; 0x2c24 <ILI9341_display_on+0x1a>
    2c24:	00 00       	nop
    2c26:	08 95       	ret

00002c28 <ILI9341_normal_display_mode_on>:
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	50 e0       	ldi	r21, 0x00	; 0
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	83 e1       	ldi	r24, 0x13	; 19
    2c30:	7d cf       	rjmp	.-262    	; 0x2b2c <ILI9341_write_data>
    2c32:	08 95       	ret

00002c34 <ILI9341_set_column_address>:
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <ILI9341_set_column_address+0x6>
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <ILI9341_set_column_address+0x8>
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	99 83       	std	Y+1, r25	; 0x01
    2c42:	8a 83       	std	Y+2, r24	; 0x02
    2c44:	7b 83       	std	Y+3, r23	; 0x03
    2c46:	6c 83       	std	Y+4, r22	; 0x04
    2c48:	ae 01       	movw	r20, r28
    2c4a:	4f 5f       	subi	r20, 0xFF	; 255
    2c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c4e:	64 e0       	ldi	r22, 0x04	; 4
    2c50:	8a e2       	ldi	r24, 0x2A	; 42
    2c52:	6c df       	rcall	.-296    	; 0x2b2c <ILI9341_write_data>
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	08 95       	ret

00002c62 <ILI9341_set_page_address>:
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	00 d0       	rcall	.+0      	; 0x2c68 <ILI9341_set_page_address+0x6>
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <ILI9341_set_page_address+0x8>
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	99 83       	std	Y+1, r25	; 0x01
    2c70:	8a 83       	std	Y+2, r24	; 0x02
    2c72:	7b 83       	std	Y+3, r23	; 0x03
    2c74:	6c 83       	std	Y+4, r22	; 0x04
    2c76:	ae 01       	movw	r20, r28
    2c78:	4f 5f       	subi	r20, 0xFF	; 255
    2c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7c:	64 e0       	ldi	r22, 0x04	; 4
    2c7e:	8b e2       	ldi	r24, 0x2B	; 43
    2c80:	55 df       	rcall	.-342    	; 0x2b2c <ILI9341_write_data>
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	08 95       	ret

00002c90 <ILI9341_vertical_scrolling_definition>:
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <ILI9341_vertical_scrolling_definition+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <ILI9341_vertical_scrolling_definition+0x8>
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <ILI9341_vertical_scrolling_definition+0xa>
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	99 83       	std	Y+1, r25	; 0x01
    2ca0:	8a 83       	std	Y+2, r24	; 0x02
    2ca2:	7b 83       	std	Y+3, r23	; 0x03
    2ca4:	6c 83       	std	Y+4, r22	; 0x04
    2ca6:	5d 83       	std	Y+5, r21	; 0x05
    2ca8:	4e 83       	std	Y+6, r20	; 0x06
    2caa:	ae 01       	movw	r20, r28
    2cac:	4f 5f       	subi	r20, 0xFF	; 255
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	66 e0       	ldi	r22, 0x06	; 6
    2cb2:	83 e3       	ldi	r24, 0x33	; 51
    2cb4:	3b df       	rcall	.-394    	; 0x2b2c <ILI9341_write_data>
    2cb6:	26 96       	adiw	r28, 0x06	; 6
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	08 95       	ret

00002cc8 <ILI9341_vertical_scrolling_start_address>:
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <ILI9341_vertical_scrolling_start_address+0x6>
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	99 83       	std	Y+1, r25	; 0x01
    2cd4:	8a 83       	std	Y+2, r24	; 0x02
    2cd6:	ae 01       	movw	r20, r28
    2cd8:	4f 5f       	subi	r20, 0xFF	; 255
    2cda:	5f 4f       	sbci	r21, 0xFF	; 255
    2cdc:	62 e0       	ldi	r22, 0x02	; 2
    2cde:	87 e3       	ldi	r24, 0x37	; 55
    2ce0:	25 df       	rcall	.-438    	; 0x2b2c <ILI9341_write_data>
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	08 95       	ret

00002cec <ILI9341_enter_scroll_mode>:
    2cec:	9d df       	rcall	.-198    	; 0x2c28 <ILI9341_normal_display_mode_on>
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	60 e4       	ldi	r22, 0x40	; 64
    2cf4:	71 e0       	ldi	r23, 0x01	; 1
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	ca df       	rcall	.-108    	; 0x2c90 <ILI9341_vertical_scrolling_definition>
    2cfc:	6f e3       	ldi	r22, 0x3F	; 63
    2cfe:	71 e0       	ldi	r23, 0x01	; 1
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	97 df       	rcall	.-210    	; 0x2c34 <ILI9341_set_column_address>
    2d06:	6f ee       	ldi	r22, 0xEF	; 239
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a9 df       	rcall	.-174    	; 0x2c62 <ILI9341_set_page_address>
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	8c e2       	ldi	r24, 0x2C	; 44
    2d18:	09 df       	rcall	.-494    	; 0x2b2c <ILI9341_write_data>
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	d4 cf       	rjmp	.-88     	; 0x2cc8 <ILI9341_vertical_scrolling_start_address>
    2d20:	08 95       	ret

00002d22 <ILI9341_display_init>:
    2d22:	e4 cf       	rjmp	.-56     	; 0x2cec <ILI9341_enter_scroll_mode>
    2d24:	08 95       	ret

00002d26 <ILI9341_sleep_out>:
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	60 e0       	ldi	r22, 0x00	; 0
    2d2c:	81 e1       	ldi	r24, 0x11	; 17
    2d2e:	fe de       	rcall	.-516    	; 0x2b2c <ILI9341_write_data>
    2d30:	2f ef       	ldi	r18, 0xFF	; 255
    2d32:	82 e5       	ldi	r24, 0x52	; 82
    2d34:	97 e0       	ldi	r25, 0x07	; 7
    2d36:	21 50       	subi	r18, 0x01	; 1
    2d38:	80 40       	sbci	r24, 0x00	; 0
    2d3a:	90 40       	sbci	r25, 0x00	; 0
    2d3c:	e1 f7       	brne	.-8      	; 0x2d36 <ILI9341_sleep_out+0x10>
    2d3e:	00 c0       	rjmp	.+0      	; 0x2d40 <ILI9341_sleep_out+0x1a>
    2d40:	00 00       	nop
    2d42:	08 95       	ret

00002d44 <ILI9341_init>:
    2d44:	a0 d7       	rcall	.+3904   	; 0x3c86 <spi_init>
    2d46:	2f ef       	ldi	r18, 0xFF	; 255
    2d48:	8b ed       	ldi	r24, 0xDB	; 219
    2d4a:	95 e0       	ldi	r25, 0x05	; 5
    2d4c:	21 50       	subi	r18, 0x01	; 1
    2d4e:	80 40       	sbci	r24, 0x00	; 0
    2d50:	90 40       	sbci	r25, 0x00	; 0
    2d52:	e1 f7       	brne	.-8      	; 0x2d4c <ILI9341_init+0x8>
    2d54:	00 c0       	rjmp	.+0      	; 0x2d56 <ILI9341_init+0x12>
    2d56:	00 00       	nop
    2d58:	47 df       	rcall	.-370    	; 0x2be8 <ILI9341_software_reset>
    2d5a:	55 df       	rcall	.-342    	; 0x2c06 <ILI9341_after_reset_init>
    2d5c:	e4 df       	rcall	.-56     	; 0x2d26 <ILI9341_sleep_out>
    2d5e:	55 df       	rcall	.-342    	; 0x2c0a <ILI9341_display_on>
    2d60:	e0 cf       	rjmp	.-64     	; 0x2d22 <ILI9341_display_init>
    2d62:	08 95       	ret

00002d64 <ILI9341_fill_screen>:
    2d64:	8f 92       	push	r8
    2d66:	9f 92       	push	r9
    2d68:	af 92       	push	r10
    2d6a:	bf 92       	push	r11
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	4b 01       	movw	r8, r22
    2d76:	5c 01       	movw	r10, r24
    2d78:	6f e3       	ldi	r22, 0x3F	; 63
    2d7a:	71 e0       	ldi	r23, 0x01	; 1
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	59 df       	rcall	.-334    	; 0x2c34 <ILI9341_set_column_address>
    2d82:	6f ee       	ldi	r22, 0xEF	; 239
    2d84:	70 e0       	ldi	r23, 0x00	; 0
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	6b df       	rcall	.-298    	; 0x2c62 <ILI9341_set_page_address>
    2d8c:	b5 de       	rcall	.-662    	; 0x2af8 <ILI9341_chip_select>
    2d8e:	c2 de       	rcall	.-636    	; 0x2b14 <ILI9341_select_send_command>
    2d90:	8c e2       	ldi	r24, 0x2C	; 44
    2d92:	8d d7       	rcall	.+3866   	; 0x3cae <spi_write_data>
    2d94:	c5 de       	rcall	.-630    	; 0x2b20 <ILI9341_select_send_data>
    2d96:	c1 2c       	mov	r12, r1
    2d98:	d1 2c       	mov	r13, r1
    2d9a:	76 01       	movw	r14, r12
    2d9c:	08 c0       	rjmp	.+16     	; 0x2dae <ILI9341_fill_screen+0x4a>
    2d9e:	c5 01       	movw	r24, r10
    2da0:	b4 01       	movw	r22, r8
    2da2:	e8 de       	rcall	.-560    	; 0x2b74 <ILI9341_write_pixel>
    2da4:	8f ef       	ldi	r24, 0xFF	; 255
    2da6:	c8 1a       	sub	r12, r24
    2da8:	d8 0a       	sbc	r13, r24
    2daa:	e8 0a       	sbc	r14, r24
    2dac:	f8 0a       	sbc	r15, r24
    2dae:	c1 14       	cp	r12, r1
    2db0:	8c e2       	ldi	r24, 0x2C	; 44
    2db2:	d8 06       	cpc	r13, r24
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	e8 06       	cpc	r14, r24
    2db8:	f1 04       	cpc	r15, r1
    2dba:	88 f3       	brcs	.-30     	; 0x2d9e <ILI9341_fill_screen+0x3a>
    2dbc:	a4 de       	rcall	.-696    	; 0x2b06 <ILI9341_chip_deselect>
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	50 e0       	ldi	r21, 0x00	; 0
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	b2 de       	rcall	.-668    	; 0x2b2c <ILI9341_write_data>
    2dc8:	ff 90       	pop	r15
    2dca:	ef 90       	pop	r14
    2dcc:	df 90       	pop	r13
    2dce:	cf 90       	pop	r12
    2dd0:	bf 90       	pop	r11
    2dd2:	af 90       	pop	r10
    2dd4:	9f 90       	pop	r9
    2dd6:	8f 90       	pop	r8
    2dd8:	08 95       	ret

00002dda <ILI9341_write_char_5x5>:
    2dda:	3f 92       	push	r3
    2ddc:	4f 92       	push	r4
    2dde:	5f 92       	push	r5
    2de0:	6f 92       	push	r6
    2de2:	7f 92       	push	r7
    2de4:	8f 92       	push	r8
    2de6:	9f 92       	push	r9
    2de8:	af 92       	push	r10
    2dea:	bf 92       	push	r11
    2dec:	cf 92       	push	r12
    2dee:	df 92       	push	r13
    2df0:	ef 92       	push	r14
    2df2:	ff 92       	push	r15
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	63 97       	sbiw	r28, 0x13	; 19
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	2b 01       	movw	r4, r22
    2e0e:	3c 01       	movw	r6, r24
    2e10:	28 8b       	std	Y+16, r18	; 0x10
    2e12:	39 8b       	std	Y+17, r19	; 0x11
    2e14:	4a 8b       	std	Y+18, r20	; 0x12
    2e16:	5b 8b       	std	Y+19, r21	; 0x13
    2e18:	30 2e       	mov	r3, r16
    2e1a:	c5 01       	movw	r24, r10
    2e1c:	2f e0       	ldi	r18, 0x0F	; 15
    2e1e:	eb ed       	ldi	r30, 0xDB	; 219
    2e20:	f7 e0       	ldi	r31, 0x07	; 7
    2e22:	de 01       	movw	r26, r28
    2e24:	11 96       	adiw	r26, 0x01	; 1
    2e26:	01 90       	ld	r0, Z+
    2e28:	0d 92       	st	X+, r0
    2e2a:	2a 95       	dec	r18
    2e2c:	e1 f7       	brne	.-8      	; 0x2e26 <ILI9341_write_char_5x5+0x4c>
    2e2e:	e1 e0       	ldi	r30, 0x01	; 1
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	ec 0f       	add	r30, r28
    2e34:	fd 1f       	adc	r31, r29
    2e36:	e0 0f       	add	r30, r16
    2e38:	f1 1d       	adc	r31, r1
    2e3a:	20 81       	ld	r18, Z
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	b5 01       	movw	r22, r10
    2e40:	62 0f       	add	r22, r18
    2e42:	73 1f       	adc	r23, r19
    2e44:	89 01       	movw	r16, r18
    2e46:	08 0d       	add	r16, r8
    2e48:	19 1d       	adc	r17, r9
    2e4a:	f4 de       	rcall	.-536    	; 0x2c34 <ILI9341_set_column_address>
    2e4c:	b8 01       	movw	r22, r16
    2e4e:	c4 01       	movw	r24, r8
    2e50:	08 df       	rcall	.-496    	; 0x2c62 <ILI9341_set_page_address>
    2e52:	52 de       	rcall	.-860    	; 0x2af8 <ILI9341_chip_select>
    2e54:	5f de       	rcall	.-834    	; 0x2b14 <ILI9341_select_send_command>
    2e56:	8c e2       	ldi	r24, 0x2C	; 44
    2e58:	2a d7       	rcall	.+3668   	; 0x3cae <spi_write_data>
    2e5a:	62 de       	rcall	.-828    	; 0x2b20 <ILI9341_select_send_data>
    2e5c:	91 2c       	mov	r9, r1
    2e5e:	3c c0       	rjmp	.+120    	; 0x2ed8 <ILI9341_write_char_5x5+0xfe>
    2e60:	a9 2c       	mov	r10, r9
    2e62:	aa 0c       	add	r10, r10
    2e64:	aa 0c       	add	r10, r10
    2e66:	a9 0c       	add	r10, r9
    2e68:	22 c0       	rjmp	.+68     	; 0x2eae <ILI9341_write_char_5x5+0xd4>
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	ee 0f       	add	r30, r30
    2e6e:	ff 1f       	adc	r31, r31
    2e70:	ee 0f       	add	r30, r30
    2e72:	ff 1f       	adc	r31, r31
    2e74:	e7 59       	subi	r30, 0x97	; 151
    2e76:	f8 4f       	sbci	r31, 0xF8	; 248
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	a2 81       	ldd	r26, Z+2	; 0x02
    2e7e:	b3 81       	ldd	r27, Z+3	; 0x03
    2e80:	8c 21       	and	r24, r12
    2e82:	9d 21       	and	r25, r13
    2e84:	ae 21       	and	r26, r14
    2e86:	bf 21       	and	r27, r15
    2e88:	89 2b       	or	r24, r25
    2e8a:	8a 2b       	or	r24, r26
    2e8c:	8b 2b       	or	r24, r27
    2e8e:	31 f0       	breq	.+12     	; 0x2e9c <ILI9341_write_char_5x5+0xc2>
    2e90:	68 89       	ldd	r22, Y+16	; 0x10
    2e92:	79 89       	ldd	r23, Y+17	; 0x11
    2e94:	8a 89       	ldd	r24, Y+18	; 0x12
    2e96:	9b 89       	ldd	r25, Y+19	; 0x13
    2e98:	6d de       	rcall	.-806    	; 0x2b74 <ILI9341_write_pixel>
    2e9a:	03 c0       	rjmp	.+6      	; 0x2ea2 <ILI9341_write_char_5x5+0xc8>
    2e9c:	c3 01       	movw	r24, r6
    2e9e:	b2 01       	movw	r22, r4
    2ea0:	69 de       	rcall	.-814    	; 0x2b74 <ILI9341_write_pixel>
    2ea2:	b3 94       	inc	r11
    2ea4:	01 c0       	rjmp	.+2      	; 0x2ea8 <ILI9341_write_char_5x5+0xce>
    2ea6:	b1 2c       	mov	r11, r1
    2ea8:	b3 14       	cp	r11, r3
    2eaa:	f8 f2       	brcs	.-66     	; 0x2e6a <ILI9341_write_char_5x5+0x90>
    2eac:	a3 94       	inc	r10
    2eae:	0a 2d       	mov	r16, r10
    2eb0:	10 e0       	ldi	r17, 0x00	; 0
    2eb2:	89 2d       	mov	r24, r9
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	01 96       	adiw	r24, 0x01	; 1
    2eb8:	9c 01       	movw	r18, r24
    2eba:	22 0f       	add	r18, r18
    2ebc:	33 1f       	adc	r19, r19
    2ebe:	22 0f       	add	r18, r18
    2ec0:	33 1f       	adc	r19, r19
    2ec2:	82 0f       	add	r24, r18
    2ec4:	93 1f       	adc	r25, r19
    2ec6:	08 17       	cp	r16, r24
    2ec8:	19 07       	cpc	r17, r25
    2eca:	6c f3       	brlt	.-38     	; 0x2ea6 <ILI9341_write_char_5x5+0xcc>
    2ecc:	83 94       	inc	r8
    2ece:	01 c0       	rjmp	.+2      	; 0x2ed2 <ILI9341_write_char_5x5+0xf8>
    2ed0:	81 2c       	mov	r8, r1
    2ed2:	83 14       	cp	r8, r3
    2ed4:	28 f2       	brcs	.-118    	; 0x2e60 <ILI9341_write_char_5x5+0x86>
    2ed6:	93 94       	inc	r9
    2ed8:	84 e0       	ldi	r24, 0x04	; 4
    2eda:	89 15       	cp	r24, r9
    2edc:	c8 f7       	brcc	.-14     	; 0x2ed0 <ILI9341_write_char_5x5+0xf6>
    2ede:	13 de       	rcall	.-986    	; 0x2b06 <ILI9341_chip_deselect>
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	21 de       	rcall	.-958    	; 0x2b2c <ILI9341_write_data>
    2eea:	63 96       	adiw	r28, 0x13	; 19
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	ff 90       	pop	r15
    2f00:	ef 90       	pop	r14
    2f02:	df 90       	pop	r13
    2f04:	cf 90       	pop	r12
    2f06:	bf 90       	pop	r11
    2f08:	af 90       	pop	r10
    2f0a:	9f 90       	pop	r9
    2f0c:	8f 90       	pop	r8
    2f0e:	7f 90       	pop	r7
    2f10:	6f 90       	pop	r6
    2f12:	5f 90       	pop	r5
    2f14:	4f 90       	pop	r4
    2f16:	3f 90       	pop	r3
    2f18:	08 95       	ret

00002f1a <ILI9341_write_char_15x15>:

void ILI9341_write_char_15x15(uint32_t bg_color,uint32_t font_color,uint8_t font_size, uint32_t* char_buffer, uint16_t sx, uint16_t sy)
{
    2f1a:	2f 92       	push	r2
    2f1c:	3f 92       	push	r3
    2f1e:	4f 92       	push	r4
    2f20:	5f 92       	push	r5
    2f22:	6f 92       	push	r6
    2f24:	7f 92       	push	r7
    2f26:	8f 92       	push	r8
    2f28:	9f 92       	push	r9
    2f2a:	af 92       	push	r10
    2f2c:	bf 92       	push	r11
    2f2e:	cf 92       	push	r12
    2f30:	df 92       	push	r13
    2f32:	ef 92       	push	r14
    2f34:	ff 92       	push	r15
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	c0 56       	subi	r28, 0x60	; 96
    2f44:	d1 09       	sbc	r29, r1
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	2b 01       	movw	r4, r22
    2f52:	3c 01       	movw	r6, r24
    2f54:	a0 96       	adiw	r28, 0x20	; 32
    2f56:	2c af       	std	Y+60, r18	; 0x3c
    2f58:	3d af       	std	Y+61, r19	; 0x3d
    2f5a:	4e af       	std	Y+62, r20	; 0x3e
    2f5c:	5f af       	std	Y+63, r21	; 0x3f
    2f5e:	a0 97       	sbiw	r28, 0x20	; 32
    2f60:	a1 96       	adiw	r28, 0x21	; 33
    2f62:	0f af       	std	Y+63, r16	; 0x3f
    2f64:	a1 97       	sbiw	r28, 0x21	; 33
	uint8_t init_addr[15] = {0,4,9,14,19,24,29,34,39,44,49,54,59,64,69};
    2f66:	8f e0       	ldi	r24, 0x0F	; 15
    2f68:	eb ed       	ldi	r30, 0xDB	; 219
    2f6a:	f7 e0       	ldi	r31, 0x07	; 7
    2f6c:	de 01       	movw	r26, r28
    2f6e:	11 96       	adiw	r26, 0x01	; 1
    2f70:	01 90       	ld	r0, Z+
    2f72:	0d 92       	st	X+, r0
    2f74:	8a 95       	dec	r24
    2f76:	e1 f7       	brne	.-8      	; 0x2f70 <ILI9341_write_char_15x15+0x56>
	uint8_t size = font_size;
	uint16_t start_left_x = sx;
	uint16_t start_middle_x = start_left_x + init_addr[font_size] + 1;
    2f78:	e1 e0       	ldi	r30, 0x01	; 1
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	ec 0f       	add	r30, r28
    2f7e:	fd 1f       	adc	r31, r29
    2f80:	a1 96       	adiw	r28, 0x21	; 33
    2f82:	0f ad       	ldd	r16, Y+63	; 0x3f
    2f84:	a1 97       	sbiw	r28, 0x21	; 33
    2f86:	e0 0f       	add	r30, r16
    2f88:	f1 1d       	adc	r31, r1
    2f8a:	80 81       	ld	r24, Z
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	16 01       	movw	r2, r12
    2f90:	28 0e       	add	r2, r24
    2f92:	39 1e       	adc	r3, r25
    2f94:	a1 01       	movw	r20, r2
    2f96:	4f 5f       	subi	r20, 0xFF	; 255
    2f98:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t start_right_x = start_middle_x + init_addr[font_size] + 1 ;
    2f9a:	9c 01       	movw	r18, r24
    2f9c:	24 0f       	add	r18, r20
    2f9e:	35 1f       	adc	r19, r21
    2fa0:	6a 96       	adiw	r28, 0x1a	; 26
    2fa2:	3f af       	std	Y+63, r19	; 0x3f
    2fa4:	2e af       	std	Y+62, r18	; 0x3e
    2fa6:	6a 97       	sbiw	r28, 0x1a	; 26
    2fa8:	b9 01       	movw	r22, r18
    2faa:	6f 5f       	subi	r22, 0xFF	; 255
    2fac:	7f 4f       	sbci	r23, 0xFF	; 255
	
	uint16_t start_left_y = sy;
	uint16_t start_middle_y = start_left_y + init_addr[font_size] + 1;
    2fae:	dc 01       	movw	r26, r24
    2fb0:	aa 0d       	add	r26, r10
    2fb2:	bb 1d       	adc	r27, r11
    2fb4:	9d 01       	movw	r18, r26
    2fb6:	2f 5f       	subi	r18, 0xFF	; 255
    2fb8:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t start_right_y = start_middle_y + init_addr[font_size] + 1;
    2fba:	4c 01       	movw	r8, r24
    2fbc:	82 0e       	add	r8, r18
    2fbe:	93 1e       	adc	r9, r19
    2fc0:	f4 01       	movw	r30, r8
    2fc2:	31 96       	adiw	r30, 0x01	; 1
	
	uint16_t end_left_x = start_left_x + init_addr[font_size];
	uint16_t end_middle_x = start_middle_x + init_addr[font_size];
	uint16_t end_right_x = start_right_x + init_addr[font_size];
    2fc4:	8c 01       	movw	r16, r24
    2fc6:	06 0f       	add	r16, r22
    2fc8:	17 1f       	adc	r17, r23
	
	uint16_t end_left_y = start_left_y + init_addr[font_size];
	uint16_t end_middle_y = start_middle_y + init_addr[font_size];
	uint16_t end_right_y = start_right_y + init_addr[font_size];
    2fca:	8e 0f       	add	r24, r30
    2fcc:	9f 1f       	adc	r25, r31
	
	uint16_t kor_start_addr[18] = {start_left_x,start_left_y,start_middle_x,start_left_y,start_right_x,start_left_y,
    2fce:	d9 8a       	std	Y+17, r13	; 0x11
    2fd0:	c8 8a       	std	Y+16, r12	; 0x10
    2fd2:	bb 8a       	std	Y+19, r11	; 0x13
    2fd4:	aa 8a       	std	Y+18, r10	; 0x12
    2fd6:	5d 8b       	std	Y+21, r21	; 0x15
    2fd8:	4c 8b       	std	Y+20, r20	; 0x14
    2fda:	bf 8a       	std	Y+23, r11	; 0x17
    2fdc:	ae 8a       	std	Y+22, r10	; 0x16
    2fde:	79 8f       	std	Y+25, r23	; 0x19
    2fe0:	68 8f       	std	Y+24, r22	; 0x18
    2fe2:	bb 8e       	std	Y+27, r11	; 0x1b
    2fe4:	aa 8e       	std	Y+26, r10	; 0x1a
    2fe6:	dd 8e       	std	Y+29, r13	; 0x1d
    2fe8:	cc 8e       	std	Y+28, r12	; 0x1c
    2fea:	3f 8f       	std	Y+31, r19	; 0x1f
    2fec:	2e 8f       	std	Y+30, r18	; 0x1e
    2fee:	59 a3       	std	Y+33, r21	; 0x21
    2ff0:	48 a3       	std	Y+32, r20	; 0x20
    2ff2:	3b a3       	std	Y+35, r19	; 0x23
    2ff4:	2a a3       	std	Y+34, r18	; 0x22
    2ff6:	7d a3       	std	Y+37, r23	; 0x25
    2ff8:	6c a3       	std	Y+36, r22	; 0x24
    2ffa:	3f a3       	std	Y+39, r19	; 0x27
    2ffc:	2e a3       	std	Y+38, r18	; 0x26
    2ffe:	d9 a6       	std	Y+41, r13	; 0x29
    3000:	c8 a6       	std	Y+40, r12	; 0x28
    3002:	fb a7       	std	Y+43, r31	; 0x2b
    3004:	ea a7       	std	Y+42, r30	; 0x2a
    3006:	5d a7       	std	Y+45, r21	; 0x2d
    3008:	4c a7       	std	Y+44, r20	; 0x2c
    300a:	ff a7       	std	Y+47, r31	; 0x2f
    300c:	ee a7       	std	Y+46, r30	; 0x2e
    300e:	79 ab       	std	Y+49, r23	; 0x31
    3010:	68 ab       	std	Y+48, r22	; 0x30
    3012:	fb ab       	std	Y+51, r31	; 0x33
    3014:	ea ab       	std	Y+50, r30	; 0x32
		start_left_x,start_middle_y,start_middle_x,start_middle_y,start_right_x,start_middle_y,
		start_left_x,start_right_y,start_middle_x,start_right_y,start_right_x,start_right_y};
		
	uint16_t kor_end_addr[18] = {end_left_x,end_left_y,end_middle_x,end_left_y,end_right_x,end_left_y,
    3016:	3d aa       	std	Y+53, r3	; 0x35
    3018:	2c aa       	std	Y+52, r2	; 0x34
    301a:	bf ab       	std	Y+55, r27	; 0x37
    301c:	ae ab       	std	Y+54, r26	; 0x36
    301e:	6a 96       	adiw	r28, 0x1a	; 26
    3020:	2e ad       	ldd	r18, Y+62	; 0x3e
    3022:	3f ad       	ldd	r19, Y+63	; 0x3f
    3024:	6a 97       	sbiw	r28, 0x1a	; 26
    3026:	39 af       	std	Y+57, r19	; 0x39
    3028:	28 af       	std	Y+56, r18	; 0x38
    302a:	bb af       	std	Y+59, r27	; 0x3b
    302c:	aa af       	std	Y+58, r26	; 0x3a
    302e:	1d af       	std	Y+61, r17	; 0x3d
    3030:	0c af       	std	Y+60, r16	; 0x3c
    3032:	bf af       	std	Y+63, r27	; 0x3f
    3034:	ae af       	std	Y+62, r26	; 0x3e
    3036:	22 96       	adiw	r28, 0x02	; 2
    3038:	3f ae       	std	Y+63, r3	; 0x3f
    303a:	2e ae       	std	Y+62, r2	; 0x3e
    303c:	22 97       	sbiw	r28, 0x02	; 2
    303e:	24 96       	adiw	r28, 0x04	; 4
    3040:	9f ae       	std	Y+63, r9	; 0x3f
    3042:	8e ae       	std	Y+62, r8	; 0x3e
    3044:	24 97       	sbiw	r28, 0x04	; 4
    3046:	26 96       	adiw	r28, 0x06	; 6
    3048:	3f af       	std	Y+63, r19	; 0x3f
    304a:	2e af       	std	Y+62, r18	; 0x3e
    304c:	26 97       	sbiw	r28, 0x06	; 6
    304e:	28 96       	adiw	r28, 0x08	; 8
    3050:	9f ae       	std	Y+63, r9	; 0x3f
    3052:	8e ae       	std	Y+62, r8	; 0x3e
    3054:	28 97       	sbiw	r28, 0x08	; 8
    3056:	2a 96       	adiw	r28, 0x0a	; 10
    3058:	1f af       	std	Y+63, r17	; 0x3f
    305a:	0e af       	std	Y+62, r16	; 0x3e
    305c:	2a 97       	sbiw	r28, 0x0a	; 10
    305e:	2c 96       	adiw	r28, 0x0c	; 12
    3060:	9f ae       	std	Y+63, r9	; 0x3f
    3062:	8e ae       	std	Y+62, r8	; 0x3e
    3064:	2c 97       	sbiw	r28, 0x0c	; 12
    3066:	2e 96       	adiw	r28, 0x0e	; 14
    3068:	3f ae       	std	Y+63, r3	; 0x3f
    306a:	2e ae       	std	Y+62, r2	; 0x3e
    306c:	2e 97       	sbiw	r28, 0x0e	; 14
    306e:	60 96       	adiw	r28, 0x10	; 16
    3070:	9f af       	std	Y+63, r25	; 0x3f
    3072:	8e af       	std	Y+62, r24	; 0x3e
    3074:	60 97       	sbiw	r28, 0x10	; 16
    3076:	62 96       	adiw	r28, 0x12	; 18
    3078:	3f af       	std	Y+63, r19	; 0x3f
    307a:	2e af       	std	Y+62, r18	; 0x3e
    307c:	62 97       	sbiw	r28, 0x12	; 18
    307e:	64 96       	adiw	r28, 0x14	; 20
    3080:	9f af       	std	Y+63, r25	; 0x3f
    3082:	8e af       	std	Y+62, r24	; 0x3e
    3084:	64 97       	sbiw	r28, 0x14	; 20
    3086:	66 96       	adiw	r28, 0x16	; 22
    3088:	1f af       	std	Y+63, r17	; 0x3f
    308a:	0e af       	std	Y+62, r16	; 0x3e
    308c:	66 97       	sbiw	r28, 0x16	; 22
    308e:	68 96       	adiw	r28, 0x18	; 24
    3090:	9f af       	std	Y+63, r25	; 0x3f
    3092:	8e af       	std	Y+62, r24	; 0x3e
    3094:	68 97       	sbiw	r28, 0x18	; 24
		end_left_x,end_middle_y,end_middle_x,end_middle_y,end_right_x,end_middle_y,
		end_left_x,end_right_y,end_middle_x,end_right_y,end_right_x,end_right_y};
		
	for(uint8_t kor_addr_index = 0; kor_addr_index < 9; kor_addr_index++)
    3096:	b1 2c       	mov	r11, r1
    3098:	3b 2c       	mov	r3, r11
    309a:	a0 96       	adiw	r28, 0x20	; 32
    309c:	8c ac       	ldd	r8, Y+60	; 0x3c
    309e:	9d ac       	ldd	r9, Y+61	; 0x3d
    30a0:	ae ac       	ldd	r10, Y+62	; 0x3e
    30a2:	bf ac       	ldd	r11, Y+63	; 0x3f
    30a4:	a0 97       	sbiw	r28, 0x20	; 32
    30a6:	a1 96       	adiw	r28, 0x21	; 33
    30a8:	0f ad       	ldd	r16, Y+63	; 0x3f
    30aa:	a1 97       	sbiw	r28, 0x21	; 33
    30ac:	96 c0       	rjmp	.+300    	; 0x31da <ILI9341_write_char_15x15+0x2c0>
	{
		ILI9341_set_column_address(kor_start_addr[kor_addr_index*2],kor_end_addr[kor_addr_index*2]);
    30ae:	c3 2c       	mov	r12, r3
    30b0:	d1 2c       	mov	r13, r1
    30b2:	cc 0c       	add	r12, r12
    30b4:	dd 1c       	adc	r13, r13
    30b6:	f6 01       	movw	r30, r12
    30b8:	ee 0f       	add	r30, r30
    30ba:	ff 1f       	adc	r31, r31
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	8c 0f       	add	r24, r28
    30c2:	9d 1f       	adc	r25, r29
    30c4:	e8 0f       	add	r30, r24
    30c6:	f9 1f       	adc	r31, r25
    30c8:	63 a9       	ldd	r22, Z+51	; 0x33
    30ca:	74 a9       	ldd	r23, Z+52	; 0x34
    30cc:	87 85       	ldd	r24, Z+15	; 0x0f
    30ce:	90 89       	ldd	r25, Z+16	; 0x10
    30d0:	b1 dd       	rcall	.-1182   	; 0x2c34 <ILI9341_set_column_address>
		ILI9341_set_page_address(kor_start_addr[kor_addr_index*2+1],kor_end_addr[kor_addr_index*2+1]);
    30d2:	f6 01       	movw	r30, r12
    30d4:	31 96       	adiw	r30, 0x01	; 1
    30d6:	ee 0f       	add	r30, r30
    30d8:	ff 1f       	adc	r31, r31
    30da:	21 e0       	ldi	r18, 0x01	; 1
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	2c 0f       	add	r18, r28
    30e0:	3d 1f       	adc	r19, r29
    30e2:	e2 0f       	add	r30, r18
    30e4:	f3 1f       	adc	r31, r19
    30e6:	63 a9       	ldd	r22, Z+51	; 0x33
    30e8:	74 a9       	ldd	r23, Z+52	; 0x34
    30ea:	87 85       	ldd	r24, Z+15	; 0x0f
    30ec:	90 89       	ldd	r25, Z+16	; 0x10
		ILI9341_chip_select();
    30ee:	b9 dd       	rcall	.-1166   	; 0x2c62 <ILI9341_set_page_address>
		ILI9341_select_send_command();
    30f0:	03 dd       	rcall	.-1530   	; 0x2af8 <ILI9341_chip_select>
		spi_write_data(Memory_write);
    30f2:	10 dd       	rcall	.-1504   	; 0x2b14 <ILI9341_select_send_command>
    30f4:	8c e2       	ldi	r24, 0x2C	; 44
    30f6:	db d5       	rcall	.+2998   	; 0x3cae <spi_write_data>
		ILI9341_select_send_data();
    30f8:	13 dd       	rcall	.-1498   	; 0x2b20 <ILI9341_select_send_data>
    30fa:	69 96       	adiw	r28, 0x19	; 25
		for(uint8_t check_nums = 0; check_nums < 5; check_nums++)
    30fc:	1f ae       	std	Y+63, r1	; 0x3f
    30fe:	69 97       	sbiw	r28, 0x19	; 25
    3100:	60 c0       	rjmp	.+192    	; 0x31c2 <ILI9341_write_char_15x15+0x2a8>
    3102:	69 96       	adiw	r28, 0x19	; 25
		{
			for(uint8_t font_width = 0; font_width < size; font_width++)
			{
				for(uint8_t check_bits = (check_nums * 5); check_bits < (5 * check_nums) + 5; check_bits++)
    3104:	2f ac       	ldd	r2, Y+63	; 0x3f
    3106:	69 97       	sbiw	r28, 0x19	; 25
    3108:	22 0c       	add	r2, r2
    310a:	22 0c       	add	r2, r2
    310c:	69 96       	adiw	r28, 0x19	; 25
    310e:	1f ad       	ldd	r17, Y+63	; 0x3f
    3110:	69 97       	sbiw	r28, 0x19	; 25
    3112:	21 0e       	add	r2, r17
    3114:	2c c0       	rjmp	.+88     	; 0x316e <ILI9341_write_char_15x15+0x254>
    3116:	e3 2d       	mov	r30, r3
				{
					for(uint8_t font_height = 0; font_height < size; font_height++)
					{
						if(char_buffer[kor_addr_index] & check_char[check_bits])
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	ee 0f       	add	r30, r30
    311c:	ff 1f       	adc	r31, r31
    311e:	ee 0f       	add	r30, r30
    3120:	ff 1f       	adc	r31, r31
    3122:	ee 0d       	add	r30, r14
    3124:	ff 1d       	adc	r31, r15
    3126:	40 81       	ld	r20, Z
    3128:	51 81       	ldd	r21, Z+1	; 0x01
    312a:	62 81       	ldd	r22, Z+2	; 0x02
    312c:	73 81       	ldd	r23, Z+3	; 0x03
    312e:	f6 01       	movw	r30, r12
    3130:	ee 0f       	add	r30, r30
    3132:	ff 1f       	adc	r31, r31
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	e7 59       	subi	r30, 0x97	; 151
    313a:	f8 4f       	sbci	r31, 0xF8	; 248
    313c:	80 81       	ld	r24, Z
    313e:	91 81       	ldd	r25, Z+1	; 0x01
    3140:	a2 81       	ldd	r26, Z+2	; 0x02
    3142:	b3 81       	ldd	r27, Z+3	; 0x03
    3144:	84 23       	and	r24, r20
    3146:	95 23       	and	r25, r21
    3148:	a6 23       	and	r26, r22
    314a:	b7 23       	and	r27, r23
    314c:	89 2b       	or	r24, r25
    314e:	8a 2b       	or	r24, r26
    3150:	8b 2b       	or	r24, r27
    3152:	21 f0       	breq	.+8      	; 0x315c <ILI9341_write_char_15x15+0x242>
						{
							ILI9341_write_pixel(font_color);
    3154:	c5 01       	movw	r24, r10
    3156:	b4 01       	movw	r22, r8
    3158:	0d dd       	rcall	.-1510   	; 0x2b74 <ILI9341_write_pixel>
    315a:	03 c0       	rjmp	.+6      	; 0x3162 <ILI9341_write_char_15x15+0x248>
						}
						else
						{
							ILI9341_write_pixel(bg_color);
    315c:	c3 01       	movw	r24, r6
    315e:	b2 01       	movw	r22, r4
    3160:	09 dd       	rcall	.-1518   	; 0x2b74 <ILI9341_write_pixel>
    3162:	1f 5f       	subi	r17, 0xFF	; 255
		{
			for(uint8_t font_width = 0; font_width < size; font_width++)
			{
				for(uint8_t check_bits = (check_nums * 5); check_bits < (5 * check_nums) + 5; check_bits++)
				{
					for(uint8_t font_height = 0; font_height < size; font_height++)
    3164:	01 c0       	rjmp	.+2      	; 0x3168 <ILI9341_write_char_15x15+0x24e>
    3166:	10 e0       	ldi	r17, 0x00	; 0
    3168:	10 17       	cp	r17, r16
    316a:	a8 f2       	brcs	.-86     	; 0x3116 <ILI9341_write_char_15x15+0x1fc>
    316c:	23 94       	inc	r2
		ILI9341_select_send_data();
		for(uint8_t check_nums = 0; check_nums < 5; check_nums++)
		{
			for(uint8_t font_width = 0; font_width < size; font_width++)
			{
				for(uint8_t check_bits = (check_nums * 5); check_bits < (5 * check_nums) + 5; check_bits++)
    316e:	c2 2c       	mov	r12, r2
    3170:	d1 2c       	mov	r13, r1
    3172:	69 96       	adiw	r28, 0x19	; 25
    3174:	1f ad       	ldd	r17, Y+63	; 0x3f
    3176:	69 97       	sbiw	r28, 0x19	; 25
    3178:	81 2f       	mov	r24, r17
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	9c 01       	movw	r18, r24
    3180:	22 0f       	add	r18, r18
    3182:	33 1f       	adc	r19, r19
    3184:	22 0f       	add	r18, r18
    3186:	33 1f       	adc	r19, r19
    3188:	82 0f       	add	r24, r18
    318a:	93 1f       	adc	r25, r19
    318c:	c8 16       	cp	r12, r24
    318e:	d9 06       	cpc	r13, r25
    3190:	54 f3       	brlt	.-44     	; 0x3166 <ILI9341_write_char_15x15+0x24c>
    3192:	6b 96       	adiw	r28, 0x1b	; 27
		ILI9341_select_send_command();
		spi_write_data(Memory_write);
		ILI9341_select_send_data();
		for(uint8_t check_nums = 0; check_nums < 5; check_nums++)
		{
			for(uint8_t font_width = 0; font_width < size; font_width++)
    3194:	1f ad       	ldd	r17, Y+63	; 0x3f
    3196:	6b 97       	sbiw	r28, 0x1b	; 27
    3198:	1f 5f       	subi	r17, 0xFF	; 255
    319a:	6b 96       	adiw	r28, 0x1b	; 27
    319c:	1f af       	std	Y+63, r17	; 0x3f
    319e:	6b 97       	sbiw	r28, 0x1b	; 27
    31a0:	03 c0       	rjmp	.+6      	; 0x31a8 <ILI9341_write_char_15x15+0x28e>
    31a2:	6b 96       	adiw	r28, 0x1b	; 27
    31a4:	1f ae       	std	Y+63, r1	; 0x3f
    31a6:	6b 97       	sbiw	r28, 0x1b	; 27
    31a8:	6b 96       	adiw	r28, 0x1b	; 27
    31aa:	1f ad       	ldd	r17, Y+63	; 0x3f
    31ac:	6b 97       	sbiw	r28, 0x1b	; 27
    31ae:	10 17       	cp	r17, r16
    31b0:	08 f4       	brcc	.+2      	; 0x31b4 <ILI9341_write_char_15x15+0x29a>
    31b2:	a7 cf       	rjmp	.-178    	; 0x3102 <ILI9341_write_char_15x15+0x1e8>
    31b4:	69 96       	adiw	r28, 0x19	; 25
		ILI9341_set_page_address(kor_start_addr[kor_addr_index*2+1],kor_end_addr[kor_addr_index*2+1]);
		ILI9341_chip_select();
		ILI9341_select_send_command();
		spi_write_data(Memory_write);
		ILI9341_select_send_data();
		for(uint8_t check_nums = 0; check_nums < 5; check_nums++)
    31b6:	1f ad       	ldd	r17, Y+63	; 0x3f
    31b8:	69 97       	sbiw	r28, 0x19	; 25
    31ba:	1f 5f       	subi	r17, 0xFF	; 255
    31bc:	69 96       	adiw	r28, 0x19	; 25
    31be:	1f af       	std	Y+63, r17	; 0x3f
    31c0:	69 97       	sbiw	r28, 0x19	; 25
    31c2:	69 96       	adiw	r28, 0x19	; 25
    31c4:	1f ad       	ldd	r17, Y+63	; 0x3f
    31c6:	69 97       	sbiw	r28, 0x19	; 25
    31c8:	15 30       	cpi	r17, 0x05	; 5
						}
					}
				}
			}
		}
		ILI9341_chip_deselect();
    31ca:	58 f3       	brcs	.-42     	; 0x31a2 <ILI9341_write_char_15x15+0x288>
    31cc:	9c dc       	rcall	.-1736   	; 0x2b06 <ILI9341_chip_deselect>
		ILI9341_write_data(NOP,0,NULL);
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	aa dc       	rcall	.-1708   	; 0x2b2c <ILI9341_write_data>
    31d8:	33 94       	inc	r3
		
	uint16_t kor_end_addr[18] = {end_left_x,end_left_y,end_middle_x,end_left_y,end_right_x,end_left_y,
		end_left_x,end_middle_y,end_middle_x,end_middle_y,end_right_x,end_middle_y,
		end_left_x,end_right_y,end_middle_x,end_right_y,end_right_x,end_right_y};
		
	for(uint8_t kor_addr_index = 0; kor_addr_index < 9; kor_addr_index++)
    31da:	28 e0       	ldi	r18, 0x08	; 8
    31dc:	23 15       	cp	r18, r3
    31de:	08 f0       	brcs	.+2      	; 0x31e2 <ILI9341_write_char_15x15+0x2c8>
    31e0:	66 cf       	rjmp	.-308    	; 0x30ae <ILI9341_write_char_15x15+0x194>
    31e2:	c0 5a       	subi	r28, 0xA0	; 160
			}
		}
		ILI9341_chip_deselect();
		ILI9341_write_data(NOP,0,NULL);
	}
    31e4:	df 4f       	sbci	r29, 0xFF	; 255
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	ff 90       	pop	r15
    31fa:	ef 90       	pop	r14
    31fc:	df 90       	pop	r13
    31fe:	cf 90       	pop	r12
    3200:	bf 90       	pop	r11
    3202:	af 90       	pop	r10
    3204:	9f 90       	pop	r9
    3206:	8f 90       	pop	r8
    3208:	7f 90       	pop	r7
    320a:	6f 90       	pop	r6
    320c:	5f 90       	pop	r5
    320e:	4f 90       	pop	r4
    3210:	3f 90       	pop	r3
    3212:	2f 90       	pop	r2
    3214:	08 95       	ret

00003216 <ILI9341_gamma_set>:
    3216:	cf 93       	push	r28
void ILI9341_digital_Gamma_control_1()
{
	
}
void ILI9341_digital_Gamma_control_2()
{
    3218:	df 93       	push	r29
    321a:	00 d0       	rcall	.+0      	; 0x321c <ILI9341_gamma_set+0x6>
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	99 83       	std	Y+1, r25	; 0x01
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	81 30       	cpi	r24, 0x01	; 1
    3228:	39 f4       	brne	.+14     	; 0x3238 <ILI9341_gamma_set+0x22>
    322a:	ae 01       	movw	r20, r28
    322c:	4f 5f       	subi	r20, 0xFF	; 255
    322e:	5f 4f       	sbci	r21, 0xFF	; 255
    3230:	61 e0       	ldi	r22, 0x01	; 1
    3232:	86 e2       	ldi	r24, 0x26	; 38
    3234:	7b dc       	rcall	.-1802   	; 0x2b2c <ILI9341_write_data>
    3236:	06 c0       	rjmp	.+12     	; 0x3244 <ILI9341_gamma_set+0x2e>
    3238:	ae 01       	movw	r20, r28
    323a:	4e 5f       	subi	r20, 0xFE	; 254
    323c:	5f 4f       	sbci	r21, 0xFF	; 255
    323e:	61 e0       	ldi	r22, 0x01	; 1
    3240:	86 e2       	ldi	r24, 0x26	; 38
    3242:	74 dc       	rcall	.-1816   	; 0x2b2c <ILI9341_write_data>
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	08 95       	ret

0000324e <ILI9341_pixel_format_set>:
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	00 d0       	rcall	.+0      	; 0x3254 <ILI9341_pixel_format_set+0x6>
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	96 e6       	ldi	r25, 0x66	; 102
    325a:	99 83       	std	Y+1, r25	; 0x01
    325c:	95 e5       	ldi	r25, 0x55	; 85
    325e:	9a 83       	std	Y+2, r25	; 0x02
    3260:	81 30       	cpi	r24, 0x01	; 1
    3262:	39 f4       	brne	.+14     	; 0x3272 <ILI9341_pixel_format_set+0x24>
    3264:	ae 01       	movw	r20, r28
    3266:	4f 5f       	subi	r20, 0xFF	; 255
    3268:	5f 4f       	sbci	r21, 0xFF	; 255
    326a:	61 e0       	ldi	r22, 0x01	; 1
    326c:	8a e3       	ldi	r24, 0x3A	; 58
    326e:	5e dc       	rcall	.-1860   	; 0x2b2c <ILI9341_write_data>
    3270:	06 c0       	rjmp	.+12     	; 0x327e <ILI9341_pixel_format_set+0x30>
    3272:	ae 01       	movw	r20, r28
    3274:	4e 5f       	subi	r20, 0xFE	; 254
    3276:	5f 4f       	sbci	r21, 0xFF	; 255
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	8a e3       	ldi	r24, 0x3A	; 58
    327c:	57 dc       	rcall	.-1874   	; 0x2b2c <ILI9341_write_data>
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	08 95       	ret

00003288 <ILI9341_set_memory_data_access_control>:
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
    328c:	00 d0       	rcall	.+0      	; 0x328e <ILI9341_set_memory_data_access_control+0x6>
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	19 82       	std	Y+1, r1	; 0x01
    3294:	98 e2       	ldi	r25, 0x28	; 40
    3296:	9a 83       	std	Y+2, r25	; 0x02
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	39 f4       	brne	.+14     	; 0x32aa <ILI9341_set_memory_data_access_control+0x22>
    329c:	ae 01       	movw	r20, r28
    329e:	4f 5f       	subi	r20, 0xFF	; 255
    32a0:	5f 4f       	sbci	r21, 0xFF	; 255
    32a2:	61 e0       	ldi	r22, 0x01	; 1
    32a4:	86 e3       	ldi	r24, 0x36	; 54
    32a6:	42 dc       	rcall	.-1916   	; 0x2b2c <ILI9341_write_data>
    32a8:	06 c0       	rjmp	.+12     	; 0x32b6 <ILI9341_set_memory_data_access_control+0x2e>
    32aa:	ae 01       	movw	r20, r28
    32ac:	4e 5f       	subi	r20, 0xFE	; 254
    32ae:	5f 4f       	sbci	r21, 0xFF	; 255
    32b0:	61 e0       	ldi	r22, 0x01	; 1
    32b2:	86 e3       	ldi	r24, 0x36	; 54
    32b4:	3b dc       	rcall	.-1930   	; 0x2b2c <ILI9341_write_data>
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	08 95       	ret

000032c0 <ILI9341_RGB_interface_signal_control>:
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
    32c4:	1f 92       	push	r1
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	90 e4       	ldi	r25, 0x40	; 64
    32cc:	99 83       	std	Y+1, r25	; 0x01
    32ce:	81 30       	cpi	r24, 0x01	; 1
    32d0:	31 f4       	brne	.+12     	; 0x32de <ILI9341_RGB_interface_signal_control+0x1e>
    32d2:	ae 01       	movw	r20, r28
    32d4:	4f 5f       	subi	r20, 0xFF	; 255
    32d6:	5f 4f       	sbci	r21, 0xFF	; 255
    32d8:	61 e0       	ldi	r22, 0x01	; 1
    32da:	80 eb       	ldi	r24, 0xB0	; 176
    32dc:	27 dc       	rcall	.-1970   	; 0x2b2c <ILI9341_write_data>
    32de:	0f 90       	pop	r0
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	08 95       	ret

000032e6 <ILI9341_Frame_control_in_Normal_mode>:
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <ILI9341_Frame_control_in_Normal_mode+0x6>
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <ILI9341_Frame_control_in_Normal_mode+0x8>
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	19 82       	std	Y+1, r1	; 0x01
    32f4:	9b e1       	ldi	r25, 0x1B	; 27
    32f6:	9a 83       	std	Y+2, r25	; 0x02
    32f8:	1b 82       	std	Y+3, r1	; 0x03
    32fa:	98 e1       	ldi	r25, 0x18	; 24
    32fc:	9c 83       	std	Y+4, r25	; 0x04
    32fe:	81 30       	cpi	r24, 0x01	; 1
    3300:	39 f4       	brne	.+14     	; 0x3310 <ILI9341_Frame_control_in_Normal_mode+0x2a>
    3302:	ae 01       	movw	r20, r28
    3304:	4f 5f       	subi	r20, 0xFF	; 255
    3306:	5f 4f       	sbci	r21, 0xFF	; 255
    3308:	62 e0       	ldi	r22, 0x02	; 2
    330a:	81 eb       	ldi	r24, 0xB1	; 177
    330c:	0f dc       	rcall	.-2018   	; 0x2b2c <ILI9341_write_data>
    330e:	06 c0       	rjmp	.+12     	; 0x331c <ILI9341_Frame_control_in_Normal_mode+0x36>
    3310:	ae 01       	movw	r20, r28
    3312:	4d 5f       	subi	r20, 0xFD	; 253
    3314:	5f 4f       	sbci	r21, 0xFF	; 255
    3316:	62 e0       	ldi	r22, 0x02	; 2
    3318:	81 eb       	ldi	r24, 0xB1	; 177
    331a:	08 dc       	rcall	.-2032   	; 0x2b2c <ILI9341_write_data>
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	08 95       	ret

0000332a <ILI9341_Frame_control_in_Idle_mode>:
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	00 d0       	rcall	.+0      	; 0x3330 <ILI9341_Frame_control_in_Idle_mode+0x6>
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	19 82       	std	Y+1, r1	; 0x01
    3336:	9b e1       	ldi	r25, 0x1B	; 27
    3338:	9a 83       	std	Y+2, r25	; 0x02
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	31 f4       	brne	.+12     	; 0x334a <ILI9341_Frame_control_in_Idle_mode+0x20>
    333e:	ae 01       	movw	r20, r28
    3340:	4f 5f       	subi	r20, 0xFF	; 255
    3342:	5f 4f       	sbci	r21, 0xFF	; 255
    3344:	62 e0       	ldi	r22, 0x02	; 2
    3346:	82 eb       	ldi	r24, 0xB2	; 178
    3348:	f1 db       	rcall	.-2078   	; 0x2b2c <ILI9341_write_data>
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	df 91       	pop	r29
    3350:	cf 91       	pop	r28
    3352:	08 95       	ret

00003354 <ILI9341_Frame_control_in_Partial_mode>:
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	00 d0       	rcall	.+0      	; 0x335a <ILI9341_Frame_control_in_Partial_mode+0x6>
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	19 82       	std	Y+1, r1	; 0x01
    3360:	9b e1       	ldi	r25, 0x1B	; 27
    3362:	9a 83       	std	Y+2, r25	; 0x02
    3364:	81 30       	cpi	r24, 0x01	; 1
    3366:	31 f4       	brne	.+12     	; 0x3374 <ILI9341_Frame_control_in_Partial_mode+0x20>
    3368:	ae 01       	movw	r20, r28
    336a:	4f 5f       	subi	r20, 0xFF	; 255
    336c:	5f 4f       	sbci	r21, 0xFF	; 255
    336e:	62 e0       	ldi	r22, 0x02	; 2
    3370:	83 eb       	ldi	r24, 0xB3	; 179
    3372:	dc db       	rcall	.-2120   	; 0x2b2c <ILI9341_write_data>
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	08 95       	ret

0000337e <ILI9341_blanking_porch_control>:
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	00 d0       	rcall	.+0      	; 0x3384 <ILI9341_blanking_porch_control+0x6>
    3384:	00 d0       	rcall	.+0      	; 0x3386 <ILI9341_blanking_porch_control+0x8>
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	92 e0       	ldi	r25, 0x02	; 2
    338c:	99 83       	std	Y+1, r25	; 0x01
    338e:	9a 83       	std	Y+2, r25	; 0x02
    3390:	9a e0       	ldi	r25, 0x0A	; 10
    3392:	9b 83       	std	Y+3, r25	; 0x03
    3394:	94 e1       	ldi	r25, 0x14	; 20
    3396:	9c 83       	std	Y+4, r25	; 0x04
    3398:	81 30       	cpi	r24, 0x01	; 1
    339a:	31 f4       	brne	.+12     	; 0x33a8 <ILI9341_blanking_porch_control+0x2a>
    339c:	ae 01       	movw	r20, r28
    339e:	4f 5f       	subi	r20, 0xFF	; 255
    33a0:	5f 4f       	sbci	r21, 0xFF	; 255
    33a2:	64 e0       	ldi	r22, 0x04	; 4
    33a4:	85 eb       	ldi	r24, 0xB5	; 181
    33a6:	c2 db       	rcall	.-2172   	; 0x2b2c <ILI9341_write_data>
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	08 95       	ret

000033b6 <ILI9341_display_function_control>:
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <ILI9341_display_function_control+0x6>
    33bc:	00 d0       	rcall	.+0      	; 0x33be <ILI9341_display_function_control+0x8>
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <ILI9341_display_function_control+0xa>
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	9a e0       	ldi	r25, 0x0A	; 10
    33c6:	99 83       	std	Y+1, r25	; 0x01
    33c8:	22 e8       	ldi	r18, 0x82	; 130
    33ca:	2a 83       	std	Y+2, r18	; 0x02
    33cc:	97 e2       	ldi	r25, 0x27	; 39
    33ce:	9b 83       	std	Y+3, r25	; 0x03
    33d0:	38 e0       	ldi	r19, 0x08	; 8
    33d2:	3c 83       	std	Y+4, r19	; 0x04
    33d4:	2d 83       	std	Y+5, r18	; 0x05
    33d6:	9e 83       	std	Y+6, r25	; 0x06
    33d8:	81 30       	cpi	r24, 0x01	; 1
    33da:	39 f4       	brne	.+14     	; 0x33ea <ILI9341_display_function_control+0x34>
    33dc:	ae 01       	movw	r20, r28
    33de:	4f 5f       	subi	r20, 0xFF	; 255
    33e0:	5f 4f       	sbci	r21, 0xFF	; 255
    33e2:	63 e0       	ldi	r22, 0x03	; 3
    33e4:	86 eb       	ldi	r24, 0xB6	; 182
    33e6:	a2 db       	rcall	.-2236   	; 0x2b2c <ILI9341_write_data>
    33e8:	06 c0       	rjmp	.+12     	; 0x33f6 <ILI9341_display_function_control+0x40>
    33ea:	ae 01       	movw	r20, r28
    33ec:	4c 5f       	subi	r20, 0xFC	; 252
    33ee:	5f 4f       	sbci	r21, 0xFF	; 255
    33f0:	63 e0       	ldi	r22, 0x03	; 3
    33f2:	86 eb       	ldi	r24, 0xB6	; 182
    33f4:	9b db       	rcall	.-2250   	; 0x2b2c <ILI9341_write_data>
    33f6:	26 96       	adiw	r28, 0x06	; 6
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	08 95       	ret

00003408 <ILI9341_Enable_3G>:
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	00 d0       	rcall	.+0      	; 0x340e <ILI9341_Enable_3G+0x6>
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	92 e0       	ldi	r25, 0x02	; 2
    3414:	99 83       	std	Y+1, r25	; 0x01
    3416:	1a 82       	std	Y+2, r1	; 0x02
    3418:	81 30       	cpi	r24, 0x01	; 1
    341a:	39 f4       	brne	.+14     	; 0x342a <ILI9341_Enable_3G+0x22>
    341c:	ae 01       	movw	r20, r28
    341e:	4f 5f       	subi	r20, 0xFF	; 255
    3420:	5f 4f       	sbci	r21, 0xFF	; 255
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	82 ef       	ldi	r24, 0xF2	; 242
    3426:	82 db       	rcall	.-2300   	; 0x2b2c <ILI9341_write_data>
    3428:	06 c0       	rjmp	.+12     	; 0x3436 <ILI9341_Enable_3G+0x2e>
    342a:	ae 01       	movw	r20, r28
    342c:	4e 5f       	subi	r20, 0xFE	; 254
    342e:	5f 4f       	sbci	r21, 0xFF	; 255
    3430:	61 e0       	ldi	r22, 0x01	; 1
    3432:	82 ef       	ldi	r24, 0xF2	; 242
    3434:	7b db       	rcall	.-2314   	; 0x2b2c <ILI9341_write_data>
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	08 95       	ret

00003440 <ILI9341_positive_Gamma_correction>:
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	2f 97       	sbiw	r28, 0x0f	; 15
    344a:	0f b6       	in	r0, 0x3f	; 63
    344c:	f8 94       	cli
    344e:	de bf       	out	0x3e, r29	; 62
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	cd bf       	out	0x3d, r28	; 61
    3454:	8f e0       	ldi	r24, 0x0F	; 15
    3456:	ea ee       	ldi	r30, 0xEA	; 234
    3458:	f7 e0       	ldi	r31, 0x07	; 7
    345a:	de 01       	movw	r26, r28
    345c:	11 96       	adiw	r26, 0x01	; 1
    345e:	01 90       	ld	r0, Z+
    3460:	0d 92       	st	X+, r0
    3462:	8a 95       	dec	r24
    3464:	e1 f7       	brne	.-8      	; 0x345e <ILI9341_positive_Gamma_correction+0x1e>
    3466:	ae 01       	movw	r20, r28
    3468:	4f 5f       	subi	r20, 0xFF	; 255
    346a:	5f 4f       	sbci	r21, 0xFF	; 255
    346c:	6f e0       	ldi	r22, 0x0F	; 15
    346e:	80 ee       	ldi	r24, 0xE0	; 224
    3470:	5d db       	rcall	.-2374   	; 0x2b2c <ILI9341_write_data>
    3472:	2f 96       	adiw	r28, 0x0f	; 15
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	08 95       	ret

00003484 <ILI9341_negative_Gamma_correction>:
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	2f 97       	sbiw	r28, 0x0f	; 15
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	8f e0       	ldi	r24, 0x0F	; 15
    349a:	e9 ef       	ldi	r30, 0xF9	; 249
    349c:	f7 e0       	ldi	r31, 0x07	; 7
    349e:	de 01       	movw	r26, r28
    34a0:	11 96       	adiw	r26, 0x01	; 1
    34a2:	01 90       	ld	r0, Z+
    34a4:	0d 92       	st	X+, r0
    34a6:	8a 95       	dec	r24
    34a8:	e1 f7       	brne	.-8      	; 0x34a2 <ILI9341_negative_Gamma_correction+0x1e>
    34aa:	ae 01       	movw	r20, r28
    34ac:	4f 5f       	subi	r20, 0xFF	; 255
    34ae:	5f 4f       	sbci	r21, 0xFF	; 255
    34b0:	6f e0       	ldi	r22, 0x0F	; 15
    34b2:	81 ee       	ldi	r24, 0xE1	; 225
    34b4:	3b db       	rcall	.-2442   	; 0x2b2c <ILI9341_write_data>
    34b6:	2f 96       	adiw	r28, 0x0f	; 15
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	08 95       	ret

000034c8 <ILI9341_interface_control>:
	
}


void ILI9341_interface_control(uint8_t isDefault)
{
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <ILI9341_interface_control+0x6>
    34ce:	1f 92       	push	r1
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[3] = {0x01,0x00,0x00};
    34d4:	91 e0       	ldi	r25, 0x01	; 1
    34d6:	99 83       	std	Y+1, r25	; 0x01
    34d8:	1a 82       	std	Y+2, r1	; 0x02
    34da:	1b 82       	std	Y+3, r1	; 0x03
	if(isDefault == Default)
    34dc:	81 30       	cpi	r24, 0x01	; 1
    34de:	31 f4       	brne	.+12     	; 0x34ec <ILI9341_interface_control+0x24>
	{
		ILI9341_write_data(Interface_control,3,Default_bytes);
    34e0:	ae 01       	movw	r20, r28
    34e2:	4f 5f       	subi	r20, 0xFF	; 255
    34e4:	5f 4f       	sbci	r21, 0xFF	; 255
    34e6:	63 e0       	ldi	r22, 0x03	; 3
    34e8:	86 ef       	ldi	r24, 0xF6	; 246
    34ea:	20 db       	rcall	.-2496   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	08 95       	ret

000034f8 <ILI9341_Backlight_control_1>:

void ILI9341_Backlight_control_1(uint8_t isDefault)
{
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	1f 92       	push	r1
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x0C};
    3502:	9c e0       	ldi	r25, 0x0C	; 12
    3504:	99 83       	std	Y+1, r25	; 0x01
	if(isDefault == Default)
    3506:	81 30       	cpi	r24, 0x01	; 1
    3508:	31 f4       	brne	.+12     	; 0x3516 <ILI9341_Backlight_control_1+0x1e>
	{
		ILI9341_write_data(Backlight_control_1,1,Default_bytes);
    350a:	ae 01       	movw	r20, r28
    350c:	4f 5f       	subi	r20, 0xFF	; 255
    350e:	5f 4f       	sbci	r21, 0xFF	; 255
    3510:	61 e0       	ldi	r22, 0x01	; 1
    3512:	88 eb       	ldi	r24, 0xB8	; 184
    3514:	0b db       	rcall	.-2538   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    3516:	0f 90       	pop	r0
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	08 95       	ret

0000351e <ILI9341_Backlight_control_2>:
void ILI9341_Backlight_control_2(uint8_t isDefault)
{
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	1f 92       	push	r1
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0xCC};
    3528:	9c ec       	ldi	r25, 0xCC	; 204
    352a:	99 83       	std	Y+1, r25	; 0x01
	if(isDefault == Default)
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	31 f4       	brne	.+12     	; 0x353c <ILI9341_Backlight_control_2+0x1e>
	{
		ILI9341_write_data(Backlight_control_2,1,Default_bytes);
    3530:	ae 01       	movw	r20, r28
    3532:	4f 5f       	subi	r20, 0xFF	; 255
    3534:	5f 4f       	sbci	r21, 0xFF	; 255
    3536:	61 e0       	ldi	r22, 0x01	; 1
    3538:	89 eb       	ldi	r24, 0xB9	; 185
    353a:	f8 da       	rcall	.-2576   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    353c:	0f 90       	pop	r0
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	08 95       	ret

00003544 <ILI9341_Backlight_control_3>:
void ILI9341_Backlight_control_3(uint8_t isDefault)
{
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	1f 92       	push	r1
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x04};
    354e:	94 e0       	ldi	r25, 0x04	; 4
    3550:	99 83       	std	Y+1, r25	; 0x01
	if(isDefault == Default)
    3552:	81 30       	cpi	r24, 0x01	; 1
    3554:	31 f4       	brne	.+12     	; 0x3562 <ILI9341_Backlight_control_3+0x1e>
	{
		ILI9341_write_data(Backlight_control_3,1,Default_bytes);
    3556:	ae 01       	movw	r20, r28
    3558:	4f 5f       	subi	r20, 0xFF	; 255
    355a:	5f 4f       	sbci	r21, 0xFF	; 255
    355c:	61 e0       	ldi	r22, 0x01	; 1
    355e:	8a eb       	ldi	r24, 0xBA	; 186
    3560:	e5 da       	rcall	.-2614   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    3562:	0f 90       	pop	r0
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	08 95       	ret

0000356a <ILI9341_Backlight_control_4>:
void ILI9341_Backlight_control_4(uint8_t isDefault)
{
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
    356e:	1f 92       	push	r1
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x65};
    3574:	95 e6       	ldi	r25, 0x65	; 101
    3576:	99 83       	std	Y+1, r25	; 0x01
	if(isDefault == Default)
    3578:	81 30       	cpi	r24, 0x01	; 1
    357a:	31 f4       	brne	.+12     	; 0x3588 <ILI9341_Backlight_control_4+0x1e>
	{
		ILI9341_write_data(Backlight_control_4,1,Default_bytes);
    357c:	ae 01       	movw	r20, r28
    357e:	4f 5f       	subi	r20, 0xFF	; 255
    3580:	5f 4f       	sbci	r21, 0xFF	; 255
    3582:	61 e0       	ldi	r22, 0x01	; 1
    3584:	8b eb       	ldi	r24, 0xBB	; 187
    3586:	d2 da       	rcall	.-2652   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    3588:	0f 90       	pop	r0
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	08 95       	ret

00003590 <ILI9341_Backlight_control_5>:
void ILI9341_Backlight_control_5(uint8_t isDefault)
{
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	1f 92       	push	r1
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x44};
    359a:	94 e4       	ldi	r25, 0x44	; 68
    359c:	99 83       	std	Y+1, r25	; 0x01
	if(isDefault == Default)
    359e:	81 30       	cpi	r24, 0x01	; 1
    35a0:	31 f4       	brne	.+12     	; 0x35ae <ILI9341_Backlight_control_5+0x1e>
	{
		ILI9341_write_data(Backlight_control_5,1,Default_bytes);
    35a2:	ae 01       	movw	r20, r28
    35a4:	4f 5f       	subi	r20, 0xFF	; 255
    35a6:	5f 4f       	sbci	r21, 0xFF	; 255
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	8c eb       	ldi	r24, 0xBC	; 188
    35ac:	bf da       	rcall	.-2690   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    35ae:	0f 90       	pop	r0
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	08 95       	ret

000035b6 <ILI9341_Backlight_control_7>:

void ILI9341_Backlight_control_7(uint8_t isDefault)
{
    35b6:	cf 93       	push	r28
    35b8:	df 93       	push	r29
    35ba:	1f 92       	push	r1
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x0F};
    35c0:	9f e0       	ldi	r25, 0x0F	; 15
    35c2:	99 83       	std	Y+1, r25	; 0x01
	if(isDefault == Default)
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	31 f4       	brne	.+12     	; 0x35d4 <ILI9341_Backlight_control_7+0x1e>
	{
		ILI9341_write_data(Backlight_control_7,1,Default_bytes);
    35c8:	ae 01       	movw	r20, r28
    35ca:	4f 5f       	subi	r20, 0xFF	; 255
    35cc:	5f 4f       	sbci	r21, 0xFF	; 255
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	8e eb       	ldi	r24, 0xBE	; 190
    35d2:	ac da       	rcall	.-2728   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    35d4:	0f 90       	pop	r0
    35d6:	df 91       	pop	r29
    35d8:	cf 91       	pop	r28
    35da:	08 95       	ret

000035dc <ILI9341_Backlight_control_8>:
void ILI9341_Backlight_control_8(uint8_t isDefault)
{
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	1f 92       	push	r1
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x00};
    35e6:	19 82       	std	Y+1, r1	; 0x01
	if(isDefault == Default)
    35e8:	81 30       	cpi	r24, 0x01	; 1
    35ea:	31 f4       	brne	.+12     	; 0x35f8 <ILI9341_Backlight_control_8+0x1c>
	{
		ILI9341_write_data(Backlight_control_8,1,Default_bytes);
    35ec:	ae 01       	movw	r20, r28
    35ee:	4f 5f       	subi	r20, 0xFF	; 255
    35f0:	5f 4f       	sbci	r21, 0xFF	; 255
    35f2:	61 e0       	ldi	r22, 0x01	; 1
    35f4:	8f eb       	ldi	r24, 0xBF	; 191
    35f6:	9a da       	rcall	.-2764   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    35f8:	0f 90       	pop	r0
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	08 95       	ret

00003600 <ILI9341_entry_mode_set>:

void ILI9341_entry_mode_set(uint8_t isDefault)
{
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	1f 92       	push	r1
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x06};
    360a:	96 e0       	ldi	r25, 0x06	; 6
    360c:	99 83       	std	Y+1, r25	; 0x01
	if(isDefault == Default)
    360e:	81 30       	cpi	r24, 0x01	; 1
    3610:	31 f4       	brne	.+12     	; 0x361e <ILI9341_entry_mode_set+0x1e>
	{
		ILI9341_write_data(Entry_mode_set,1,Default_bytes);
    3612:	ae 01       	movw	r20, r28
    3614:	4f 5f       	subi	r20, 0xFF	; 255
    3616:	5f 4f       	sbci	r21, 0xFF	; 255
    3618:	61 e0       	ldi	r22, 0x01	; 1
    361a:	87 eb       	ldi	r24, 0xB7	; 183
    361c:	87 da       	rcall	.-2802   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    361e:	0f 90       	pop	r0
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	08 95       	ret

00003626 <ILI9341_power_control_1>:

void ILI9341_power_control_1(uint8_t isDefault)
{
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	00 d0       	rcall	.+0      	; 0x362c <ILI9341_power_control_1+0x6>
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x21};
    3630:	91 e2       	ldi	r25, 0x21	; 33
    3632:	99 83       	std	Y+1, r25	; 0x01
	uint8_t User_bytes[1] = {0x23};
    3634:	93 e2       	ldi	r25, 0x23	; 35
    3636:	9a 83       	std	Y+2, r25	; 0x02
	if(isDefault == Default)
    3638:	81 30       	cpi	r24, 0x01	; 1
    363a:	39 f4       	brne	.+14     	; 0x364a <ILI9341_power_control_1+0x24>
	{
		ILI9341_write_data(Power_control_1,1,Default_bytes);
    363c:	ae 01       	movw	r20, r28
    363e:	4f 5f       	subi	r20, 0xFF	; 255
    3640:	5f 4f       	sbci	r21, 0xFF	; 255
    3642:	61 e0       	ldi	r22, 0x01	; 1
    3644:	80 ec       	ldi	r24, 0xC0	; 192
    3646:	72 da       	rcall	.-2844   	; 0x2b2c <ILI9341_write_data>
    3648:	06 c0       	rjmp	.+12     	; 0x3656 <ILI9341_power_control_1+0x30>
	}
	else
	{
		ILI9341_write_data(Power_control_1,1,User_bytes);
    364a:	ae 01       	movw	r20, r28
    364c:	4e 5f       	subi	r20, 0xFE	; 254
    364e:	5f 4f       	sbci	r21, 0xFF	; 255
    3650:	61 e0       	ldi	r22, 0x01	; 1
    3652:	80 ec       	ldi	r24, 0xC0	; 192
    3654:	6b da       	rcall	.-2858   	; 0x2b2c <ILI9341_write_data>
	}
}
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	08 95       	ret

00003660 <ILI9341_power_control_2>:
void ILI9341_power_control_2(uint8_t isDefault)
{
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	00 d0       	rcall	.+0      	; 0x3666 <ILI9341_power_control_2+0x6>
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x10};
    366a:	90 e1       	ldi	r25, 0x10	; 16
    366c:	99 83       	std	Y+1, r25	; 0x01
	uint8_t User_bytes[1] = {0x10};
    366e:	9a 83       	std	Y+2, r25	; 0x02
	if(isDefault == Default)
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	39 f4       	brne	.+14     	; 0x3682 <ILI9341_power_control_2+0x22>
	{
		ILI9341_write_data(Power_control_2,1,Default_bytes);
    3674:	ae 01       	movw	r20, r28
    3676:	4f 5f       	subi	r20, 0xFF	; 255
    3678:	5f 4f       	sbci	r21, 0xFF	; 255
    367a:	61 e0       	ldi	r22, 0x01	; 1
    367c:	81 ec       	ldi	r24, 0xC1	; 193
    367e:	56 da       	rcall	.-2900   	; 0x2b2c <ILI9341_write_data>
    3680:	06 c0       	rjmp	.+12     	; 0x368e <ILI9341_power_control_2+0x2e>
	}
	else
	{
		ILI9341_write_data(Power_control_2,1,User_bytes);
    3682:	ae 01       	movw	r20, r28
    3684:	4e 5f       	subi	r20, 0xFE	; 254
    3686:	5f 4f       	sbci	r21, 0xFF	; 255
    3688:	61 e0       	ldi	r22, 0x01	; 1
    368a:	81 ec       	ldi	r24, 0xC1	; 193
    368c:	4f da       	rcall	.-2914   	; 0x2b2c <ILI9341_write_data>
	}
}
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	08 95       	ret

00003698 <ILI9341_VCOM_control_1>:
void ILI9341_VCOM_control_1(uint8_t isDefault)
{
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	00 d0       	rcall	.+0      	; 0x369e <ILI9341_VCOM_control_1+0x6>
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <ILI9341_VCOM_control_1+0x8>
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[2] = {0x31,0x3C};
    36a4:	91 e3       	ldi	r25, 0x31	; 49
    36a6:	99 83       	std	Y+1, r25	; 0x01
    36a8:	9c e3       	ldi	r25, 0x3C	; 60
    36aa:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t User_bytes[2] = {0x3E, 0x28};
    36ac:	9e e3       	ldi	r25, 0x3E	; 62
    36ae:	9b 83       	std	Y+3, r25	; 0x03
    36b0:	98 e2       	ldi	r25, 0x28	; 40
    36b2:	9c 83       	std	Y+4, r25	; 0x04
	if(isDefault == Default)
    36b4:	81 30       	cpi	r24, 0x01	; 1
    36b6:	39 f4       	brne	.+14     	; 0x36c6 <ILI9341_VCOM_control_1+0x2e>
	{
		ILI9341_write_data(VCOM_control_1,2,Default_bytes);
    36b8:	ae 01       	movw	r20, r28
    36ba:	4f 5f       	subi	r20, 0xFF	; 255
    36bc:	5f 4f       	sbci	r21, 0xFF	; 255
    36be:	62 e0       	ldi	r22, 0x02	; 2
    36c0:	85 ec       	ldi	r24, 0xC5	; 197
    36c2:	34 da       	rcall	.-2968   	; 0x2b2c <ILI9341_write_data>
    36c4:	06 c0       	rjmp	.+12     	; 0x36d2 <ILI9341_VCOM_control_1+0x3a>
	}
	else
	{
		ILI9341_write_data(VCOM_control_1,2,User_bytes);
    36c6:	ae 01       	movw	r20, r28
    36c8:	4d 5f       	subi	r20, 0xFD	; 253
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255
    36cc:	62 e0       	ldi	r22, 0x02	; 2
    36ce:	85 ec       	ldi	r24, 0xC5	; 197
    36d0:	2d da       	rcall	.-2982   	; 0x2b2c <ILI9341_write_data>
	}
}
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	08 95       	ret

000036e0 <ILI9341_VCOM_control_2>:
void ILI9341_VCOM_control_2(uint8_t isDefault)
{
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <ILI9341_VCOM_control_2+0x6>
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0xC0};
    36ea:	90 ec       	ldi	r25, 0xC0	; 192
    36ec:	99 83       	std	Y+1, r25	; 0x01
	uint8_t User_bytes[1] = {0x86};
    36ee:	96 e8       	ldi	r25, 0x86	; 134
    36f0:	9a 83       	std	Y+2, r25	; 0x02
	if(isDefault == Default)
    36f2:	81 30       	cpi	r24, 0x01	; 1
    36f4:	39 f4       	brne	.+14     	; 0x3704 <ILI9341_VCOM_control_2+0x24>
	{
		ILI9341_write_data(VCOM_control_2,1,Default_bytes);
    36f6:	ae 01       	movw	r20, r28
    36f8:	4f 5f       	subi	r20, 0xFF	; 255
    36fa:	5f 4f       	sbci	r21, 0xFF	; 255
    36fc:	61 e0       	ldi	r22, 0x01	; 1
    36fe:	87 ec       	ldi	r24, 0xC7	; 199
    3700:	15 da       	rcall	.-3030   	; 0x2b2c <ILI9341_write_data>
    3702:	06 c0       	rjmp	.+12     	; 0x3710 <ILI9341_VCOM_control_2+0x30>
	}
	else
	{
		ILI9341_write_data(VCOM_control_2,1,User_bytes);
    3704:	ae 01       	movw	r20, r28
    3706:	4e 5f       	subi	r20, 0xFE	; 254
    3708:	5f 4f       	sbci	r21, 0xFF	; 255
    370a:	61 e0       	ldi	r22, 0x01	; 1
    370c:	87 ec       	ldi	r24, 0xC7	; 199
    370e:	0e da       	rcall	.-3044   	; 0x2b2c <ILI9341_write_data>
	}
}
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	df 91       	pop	r29
    3716:	cf 91       	pop	r28
    3718:	08 95       	ret

0000371a <ILI9341_power_control_A>:

void ILI9341_power_control_A(uint8_t isDefault)
{
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	2a 97       	sbiw	r28, 0x0a	; 10
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	f8 94       	cli
    3728:	de bf       	out	0x3e, r29	; 62
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	cd bf       	out	0x3d, r28	; 61
	uint8_t Default_bytes[5] = {0x39,0x2C,0x00,0x34,0x02};
    372e:	95 e0       	ldi	r25, 0x05	; 5
    3730:	e8 e0       	ldi	r30, 0x08	; 8
    3732:	f8 e0       	ldi	r31, 0x08	; 8
    3734:	de 01       	movw	r26, r28
    3736:	11 96       	adiw	r26, 0x01	; 1
    3738:	01 90       	ld	r0, Z+
    373a:	0d 92       	st	X+, r0
    373c:	9a 95       	dec	r25
    373e:	e1 f7       	brne	.-8      	; 0x3738 <ILI9341_power_control_A+0x1e>
	uint8_t User_bytes[5] = {0x39, 0x2C, 0x00, 0x34, 0x02};
    3740:	95 e0       	ldi	r25, 0x05	; 5
    3742:	e8 e0       	ldi	r30, 0x08	; 8
    3744:	f8 e0       	ldi	r31, 0x08	; 8
    3746:	de 01       	movw	r26, r28
    3748:	16 96       	adiw	r26, 0x06	; 6
    374a:	01 90       	ld	r0, Z+
    374c:	0d 92       	st	X+, r0
    374e:	9a 95       	dec	r25
    3750:	e1 f7       	brne	.-8      	; 0x374a <ILI9341_power_control_A+0x30>
	if(isDefault == Default)
    3752:	81 30       	cpi	r24, 0x01	; 1
    3754:	39 f4       	brne	.+14     	; 0x3764 <ILI9341_power_control_A+0x4a>
	{
		ILI9341_write_data(Power_control_A,5,Default_bytes);
    3756:	ae 01       	movw	r20, r28
    3758:	4f 5f       	subi	r20, 0xFF	; 255
    375a:	5f 4f       	sbci	r21, 0xFF	; 255
    375c:	65 e0       	ldi	r22, 0x05	; 5
    375e:	8b ec       	ldi	r24, 0xCB	; 203
    3760:	e5 d9       	rcall	.-3126   	; 0x2b2c <ILI9341_write_data>
    3762:	06 c0       	rjmp	.+12     	; 0x3770 <ILI9341_power_control_A+0x56>
	}
	else
	{
		ILI9341_write_data(Power_control_A,5,User_bytes);
    3764:	ae 01       	movw	r20, r28
    3766:	4a 5f       	subi	r20, 0xFA	; 250
    3768:	5f 4f       	sbci	r21, 0xFF	; 255
    376a:	65 e0       	ldi	r22, 0x05	; 5
    376c:	8b ec       	ldi	r24, 0xCB	; 203
    376e:	de d9       	rcall	.-3140   	; 0x2b2c <ILI9341_write_data>
	}
}
    3770:	2a 96       	adiw	r28, 0x0a	; 10
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	08 95       	ret

00003782 <ILI9341_power_control_B>:
void ILI9341_power_control_B(uint8_t isDefault)
{
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	00 d0       	rcall	.+0      	; 0x3788 <ILI9341_power_control_B+0x6>
    3788:	00 d0       	rcall	.+0      	; 0x378a <ILI9341_power_control_B+0x8>
    378a:	00 d0       	rcall	.+0      	; 0x378c <ILI9341_power_control_B+0xa>
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[3] = {0x00,0x81,0x30};
    3790:	19 82       	std	Y+1, r1	; 0x01
    3792:	91 e8       	ldi	r25, 0x81	; 129
    3794:	9a 83       	std	Y+2, r25	; 0x02
    3796:	90 e3       	ldi	r25, 0x30	; 48
    3798:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t User_bytes[3] = {0x00, 0xC1, 0x30};
    379a:	1c 82       	std	Y+4, r1	; 0x04
    379c:	21 ec       	ldi	r18, 0xC1	; 193
    379e:	2d 83       	std	Y+5, r18	; 0x05
    37a0:	9e 83       	std	Y+6, r25	; 0x06
	if(isDefault == Default)
    37a2:	81 30       	cpi	r24, 0x01	; 1
    37a4:	39 f4       	brne	.+14     	; 0x37b4 <ILI9341_power_control_B+0x32>
	{
		ILI9341_write_data(Power_control_B,3,Default_bytes);
    37a6:	ae 01       	movw	r20, r28
    37a8:	4f 5f       	subi	r20, 0xFF	; 255
    37aa:	5f 4f       	sbci	r21, 0xFF	; 255
    37ac:	63 e0       	ldi	r22, 0x03	; 3
    37ae:	8f ec       	ldi	r24, 0xCF	; 207
    37b0:	bd d9       	rcall	.-3206   	; 0x2b2c <ILI9341_write_data>
    37b2:	06 c0       	rjmp	.+12     	; 0x37c0 <ILI9341_power_control_B+0x3e>
	}
	else
	{
		ILI9341_write_data(Power_control_B,3,User_bytes);
    37b4:	ae 01       	movw	r20, r28
    37b6:	4c 5f       	subi	r20, 0xFC	; 252
    37b8:	5f 4f       	sbci	r21, 0xFF	; 255
    37ba:	63 e0       	ldi	r22, 0x03	; 3
    37bc:	8f ec       	ldi	r24, 0xCF	; 207
    37be:	b6 d9       	rcall	.-3220   	; 0x2b2c <ILI9341_write_data>
	}
}
    37c0:	26 96       	adiw	r28, 0x06	; 6
    37c2:	0f b6       	in	r0, 0x3f	; 63
    37c4:	f8 94       	cli
    37c6:	de bf       	out	0x3e, r29	; 62
    37c8:	0f be       	out	0x3f, r0	; 63
    37ca:	cd bf       	out	0x3d, r28	; 61
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	08 95       	ret

000037d2 <ILI9341_driver_timming_control_A>:
void ILI9341_driver_timming_control_A(uint8_t isDefault)
{
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <ILI9341_driver_timming_control_A+0x6>
    37d8:	1f 92       	push	r1
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[3] = {0x84,0x11,0x7A};
    37de:	94 e8       	ldi	r25, 0x84	; 132
    37e0:	99 83       	std	Y+1, r25	; 0x01
    37e2:	91 e1       	ldi	r25, 0x11	; 17
    37e4:	9a 83       	std	Y+2, r25	; 0x02
    37e6:	9a e7       	ldi	r25, 0x7A	; 122
    37e8:	9b 83       	std	Y+3, r25	; 0x03
	if(isDefault == Default)
    37ea:	81 30       	cpi	r24, 0x01	; 1
    37ec:	31 f4       	brne	.+12     	; 0x37fa <ILI9341_driver_timming_control_A+0x28>
	{
		ILI9341_write_data(Driver_timming_control_A,3,Default_bytes);
    37ee:	ae 01       	movw	r20, r28
    37f0:	4f 5f       	subi	r20, 0xFF	; 255
    37f2:	5f 4f       	sbci	r21, 0xFF	; 255
    37f4:	63 e0       	ldi	r22, 0x03	; 3
    37f6:	88 ee       	ldi	r24, 0xE8	; 232
    37f8:	99 d9       	rcall	.-3278   	; 0x2b2c <ILI9341_write_data>
	}
	else
	{
		
	}
}
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	08 95       	ret

00003806 <ILI9341_driver_timming_control_A_>:
void ILI9341_driver_timming_control_A_(uint8_t isDefault)
{
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
    380a:	00 d0       	rcall	.+0      	; 0x380c <ILI9341_driver_timming_control_A_+0x6>
    380c:	00 d0       	rcall	.+0      	; 0x380e <ILI9341_driver_timming_control_A_+0x8>
    380e:	00 d0       	rcall	.+0      	; 0x3810 <ILI9341_driver_timming_control_A_+0xa>
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[3] = {0x84,0x11,0x7A};
    3814:	94 e8       	ldi	r25, 0x84	; 132
    3816:	99 83       	std	Y+1, r25	; 0x01
    3818:	91 e1       	ldi	r25, 0x11	; 17
    381a:	9a 83       	std	Y+2, r25	; 0x02
    381c:	9a e7       	ldi	r25, 0x7A	; 122
    381e:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t User_bytes[3] = {0x85, 0x00, 0x78};
    3820:	95 e8       	ldi	r25, 0x85	; 133
    3822:	9c 83       	std	Y+4, r25	; 0x04
    3824:	1d 82       	std	Y+5, r1	; 0x05
    3826:	98 e7       	ldi	r25, 0x78	; 120
    3828:	9e 83       	std	Y+6, r25	; 0x06
	if(isDefault == Default)
    382a:	81 30       	cpi	r24, 0x01	; 1
    382c:	39 f4       	brne	.+14     	; 0x383c <ILI9341_driver_timming_control_A_+0x36>
	{
		ILI9341_write_data(Driver_timming_control_A_,3,Default_bytes);
    382e:	ae 01       	movw	r20, r28
    3830:	4f 5f       	subi	r20, 0xFF	; 255
    3832:	5f 4f       	sbci	r21, 0xFF	; 255
    3834:	63 e0       	ldi	r22, 0x03	; 3
    3836:	89 ee       	ldi	r24, 0xE9	; 233
    3838:	79 d9       	rcall	.-3342   	; 0x2b2c <ILI9341_write_data>
    383a:	06 c0       	rjmp	.+12     	; 0x3848 <ILI9341_driver_timming_control_A_+0x42>
	}
	else
	{
		ILI9341_write_data(Driver_timming_control_A_,3,User_bytes);
    383c:	ae 01       	movw	r20, r28
    383e:	4c 5f       	subi	r20, 0xFC	; 252
    3840:	5f 4f       	sbci	r21, 0xFF	; 255
    3842:	63 e0       	ldi	r22, 0x03	; 3
    3844:	89 ee       	ldi	r24, 0xE9	; 233
    3846:	72 d9       	rcall	.-3356   	; 0x2b2c <ILI9341_write_data>
	}
}
    3848:	26 96       	adiw	r28, 0x06	; 6
    384a:	0f b6       	in	r0, 0x3f	; 63
    384c:	f8 94       	cli
    384e:	de bf       	out	0x3e, r29	; 62
    3850:	0f be       	out	0x3f, r0	; 63
    3852:	cd bf       	out	0x3d, r28	; 61
    3854:	df 91       	pop	r29
    3856:	cf 91       	pop	r28
    3858:	08 95       	ret

0000385a <ILI9341_driver_timming_control_B>:
void ILI9341_driver_timming_control_B(uint8_t isDefault)
{
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	00 d0       	rcall	.+0      	; 0x3860 <ILI9341_driver_timming_control_B+0x6>
    3860:	00 d0       	rcall	.+0      	; 0x3862 <ILI9341_driver_timming_control_B+0x8>
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[2] = {0x66,0x00};
    3866:	96 e6       	ldi	r25, 0x66	; 102
    3868:	99 83       	std	Y+1, r25	; 0x01
    386a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t User_bytes[2] = {0x00,0x00};
    386c:	1b 82       	std	Y+3, r1	; 0x03
    386e:	1c 82       	std	Y+4, r1	; 0x04
	if(isDefault == Default)
    3870:	81 30       	cpi	r24, 0x01	; 1
    3872:	39 f4       	brne	.+14     	; 0x3882 <ILI9341_driver_timming_control_B+0x28>
	{
		ILI9341_write_data(Driver_timming_control_B,2,Default_bytes);
    3874:	ae 01       	movw	r20, r28
    3876:	4f 5f       	subi	r20, 0xFF	; 255
    3878:	5f 4f       	sbci	r21, 0xFF	; 255
    387a:	62 e0       	ldi	r22, 0x02	; 2
    387c:	8a ee       	ldi	r24, 0xEA	; 234
    387e:	56 d9       	rcall	.-3412   	; 0x2b2c <ILI9341_write_data>
    3880:	06 c0       	rjmp	.+12     	; 0x388e <ILI9341_driver_timming_control_B+0x34>
	}
	else
	{
		ILI9341_write_data(Driver_timming_control_B,2,User_bytes);
    3882:	ae 01       	movw	r20, r28
    3884:	4d 5f       	subi	r20, 0xFD	; 253
    3886:	5f 4f       	sbci	r21, 0xFF	; 255
    3888:	62 e0       	ldi	r22, 0x02	; 2
    388a:	8a ee       	ldi	r24, 0xEA	; 234
    388c:	4f d9       	rcall	.-3426   	; 0x2b2c <ILI9341_write_data>
	}
}
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	08 95       	ret

0000389c <ILI9341_power_sequence_control>:
void ILI9341_power_sequence_control(uint8_t isDefault)
{
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    38a4:	28 97       	sbiw	r28, 0x08	; 8
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	f8 94       	cli
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t Default_bytes[4] = {0x55,0x01,0x23,0x01};
    38b0:	95 e5       	ldi	r25, 0x55	; 85
    38b2:	99 83       	std	Y+1, r25	; 0x01
    38b4:	91 e0       	ldi	r25, 0x01	; 1
    38b6:	9a 83       	std	Y+2, r25	; 0x02
    38b8:	23 e2       	ldi	r18, 0x23	; 35
    38ba:	2b 83       	std	Y+3, r18	; 0x03
    38bc:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t User_bytes[4] = {0x64, 0x03, 0x12, 0x81};
    38be:	94 e6       	ldi	r25, 0x64	; 100
    38c0:	9d 83       	std	Y+5, r25	; 0x05
    38c2:	93 e0       	ldi	r25, 0x03	; 3
    38c4:	9e 83       	std	Y+6, r25	; 0x06
    38c6:	92 e1       	ldi	r25, 0x12	; 18
    38c8:	9f 83       	std	Y+7, r25	; 0x07
    38ca:	91 e8       	ldi	r25, 0x81	; 129
    38cc:	98 87       	std	Y+8, r25	; 0x08
	if(isDefault == Default)
    38ce:	81 30       	cpi	r24, 0x01	; 1
    38d0:	39 f4       	brne	.+14     	; 0x38e0 <ILI9341_power_sequence_control+0x44>
	{
		ILI9341_write_data(Power_sequence_control,4,Default_bytes);
    38d2:	ae 01       	movw	r20, r28
    38d4:	4f 5f       	subi	r20, 0xFF	; 255
    38d6:	5f 4f       	sbci	r21, 0xFF	; 255
    38d8:	64 e0       	ldi	r22, 0x04	; 4
    38da:	8d ee       	ldi	r24, 0xED	; 237
    38dc:	27 d9       	rcall	.-3506   	; 0x2b2c <ILI9341_write_data>
    38de:	06 c0       	rjmp	.+12     	; 0x38ec <ILI9341_power_sequence_control+0x50>
	}
	else
	{
		ILI9341_write_data(Power_sequence_control,4,User_bytes);
    38e0:	ae 01       	movw	r20, r28
    38e2:	4b 5f       	subi	r20, 0xFB	; 251
    38e4:	5f 4f       	sbci	r21, 0xFF	; 255
    38e6:	64 e0       	ldi	r22, 0x04	; 4
    38e8:	8d ee       	ldi	r24, 0xED	; 237
    38ea:	20 d9       	rcall	.-3520   	; 0x2b2c <ILI9341_write_data>
	}
}
    38ec:	28 96       	adiw	r28, 0x08	; 8
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	de bf       	out	0x3e, r29	; 62
    38f4:	0f be       	out	0x3f, r0	; 63
    38f6:	cd bf       	out	0x3d, r28	; 61
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	08 95       	ret

000038fe <ILI9341_pump_ratio_control>:
void ILI9341_pump_ratio_control(uint8_t isDefault)
{
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
    3902:	00 d0       	rcall	.+0      	; 0x3904 <ILI9341_pump_ratio_control+0x6>
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
	uint8_t Default_bytes[1] = {0x10};
    3908:	90 e1       	ldi	r25, 0x10	; 16
    390a:	99 83       	std	Y+1, r25	; 0x01
	uint8_t User_bytes[1] = {0x20};
    390c:	90 e2       	ldi	r25, 0x20	; 32
    390e:	9a 83       	std	Y+2, r25	; 0x02
	if(isDefault == Default)
    3910:	81 30       	cpi	r24, 0x01	; 1
    3912:	39 f4       	brne	.+14     	; 0x3922 <ILI9341_pump_ratio_control+0x24>
	{
		ILI9341_write_data(Pump_ratio_control,1,Default_bytes);
    3914:	ae 01       	movw	r20, r28
    3916:	4f 5f       	subi	r20, 0xFF	; 255
    3918:	5f 4f       	sbci	r21, 0xFF	; 255
    391a:	61 e0       	ldi	r22, 0x01	; 1
    391c:	87 ef       	ldi	r24, 0xF7	; 247
    391e:	06 d9       	rcall	.-3572   	; 0x2b2c <ILI9341_write_data>
    3920:	06 c0       	rjmp	.+12     	; 0x392e <ILI9341_pump_ratio_control+0x30>
	}
	else
	{
		ILI9341_write_data(Pump_ratio_control,1,User_bytes);
    3922:	ae 01       	movw	r20, r28
    3924:	4e 5f       	subi	r20, 0xFE	; 254
    3926:	5f 4f       	sbci	r21, 0xFF	; 255
    3928:	61 e0       	ldi	r22, 0x01	; 1
    392a:	87 ef       	ldi	r24, 0xF7	; 247
    392c:	ff d8       	rcall	.-3586   	; 0x2b2c <ILI9341_write_data>
	}
}
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	08 95       	ret

00003938 <setting_all>:

void setting_all()
{
	ILI9341_gamma_set(!Default);
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	6d dc       	rcall	.-1830   	; 0x3216 <ILI9341_gamma_set>
	
	ILI9341_pixel_format_set(Default);
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	87 dc       	rcall	.-1778   	; 0x324e <ILI9341_pixel_format_set>
	ILI9341_set_memory_data_access_control(!Default);
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	a2 dc       	rcall	.-1724   	; 0x3288 <ILI9341_set_memory_data_access_control>

	ILI9341_RGB_interface_signal_control(Default);
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	bc dc       	rcall	.-1672   	; 0x32c0 <ILI9341_RGB_interface_signal_control>
	ILI9341_Frame_control_in_Normal_mode(!Default);
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	cd dc       	rcall	.-1638   	; 0x32e6 <ILI9341_Frame_control_in_Normal_mode>
	ILI9341_Frame_control_in_Idle_mode(Default);
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	ed dc       	rcall	.-1574   	; 0x332a <ILI9341_Frame_control_in_Idle_mode>
	ILI9341_Frame_control_in_Partial_mode(Default);
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	00 dd       	rcall	.-1536   	; 0x3354 <ILI9341_Frame_control_in_Partial_mode>
	ILI9341_blanking_porch_control(Default);
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	13 dd       	rcall	.-1498   	; 0x337e <ILI9341_blanking_porch_control>
	ILI9341_display_function_control(!Default);
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	2d dd       	rcall	.-1446   	; 0x33b6 <ILI9341_display_function_control>
	ILI9341_Enable_3G(!Default);
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	54 dd       	rcall	.-1368   	; 0x3408 <ILI9341_Enable_3G>
	ILI9341_positive_Gamma_correction();
    3960:	6f dd       	rcall	.-1314   	; 0x3440 <ILI9341_positive_Gamma_correction>
	ILI9341_negative_Gamma_correction();
    3962:	90 dd       	rcall	.-1248   	; 0x3484 <ILI9341_negative_Gamma_correction>
	
	ILI9341_interface_control(Default);
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	b0 dd       	rcall	.-1184   	; 0x34c8 <ILI9341_interface_control>

	ILI9341_entry_mode_set(Default);
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	4a de       	rcall	.-876    	; 0x3600 <ILI9341_entry_mode_set>
	ILI9341_Backlight_control_1(Default);
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	c4 dd       	rcall	.-1144   	; 0x34f8 <ILI9341_Backlight_control_1>
	ILI9341_Backlight_control_2(Default);
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	d5 dd       	rcall	.-1110   	; 0x351e <ILI9341_Backlight_control_2>
	ILI9341_Backlight_control_3(Default);
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	e6 dd       	rcall	.-1076   	; 0x3544 <ILI9341_Backlight_control_3>
	ILI9341_Backlight_control_4(Default);
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	f7 dd       	rcall	.-1042   	; 0x356a <ILI9341_Backlight_control_4>
	ILI9341_Backlight_control_5(Default);
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	08 de       	rcall	.-1008   	; 0x3590 <ILI9341_Backlight_control_5>
	ILI9341_Backlight_control_7(Default);
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	19 de       	rcall	.-974    	; 0x35b6 <ILI9341_Backlight_control_7>
	ILI9341_Backlight_control_8(Default);
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	2a de       	rcall	.-940    	; 0x35dc <ILI9341_Backlight_control_8>
	ILI9341_power_control_1(!Default);
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	4d de       	rcall	.-870    	; 0x3626 <ILI9341_power_control_1>
	ILI9341_power_control_2(!Default);
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	68 de       	rcall	.-816    	; 0x3660 <ILI9341_power_control_2>
    3990:	80 e0       	ldi	r24, 0x00	; 0
	ILI9341_VCOM_control_1(!Default);
    3992:	82 de       	rcall	.-764    	; 0x3698 <ILI9341_VCOM_control_1>
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	a4 de       	rcall	.-696    	; 0x36e0 <ILI9341_VCOM_control_2>
	ILI9341_VCOM_control_2(!Default);
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	bf de       	rcall	.-642    	; 0x371a <ILI9341_power_control_A>
    399c:	80 e0       	ldi	r24, 0x00	; 0

	ILI9341_power_control_A(!Default);
    399e:	f1 de       	rcall	.-542    	; 0x3782 <ILI9341_power_control_B>
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	17 df       	rcall	.-466    	; 0x37d2 <ILI9341_driver_timming_control_A>
	ILI9341_power_control_B(!Default);
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	2f df       	rcall	.-418    	; 0x3806 <ILI9341_driver_timming_control_A_>
    39a8:	80 e0       	ldi	r24, 0x00	; 0
	ILI9341_driver_timming_control_A(!Default);
    39aa:	57 df       	rcall	.-338    	; 0x385a <ILI9341_driver_timming_control_B>
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	76 df       	rcall	.-276    	; 0x389c <ILI9341_power_sequence_control>
	ILI9341_driver_timming_control_A_(Default);
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	a5 cf       	rjmp	.-182    	; 0x38fe <ILI9341_pump_ratio_control>
    39b4:	08 95       	ret

000039b6 <SHT31_CRC8>:
	ILI9341_driver_timming_control_B(!Default);
    39b6:	fc 01       	movw	r30, r24
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	8f ef       	ldi	r24, 0xFF	; 255
	ILI9341_power_sequence_control(!Default);
    39bc:	15 c0       	rjmp	.+42     	; 0x39e8 <SHT31_CRC8+0x32>
    39be:	af 01       	movw	r20, r30
    39c0:	4f 5f       	subi	r20, 0xFF	; 255
	ILI9341_pump_ratio_control(!Default);
    39c2:	5f 4f       	sbci	r21, 0xFF	; 255
    39c4:	90 81       	ld	r25, Z
    39c6:	89 27       	eor	r24, r25
    39c8:	20 e0       	ldi	r18, 0x00	; 0
		printf("before convert temp : %ld, humi : %ld\n\r", temp, humi);
		printf("humi data_bytes : 0x%X, 0x%X\n\r", data_bytes[3], data_bytes[4]);
		SHT31_convert_temp_humi(temp,humi);
	}
	
}
    39ca:	0a c0       	rjmp	.+20     	; 0x39e0 <SHT31_CRC8+0x2a>
    39cc:	88 23       	and	r24, r24
    39ce:	34 f4       	brge	.+12     	; 0x39dc <SHT31_CRC8+0x26>
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	88 0f       	add	r24, r24
    39d4:	99 1f       	adc	r25, r25
    39d6:	91 e3       	ldi	r25, 0x31	; 49
    39d8:	89 27       	eor	r24, r25
    39da:	01 c0       	rjmp	.+2      	; 0x39de <SHT31_CRC8+0x28>
    39dc:	88 0f       	add	r24, r24
    39de:	2f 5f       	subi	r18, 0xFF	; 255
    39e0:	28 30       	cpi	r18, 0x08	; 8
    39e2:	a0 f3       	brcs	.-24     	; 0x39cc <SHT31_CRC8+0x16>
    39e4:	3f 5f       	subi	r19, 0xFF	; 255
    39e6:	fa 01       	movw	r30, r20
    39e8:	36 17       	cp	r19, r22
    39ea:	48 f3       	brcs	.-46     	; 0x39be <SHT31_CRC8+0x8>
    39ec:	08 95       	ret

000039ee <SHT31_start_address_write>:
    39ee:	cf 93       	push	r28
    39f0:	c8 2f       	mov	r28, r24
    39f2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <i2c_start>
    39f6:	8c 2f       	mov	r24, r28
    39f8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <i2c_send_address_write>
    39fc:	cf 91       	pop	r28
    39fe:	08 95       	ret

00003a00 <SHT31_start_address_read>:
    3a00:	cf 93       	push	r28
    3a02:	c8 2f       	mov	r28, r24
    3a04:	0e 94 9d 05 	call	0xb3a	; 0xb3a <i2c_start>
    3a08:	8c 2f       	mov	r24, r28
    3a0a:	0e 94 de 05 	call	0xbbc	; 0xbbc <i2c_send_address_read>
    3a0e:	cf 91       	pop	r28
    3a10:	08 95       	ret

00003a12 <SHT31_send_command>:
    3a12:	cf 93       	push	r28
    3a14:	c8 2f       	mov	r28, r24
    3a16:	89 2f       	mov	r24, r25
    3a18:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <i2c_send_data_ACK>
    3a1c:	8c 2f       	mov	r24, r28
    3a1e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <i2c_send_data_ACK>
    3a22:	cf 91       	pop	r28
    3a24:	08 95       	ret

00003a26 <SHT31_receive_data>:
    3a26:	ef 92       	push	r14
    3a28:	ff 92       	push	r15
    3a2a:	0f 93       	push	r16
    3a2c:	1f 93       	push	r17
    3a2e:	cf 93       	push	r28
    3a30:	df 93       	push	r29
    3a32:	8c 01       	movw	r16, r24
    3a34:	d6 2f       	mov	r29, r22
    3a36:	80 e4       	ldi	r24, 0x40	; 64
    3a38:	9b e0       	ldi	r25, 0x0B	; 11
    3a3a:	9f 93       	push	r25
    3a3c:	8f 93       	push	r24
    3a3e:	14 d2       	rcall	.+1064   	; 0x3e68 <printf>
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	c0 e0       	ldi	r28, 0x00	; 0
    3a46:	08 c0       	rjmp	.+16     	; 0x3a58 <SHT31_receive_data+0x32>
    3a48:	78 01       	movw	r14, r16
    3a4a:	ec 0e       	add	r14, r28
    3a4c:	f1 1c       	adc	r15, r1
    3a4e:	0e 94 1c 06 	call	0xc38	; 0xc38 <i2c_receive_ACK>
    3a52:	f7 01       	movw	r30, r14
    3a54:	80 83       	st	Z, r24
    3a56:	cf 5f       	subi	r28, 0xFF	; 255
    3a58:	2c 2f       	mov	r18, r28
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	8d 2f       	mov	r24, r29
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	28 17       	cp	r18, r24
    3a64:	39 07       	cpc	r19, r25
    3a66:	84 f3       	brlt	.-32     	; 0x3a48 <SHT31_receive_data+0x22>
    3a68:	8d 2f       	mov	r24, r29
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	e8 01       	movw	r28, r16
    3a70:	c8 0f       	add	r28, r24
    3a72:	d9 1f       	adc	r29, r25
    3a74:	0e 94 3c 06 	call	0xc78	; 0xc78 <i2c_receive_NACK>
    3a78:	88 83       	st	Y, r24
    3a7a:	df 91       	pop	r29
    3a7c:	cf 91       	pop	r28
    3a7e:	1f 91       	pop	r17
    3a80:	0f 91       	pop	r16
    3a82:	ff 90       	pop	r15
    3a84:	ef 90       	pop	r14
    3a86:	08 95       	ret

00003a88 <SHT31_Measure_period>:
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	ec 01       	movw	r28, r24
    3a8e:	84 e4       	ldi	r24, 0x44	; 68
    3a90:	ae df       	rcall	.-164    	; 0x39ee <SHT31_start_address_write>
    3a92:	ce 01       	movw	r24, r28
    3a94:	be df       	rcall	.-132    	; 0x3a12 <SHT31_send_command>
    3a96:	df 91       	pop	r29
    3a98:	cf 91       	pop	r28
    3a9a:	08 95       	ret

00003a9c <SHT31_init>:
    3a9c:	84 e6       	ldi	r24, 0x64	; 100
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	0e 94 68 05 	call	0xad0	; 0xad0 <i2c_init>
    3aa4:	81 11       	cpse	r24, r1
    3aa6:	07 c0       	rjmp	.+14     	; 0x3ab6 <SHT31_init+0x1a>
    3aa8:	85 e5       	ldi	r24, 0x55	; 85
    3aaa:	9b e0       	ldi	r25, 0x0B	; 11
    3aac:	9f 93       	push	r25
    3aae:	8f 93       	push	r24
    3ab0:	db d1       	rcall	.+950    	; 0x3e68 <printf>
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	80 e3       	ldi	r24, 0x30	; 48
    3ab8:	91 e2       	ldi	r25, 0x21	; 33
    3aba:	e6 df       	rcall	.-52     	; 0x3a88 <SHT31_Measure_period>
    3abc:	2f ef       	ldi	r18, 0xFF	; 255
    3abe:	80 e7       	ldi	r24, 0x70	; 112
    3ac0:	92 e0       	ldi	r25, 0x02	; 2
    3ac2:	21 50       	subi	r18, 0x01	; 1
    3ac4:	80 40       	sbci	r24, 0x00	; 0
    3ac6:	90 40       	sbci	r25, 0x00	; 0
    3ac8:	e1 f7       	brne	.-8      	; 0x3ac2 <SHT31_init+0x26>
    3aca:	00 c0       	rjmp	.+0      	; 0x3acc <SHT31_init+0x30>
    3acc:	00 00       	nop
    3ace:	08 95       	ret

00003ad0 <SHT31_convert_temp_humi>:
    3ad0:	8f 92       	push	r8
    3ad2:	9f 92       	push	r9
    3ad4:	af 92       	push	r10
    3ad6:	bf 92       	push	r11
    3ad8:	cf 92       	push	r12
    3ada:	df 92       	push	r13
    3adc:	ef 92       	push	r14
    3ade:	ff 92       	push	r15
    3ae0:	49 01       	movw	r8, r18
    3ae2:	5a 01       	movw	r10, r20
    3ae4:	af ea       	ldi	r26, 0xAF	; 175
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	9b 01       	movw	r18, r22
    3aea:	ac 01       	movw	r20, r24
    3aec:	90 d1       	rcall	.+800    	; 0x3e0e <__muluhisi3>
    3aee:	6c 01       	movw	r12, r24
    3af0:	ee 24       	eor	r14, r14
    3af2:	ff 24       	eor	r15, r15
    3af4:	8c e2       	ldi	r24, 0x2C	; 44
    3af6:	c8 1a       	sub	r12, r24
    3af8:	d1 08       	sbc	r13, r1
    3afa:	e1 08       	sbc	r14, r1
    3afc:	f1 08       	sbc	r15, r1
    3afe:	a4 e6       	ldi	r26, 0x64	; 100
    3b00:	b0 e0       	ldi	r27, 0x00	; 0
    3b02:	a5 01       	movw	r20, r10
    3b04:	94 01       	movw	r18, r8
    3b06:	83 d1       	rcall	.+774    	; 0x3e0e <__muluhisi3>
    3b08:	aa 27       	eor	r26, r26
    3b0a:	bb 27       	eor	r27, r27
    3b0c:	01 96       	adiw	r24, 0x01	; 1
    3b0e:	a1 1d       	adc	r26, r1
    3b10:	b1 1d       	adc	r27, r1
    3b12:	c0 92 d5 0b 	sts	0x0BD5, r12	; 0x800bd5 <temperature>
    3b16:	d0 92 d6 0b 	sts	0x0BD6, r13	; 0x800bd6 <temperature+0x1>
    3b1a:	e0 92 d7 0b 	sts	0x0BD7, r14	; 0x800bd7 <temperature+0x2>
    3b1e:	f0 92 d8 0b 	sts	0x0BD8, r15	; 0x800bd8 <temperature+0x3>
    3b22:	80 93 d1 0b 	sts	0x0BD1, r24	; 0x800bd1 <humidity>
    3b26:	90 93 d2 0b 	sts	0x0BD2, r25	; 0x800bd2 <humidity+0x1>
    3b2a:	a0 93 d3 0b 	sts	0x0BD3, r26	; 0x800bd3 <humidity+0x2>
    3b2e:	b0 93 d4 0b 	sts	0x0BD4, r27	; 0x800bd4 <humidity+0x3>
    3b32:	ff 90       	pop	r15
    3b34:	ef 90       	pop	r14
    3b36:	df 90       	pop	r13
    3b38:	cf 90       	pop	r12
    3b3a:	bf 90       	pop	r11
    3b3c:	af 90       	pop	r10
    3b3e:	9f 90       	pop	r9
    3b40:	8f 90       	pop	r8
    3b42:	08 95       	ret

00003b44 <SHT31_read_period>:
	SHT31_start_address_write(SHT31_address);
	SHT31_send_command(command);
}

void SHT31_read_period()
{
    3b44:	8f 92       	push	r8
    3b46:	9f 92       	push	r9
    3b48:	af 92       	push	r10
    3b4a:	bf 92       	push	r11
    3b4c:	cf 92       	push	r12
    3b4e:	df 92       	push	r13
    3b50:	ef 92       	push	r14
    3b52:	ff 92       	push	r15
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	00 d0       	rcall	.+0      	; 0x3b5c <SHT31_read_period+0x18>
    3b5c:	00 d0       	rcall	.+0      	; 0x3b5e <SHT31_read_period+0x1a>
    3b5e:	00 d0       	rcall	.+0      	; 0x3b60 <SHT31_read_period+0x1c>
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data_bytes[6];
	uint32_t temp = 0;
	uint32_t humi = 0;
	SHT31_start_address_write(SHT31_address);
    3b64:	84 e4       	ldi	r24, 0x44	; 68
    3b66:	43 df       	rcall	.-378    	; 0x39ee <SHT31_start_address_write>
	SHT31_send_command(Read_period_data);
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	90 ee       	ldi	r25, 0xE0	; 224
    3b6c:	52 df       	rcall	.-348    	; 0x3a12 <SHT31_send_command>
    3b6e:	8f e3       	ldi	r24, 0x3F	; 63
    3b70:	9c e9       	ldi	r25, 0x9C	; 156
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <SHT31_read_period+0x2e>
    3b76:	00 c0       	rjmp	.+0      	; 0x3b78 <SHT31_read_period+0x34>
	_delay_ms(10);
	SHT31_start_address_read(SHT31_address);
    3b78:	00 00       	nop
    3b7a:	84 e4       	ldi	r24, 0x44	; 68
    3b7c:	41 df       	rcall	.-382    	; 0x3a00 <SHT31_start_address_read>
	SHT31_receive_data(data_bytes,6);
    3b7e:	66 e0       	ldi	r22, 0x06	; 6
    3b80:	ce 01       	movw	r24, r28
    3b82:	01 96       	adiw	r24, 0x01	; 1
    3b84:	50 df       	rcall	.-352    	; 0x3a26 <SHT31_receive_data>
	i2c_stop();
    3b86:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <i2c_stop>
	if(data_bytes[2] != SHT31_CRC8(data_bytes,2) || data_bytes[5] != SHT31_CRC8(data_bytes+3,2))
    3b8a:	1b 81       	ldd	r17, Y+3	; 0x03
    3b8c:	62 e0       	ldi	r22, 0x02	; 2
    3b8e:	ce 01       	movw	r24, r28
    3b90:	01 96       	adiw	r24, 0x01	; 1
    3b92:	11 df       	rcall	.-478    	; 0x39b6 <SHT31_CRC8>
    3b94:	18 13       	cpse	r17, r24
    3b96:	07 c0       	rjmp	.+14     	; 0x3ba6 <SHT31_read_period+0x62>
    3b98:	1e 81       	ldd	r17, Y+6	; 0x06
    3b9a:	62 e0       	ldi	r22, 0x02	; 2
    3b9c:	ce 01       	movw	r24, r28
    3b9e:	04 96       	adiw	r24, 0x04	; 4
    3ba0:	0a df       	rcall	.-492    	; 0x39b6 <SHT31_CRC8>
    3ba2:	18 17       	cp	r17, r24
    3ba4:	41 f0       	breq	.+16     	; 0x3bb6 <SHT31_read_period+0x72>
	{
		printf("CRC8 Failed");
    3ba6:	81 e6       	ldi	r24, 0x61	; 97
    3ba8:	9b e0       	ldi	r25, 0x0B	; 11
    3baa:	9f 93       	push	r25
    3bac:	8f 93       	push	r24
    3bae:	5c d1       	rcall	.+696    	; 0x3e68 <printf>
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	34 c0       	rjmp	.+104    	; 0x3c1e <SHT31_read_period+0xda>
    3bb6:	c9 80       	ldd	r12, Y+1	; 0x01
	}
	else
	{
		temp = (((uint16_t)data_bytes[0] << 8) + (uint16_t)data_bytes[1]);
    3bb8:	d1 2c       	mov	r13, r1
    3bba:	dc 2c       	mov	r13, r12
    3bbc:	cc 24       	eor	r12, r12
    3bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc0:	c8 0e       	add	r12, r24
    3bc2:	d1 1c       	adc	r13, r1
    3bc4:	e1 2c       	mov	r14, r1
    3bc6:	f1 2c       	mov	r15, r1
    3bc8:	8c 80       	ldd	r8, Y+4	; 0x04
		humi = (((uint16_t)data_bytes[3] << 8) + (uint16_t)data_bytes[4]);
    3bca:	91 2c       	mov	r9, r1
    3bcc:	98 2c       	mov	r9, r8
    3bce:	88 24       	eor	r8, r8
    3bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd2:	88 0e       	add	r8, r24
    3bd4:	91 1c       	adc	r9, r1
    3bd6:	a1 2c       	mov	r10, r1
    3bd8:	b1 2c       	mov	r11, r1
    3bda:	1f 92       	push	r1
		printf("before convert temp : %ld, humi : %ld\n\r", temp, humi);
    3bdc:	1f 92       	push	r1
    3bde:	9f 92       	push	r9
    3be0:	8f 92       	push	r8
    3be2:	1f 92       	push	r1
    3be4:	1f 92       	push	r1
    3be6:	df 92       	push	r13
    3be8:	cf 92       	push	r12
    3bea:	8d e6       	ldi	r24, 0x6D	; 109
    3bec:	9b e0       	ldi	r25, 0x0B	; 11
    3bee:	9f 93       	push	r25
    3bf0:	8f 93       	push	r24
    3bf2:	3a d1       	rcall	.+628    	; 0x3e68 <printf>
    3bf4:	9d 81       	ldd	r25, Y+5	; 0x05
		printf("humi data_bytes : 0x%X, 0x%X\n\r", data_bytes[3], data_bytes[4]);
    3bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf8:	1f 92       	push	r1
    3bfa:	9f 93       	push	r25
    3bfc:	1f 92       	push	r1
    3bfe:	8f 93       	push	r24
    3c00:	85 e9       	ldi	r24, 0x95	; 149
    3c02:	9b e0       	ldi	r25, 0x0B	; 11
    3c04:	9f 93       	push	r25
    3c06:	8f 93       	push	r24
    3c08:	2f d1       	rcall	.+606    	; 0x3e68 <printf>
		SHT31_convert_temp_humi(temp,humi);
    3c0a:	a5 01       	movw	r20, r10
    3c0c:	94 01       	movw	r18, r8
    3c0e:	c7 01       	movw	r24, r14
    3c10:	b6 01       	movw	r22, r12
    3c12:	5e df       	rcall	.-324    	; 0x3ad0 <SHT31_convert_temp_humi>
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	f8 94       	cli
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	cd bf       	out	0x3d, r28	; 61
    3c1e:	40 91 d1 0b 	lds	r20, 0x0BD1	; 0x800bd1 <humidity>
	}
	printf("temp : %ld, humi : %ld\n\r", temperature, humidity);
    3c22:	50 91 d2 0b 	lds	r21, 0x0BD2	; 0x800bd2 <humidity+0x1>
    3c26:	60 91 d3 0b 	lds	r22, 0x0BD3	; 0x800bd3 <humidity+0x2>
    3c2a:	70 91 d4 0b 	lds	r23, 0x0BD4	; 0x800bd4 <humidity+0x3>
    3c2e:	80 91 d5 0b 	lds	r24, 0x0BD5	; 0x800bd5 <temperature>
    3c32:	90 91 d6 0b 	lds	r25, 0x0BD6	; 0x800bd6 <temperature+0x1>
    3c36:	a0 91 d7 0b 	lds	r26, 0x0BD7	; 0x800bd7 <temperature+0x2>
    3c3a:	b0 91 d8 0b 	lds	r27, 0x0BD8	; 0x800bd8 <temperature+0x3>
    3c3e:	7f 93       	push	r23
    3c40:	6f 93       	push	r22
    3c42:	5f 93       	push	r21
    3c44:	4f 93       	push	r20
    3c46:	bf 93       	push	r27
    3c48:	af 93       	push	r26
    3c4a:	9f 93       	push	r25
    3c4c:	8f 93       	push	r24
    3c4e:	8c e7       	ldi	r24, 0x7C	; 124
    3c50:	9b e0       	ldi	r25, 0x0B	; 11
    3c52:	9f 93       	push	r25
    3c54:	8f 93       	push	r24
    3c56:	08 d1       	rcall	.+528    	; 0x3e68 <printf>
    3c58:	0f b6       	in	r0, 0x3f	; 63
}
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	26 96       	adiw	r28, 0x06	; 6
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	ff 90       	pop	r15
    3c76:	ef 90       	pop	r14
    3c78:	df 90       	pop	r13
    3c7a:	cf 90       	pop	r12
    3c7c:	bf 90       	pop	r11
    3c7e:	af 90       	pop	r10
    3c80:	9f 90       	pop	r9
    3c82:	8f 90       	pop	r8
    3c84:	08 95       	ret

00003c86 <spi_init>:
 */ 
#include "spi.h"

void spi_init()
{
	DDRB = 0x17;
    3c86:	87 e1       	ldi	r24, 0x17	; 23
    3c88:	87 bb       	out	0x17, r24	; 23
	PORTB |= _BV(cs_pin);
    3c8a:	88 b3       	in	r24, 0x18	; 24
    3c8c:	81 60       	ori	r24, 0x01	; 1
    3c8e:	88 bb       	out	0x18, r24	; 24
	}
	else if(data_order == LSB_first)
	{
		SPCR |= LSB_first;
	}*/
	SPCR |= _BV(MSTR);
    3c90:	8d b1       	in	r24, 0x0d	; 13
    3c92:	80 61       	ori	r24, 0x10	; 16
    3c94:	8d b9       	out	0x0d, r24	; 13
	SPCR |= _BV(SPE);
    3c96:	8d b1       	in	r24, 0x0d	; 13
    3c98:	80 64       	ori	r24, 0x40	; 64
    3c9a:	8d b9       	out	0x0d, r24	; 13
    3c9c:	08 95       	ret

00003c9e <spi_chip_select>:
}

void spi_chip_select()
{
	PORTB &= ~_BV(cs_pin);
    3c9e:	88 b3       	in	r24, 0x18	; 24
    3ca0:	8e 7f       	andi	r24, 0xFE	; 254
    3ca2:	88 bb       	out	0x18, r24	; 24
    3ca4:	08 95       	ret

00003ca6 <spi_chip_deselect>:
}

void spi_chip_deselect()
{
	PORTB |= _BV(cs_pin);
    3ca6:	88 b3       	in	r24, 0x18	; 24
    3ca8:	81 60       	ori	r24, 0x01	; 1
    3caa:	88 bb       	out	0x18, r24	; 24
    3cac:	08 95       	ret

00003cae <spi_write_data>:
}
void spi_write_data(const uint8_t data)
{
	SPDR = data;
    3cae:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
    3cb0:	77 9b       	sbis	0x0e, 7	; 14
    3cb2:	fe cf       	rjmp	.-4      	; 0x3cb0 <spi_write_data+0x2>
}
    3cb4:	08 95       	ret

00003cb6 <Timer8_use2_init>:
 */ 
#include "Timer8.h"

void Timer8_use2_init(uint8_t isenable, uint16_t prescaler)
{
	if(isenable == disable)
    3cb6:	81 11       	cpse	r24, r1
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <Timer8_use2_init+0x8>
	{
		TCCR2 = 0x0;
    3cba:	15 bc       	out	0x25, r1	; 37
		return;
    3cbc:	08 95       	ret
	}
	else if(isenable == enable)
    3cbe:	81 30       	cpi	r24, 0x01	; 1
    3cc0:	61 f5       	brne	.+88     	; 0x3d1a <Timer8_use2_init+0x64>
	{
		TCNT2 = 0;
    3cc2:	14 bc       	out	0x24, r1	; 36
		OCR2 = 250;
    3cc4:	8a ef       	ldi	r24, 0xFA	; 250
    3cc6:	83 bd       	out	0x23, r24	; 35
		TIMSK |= _BV(OCIE2);
    3cc8:	87 b7       	in	r24, 0x37	; 55
    3cca:	80 68       	ori	r24, 0x80	; 128
    3ccc:	87 bf       	out	0x37, r24	; 55
		TCCR2 |= _BV(WGM21);
    3cce:	85 b5       	in	r24, 0x25	; 37
    3cd0:	88 60       	ori	r24, 0x08	; 8
    3cd2:	85 bd       	out	0x25, r24	; 37
		if(prescaler == 1)
    3cd4:	61 30       	cpi	r22, 0x01	; 1
    3cd6:	71 05       	cpc	r23, r1
    3cd8:	21 f4       	brne	.+8      	; 0x3ce2 <Timer8_use2_init+0x2c>
		{
			TCCR2 |= 0x1;
    3cda:	85 b5       	in	r24, 0x25	; 37
    3cdc:	81 60       	ori	r24, 0x01	; 1
    3cde:	85 bd       	out	0x25, r24	; 37
    3ce0:	08 95       	ret
		}
		else if(prescaler == 8)
    3ce2:	68 30       	cpi	r22, 0x08	; 8
    3ce4:	71 05       	cpc	r23, r1
    3ce6:	21 f4       	brne	.+8      	; 0x3cf0 <Timer8_use2_init+0x3a>
		{
			TCCR2 |= 0x2;
    3ce8:	85 b5       	in	r24, 0x25	; 37
    3cea:	82 60       	ori	r24, 0x02	; 2
    3cec:	85 bd       	out	0x25, r24	; 37
    3cee:	08 95       	ret
		}
		else if(prescaler == 64)
    3cf0:	60 34       	cpi	r22, 0x40	; 64
    3cf2:	71 05       	cpc	r23, r1
    3cf4:	21 f4       	brne	.+8      	; 0x3cfe <Timer8_use2_init+0x48>
		{
			TCCR2 |= 0x3;
    3cf6:	85 b5       	in	r24, 0x25	; 37
    3cf8:	83 60       	ori	r24, 0x03	; 3
    3cfa:	85 bd       	out	0x25, r24	; 37
    3cfc:	08 95       	ret
		}
		else if(prescaler == 256)
    3cfe:	61 15       	cp	r22, r1
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	78 07       	cpc	r23, r24
    3d04:	21 f4       	brne	.+8      	; 0x3d0e <Timer8_use2_init+0x58>
		{
			TCCR2 |= 0x4;
    3d06:	85 b5       	in	r24, 0x25	; 37
    3d08:	84 60       	ori	r24, 0x04	; 4
    3d0a:	85 bd       	out	0x25, r24	; 37
    3d0c:	08 95       	ret
		}
		else if(prescaler == 1024)
    3d0e:	61 15       	cp	r22, r1
    3d10:	74 40       	sbci	r23, 0x04	; 4
    3d12:	19 f4       	brne	.+6      	; 0x3d1a <Timer8_use2_init+0x64>
		{
			TCCR2 |= 0x5;
    3d14:	85 b5       	in	r24, 0x25	; 37
    3d16:	85 60       	ori	r24, 0x05	; 5
    3d18:	85 bd       	out	0x25, r24	; 37
    3d1a:	08 95       	ret

00003d1c <uart0_init>:
 */ 
#include "uart0.h"

void uart0_init()
{
	UBRR0H = 0;
    3d1c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 8;
    3d20:	88 e0       	ldi	r24, 0x08	; 8
    3d22:	89 b9       	out	0x09, r24	; 9
	UCSR0B = _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    3d24:	88 e9       	ldi	r24, 0x98	; 152
    3d26:	8a b9       	out	0x0a, r24	; 10
    3d28:	08 95       	ret

00003d2a <uart0_transmit>:
}
int uart0_transmit(char data)
{
	while(!(UCSR0A & _BV(UDRE0)));
    3d2a:	5d 9b       	sbis	0x0b, 5	; 11
    3d2c:	fe cf       	rjmp	.-4      	; 0x3d2a <uart0_transmit>
	UDR0 = data;
    3d2e:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	08 95       	ret

00003d36 <uart0_receive>:
int uart0_receive()
{
	while(!(UCSR0A & _BV(RXC0)));
    3d36:	5f 9b       	sbis	0x0b, 7	; 11
    3d38:	fe cf       	rjmp	.-4      	; 0x3d36 <uart0_receive>
	return UDR0;
    3d3a:	8c b1       	in	r24, 0x0c	; 12
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	08 95       	ret

00003d40 <uart1_transmit>:
	stdin = stdout = &IOPUT;
}

int uart1_transmit(char data, FILE* f)
{
	while(!(UCSR1A & _BV(UDRE1)));
    3d40:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    3d44:	95 ff       	sbrs	r25, 5
    3d46:	fc cf       	rjmp	.-8      	; 0x3d40 <uart1_transmit>
	UDR1 = data;
    3d48:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	return 0;
}
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	08 95       	ret

00003d52 <uart1_receive>:

int uart1_receive(FILE* f)
{
	while(!(UCSR1A & _BV(RXC1)));
    3d52:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    3d56:	88 23       	and	r24, r24
    3d58:	e4 f7       	brge	.-8      	; 0x3d52 <uart1_receive>
	return UDR1;
    3d5a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	08 95       	ret

00003d62 <uart1_init>:

FILE IOPUT = FDEV_SETUP_STREAM(uart1_transmit,uart1_receive,_FDEV_SETUP_RW);

void uart1_init()
{
	UBRR1H = 0;
    3d62:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 8;
    3d66:	88 e0       	ldi	r24, 0x08	; 8
    3d68:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B = _BV(RXEN1) | _BV(TXEN1);
    3d6c:	88 e1       	ldi	r24, 0x18	; 24
    3d6e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	stdin = stdout = &IOPUT;
    3d72:	ec e1       	ldi	r30, 0x1C	; 28
    3d74:	ff e0       	ldi	r31, 0x0F	; 15
    3d76:	8d ec       	ldi	r24, 0xCD	; 205
    3d78:	97 e0       	ldi	r25, 0x07	; 7
    3d7a:	93 83       	std	Z+3, r25	; 0x03
    3d7c:	82 83       	std	Z+2, r24	; 0x02
    3d7e:	91 83       	std	Z+1, r25	; 0x01
    3d80:	80 83       	st	Z, r24
    3d82:	08 95       	ret

00003d84 <__udivmodhi4>:
    3d84:	aa 1b       	sub	r26, r26
    3d86:	bb 1b       	sub	r27, r27
    3d88:	51 e1       	ldi	r21, 0x11	; 17
    3d8a:	07 c0       	rjmp	.+14     	; 0x3d9a <__udivmodhi4_ep>

00003d8c <__udivmodhi4_loop>:
    3d8c:	aa 1f       	adc	r26, r26
    3d8e:	bb 1f       	adc	r27, r27
    3d90:	a6 17       	cp	r26, r22
    3d92:	b7 07       	cpc	r27, r23
    3d94:	10 f0       	brcs	.+4      	; 0x3d9a <__udivmodhi4_ep>
    3d96:	a6 1b       	sub	r26, r22
    3d98:	b7 0b       	sbc	r27, r23

00003d9a <__udivmodhi4_ep>:
    3d9a:	88 1f       	adc	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	5a 95       	dec	r21
    3da0:	a9 f7       	brne	.-22     	; 0x3d8c <__udivmodhi4_loop>
    3da2:	80 95       	com	r24
    3da4:	90 95       	com	r25
    3da6:	bc 01       	movw	r22, r24
    3da8:	cd 01       	movw	r24, r26
    3daa:	08 95       	ret

00003dac <__udivmodsi4>:
    3dac:	a1 e2       	ldi	r26, 0x21	; 33
    3dae:	1a 2e       	mov	r1, r26
    3db0:	aa 1b       	sub	r26, r26
    3db2:	bb 1b       	sub	r27, r27
    3db4:	fd 01       	movw	r30, r26
    3db6:	0d c0       	rjmp	.+26     	; 0x3dd2 <__udivmodsi4_ep>

00003db8 <__udivmodsi4_loop>:
    3db8:	aa 1f       	adc	r26, r26
    3dba:	bb 1f       	adc	r27, r27
    3dbc:	ee 1f       	adc	r30, r30
    3dbe:	ff 1f       	adc	r31, r31
    3dc0:	a2 17       	cp	r26, r18
    3dc2:	b3 07       	cpc	r27, r19
    3dc4:	e4 07       	cpc	r30, r20
    3dc6:	f5 07       	cpc	r31, r21
    3dc8:	20 f0       	brcs	.+8      	; 0x3dd2 <__udivmodsi4_ep>
    3dca:	a2 1b       	sub	r26, r18
    3dcc:	b3 0b       	sbc	r27, r19
    3dce:	e4 0b       	sbc	r30, r20
    3dd0:	f5 0b       	sbc	r31, r21

00003dd2 <__udivmodsi4_ep>:
    3dd2:	66 1f       	adc	r22, r22
    3dd4:	77 1f       	adc	r23, r23
    3dd6:	88 1f       	adc	r24, r24
    3dd8:	99 1f       	adc	r25, r25
    3dda:	1a 94       	dec	r1
    3ddc:	69 f7       	brne	.-38     	; 0x3db8 <__udivmodsi4_loop>
    3dde:	60 95       	com	r22
    3de0:	70 95       	com	r23
    3de2:	80 95       	com	r24
    3de4:	90 95       	com	r25
    3de6:	9b 01       	movw	r18, r22
    3de8:	ac 01       	movw	r20, r24
    3dea:	bd 01       	movw	r22, r26
    3dec:	cf 01       	movw	r24, r30
    3dee:	08 95       	ret

00003df0 <__umulhisi3>:
    3df0:	a2 9f       	mul	r26, r18
    3df2:	b0 01       	movw	r22, r0
    3df4:	b3 9f       	mul	r27, r19
    3df6:	c0 01       	movw	r24, r0
    3df8:	a3 9f       	mul	r26, r19
    3dfa:	70 0d       	add	r23, r0
    3dfc:	81 1d       	adc	r24, r1
    3dfe:	11 24       	eor	r1, r1
    3e00:	91 1d       	adc	r25, r1
    3e02:	b2 9f       	mul	r27, r18
    3e04:	70 0d       	add	r23, r0
    3e06:	81 1d       	adc	r24, r1
    3e08:	11 24       	eor	r1, r1
    3e0a:	91 1d       	adc	r25, r1
    3e0c:	08 95       	ret

00003e0e <__muluhisi3>:
    3e0e:	f0 df       	rcall	.-32     	; 0x3df0 <__umulhisi3>
    3e10:	a5 9f       	mul	r26, r21
    3e12:	90 0d       	add	r25, r0
    3e14:	b4 9f       	mul	r27, r20
    3e16:	90 0d       	add	r25, r0
    3e18:	a4 9f       	mul	r26, r20
    3e1a:	80 0d       	add	r24, r0
    3e1c:	91 1d       	adc	r25, r1
    3e1e:	11 24       	eor	r1, r1
    3e20:	08 95       	ret

00003e22 <strcmp>:
    3e22:	fb 01       	movw	r30, r22
    3e24:	dc 01       	movw	r26, r24
    3e26:	8d 91       	ld	r24, X+
    3e28:	01 90       	ld	r0, Z+
    3e2a:	80 19       	sub	r24, r0
    3e2c:	01 10       	cpse	r0, r1
    3e2e:	d9 f3       	breq	.-10     	; 0x3e26 <strcmp+0x4>
    3e30:	99 0b       	sbc	r25, r25
    3e32:	08 95       	ret

00003e34 <strstr>:
    3e34:	fb 01       	movw	r30, r22
    3e36:	51 91       	ld	r21, Z+
    3e38:	55 23       	and	r21, r21
    3e3a:	a9 f0       	breq	.+42     	; 0x3e66 <strstr+0x32>
    3e3c:	bf 01       	movw	r22, r30
    3e3e:	dc 01       	movw	r26, r24
    3e40:	4d 91       	ld	r20, X+
    3e42:	45 17       	cp	r20, r21
    3e44:	41 11       	cpse	r20, r1
    3e46:	e1 f7       	brne	.-8      	; 0x3e40 <strstr+0xc>
    3e48:	59 f4       	brne	.+22     	; 0x3e60 <strstr+0x2c>
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	01 90       	ld	r0, Z+
    3e4e:	00 20       	and	r0, r0
    3e50:	49 f0       	breq	.+18     	; 0x3e64 <strstr+0x30>
    3e52:	4d 91       	ld	r20, X+
    3e54:	40 15       	cp	r20, r0
    3e56:	41 11       	cpse	r20, r1
    3e58:	c9 f3       	breq	.-14     	; 0x3e4c <strstr+0x18>
    3e5a:	fb 01       	movw	r30, r22
    3e5c:	41 11       	cpse	r20, r1
    3e5e:	ef cf       	rjmp	.-34     	; 0x3e3e <strstr+0xa>
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	08 95       	ret

00003e68 <printf>:
    3e68:	cf 93       	push	r28
    3e6a:	df 93       	push	r29
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	ae 01       	movw	r20, r28
    3e72:	4b 5f       	subi	r20, 0xFB	; 251
    3e74:	5f 4f       	sbci	r21, 0xFF	; 255
    3e76:	fa 01       	movw	r30, r20
    3e78:	61 91       	ld	r22, Z+
    3e7a:	71 91       	ld	r23, Z+
    3e7c:	af 01       	movw	r20, r30
    3e7e:	80 91 1e 0f 	lds	r24, 0x0F1E	; 0x800f1e <__iob+0x2>
    3e82:	90 91 1f 0f 	lds	r25, 0x0F1F	; 0x800f1f <__iob+0x3>
    3e86:	08 d0       	rcall	.+16     	; 0x3e98 <vfprintf>
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	08 95       	ret

00003e8e <putchar>:
    3e8e:	60 91 1e 0f 	lds	r22, 0x0F1E	; 0x800f1e <__iob+0x2>
    3e92:	70 91 1f 0f 	lds	r23, 0x0F1F	; 0x800f1f <__iob+0x3>
    3e96:	13 c2       	rjmp	.+1062   	; 0x42be <fputc>

00003e98 <vfprintf>:
    3e98:	2f 92       	push	r2
    3e9a:	3f 92       	push	r3
    3e9c:	4f 92       	push	r4
    3e9e:	5f 92       	push	r5
    3ea0:	6f 92       	push	r6
    3ea2:	7f 92       	push	r7
    3ea4:	8f 92       	push	r8
    3ea6:	9f 92       	push	r9
    3ea8:	af 92       	push	r10
    3eaa:	bf 92       	push	r11
    3eac:	cf 92       	push	r12
    3eae:	df 92       	push	r13
    3eb0:	ef 92       	push	r14
    3eb2:	ff 92       	push	r15
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	cf 93       	push	r28
    3eba:	df 93       	push	r29
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	2b 97       	sbiw	r28, 0x0b	; 11
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	f8 94       	cli
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	0f be       	out	0x3f, r0	; 63
    3eca:	cd bf       	out	0x3d, r28	; 61
    3ecc:	6c 01       	movw	r12, r24
    3ece:	7b 01       	movw	r14, r22
    3ed0:	8a 01       	movw	r16, r20
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	17 82       	std	Z+7, r1	; 0x07
    3ed6:	16 82       	std	Z+6, r1	; 0x06
    3ed8:	83 81       	ldd	r24, Z+3	; 0x03
    3eda:	81 ff       	sbrs	r24, 1
    3edc:	bf c1       	rjmp	.+894    	; 0x425c <vfprintf+0x3c4>
    3ede:	ce 01       	movw	r24, r28
    3ee0:	01 96       	adiw	r24, 0x01	; 1
    3ee2:	3c 01       	movw	r6, r24
    3ee4:	f6 01       	movw	r30, r12
    3ee6:	93 81       	ldd	r25, Z+3	; 0x03
    3ee8:	f7 01       	movw	r30, r14
    3eea:	93 fd       	sbrc	r25, 3
    3eec:	85 91       	lpm	r24, Z+
    3eee:	93 ff       	sbrs	r25, 3
    3ef0:	81 91       	ld	r24, Z+
    3ef2:	7f 01       	movw	r14, r30
    3ef4:	88 23       	and	r24, r24
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <vfprintf+0x62>
    3ef8:	ad c1       	rjmp	.+858    	; 0x4254 <vfprintf+0x3bc>
    3efa:	85 32       	cpi	r24, 0x25	; 37
    3efc:	39 f4       	brne	.+14     	; 0x3f0c <vfprintf+0x74>
    3efe:	93 fd       	sbrc	r25, 3
    3f00:	85 91       	lpm	r24, Z+
    3f02:	93 ff       	sbrs	r25, 3
    3f04:	81 91       	ld	r24, Z+
    3f06:	7f 01       	movw	r14, r30
    3f08:	85 32       	cpi	r24, 0x25	; 37
    3f0a:	21 f4       	brne	.+8      	; 0x3f14 <vfprintf+0x7c>
    3f0c:	b6 01       	movw	r22, r12
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	d6 d1       	rcall	.+940    	; 0x42be <fputc>
    3f12:	e8 cf       	rjmp	.-48     	; 0x3ee4 <vfprintf+0x4c>
    3f14:	91 2c       	mov	r9, r1
    3f16:	21 2c       	mov	r2, r1
    3f18:	31 2c       	mov	r3, r1
    3f1a:	ff e1       	ldi	r31, 0x1F	; 31
    3f1c:	f3 15       	cp	r31, r3
    3f1e:	d8 f0       	brcs	.+54     	; 0x3f56 <vfprintf+0xbe>
    3f20:	8b 32       	cpi	r24, 0x2B	; 43
    3f22:	79 f0       	breq	.+30     	; 0x3f42 <vfprintf+0xaa>
    3f24:	38 f4       	brcc	.+14     	; 0x3f34 <vfprintf+0x9c>
    3f26:	80 32       	cpi	r24, 0x20	; 32
    3f28:	79 f0       	breq	.+30     	; 0x3f48 <vfprintf+0xb0>
    3f2a:	83 32       	cpi	r24, 0x23	; 35
    3f2c:	a1 f4       	brne	.+40     	; 0x3f56 <vfprintf+0xbe>
    3f2e:	23 2d       	mov	r18, r3
    3f30:	20 61       	ori	r18, 0x10	; 16
    3f32:	1d c0       	rjmp	.+58     	; 0x3f6e <vfprintf+0xd6>
    3f34:	8d 32       	cpi	r24, 0x2D	; 45
    3f36:	61 f0       	breq	.+24     	; 0x3f50 <vfprintf+0xb8>
    3f38:	80 33       	cpi	r24, 0x30	; 48
    3f3a:	69 f4       	brne	.+26     	; 0x3f56 <vfprintf+0xbe>
    3f3c:	23 2d       	mov	r18, r3
    3f3e:	21 60       	ori	r18, 0x01	; 1
    3f40:	16 c0       	rjmp	.+44     	; 0x3f6e <vfprintf+0xd6>
    3f42:	83 2d       	mov	r24, r3
    3f44:	82 60       	ori	r24, 0x02	; 2
    3f46:	38 2e       	mov	r3, r24
    3f48:	e3 2d       	mov	r30, r3
    3f4a:	e4 60       	ori	r30, 0x04	; 4
    3f4c:	3e 2e       	mov	r3, r30
    3f4e:	2a c0       	rjmp	.+84     	; 0x3fa4 <vfprintf+0x10c>
    3f50:	f3 2d       	mov	r31, r3
    3f52:	f8 60       	ori	r31, 0x08	; 8
    3f54:	1d c0       	rjmp	.+58     	; 0x3f90 <vfprintf+0xf8>
    3f56:	37 fc       	sbrc	r3, 7
    3f58:	2d c0       	rjmp	.+90     	; 0x3fb4 <vfprintf+0x11c>
    3f5a:	20 ed       	ldi	r18, 0xD0	; 208
    3f5c:	28 0f       	add	r18, r24
    3f5e:	2a 30       	cpi	r18, 0x0A	; 10
    3f60:	40 f0       	brcs	.+16     	; 0x3f72 <vfprintf+0xda>
    3f62:	8e 32       	cpi	r24, 0x2E	; 46
    3f64:	b9 f4       	brne	.+46     	; 0x3f94 <vfprintf+0xfc>
    3f66:	36 fc       	sbrc	r3, 6
    3f68:	75 c1       	rjmp	.+746    	; 0x4254 <vfprintf+0x3bc>
    3f6a:	23 2d       	mov	r18, r3
    3f6c:	20 64       	ori	r18, 0x40	; 64
    3f6e:	32 2e       	mov	r3, r18
    3f70:	19 c0       	rjmp	.+50     	; 0x3fa4 <vfprintf+0x10c>
    3f72:	36 fe       	sbrs	r3, 6
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <vfprintf+0xea>
    3f76:	8a e0       	ldi	r24, 0x0A	; 10
    3f78:	98 9e       	mul	r9, r24
    3f7a:	20 0d       	add	r18, r0
    3f7c:	11 24       	eor	r1, r1
    3f7e:	92 2e       	mov	r9, r18
    3f80:	11 c0       	rjmp	.+34     	; 0x3fa4 <vfprintf+0x10c>
    3f82:	ea e0       	ldi	r30, 0x0A	; 10
    3f84:	2e 9e       	mul	r2, r30
    3f86:	20 0d       	add	r18, r0
    3f88:	11 24       	eor	r1, r1
    3f8a:	22 2e       	mov	r2, r18
    3f8c:	f3 2d       	mov	r31, r3
    3f8e:	f0 62       	ori	r31, 0x20	; 32
    3f90:	3f 2e       	mov	r3, r31
    3f92:	08 c0       	rjmp	.+16     	; 0x3fa4 <vfprintf+0x10c>
    3f94:	8c 36       	cpi	r24, 0x6C	; 108
    3f96:	21 f4       	brne	.+8      	; 0x3fa0 <vfprintf+0x108>
    3f98:	83 2d       	mov	r24, r3
    3f9a:	80 68       	ori	r24, 0x80	; 128
    3f9c:	38 2e       	mov	r3, r24
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <vfprintf+0x10c>
    3fa0:	88 36       	cpi	r24, 0x68	; 104
    3fa2:	41 f4       	brne	.+16     	; 0x3fb4 <vfprintf+0x11c>
    3fa4:	f7 01       	movw	r30, r14
    3fa6:	93 fd       	sbrc	r25, 3
    3fa8:	85 91       	lpm	r24, Z+
    3faa:	93 ff       	sbrs	r25, 3
    3fac:	81 91       	ld	r24, Z+
    3fae:	7f 01       	movw	r14, r30
    3fb0:	81 11       	cpse	r24, r1
    3fb2:	b3 cf       	rjmp	.-154    	; 0x3f1a <vfprintf+0x82>
    3fb4:	98 2f       	mov	r25, r24
    3fb6:	9f 7d       	andi	r25, 0xDF	; 223
    3fb8:	95 54       	subi	r25, 0x45	; 69
    3fba:	93 30       	cpi	r25, 0x03	; 3
    3fbc:	28 f4       	brcc	.+10     	; 0x3fc8 <vfprintf+0x130>
    3fbe:	0c 5f       	subi	r16, 0xFC	; 252
    3fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc2:	9f e3       	ldi	r25, 0x3F	; 63
    3fc4:	99 83       	std	Y+1, r25	; 0x01
    3fc6:	0d c0       	rjmp	.+26     	; 0x3fe2 <vfprintf+0x14a>
    3fc8:	83 36       	cpi	r24, 0x63	; 99
    3fca:	31 f0       	breq	.+12     	; 0x3fd8 <vfprintf+0x140>
    3fcc:	83 37       	cpi	r24, 0x73	; 115
    3fce:	71 f0       	breq	.+28     	; 0x3fec <vfprintf+0x154>
    3fd0:	83 35       	cpi	r24, 0x53	; 83
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <vfprintf+0x13e>
    3fd4:	55 c0       	rjmp	.+170    	; 0x4080 <vfprintf+0x1e8>
    3fd6:	20 c0       	rjmp	.+64     	; 0x4018 <vfprintf+0x180>
    3fd8:	f8 01       	movw	r30, r16
    3fda:	80 81       	ld	r24, Z
    3fdc:	89 83       	std	Y+1, r24	; 0x01
    3fde:	0e 5f       	subi	r16, 0xFE	; 254
    3fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe2:	88 24       	eor	r8, r8
    3fe4:	83 94       	inc	r8
    3fe6:	91 2c       	mov	r9, r1
    3fe8:	53 01       	movw	r10, r6
    3fea:	12 c0       	rjmp	.+36     	; 0x4010 <vfprintf+0x178>
    3fec:	28 01       	movw	r4, r16
    3fee:	f2 e0       	ldi	r31, 0x02	; 2
    3ff0:	4f 0e       	add	r4, r31
    3ff2:	51 1c       	adc	r5, r1
    3ff4:	f8 01       	movw	r30, r16
    3ff6:	a0 80       	ld	r10, Z
    3ff8:	b1 80       	ldd	r11, Z+1	; 0x01
    3ffa:	36 fe       	sbrs	r3, 6
    3ffc:	03 c0       	rjmp	.+6      	; 0x4004 <vfprintf+0x16c>
    3ffe:	69 2d       	mov	r22, r9
    4000:	70 e0       	ldi	r23, 0x00	; 0
    4002:	02 c0       	rjmp	.+4      	; 0x4008 <vfprintf+0x170>
    4004:	6f ef       	ldi	r22, 0xFF	; 255
    4006:	7f ef       	ldi	r23, 0xFF	; 255
    4008:	c5 01       	movw	r24, r10
    400a:	4e d1       	rcall	.+668    	; 0x42a8 <strnlen>
    400c:	4c 01       	movw	r8, r24
    400e:	82 01       	movw	r16, r4
    4010:	f3 2d       	mov	r31, r3
    4012:	ff 77       	andi	r31, 0x7F	; 127
    4014:	3f 2e       	mov	r3, r31
    4016:	15 c0       	rjmp	.+42     	; 0x4042 <vfprintf+0x1aa>
    4018:	28 01       	movw	r4, r16
    401a:	22 e0       	ldi	r18, 0x02	; 2
    401c:	42 0e       	add	r4, r18
    401e:	51 1c       	adc	r5, r1
    4020:	f8 01       	movw	r30, r16
    4022:	a0 80       	ld	r10, Z
    4024:	b1 80       	ldd	r11, Z+1	; 0x01
    4026:	36 fe       	sbrs	r3, 6
    4028:	03 c0       	rjmp	.+6      	; 0x4030 <vfprintf+0x198>
    402a:	69 2d       	mov	r22, r9
    402c:	70 e0       	ldi	r23, 0x00	; 0
    402e:	02 c0       	rjmp	.+4      	; 0x4034 <vfprintf+0x19c>
    4030:	6f ef       	ldi	r22, 0xFF	; 255
    4032:	7f ef       	ldi	r23, 0xFF	; 255
    4034:	c5 01       	movw	r24, r10
    4036:	2d d1       	rcall	.+602    	; 0x4292 <strnlen_P>
    4038:	4c 01       	movw	r8, r24
    403a:	f3 2d       	mov	r31, r3
    403c:	f0 68       	ori	r31, 0x80	; 128
    403e:	3f 2e       	mov	r3, r31
    4040:	82 01       	movw	r16, r4
    4042:	33 fc       	sbrc	r3, 3
    4044:	19 c0       	rjmp	.+50     	; 0x4078 <vfprintf+0x1e0>
    4046:	82 2d       	mov	r24, r2
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	88 16       	cp	r8, r24
    404c:	99 06       	cpc	r9, r25
    404e:	a0 f4       	brcc	.+40     	; 0x4078 <vfprintf+0x1e0>
    4050:	b6 01       	movw	r22, r12
    4052:	80 e2       	ldi	r24, 0x20	; 32
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	33 d1       	rcall	.+614    	; 0x42be <fputc>
    4058:	2a 94       	dec	r2
    405a:	f5 cf       	rjmp	.-22     	; 0x4046 <vfprintf+0x1ae>
    405c:	f5 01       	movw	r30, r10
    405e:	37 fc       	sbrc	r3, 7
    4060:	85 91       	lpm	r24, Z+
    4062:	37 fe       	sbrs	r3, 7
    4064:	81 91       	ld	r24, Z+
    4066:	5f 01       	movw	r10, r30
    4068:	b6 01       	movw	r22, r12
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	28 d1       	rcall	.+592    	; 0x42be <fputc>
    406e:	21 10       	cpse	r2, r1
    4070:	2a 94       	dec	r2
    4072:	21 e0       	ldi	r18, 0x01	; 1
    4074:	82 1a       	sub	r8, r18
    4076:	91 08       	sbc	r9, r1
    4078:	81 14       	cp	r8, r1
    407a:	91 04       	cpc	r9, r1
    407c:	79 f7       	brne	.-34     	; 0x405c <vfprintf+0x1c4>
    407e:	e1 c0       	rjmp	.+450    	; 0x4242 <vfprintf+0x3aa>
    4080:	84 36       	cpi	r24, 0x64	; 100
    4082:	11 f0       	breq	.+4      	; 0x4088 <vfprintf+0x1f0>
    4084:	89 36       	cpi	r24, 0x69	; 105
    4086:	39 f5       	brne	.+78     	; 0x40d6 <vfprintf+0x23e>
    4088:	f8 01       	movw	r30, r16
    408a:	37 fe       	sbrs	r3, 7
    408c:	07 c0       	rjmp	.+14     	; 0x409c <vfprintf+0x204>
    408e:	60 81       	ld	r22, Z
    4090:	71 81       	ldd	r23, Z+1	; 0x01
    4092:	82 81       	ldd	r24, Z+2	; 0x02
    4094:	93 81       	ldd	r25, Z+3	; 0x03
    4096:	0c 5f       	subi	r16, 0xFC	; 252
    4098:	1f 4f       	sbci	r17, 0xFF	; 255
    409a:	08 c0       	rjmp	.+16     	; 0x40ac <vfprintf+0x214>
    409c:	60 81       	ld	r22, Z
    409e:	71 81       	ldd	r23, Z+1	; 0x01
    40a0:	07 2e       	mov	r0, r23
    40a2:	00 0c       	add	r0, r0
    40a4:	88 0b       	sbc	r24, r24
    40a6:	99 0b       	sbc	r25, r25
    40a8:	0e 5f       	subi	r16, 0xFE	; 254
    40aa:	1f 4f       	sbci	r17, 0xFF	; 255
    40ac:	f3 2d       	mov	r31, r3
    40ae:	ff 76       	andi	r31, 0x6F	; 111
    40b0:	3f 2e       	mov	r3, r31
    40b2:	97 ff       	sbrs	r25, 7
    40b4:	09 c0       	rjmp	.+18     	; 0x40c8 <vfprintf+0x230>
    40b6:	90 95       	com	r25
    40b8:	80 95       	com	r24
    40ba:	70 95       	com	r23
    40bc:	61 95       	neg	r22
    40be:	7f 4f       	sbci	r23, 0xFF	; 255
    40c0:	8f 4f       	sbci	r24, 0xFF	; 255
    40c2:	9f 4f       	sbci	r25, 0xFF	; 255
    40c4:	f0 68       	ori	r31, 0x80	; 128
    40c6:	3f 2e       	mov	r3, r31
    40c8:	2a e0       	ldi	r18, 0x0A	; 10
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	a3 01       	movw	r20, r6
    40ce:	33 d1       	rcall	.+614    	; 0x4336 <__ultoa_invert>
    40d0:	88 2e       	mov	r8, r24
    40d2:	86 18       	sub	r8, r6
    40d4:	44 c0       	rjmp	.+136    	; 0x415e <vfprintf+0x2c6>
    40d6:	85 37       	cpi	r24, 0x75	; 117
    40d8:	31 f4       	brne	.+12     	; 0x40e6 <vfprintf+0x24e>
    40da:	23 2d       	mov	r18, r3
    40dc:	2f 7e       	andi	r18, 0xEF	; 239
    40de:	b2 2e       	mov	r11, r18
    40e0:	2a e0       	ldi	r18, 0x0A	; 10
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	25 c0       	rjmp	.+74     	; 0x4130 <vfprintf+0x298>
    40e6:	93 2d       	mov	r25, r3
    40e8:	99 7f       	andi	r25, 0xF9	; 249
    40ea:	b9 2e       	mov	r11, r25
    40ec:	8f 36       	cpi	r24, 0x6F	; 111
    40ee:	c1 f0       	breq	.+48     	; 0x4120 <vfprintf+0x288>
    40f0:	18 f4       	brcc	.+6      	; 0x40f8 <vfprintf+0x260>
    40f2:	88 35       	cpi	r24, 0x58	; 88
    40f4:	79 f0       	breq	.+30     	; 0x4114 <vfprintf+0x27c>
    40f6:	ae c0       	rjmp	.+348    	; 0x4254 <vfprintf+0x3bc>
    40f8:	80 37       	cpi	r24, 0x70	; 112
    40fa:	19 f0       	breq	.+6      	; 0x4102 <vfprintf+0x26a>
    40fc:	88 37       	cpi	r24, 0x78	; 120
    40fe:	21 f0       	breq	.+8      	; 0x4108 <vfprintf+0x270>
    4100:	a9 c0       	rjmp	.+338    	; 0x4254 <vfprintf+0x3bc>
    4102:	e9 2f       	mov	r30, r25
    4104:	e0 61       	ori	r30, 0x10	; 16
    4106:	be 2e       	mov	r11, r30
    4108:	b4 fe       	sbrs	r11, 4
    410a:	0d c0       	rjmp	.+26     	; 0x4126 <vfprintf+0x28e>
    410c:	fb 2d       	mov	r31, r11
    410e:	f4 60       	ori	r31, 0x04	; 4
    4110:	bf 2e       	mov	r11, r31
    4112:	09 c0       	rjmp	.+18     	; 0x4126 <vfprintf+0x28e>
    4114:	34 fe       	sbrs	r3, 4
    4116:	0a c0       	rjmp	.+20     	; 0x412c <vfprintf+0x294>
    4118:	29 2f       	mov	r18, r25
    411a:	26 60       	ori	r18, 0x06	; 6
    411c:	b2 2e       	mov	r11, r18
    411e:	06 c0       	rjmp	.+12     	; 0x412c <vfprintf+0x294>
    4120:	28 e0       	ldi	r18, 0x08	; 8
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	05 c0       	rjmp	.+10     	; 0x4130 <vfprintf+0x298>
    4126:	20 e1       	ldi	r18, 0x10	; 16
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	02 c0       	rjmp	.+4      	; 0x4130 <vfprintf+0x298>
    412c:	20 e1       	ldi	r18, 0x10	; 16
    412e:	32 e0       	ldi	r19, 0x02	; 2
    4130:	f8 01       	movw	r30, r16
    4132:	b7 fe       	sbrs	r11, 7
    4134:	07 c0       	rjmp	.+14     	; 0x4144 <vfprintf+0x2ac>
    4136:	60 81       	ld	r22, Z
    4138:	71 81       	ldd	r23, Z+1	; 0x01
    413a:	82 81       	ldd	r24, Z+2	; 0x02
    413c:	93 81       	ldd	r25, Z+3	; 0x03
    413e:	0c 5f       	subi	r16, 0xFC	; 252
    4140:	1f 4f       	sbci	r17, 0xFF	; 255
    4142:	06 c0       	rjmp	.+12     	; 0x4150 <vfprintf+0x2b8>
    4144:	60 81       	ld	r22, Z
    4146:	71 81       	ldd	r23, Z+1	; 0x01
    4148:	80 e0       	ldi	r24, 0x00	; 0
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 5f       	subi	r16, 0xFE	; 254
    414e:	1f 4f       	sbci	r17, 0xFF	; 255
    4150:	a3 01       	movw	r20, r6
    4152:	f1 d0       	rcall	.+482    	; 0x4336 <__ultoa_invert>
    4154:	88 2e       	mov	r8, r24
    4156:	86 18       	sub	r8, r6
    4158:	fb 2d       	mov	r31, r11
    415a:	ff 77       	andi	r31, 0x7F	; 127
    415c:	3f 2e       	mov	r3, r31
    415e:	36 fe       	sbrs	r3, 6
    4160:	0d c0       	rjmp	.+26     	; 0x417c <vfprintf+0x2e4>
    4162:	23 2d       	mov	r18, r3
    4164:	2e 7f       	andi	r18, 0xFE	; 254
    4166:	a2 2e       	mov	r10, r18
    4168:	89 14       	cp	r8, r9
    416a:	58 f4       	brcc	.+22     	; 0x4182 <vfprintf+0x2ea>
    416c:	34 fe       	sbrs	r3, 4
    416e:	0b c0       	rjmp	.+22     	; 0x4186 <vfprintf+0x2ee>
    4170:	32 fc       	sbrc	r3, 2
    4172:	09 c0       	rjmp	.+18     	; 0x4186 <vfprintf+0x2ee>
    4174:	83 2d       	mov	r24, r3
    4176:	8e 7e       	andi	r24, 0xEE	; 238
    4178:	a8 2e       	mov	r10, r24
    417a:	05 c0       	rjmp	.+10     	; 0x4186 <vfprintf+0x2ee>
    417c:	b8 2c       	mov	r11, r8
    417e:	a3 2c       	mov	r10, r3
    4180:	03 c0       	rjmp	.+6      	; 0x4188 <vfprintf+0x2f0>
    4182:	b8 2c       	mov	r11, r8
    4184:	01 c0       	rjmp	.+2      	; 0x4188 <vfprintf+0x2f0>
    4186:	b9 2c       	mov	r11, r9
    4188:	a4 fe       	sbrs	r10, 4
    418a:	0f c0       	rjmp	.+30     	; 0x41aa <vfprintf+0x312>
    418c:	fe 01       	movw	r30, r28
    418e:	e8 0d       	add	r30, r8
    4190:	f1 1d       	adc	r31, r1
    4192:	80 81       	ld	r24, Z
    4194:	80 33       	cpi	r24, 0x30	; 48
    4196:	21 f4       	brne	.+8      	; 0x41a0 <vfprintf+0x308>
    4198:	9a 2d       	mov	r25, r10
    419a:	99 7e       	andi	r25, 0xE9	; 233
    419c:	a9 2e       	mov	r10, r25
    419e:	09 c0       	rjmp	.+18     	; 0x41b2 <vfprintf+0x31a>
    41a0:	a2 fe       	sbrs	r10, 2
    41a2:	06 c0       	rjmp	.+12     	; 0x41b0 <vfprintf+0x318>
    41a4:	b3 94       	inc	r11
    41a6:	b3 94       	inc	r11
    41a8:	04 c0       	rjmp	.+8      	; 0x41b2 <vfprintf+0x31a>
    41aa:	8a 2d       	mov	r24, r10
    41ac:	86 78       	andi	r24, 0x86	; 134
    41ae:	09 f0       	breq	.+2      	; 0x41b2 <vfprintf+0x31a>
    41b0:	b3 94       	inc	r11
    41b2:	a3 fc       	sbrc	r10, 3
    41b4:	10 c0       	rjmp	.+32     	; 0x41d6 <vfprintf+0x33e>
    41b6:	a0 fe       	sbrs	r10, 0
    41b8:	06 c0       	rjmp	.+12     	; 0x41c6 <vfprintf+0x32e>
    41ba:	b2 14       	cp	r11, r2
    41bc:	80 f4       	brcc	.+32     	; 0x41de <vfprintf+0x346>
    41be:	28 0c       	add	r2, r8
    41c0:	92 2c       	mov	r9, r2
    41c2:	9b 18       	sub	r9, r11
    41c4:	0d c0       	rjmp	.+26     	; 0x41e0 <vfprintf+0x348>
    41c6:	b2 14       	cp	r11, r2
    41c8:	58 f4       	brcc	.+22     	; 0x41e0 <vfprintf+0x348>
    41ca:	b6 01       	movw	r22, r12
    41cc:	80 e2       	ldi	r24, 0x20	; 32
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	76 d0       	rcall	.+236    	; 0x42be <fputc>
    41d2:	b3 94       	inc	r11
    41d4:	f8 cf       	rjmp	.-16     	; 0x41c6 <vfprintf+0x32e>
    41d6:	b2 14       	cp	r11, r2
    41d8:	18 f4       	brcc	.+6      	; 0x41e0 <vfprintf+0x348>
    41da:	2b 18       	sub	r2, r11
    41dc:	02 c0       	rjmp	.+4      	; 0x41e2 <vfprintf+0x34a>
    41de:	98 2c       	mov	r9, r8
    41e0:	21 2c       	mov	r2, r1
    41e2:	a4 fe       	sbrs	r10, 4
    41e4:	0f c0       	rjmp	.+30     	; 0x4204 <vfprintf+0x36c>
    41e6:	b6 01       	movw	r22, r12
    41e8:	80 e3       	ldi	r24, 0x30	; 48
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	68 d0       	rcall	.+208    	; 0x42be <fputc>
    41ee:	a2 fe       	sbrs	r10, 2
    41f0:	16 c0       	rjmp	.+44     	; 0x421e <vfprintf+0x386>
    41f2:	a1 fc       	sbrc	r10, 1
    41f4:	03 c0       	rjmp	.+6      	; 0x41fc <vfprintf+0x364>
    41f6:	88 e7       	ldi	r24, 0x78	; 120
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	02 c0       	rjmp	.+4      	; 0x4200 <vfprintf+0x368>
    41fc:	88 e5       	ldi	r24, 0x58	; 88
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	b6 01       	movw	r22, r12
    4202:	0c c0       	rjmp	.+24     	; 0x421c <vfprintf+0x384>
    4204:	8a 2d       	mov	r24, r10
    4206:	86 78       	andi	r24, 0x86	; 134
    4208:	51 f0       	breq	.+20     	; 0x421e <vfprintf+0x386>
    420a:	a1 fe       	sbrs	r10, 1
    420c:	02 c0       	rjmp	.+4      	; 0x4212 <vfprintf+0x37a>
    420e:	8b e2       	ldi	r24, 0x2B	; 43
    4210:	01 c0       	rjmp	.+2      	; 0x4214 <vfprintf+0x37c>
    4212:	80 e2       	ldi	r24, 0x20	; 32
    4214:	a7 fc       	sbrc	r10, 7
    4216:	8d e2       	ldi	r24, 0x2D	; 45
    4218:	b6 01       	movw	r22, r12
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	50 d0       	rcall	.+160    	; 0x42be <fputc>
    421e:	89 14       	cp	r8, r9
    4220:	30 f4       	brcc	.+12     	; 0x422e <vfprintf+0x396>
    4222:	b6 01       	movw	r22, r12
    4224:	80 e3       	ldi	r24, 0x30	; 48
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	4a d0       	rcall	.+148    	; 0x42be <fputc>
    422a:	9a 94       	dec	r9
    422c:	f8 cf       	rjmp	.-16     	; 0x421e <vfprintf+0x386>
    422e:	8a 94       	dec	r8
    4230:	f3 01       	movw	r30, r6
    4232:	e8 0d       	add	r30, r8
    4234:	f1 1d       	adc	r31, r1
    4236:	80 81       	ld	r24, Z
    4238:	b6 01       	movw	r22, r12
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	40 d0       	rcall	.+128    	; 0x42be <fputc>
    423e:	81 10       	cpse	r8, r1
    4240:	f6 cf       	rjmp	.-20     	; 0x422e <vfprintf+0x396>
    4242:	22 20       	and	r2, r2
    4244:	09 f4       	brne	.+2      	; 0x4248 <vfprintf+0x3b0>
    4246:	4e ce       	rjmp	.-868    	; 0x3ee4 <vfprintf+0x4c>
    4248:	b6 01       	movw	r22, r12
    424a:	80 e2       	ldi	r24, 0x20	; 32
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	37 d0       	rcall	.+110    	; 0x42be <fputc>
    4250:	2a 94       	dec	r2
    4252:	f7 cf       	rjmp	.-18     	; 0x4242 <vfprintf+0x3aa>
    4254:	f6 01       	movw	r30, r12
    4256:	86 81       	ldd	r24, Z+6	; 0x06
    4258:	97 81       	ldd	r25, Z+7	; 0x07
    425a:	02 c0       	rjmp	.+4      	; 0x4260 <vfprintf+0x3c8>
    425c:	8f ef       	ldi	r24, 0xFF	; 255
    425e:	9f ef       	ldi	r25, 0xFF	; 255
    4260:	2b 96       	adiw	r28, 0x0b	; 11
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	1f 91       	pop	r17
    4272:	0f 91       	pop	r16
    4274:	ff 90       	pop	r15
    4276:	ef 90       	pop	r14
    4278:	df 90       	pop	r13
    427a:	cf 90       	pop	r12
    427c:	bf 90       	pop	r11
    427e:	af 90       	pop	r10
    4280:	9f 90       	pop	r9
    4282:	8f 90       	pop	r8
    4284:	7f 90       	pop	r7
    4286:	6f 90       	pop	r6
    4288:	5f 90       	pop	r5
    428a:	4f 90       	pop	r4
    428c:	3f 90       	pop	r3
    428e:	2f 90       	pop	r2
    4290:	08 95       	ret

00004292 <strnlen_P>:
    4292:	fc 01       	movw	r30, r24
    4294:	05 90       	lpm	r0, Z+
    4296:	61 50       	subi	r22, 0x01	; 1
    4298:	70 40       	sbci	r23, 0x00	; 0
    429a:	01 10       	cpse	r0, r1
    429c:	d8 f7       	brcc	.-10     	; 0x4294 <strnlen_P+0x2>
    429e:	80 95       	com	r24
    42a0:	90 95       	com	r25
    42a2:	8e 0f       	add	r24, r30
    42a4:	9f 1f       	adc	r25, r31
    42a6:	08 95       	ret

000042a8 <strnlen>:
    42a8:	fc 01       	movw	r30, r24
    42aa:	61 50       	subi	r22, 0x01	; 1
    42ac:	70 40       	sbci	r23, 0x00	; 0
    42ae:	01 90       	ld	r0, Z+
    42b0:	01 10       	cpse	r0, r1
    42b2:	d8 f7       	brcc	.-10     	; 0x42aa <strnlen+0x2>
    42b4:	80 95       	com	r24
    42b6:	90 95       	com	r25
    42b8:	8e 0f       	add	r24, r30
    42ba:	9f 1f       	adc	r25, r31
    42bc:	08 95       	ret

000042be <fputc>:
    42be:	0f 93       	push	r16
    42c0:	1f 93       	push	r17
    42c2:	cf 93       	push	r28
    42c4:	df 93       	push	r29
    42c6:	fb 01       	movw	r30, r22
    42c8:	23 81       	ldd	r18, Z+3	; 0x03
    42ca:	21 fd       	sbrc	r18, 1
    42cc:	03 c0       	rjmp	.+6      	; 0x42d4 <fputc+0x16>
    42ce:	8f ef       	ldi	r24, 0xFF	; 255
    42d0:	9f ef       	ldi	r25, 0xFF	; 255
    42d2:	2c c0       	rjmp	.+88     	; 0x432c <fputc+0x6e>
    42d4:	22 ff       	sbrs	r18, 2
    42d6:	16 c0       	rjmp	.+44     	; 0x4304 <fputc+0x46>
    42d8:	46 81       	ldd	r20, Z+6	; 0x06
    42da:	57 81       	ldd	r21, Z+7	; 0x07
    42dc:	24 81       	ldd	r18, Z+4	; 0x04
    42de:	35 81       	ldd	r19, Z+5	; 0x05
    42e0:	42 17       	cp	r20, r18
    42e2:	53 07       	cpc	r21, r19
    42e4:	44 f4       	brge	.+16     	; 0x42f6 <fputc+0x38>
    42e6:	a0 81       	ld	r26, Z
    42e8:	b1 81       	ldd	r27, Z+1	; 0x01
    42ea:	9d 01       	movw	r18, r26
    42ec:	2f 5f       	subi	r18, 0xFF	; 255
    42ee:	3f 4f       	sbci	r19, 0xFF	; 255
    42f0:	31 83       	std	Z+1, r19	; 0x01
    42f2:	20 83       	st	Z, r18
    42f4:	8c 93       	st	X, r24
    42f6:	26 81       	ldd	r18, Z+6	; 0x06
    42f8:	37 81       	ldd	r19, Z+7	; 0x07
    42fa:	2f 5f       	subi	r18, 0xFF	; 255
    42fc:	3f 4f       	sbci	r19, 0xFF	; 255
    42fe:	37 83       	std	Z+7, r19	; 0x07
    4300:	26 83       	std	Z+6, r18	; 0x06
    4302:	14 c0       	rjmp	.+40     	; 0x432c <fputc+0x6e>
    4304:	8b 01       	movw	r16, r22
    4306:	ec 01       	movw	r28, r24
    4308:	fb 01       	movw	r30, r22
    430a:	00 84       	ldd	r0, Z+8	; 0x08
    430c:	f1 85       	ldd	r31, Z+9	; 0x09
    430e:	e0 2d       	mov	r30, r0
    4310:	09 95       	icall
    4312:	89 2b       	or	r24, r25
    4314:	e1 f6       	brne	.-72     	; 0x42ce <fputc+0x10>
    4316:	d8 01       	movw	r26, r16
    4318:	16 96       	adiw	r26, 0x06	; 6
    431a:	8d 91       	ld	r24, X+
    431c:	9c 91       	ld	r25, X
    431e:	17 97       	sbiw	r26, 0x07	; 7
    4320:	01 96       	adiw	r24, 0x01	; 1
    4322:	17 96       	adiw	r26, 0x07	; 7
    4324:	9c 93       	st	X, r25
    4326:	8e 93       	st	-X, r24
    4328:	16 97       	sbiw	r26, 0x06	; 6
    432a:	ce 01       	movw	r24, r28
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	1f 91       	pop	r17
    4332:	0f 91       	pop	r16
    4334:	08 95       	ret

00004336 <__ultoa_invert>:
    4336:	fa 01       	movw	r30, r20
    4338:	aa 27       	eor	r26, r26
    433a:	28 30       	cpi	r18, 0x08	; 8
    433c:	51 f1       	breq	.+84     	; 0x4392 <__ultoa_invert+0x5c>
    433e:	20 31       	cpi	r18, 0x10	; 16
    4340:	81 f1       	breq	.+96     	; 0x43a2 <__ultoa_invert+0x6c>
    4342:	e8 94       	clt
    4344:	6f 93       	push	r22
    4346:	6e 7f       	andi	r22, 0xFE	; 254
    4348:	6e 5f       	subi	r22, 0xFE	; 254
    434a:	7f 4f       	sbci	r23, 0xFF	; 255
    434c:	8f 4f       	sbci	r24, 0xFF	; 255
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	af 4f       	sbci	r26, 0xFF	; 255
    4352:	b1 e0       	ldi	r27, 0x01	; 1
    4354:	3e d0       	rcall	.+124    	; 0x43d2 <__ultoa_invert+0x9c>
    4356:	b4 e0       	ldi	r27, 0x04	; 4
    4358:	3c d0       	rcall	.+120    	; 0x43d2 <__ultoa_invert+0x9c>
    435a:	67 0f       	add	r22, r23
    435c:	78 1f       	adc	r23, r24
    435e:	89 1f       	adc	r24, r25
    4360:	9a 1f       	adc	r25, r26
    4362:	a1 1d       	adc	r26, r1
    4364:	68 0f       	add	r22, r24
    4366:	79 1f       	adc	r23, r25
    4368:	8a 1f       	adc	r24, r26
    436a:	91 1d       	adc	r25, r1
    436c:	a1 1d       	adc	r26, r1
    436e:	6a 0f       	add	r22, r26
    4370:	71 1d       	adc	r23, r1
    4372:	81 1d       	adc	r24, r1
    4374:	91 1d       	adc	r25, r1
    4376:	a1 1d       	adc	r26, r1
    4378:	20 d0       	rcall	.+64     	; 0x43ba <__ultoa_invert+0x84>
    437a:	09 f4       	brne	.+2      	; 0x437e <__ultoa_invert+0x48>
    437c:	68 94       	set
    437e:	3f 91       	pop	r19
    4380:	2a e0       	ldi	r18, 0x0A	; 10
    4382:	26 9f       	mul	r18, r22
    4384:	11 24       	eor	r1, r1
    4386:	30 19       	sub	r19, r0
    4388:	30 5d       	subi	r19, 0xD0	; 208
    438a:	31 93       	st	Z+, r19
    438c:	de f6       	brtc	.-74     	; 0x4344 <__ultoa_invert+0xe>
    438e:	cf 01       	movw	r24, r30
    4390:	08 95       	ret
    4392:	46 2f       	mov	r20, r22
    4394:	47 70       	andi	r20, 0x07	; 7
    4396:	40 5d       	subi	r20, 0xD0	; 208
    4398:	41 93       	st	Z+, r20
    439a:	b3 e0       	ldi	r27, 0x03	; 3
    439c:	0f d0       	rcall	.+30     	; 0x43bc <__ultoa_invert+0x86>
    439e:	c9 f7       	brne	.-14     	; 0x4392 <__ultoa_invert+0x5c>
    43a0:	f6 cf       	rjmp	.-20     	; 0x438e <__ultoa_invert+0x58>
    43a2:	46 2f       	mov	r20, r22
    43a4:	4f 70       	andi	r20, 0x0F	; 15
    43a6:	40 5d       	subi	r20, 0xD0	; 208
    43a8:	4a 33       	cpi	r20, 0x3A	; 58
    43aa:	18 f0       	brcs	.+6      	; 0x43b2 <__ultoa_invert+0x7c>
    43ac:	49 5d       	subi	r20, 0xD9	; 217
    43ae:	31 fd       	sbrc	r19, 1
    43b0:	40 52       	subi	r20, 0x20	; 32
    43b2:	41 93       	st	Z+, r20
    43b4:	02 d0       	rcall	.+4      	; 0x43ba <__ultoa_invert+0x84>
    43b6:	a9 f7       	brne	.-22     	; 0x43a2 <__ultoa_invert+0x6c>
    43b8:	ea cf       	rjmp	.-44     	; 0x438e <__ultoa_invert+0x58>
    43ba:	b4 e0       	ldi	r27, 0x04	; 4
    43bc:	a6 95       	lsr	r26
    43be:	97 95       	ror	r25
    43c0:	87 95       	ror	r24
    43c2:	77 95       	ror	r23
    43c4:	67 95       	ror	r22
    43c6:	ba 95       	dec	r27
    43c8:	c9 f7       	brne	.-14     	; 0x43bc <__ultoa_invert+0x86>
    43ca:	00 97       	sbiw	r24, 0x00	; 0
    43cc:	61 05       	cpc	r22, r1
    43ce:	71 05       	cpc	r23, r1
    43d0:	08 95       	ret
    43d2:	9b 01       	movw	r18, r22
    43d4:	ac 01       	movw	r20, r24
    43d6:	0a 2e       	mov	r0, r26
    43d8:	06 94       	lsr	r0
    43da:	57 95       	ror	r21
    43dc:	47 95       	ror	r20
    43de:	37 95       	ror	r19
    43e0:	27 95       	ror	r18
    43e2:	ba 95       	dec	r27
    43e4:	c9 f7       	brne	.-14     	; 0x43d8 <__ultoa_invert+0xa2>
    43e6:	62 0f       	add	r22, r18
    43e8:	73 1f       	adc	r23, r19
    43ea:	84 1f       	adc	r24, r20
    43ec:	95 1f       	adc	r25, r21
    43ee:	a0 1d       	adc	r26, r0
    43f0:	08 95       	ret

000043f2 <_exit>:
    43f2:	f8 94       	cli

000043f4 <__stop_program>:
    43f4:	ff cf       	rjmp	.-2      	; 0x43f4 <__stop_program>
